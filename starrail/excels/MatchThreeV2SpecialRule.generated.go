package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type MatchThreeV2SpecialRule struct {
	Desc          hash.Hash `json:"Desc"`
	Icon          string    `json:"Icon"`
	SpecialRuleID float64   `json:"SpecialRuleID"`
}
type MatchThreeV2SpecialRuleAccessor struct {
	_data              []MatchThreeV2SpecialRule
	_dataSpecialRuleID map[float64]MatchThreeV2SpecialRule
}

// LoadData retrieves the data. Must be called before MatchThreeV2SpecialRule.GroupData
func (a *MatchThreeV2SpecialRuleAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MatchThreeV2SpecialRule.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MatchThreeV2SpecialRuleAccessor) Raw() ([]MatchThreeV2SpecialRule, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MatchThreeV2SpecialRule{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MatchThreeV2SpecialRuleAccessor.LoadData to preload everything
func (a *MatchThreeV2SpecialRuleAccessor) GroupData() {
	a._dataSpecialRuleID = map[float64]MatchThreeV2SpecialRule{}
	for _, d := range a._data {
		a._dataSpecialRuleID[d.SpecialRuleID] = d
	}
}

// BySpecialRuleID returns the MatchThreeV2SpecialRule uniquely identified by SpecialRuleID
//
// Error is only non-nil if the source errors out
func (a *MatchThreeV2SpecialRuleAccessor) BySpecialRuleID(identifier float64) (MatchThreeV2SpecialRule, error) {
	if a._dataSpecialRuleID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MatchThreeV2SpecialRule{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSpecialRuleID[identifier], nil
}
