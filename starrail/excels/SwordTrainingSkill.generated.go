package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type SwordTrainingSkill struct {
	AvatarStatusAddList []interface{}          `json:"AvatarStatusAddList"`
	Condition           json.Number            `json:"Condition"`
	Cost                map[string]json.Number `json:"Cost"`
	MazeBuffID          json.Number            `json:"MazeBuffID"`
	NextSkillIDList     []json.Number          `json:"NextSkillIDList"`
	ParamList           []json.Number          `json:"ParamList"`
	Rare                json.Number            `json:"Rare"`
	SkillID             json.Number            `json:"SkillID"`
	SkillIcon           string                 `json:"SkillIcon"`
	SkillName           map[string]json.Number `json:"SkillName"`
	SkillPower          json.Number            `json:"SkillPower"`
	SkillRank           json.Number            `json:"SkillRank"`
	SkillTag            map[string]json.Number `json:"SkillTag"`
	SkillTypeID         json.Number            `json:"SkillTypeID"`
}
type SwordTrainingSkillAccessor struct {
	_data []SwordTrainingSkill
}

// LoadData retrieves the data. Must be called before SwordTrainingSkill.GroupData
func (a *SwordTrainingSkillAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/SwordTrainingSkill.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *SwordTrainingSkillAccessor) Raw() ([]SwordTrainingSkill, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []SwordTrainingSkill{}, err
		}
	}
	return a._data, nil
}
