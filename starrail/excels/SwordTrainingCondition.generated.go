package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type SwordTrainingCondition struct {
	CheckType   string        `json:"CheckType"`
	ConditionID json.Number   `json:"ConditionID"`
	ParamList   []json.Number `json:"ParamList"`
}
type SwordTrainingConditionAccessor struct {
	_data            []SwordTrainingCondition
	_dataConditionID map[json.Number]SwordTrainingCondition
}

// LoadData retrieves the data. Must be called before SwordTrainingCondition.GroupData
func (a *SwordTrainingConditionAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/SwordTrainingCondition.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *SwordTrainingConditionAccessor) Raw() ([]SwordTrainingCondition, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []SwordTrainingCondition{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with SwordTrainingConditionAccessor.LoadData to preload everything
func (a *SwordTrainingConditionAccessor) GroupData() {
	a._dataConditionID = map[json.Number]SwordTrainingCondition{}
	for _, d := range a._data {
		a._dataConditionID[d.ConditionID] = d
	}
}

// ByConditionID returns the SwordTrainingCondition uniquely identified by ConditionID
//
// Error is only non-nil if the source errors out
func (a *SwordTrainingConditionAccessor) ByConditionID(identifier json.Number) (SwordTrainingCondition, error) {
	if a._dataConditionID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return SwordTrainingCondition{}, err
			}
		}
		a.GroupData()
	}
	return a._dataConditionID[identifier], nil
}
