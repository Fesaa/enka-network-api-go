package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type HealPool struct {
	MaxHealPool float64 `json:"MaxHealPool"`
	PlayerLevel float64 `json:"PlayerLevel"`
	RecoverTime float64 `json:"RecoverTime"`
}
type HealPoolAccessor struct {
	_data            []HealPool
	_dataPlayerLevel map[float64]HealPool
}

// LoadData retrieves the data. Must be called before HealPool.GroupData
func (a *HealPoolAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/HealPool.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *HealPoolAccessor) Raw() ([]HealPool, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []HealPool{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with HealPoolAccessor.LoadData to preload everything
func (a *HealPoolAccessor) GroupData() {
	for _, d := range a._data {
		a._dataPlayerLevel[d.PlayerLevel] = d
	}
}

// ByPlayerLevel returns the HealPool uniquely identified by PlayerLevel
//
// Error is only non-nil if the source errors out
func (a *HealPoolAccessor) ByPlayerLevel(identifier float64) (HealPool, error) {
	if a._dataPlayerLevel == nil {
		err := a.LoadData()
		if err != nil {
			return HealPool{}, err
		}
		a.GroupData()
	}
	return a._dataPlayerLevel[identifier], nil
}
