package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type RogueMagicArea struct {
	AreaGroupID               string                                    `json:"AreaGroupID"`
	AreaID                    float64                                   `json:"AreaID"`
	AreaIndex                 float64                                   `json:"AreaIndex"`
	AreaNameID                hash.Hash                                 `json:"AreaNameID"`
	CustomStageDisplayIcon    string                                    `json:"CustomStageDisplayIcon"`
	CustomStageDisplayParams  []RogueMagicAreaCustomStageDisplayParams  `json:"CustomStageDisplayParams"`
	DefaultStyle              string                                    `json:"DefaultStyle"`
	DifficultyIDList          []float64                                 `json:"DifficultyIDList"`
	ExtraLayerID              float64                                   `json:"ExtraLayerID"`
	FirstReward               float64                                   `json:"FirstReward"`
	IsHard                    bool                                      `json:"IsHard"`
	LayerIDList               []float64                                 `json:"LayerIDList"`
	UnlockID                  float64                                   `json:"UnlockID"`
	WorldLevel2DisplayMonster []RogueMagicAreaWorldLevel2DisplayMonster `json:"WorldLevel2DisplayMonster"`
}
type RogueMagicAreaCustomStageDisplayParams struct {
	HMCDHMFHABF string `json:"HMCDHMFHABF"`
	PICHIHHCOCB string `json:"PICHIHHCOCB"`
}
type RogueMagicAreaWorldLevel2DisplayMonster struct {
	BFPAOANBJON float64 `json:"BFPAOANBJON"`
	GGAIJBLEGDE float64 `json:"GGAIJBLEGDE"`
}
type RogueMagicAreaAccessor struct {
	_data            []RogueMagicArea
	_dataAreaID      map[float64]RogueMagicArea
	_dataFirstReward map[float64]RogueMagicArea
}

// LoadData retrieves the data. Must be called before RogueMagicArea.GroupData
func (a *RogueMagicAreaAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueMagicArea.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueMagicAreaAccessor) Raw() ([]RogueMagicArea, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueMagicArea{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueMagicAreaAccessor.LoadData to preload everything
func (a *RogueMagicAreaAccessor) GroupData() {
	for _, d := range a._data {
		a._dataAreaID[d.AreaID] = d
		a._dataFirstReward[d.FirstReward] = d
	}
}

// ByAreaID returns the RogueMagicArea uniquely identified by AreaID
//
// Error is only non-nil if the source errors out
func (a *RogueMagicAreaAccessor) ByAreaID(identifier float64) (RogueMagicArea, error) {
	if a._dataAreaID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueMagicArea{}, err
			}
		}
		a.GroupData()
	}
	return a._dataAreaID[identifier], nil
}

// ByFirstReward returns the RogueMagicArea uniquely identified by FirstReward
//
// Error is only non-nil if the source errors out
func (a *RogueMagicAreaAccessor) ByFirstReward(identifier float64) (RogueMagicArea, error) {
	if a._dataFirstReward == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueMagicArea{}, err
			}
		}
		a.GroupData()
	}
	return a._dataFirstReward[identifier], nil
}
