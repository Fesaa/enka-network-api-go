package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type RogueDLCChessBoard struct {
	BlockCreatGroupID       float64   `json:"BlockCreatGroupID"`
	ChessBoardConfiguration string    `json:"ChessBoardConfiguration"`
	ChessBoardEventList     []float64 `json:"ChessBoardEventList"`
	ChessBoardID            float64   `json:"ChessBoardID"`
}
type RogueDLCChessBoardAccessor struct {
	_data             []RogueDLCChessBoard
	_dataChessBoardID map[float64]RogueDLCChessBoard
}

// LoadData retrieves the data. Must be called before RogueDLCChessBoard.GroupData
func (a *RogueDLCChessBoardAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueDLCChessBoard.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueDLCChessBoardAccessor) Raw() ([]RogueDLCChessBoard, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueDLCChessBoard{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueDLCChessBoardAccessor.LoadData to preload everything
func (a *RogueDLCChessBoardAccessor) GroupData() {
	for _, d := range a._data {
		a._dataChessBoardID[d.ChessBoardID] = d
	}
}

// ByChessBoardID returns the RogueDLCChessBoard uniquely identified by ChessBoardID
//
// Error is only non-nil if the source errors out
func (a *RogueDLCChessBoardAccessor) ByChessBoardID(identifier float64) (RogueDLCChessBoard, error) {
	if a._dataChessBoardID == nil {
		err := a.LoadData()
		if err != nil {
			return RogueDLCChessBoard{}, err
		}
		a.GroupData()
	}
	return a._dataChessBoardID[identifier], nil
}
