package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type MatchThreeVersion struct {
	ActivityID      float64   `json:"ActivityID"`
	ActivityVersion float64   `json:"ActivityVersion"`
	BirdIDList      []float64 `json:"BirdIDList"`
	PVPModuleID     float64   `json:"PVPModuleID"`
}
type MatchThreeVersionAccessor struct {
	_data                []MatchThreeVersion
	_dataActivityID      map[float64]MatchThreeVersion
	_dataActivityVersion map[float64]MatchThreeVersion
	_dataPVPModuleID     map[float64]MatchThreeVersion
}

// LoadData retrieves the data. Must be called before MatchThreeVersion.GroupData
func (a *MatchThreeVersionAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MatchThreeVersion.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MatchThreeVersionAccessor) Raw() ([]MatchThreeVersion, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MatchThreeVersion{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MatchThreeVersionAccessor.LoadData to preload everything
func (a *MatchThreeVersionAccessor) GroupData() {
	a._dataActivityID = map[float64]MatchThreeVersion{}
	a._dataActivityVersion = map[float64]MatchThreeVersion{}
	a._dataPVPModuleID = map[float64]MatchThreeVersion{}
	for _, d := range a._data {
		a._dataActivityID[d.ActivityID] = d
		a._dataActivityVersion[d.ActivityVersion] = d
		a._dataPVPModuleID[d.PVPModuleID] = d
	}
}

// ByActivityID returns the MatchThreeVersion uniquely identified by ActivityID
//
// Error is only non-nil if the source errors out
func (a *MatchThreeVersionAccessor) ByActivityID(identifier float64) (MatchThreeVersion, error) {
	if a._dataActivityID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MatchThreeVersion{}, err
			}
		}
		a.GroupData()
	}
	return a._dataActivityID[identifier], nil
}

// ByActivityVersion returns the MatchThreeVersion uniquely identified by ActivityVersion
//
// Error is only non-nil if the source errors out
func (a *MatchThreeVersionAccessor) ByActivityVersion(identifier float64) (MatchThreeVersion, error) {
	if a._dataActivityVersion == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MatchThreeVersion{}, err
			}
		}
		a.GroupData()
	}
	return a._dataActivityVersion[identifier], nil
}

// ByPVPModuleID returns the MatchThreeVersion uniquely identified by PVPModuleID
//
// Error is only non-nil if the source errors out
func (a *MatchThreeVersionAccessor) ByPVPModuleID(identifier float64) (MatchThreeVersion, error) {
	if a._dataPVPModuleID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MatchThreeVersion{}, err
			}
		}
		a.GroupData()
	}
	return a._dataPVPModuleID[identifier], nil
}
