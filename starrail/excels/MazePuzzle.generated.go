package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type MazePuzzle struct {
	IsResetable    float64   `json:"IsResetable"`
	IsShowToast    bool      `json:"IsShowToast"`
	IsShowWaypoint bool      `json:"IsShowWaypoint"`
	IsTopPriority  bool      `json:"IsTopPriority"`
	MazePuzzleID   float64   `json:"MazePuzzleID"`
	NormalModeID   float64   `json:"NormalModeID"`
	ProgressList   []float64 `json:"ProgressList"`
	SpecialModeID  float64   `json:"SpecialModeID"`
	TutorialID     float64   `json:"TutorialID"`
}
type MazePuzzleAccessor struct {
	_data             []MazePuzzle
	_dataMazePuzzleID map[float64]MazePuzzle
}

// LoadData retrieves the data. Must be called before MazePuzzle.GroupData
func (a *MazePuzzleAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MazePuzzle.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MazePuzzleAccessor) Raw() ([]MazePuzzle, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MazePuzzle{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MazePuzzleAccessor.LoadData to preload everything
func (a *MazePuzzleAccessor) GroupData() {
	a._dataMazePuzzleID = map[float64]MazePuzzle{}
	for _, d := range a._data {
		a._dataMazePuzzleID[d.MazePuzzleID] = d
	}
}

// ByMazePuzzleID returns the MazePuzzle uniquely identified by MazePuzzleID
//
// Error is only non-nil if the source errors out
func (a *MazePuzzleAccessor) ByMazePuzzleID(identifier float64) (MazePuzzle, error) {
	if a._dataMazePuzzleID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MazePuzzle{}, err
			}
		}
		a.GroupData()
	}
	return a._dataMazePuzzleID[identifier], nil
}
