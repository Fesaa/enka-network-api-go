package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type MuseumRandomEventConfig struct {
	Event                hash.Hash `json:"Event"`
	EventTitle           hash.Hash `json:"EventTitle"`
	EventType            string    `json:"EventType"`
	EventTypeParameter   []float64 `json:"EventTypeParameter"`
	RandomEventID        float64   `json:"RandomEventID"`
	TriggerTypeParameter []float64 `json:"TriggerTypeParameter"`
}
type MuseumRandomEventConfigAccessor struct {
	_data              []MuseumRandomEventConfig
	_dataRandomEventID map[float64]MuseumRandomEventConfig
}

// LoadData retrieves the data. Must be called before MuseumRandomEventConfig.GroupData
func (a *MuseumRandomEventConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MuseumRandomEventConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MuseumRandomEventConfigAccessor) Raw() ([]MuseumRandomEventConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MuseumRandomEventConfig{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MuseumRandomEventConfigAccessor.LoadData to preload everything
func (a *MuseumRandomEventConfigAccessor) GroupData() {
	for _, d := range a._data {
		a._dataRandomEventID[d.RandomEventID] = d
	}
}

// ByRandomEventID returns the MuseumRandomEventConfig uniquely identified by RandomEventID
//
// Error is only non-nil if the source errors out
func (a *MuseumRandomEventConfigAccessor) ByRandomEventID(identifier float64) (MuseumRandomEventConfig, error) {
	if a._dataRandomEventID == nil {
		err := a.LoadData()
		if err != nil {
			return MuseumRandomEventConfig{}, err
		}
		a.GroupData()
	}
	return a._dataRandomEventID[identifier], nil
}
