package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type RogueTournFormulaRandom struct {
	RandomID float64 `json:"RandomID"`
}
type RogueTournFormulaRandomAccessor struct {
	_data         []RogueTournFormulaRandom
	_dataRandomID map[float64]RogueTournFormulaRandom
}

// LoadData retrieves the data. Must be called before RogueTournFormulaRandom.GroupData
func (a *RogueTournFormulaRandomAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueTournFormulaRandom.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueTournFormulaRandomAccessor) Raw() ([]RogueTournFormulaRandom, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueTournFormulaRandom{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueTournFormulaRandomAccessor.LoadData to preload everything
func (a *RogueTournFormulaRandomAccessor) GroupData() {
	a._dataRandomID = map[float64]RogueTournFormulaRandom{}
	for _, d := range a._data {
		a._dataRandomID[d.RandomID] = d
	}
}

// ByRandomID returns the RogueTournFormulaRandom uniquely identified by RandomID
//
// Error is only non-nil if the source errors out
func (a *RogueTournFormulaRandomAccessor) ByRandomID(identifier float64) (RogueTournFormulaRandom, error) {
	if a._dataRandomID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueTournFormulaRandom{}, err
			}
		}
		a.GroupData()
	}
	return a._dataRandomID[identifier], nil
}
