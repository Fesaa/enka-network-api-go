package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type TutorialResConfig struct {
	ContentPath string  `json:"ContentPath"`
	ID          float64 `json:"ID"`
	KeyMapPath  string  `json:"KeyMapPath"`
	PrefabPath  string  `json:"PrefabPath"`
	TextPath    string  `json:"TextPath"`
}
type TutorialResConfigAccessor struct {
	_data           []TutorialResConfig
	_dataID         map[float64]TutorialResConfig
	_dataPrefabPath map[string]TutorialResConfig
}

// LoadData retrieves the data. Must be called before TutorialResConfig.GroupData
func (a *TutorialResConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/TutorialResConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *TutorialResConfigAccessor) Raw() ([]TutorialResConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []TutorialResConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with TutorialResConfigAccessor.LoadData to preload everything
func (a *TutorialResConfigAccessor) GroupData() {
	a._dataID = map[float64]TutorialResConfig{}
	a._dataPrefabPath = map[string]TutorialResConfig{}
	for _, d := range a._data {
		a._dataID[d.ID] = d
		a._dataPrefabPath[d.PrefabPath] = d
	}
}

// ByID returns the TutorialResConfig uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *TutorialResConfigAccessor) ByID(identifier float64) (TutorialResConfig, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return TutorialResConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}

// ByPrefabPath returns the TutorialResConfig uniquely identified by PrefabPath
//
// Error is only non-nil if the source errors out
func (a *TutorialResConfigAccessor) ByPrefabPath(identifier string) (TutorialResConfig, error) {
	if a._dataPrefabPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return TutorialResConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataPrefabPath[identifier], nil
}
