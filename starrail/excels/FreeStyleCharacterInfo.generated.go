package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type FreeStyleCharacterInfo struct {
	AvatarBodyID         json.Number `json:"AvatarBodyID"`
	AvatarFlagID         json.Number `json:"AvatarFlagID"`
	FreeStyleCharacterID string      `json:"FreeStyleCharacterID"`
}
type FreeStyleCharacterInfoAccessor struct {
	_data                     []FreeStyleCharacterInfo
	_dataFreeStyleCharacterID map[string]FreeStyleCharacterInfo
}

// LoadData retrieves the data. Must be called before FreeStyleCharacterInfo.GroupData
func (a *FreeStyleCharacterInfoAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/FreeStyleCharacterInfo.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *FreeStyleCharacterInfoAccessor) Raw() ([]FreeStyleCharacterInfo, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []FreeStyleCharacterInfo{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with FreeStyleCharacterInfoAccessor.LoadData to preload everything
func (a *FreeStyleCharacterInfoAccessor) GroupData() {
	a._dataFreeStyleCharacterID = map[string]FreeStyleCharacterInfo{}
	for _, d := range a._data {
		a._dataFreeStyleCharacterID[d.FreeStyleCharacterID] = d
	}
}

// ByFreeStyleCharacterID returns the FreeStyleCharacterInfo uniquely identified by FreeStyleCharacterID
//
// Error is only non-nil if the source errors out
func (a *FreeStyleCharacterInfoAccessor) ByFreeStyleCharacterID(identifier string) (FreeStyleCharacterInfo, error) {
	if a._dataFreeStyleCharacterID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FreeStyleCharacterInfo{}, err
			}
		}
		a.GroupData()
	}
	return a._dataFreeStyleCharacterID[identifier], nil
}
