package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type RelicSetSkillConfig struct {
	AbilityName      string                            `json:"AbilityName"`
	AbilityParamList []hash.IntValue                   `json:"AbilityParamList"`
	PropertyList     []RelicSetSkillConfigPropertyList `json:"PropertyList"`
	RequireNum       float64                           `json:"RequireNum"`
	SetID            float64                           `json:"SetID"`
	SkillDesc        string                            `json:"SkillDesc"`
}
type RelicSetSkillConfigPropertyList struct {
	LKOEFDPJGKD string        `json:"LKOEFDPJGKD"`
	MBMDOCJIMEJ hash.IntValue `json:"MBMDOCJIMEJ"`
}
type RelicSetSkillConfigAccessor struct {
	_data          []RelicSetSkillConfig
	_dataSkillDesc map[string]RelicSetSkillConfig
}

// LoadData retrieves the data. Must be called before RelicSetSkillConfig.GroupData
func (a *RelicSetSkillConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RelicSetSkillConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RelicSetSkillConfigAccessor) Raw() ([]RelicSetSkillConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RelicSetSkillConfig{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RelicSetSkillConfigAccessor.LoadData to preload everything
func (a *RelicSetSkillConfigAccessor) GroupData() {
	for _, d := range a._data {
		a._dataSkillDesc[d.SkillDesc] = d
	}
}

// BySkillDesc returns the RelicSetSkillConfig uniquely identified by SkillDesc
//
// Error is only non-nil if the source errors out
func (a *RelicSetSkillConfigAccessor) BySkillDesc(identifier string) (RelicSetSkillConfig, error) {
	if a._dataSkillDesc == nil {
		err := a.LoadData()
		if err != nil {
			return RelicSetSkillConfig{}, err
		}
		a.GroupData()
	}
	return a._dataSkillDesc[identifier], nil
}
