package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type InfiniteEliteGroup struct {
	AttackRatio  hash.Value `json:"AttackRatio"`
	DefenceRatio hash.Value `json:"DefenceRatio"`
	EliteGroup   float64    `json:"EliteGroup"`
	HPRatio      hash.Value `json:"HPRatio"`
	SpeedRatio   hash.Value `json:"SpeedRatio"`
	StanceRatio  hash.Value `json:"StanceRatio"`
}
type InfiniteEliteGroupAccessor struct {
	_data           []InfiniteEliteGroup
	_dataEliteGroup map[float64]InfiniteEliteGroup
}

// LoadData retrieves the data. Must be called before InfiniteEliteGroup.GroupData
func (a *InfiniteEliteGroupAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/InfiniteEliteGroup.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *InfiniteEliteGroupAccessor) Raw() ([]InfiniteEliteGroup, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []InfiniteEliteGroup{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with InfiniteEliteGroupAccessor.LoadData to preload everything
func (a *InfiniteEliteGroupAccessor) GroupData() {
	a._dataEliteGroup = map[float64]InfiniteEliteGroup{}
	for _, d := range a._data {
		a._dataEliteGroup[d.EliteGroup] = d
	}
}

// ByEliteGroup returns the InfiniteEliteGroup uniquely identified by EliteGroup
//
// Error is only non-nil if the source errors out
func (a *InfiniteEliteGroupAccessor) ByEliteGroup(identifier float64) (InfiniteEliteGroup, error) {
	if a._dataEliteGroup == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return InfiniteEliteGroup{}, err
			}
		}
		a.GroupData()
	}
	return a._dataEliteGroup[identifier], nil
}
