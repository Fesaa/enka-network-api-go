package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type MonsterSkillUniqueConfig struct {
	AICD              json.Number              `json:"AI_CD"`
	AIICD             json.Number              `json:"AI_ICD"`
	AttackType        string                   `json:"AttackType"`
	DamageType        string                   `json:"DamageType"`
	DelayRatio        map[string]json.Number   `json:"DelayRatio"`
	ExtraEffectIDList []interface{}            `json:"ExtraEffectIDList"`
	IconPath          string                   `json:"IconPath"`
	IsThreat          bool                     `json:"IsThreat"`
	ModifierList      []interface{}            `json:"ModifierList"`
	ParamList         []map[string]json.Number `json:"ParamList"`
	PhaseList         []json.Number            `json:"PhaseList"`
	SPHitBase         map[string]json.Number   `json:"SPHitBase"`
	SkillDesc         map[string]json.Number   `json:"SkillDesc"`
	SkillID           json.Number              `json:"SkillID"`
	SkillName         map[string]json.Number   `json:"SkillName"`
	SkillTag          map[string]json.Number   `json:"SkillTag"`
	SkillTriggerKey   string                   `json:"SkillTriggerKey"`
	SkillTypeDesc     map[string]json.Number   `json:"SkillTypeDesc"`
}
type MonsterSkillUniqueConfigAccessor struct {
	_data        []MonsterSkillUniqueConfig
	_dataSkillID map[json.Number]MonsterSkillUniqueConfig
}

// LoadData retrieves the data. Must be called before MonsterSkillUniqueConfig.GroupData
func (a *MonsterSkillUniqueConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MonsterSkillUniqueConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MonsterSkillUniqueConfigAccessor) Raw() ([]MonsterSkillUniqueConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MonsterSkillUniqueConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MonsterSkillUniqueConfigAccessor.LoadData to preload everything
func (a *MonsterSkillUniqueConfigAccessor) GroupData() {
	a._dataSkillID = map[json.Number]MonsterSkillUniqueConfig{}
	for _, d := range a._data {
		a._dataSkillID[d.SkillID] = d
	}
}

// BySkillID returns the MonsterSkillUniqueConfig uniquely identified by SkillID
//
// Error is only non-nil if the source errors out
func (a *MonsterSkillUniqueConfigAccessor) BySkillID(identifier json.Number) (MonsterSkillUniqueConfig, error) {
	if a._dataSkillID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MonsterSkillUniqueConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSkillID[identifier], nil
}
