package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type OptionalRewardQuest struct {
	OptionalGiftItemID float64 `json:"OptionalGiftItemID"`
	QuestID            float64 `json:"QuestID"`
}
type OptionalRewardQuestAccessor struct {
	_data                   []OptionalRewardQuest
	_dataOptionalGiftItemID map[float64]OptionalRewardQuest
	_dataQuestID            map[float64]OptionalRewardQuest
}

// LoadData retrieves the data. Must be called before OptionalRewardQuest.GroupData
func (a *OptionalRewardQuestAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/OptionalRewardQuest.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *OptionalRewardQuestAccessor) Raw() ([]OptionalRewardQuest, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []OptionalRewardQuest{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with OptionalRewardQuestAccessor.LoadData to preload everything
func (a *OptionalRewardQuestAccessor) GroupData() {
	a._dataOptionalGiftItemID = map[float64]OptionalRewardQuest{}
	a._dataQuestID = map[float64]OptionalRewardQuest{}
	for _, d := range a._data {
		a._dataOptionalGiftItemID[d.OptionalGiftItemID] = d
		a._dataQuestID[d.QuestID] = d
	}
}

// ByOptionalGiftItemID returns the OptionalRewardQuest uniquely identified by OptionalGiftItemID
//
// Error is only non-nil if the source errors out
func (a *OptionalRewardQuestAccessor) ByOptionalGiftItemID(identifier float64) (OptionalRewardQuest, error) {
	if a._dataOptionalGiftItemID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return OptionalRewardQuest{}, err
			}
		}
		a.GroupData()
	}
	return a._dataOptionalGiftItemID[identifier], nil
}

// ByQuestID returns the OptionalRewardQuest uniquely identified by QuestID
//
// Error is only non-nil if the source errors out
func (a *OptionalRewardQuestAccessor) ByQuestID(identifier float64) (OptionalRewardQuest, error) {
	if a._dataQuestID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return OptionalRewardQuest{}, err
			}
		}
		a.GroupData()
	}
	return a._dataQuestID[identifier], nil
}
