package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type FateReiju struct {
	AFMIGHBGPBL float64       `json:"AFMIGHBGPBL"`
	AGEFEFBIGPG hash.Hash     `json:"AGEFEFBIGPG"`
	BACDNAEHHIF float64       `json:"BACDNAEHHIF"`
	BFJAIPNKMFD hash.Hash     `json:"BFJAIPNKMFD"`
	CEMMGMBGKNG []interface{} `json:"CEMMGMBGKNG"`
	DCBHNNDNHEO float64       `json:"DCBHNNDNHEO"`
	FPMIPKECOHM string        `json:"FPMIPKECOHM"`
	HAIHCBBNIFL []hash.Value  `json:"HAIHCBBNIFL"`
	IILPOJFMPMD hash.Hash     `json:"IILPOJFMPMD"`
	INKBBCOILNL string        `json:"INKBBCOILNL"`
	KDHBILHEONG hash.Hash     `json:"KDHBILHEONG"`
	LDDELFIJEOJ []float64     `json:"LDDELFIJEOJ"`
}
type FateReijuAccessor struct {
	_data            []FateReiju
	_dataBACDNAEHHIF map[float64]FateReiju
	_dataINKBBCOILNL map[string]FateReiju
}

// LoadData retrieves the data. Must be called before FateReiju.GroupData
func (a *FateReijuAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/FateReiju.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *FateReijuAccessor) Raw() ([]FateReiju, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []FateReiju{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with FateReijuAccessor.LoadData to preload everything
func (a *FateReijuAccessor) GroupData() {
	a._dataBACDNAEHHIF = map[float64]FateReiju{}
	a._dataINKBBCOILNL = map[string]FateReiju{}
	for _, d := range a._data {
		a._dataBACDNAEHHIF[d.BACDNAEHHIF] = d
		a._dataINKBBCOILNL[d.INKBBCOILNL] = d
	}
}

// ByBACDNAEHHIF returns the FateReiju uniquely identified by BACDNAEHHIF
//
// Error is only non-nil if the source errors out
func (a *FateReijuAccessor) ByBACDNAEHHIF(identifier float64) (FateReiju, error) {
	if a._dataBACDNAEHHIF == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FateReiju{}, err
			}
		}
		a.GroupData()
	}
	return a._dataBACDNAEHHIF[identifier], nil
}

// ByINKBBCOILNL returns the FateReiju uniquely identified by INKBBCOILNL
//
// Error is only non-nil if the source errors out
func (a *FateReijuAccessor) ByINKBBCOILNL(identifier string) (FateReiju, error) {
	if a._dataINKBBCOILNL == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FateReiju{}, err
			}
		}
		a.GroupData()
	}
	return a._dataINKBBCOILNL[identifier], nil
}
