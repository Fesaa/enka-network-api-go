package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type VideoConfig struct {
	CaptionPath      string      `json:"CaptionPath"`
	Encryption       bool        `json:"Encryption"`
	IsPlayerInvolved bool        `json:"IsPlayerInvolved"`
	VideoID          json.Number `json:"VideoID"`
	VideoPath        string      `json:"VideoPath"`
}
type VideoConfigAccessor struct {
	_data          []VideoConfig
	_dataVideoPath map[string]VideoConfig
}

// LoadData retrieves the data. Must be called before VideoConfig.GroupData
func (a *VideoConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/VideoConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *VideoConfigAccessor) Raw() ([]VideoConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []VideoConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with VideoConfigAccessor.LoadData to preload everything
func (a *VideoConfigAccessor) GroupData() {
	a._dataVideoPath = map[string]VideoConfig{}
	for _, d := range a._data {
		a._dataVideoPath[d.VideoPath] = d
	}
}

// ByVideoPath returns the VideoConfig uniquely identified by VideoPath
//
// Error is only non-nil if the source errors out
func (a *VideoConfigAccessor) ByVideoPath(identifier string) (VideoConfig, error) {
	if a._dataVideoPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return VideoConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataVideoPath[identifier], nil
}
