package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type ChimeraArrangementPreset struct {
	CommonChimeras []json.Number          `json:"CommonChimeras"`
	Description    map[string]json.Number `json:"Description"`
	PresetID       json.Number            `json:"PresetID"`
}
type ChimeraArrangementPresetAccessor struct {
	_data         []ChimeraArrangementPreset
	_dataPresetID map[json.Number]ChimeraArrangementPreset
}

// LoadData retrieves the data. Must be called before ChimeraArrangementPreset.GroupData
func (a *ChimeraArrangementPresetAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ChimeraArrangementPreset.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ChimeraArrangementPresetAccessor) Raw() ([]ChimeraArrangementPreset, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ChimeraArrangementPreset{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ChimeraArrangementPresetAccessor.LoadData to preload everything
func (a *ChimeraArrangementPresetAccessor) GroupData() {
	a._dataPresetID = map[json.Number]ChimeraArrangementPreset{}
	for _, d := range a._data {
		a._dataPresetID[d.PresetID] = d
	}
}

// ByPresetID returns the ChimeraArrangementPreset uniquely identified by PresetID
//
// Error is only non-nil if the source errors out
func (a *ChimeraArrangementPresetAccessor) ByPresetID(identifier json.Number) (ChimeraArrangementPreset, error) {
	if a._dataPresetID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ChimeraArrangementPreset{}, err
			}
		}
		a.GroupData()
	}
	return a._dataPresetID[identifier], nil
}
