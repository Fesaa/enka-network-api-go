package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type SwordTrainingAction struct {
	ActionID              json.Number              `json:"ActionID"`
	ActionIcon            string                   `json:"ActionIcon"`
	ActionImage           string                   `json:"ActionImage"`
	ActionLevel           json.Number              `json:"ActionLevel"`
	ActionName            map[string]json.Number   `json:"ActionName"`
	ActionPerformPrefab   []string                 `json:"ActionPerformPrefab"`
	ActionPlanImage       string                   `json:"ActionPlanImage"`
	ActionSubName         map[string]json.Number   `json:"ActionSubName"`
	ActionType            string                   `json:"ActionType"`
	DisplayEffectHintList []map[string]json.Number `json:"DisplayEffectHintList"`
	EffectIDList          []json.Number            `json:"EffectIDList"`
}
type SwordTrainingActionAccessor struct {
	_data []SwordTrainingAction
}

// LoadData retrieves the data. Must be called before SwordTrainingAction.GroupData
func (a *SwordTrainingActionAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/SwordTrainingAction.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *SwordTrainingActionAccessor) Raw() ([]SwordTrainingAction, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []SwordTrainingAction{}, err
		}
	}
	return a._data, nil
}
