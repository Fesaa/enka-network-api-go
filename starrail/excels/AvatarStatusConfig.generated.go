package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type AvatarStatusConfig struct {
	CanDispel              bool          `json:"CanDispel"`
	ModifierName           string        `json:"ModifierName"`
	ReadParamList          []string      `json:"ReadParamList"`
	StatusDesc             hash.Hash     `json:"StatusDesc"`
	StatusEffect           hash.Hash     `json:"StatusEffect"`
	StatusID               float64       `json:"StatusID"`
	StatusIconPath         string        `json:"StatusIconPath"`
	StatusIconPathHighSize string        `json:"StatusIconPathHighSize"`
	StatusName             hash.Hash     `json:"StatusName"`
	StatusType             string        `json:"StatusType"`
	TagList                []interface{} `json:"TagList"`
}
type AvatarStatusConfigAccessor struct {
	_data             []AvatarStatusConfig
	_dataModifierName map[string]AvatarStatusConfig
	_dataStatusID     map[float64]AvatarStatusConfig
}

// LoadData retrieves the data. Must be called before AvatarStatusConfig.GroupData
func (a *AvatarStatusConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/AvatarStatusConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *AvatarStatusConfigAccessor) Raw() ([]AvatarStatusConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []AvatarStatusConfig{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with AvatarStatusConfigAccessor.LoadData to preload everything
func (a *AvatarStatusConfigAccessor) GroupData() {
	for _, d := range a._data {
		a._dataModifierName[d.ModifierName] = d
		a._dataStatusID[d.StatusID] = d
	}
}

// ByModifierName returns the AvatarStatusConfig uniquely identified by ModifierName
//
// Error is only non-nil if the source errors out
func (a *AvatarStatusConfigAccessor) ByModifierName(identifier string) (AvatarStatusConfig, error) {
	if a._dataModifierName == nil {
		err := a.LoadData()
		if err != nil {
			return AvatarStatusConfig{}, err
		}
		a.GroupData()
	}
	return a._dataModifierName[identifier], nil
}

// ByStatusID returns the AvatarStatusConfig uniquely identified by StatusID
//
// Error is only non-nil if the source errors out
func (a *AvatarStatusConfigAccessor) ByStatusID(identifier float64) (AvatarStatusConfig, error) {
	if a._dataStatusID == nil {
		err := a.LoadData()
		if err != nil {
			return AvatarStatusConfig{}, err
		}
		a.GroupData()
	}
	return a._dataStatusID[identifier], nil
}
