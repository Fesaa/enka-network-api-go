package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type ActivityAdventurePlayer struct {
	AvatarID                  float64   `json:"AvatarID"`
	DefaultAvatarHeadIconPath string    `json:"DefaultAvatarHeadIconPath"`
	ID                        float64   `json:"ID"`
	MazeSkillIdList           []float64 `json:"MazeSkillIdList"`
	PlayerJsonPath            string    `json:"PlayerJsonPath"`
	PlayerName                hash.Hash `json:"PlayerName"`
	PlayerPrefabPath          string    `json:"PlayerPrefabPath"`
}
type ActivityAdventurePlayerAccessor struct {
	_data                          []ActivityAdventurePlayer
	_dataID                        map[float64]ActivityAdventurePlayer
	_dataAvatarID                  map[float64]ActivityAdventurePlayer
	_dataPlayerPrefabPath          map[string]ActivityAdventurePlayer
	_dataPlayerJsonPath            map[string]ActivityAdventurePlayer
	_dataDefaultAvatarHeadIconPath map[string]ActivityAdventurePlayer
}

// LoadData retrieves the data. Must be called before ActivityAdventurePlayer.GroupData
func (a *ActivityAdventurePlayerAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ActivityAdventurePlayer.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ActivityAdventurePlayerAccessor) Raw() ([]ActivityAdventurePlayer, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ActivityAdventurePlayer{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ActivityAdventurePlayerAccessor.LoadData to preload everything
func (a *ActivityAdventurePlayerAccessor) GroupData() {
	for _, d := range a._data {
		a._dataID[d.ID] = d
		a._dataAvatarID[d.AvatarID] = d
		a._dataPlayerPrefabPath[d.PlayerPrefabPath] = d
		a._dataPlayerJsonPath[d.PlayerJsonPath] = d
		a._dataDefaultAvatarHeadIconPath[d.DefaultAvatarHeadIconPath] = d
	}
}

// ByID returns the ActivityAdventurePlayer uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *ActivityAdventurePlayerAccessor) ByID(identifier float64) (ActivityAdventurePlayer, error) {
	if a._dataID == nil {
		err := a.LoadData()
		if err != nil {
			return ActivityAdventurePlayer{}, err
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}

// ByAvatarID returns the ActivityAdventurePlayer uniquely identified by AvatarID
//
// Error is only non-nil if the source errors out
func (a *ActivityAdventurePlayerAccessor) ByAvatarID(identifier float64) (ActivityAdventurePlayer, error) {
	if a._dataAvatarID == nil {
		err := a.LoadData()
		if err != nil {
			return ActivityAdventurePlayer{}, err
		}
		a.GroupData()
	}
	return a._dataAvatarID[identifier], nil
}

// ByPlayerPrefabPath returns the ActivityAdventurePlayer uniquely identified by PlayerPrefabPath
//
// Error is only non-nil if the source errors out
func (a *ActivityAdventurePlayerAccessor) ByPlayerPrefabPath(identifier string) (ActivityAdventurePlayer, error) {
	if a._dataPlayerPrefabPath == nil {
		err := a.LoadData()
		if err != nil {
			return ActivityAdventurePlayer{}, err
		}
		a.GroupData()
	}
	return a._dataPlayerPrefabPath[identifier], nil
}

// ByPlayerJsonPath returns the ActivityAdventurePlayer uniquely identified by PlayerJsonPath
//
// Error is only non-nil if the source errors out
func (a *ActivityAdventurePlayerAccessor) ByPlayerJsonPath(identifier string) (ActivityAdventurePlayer, error) {
	if a._dataPlayerJsonPath == nil {
		err := a.LoadData()
		if err != nil {
			return ActivityAdventurePlayer{}, err
		}
		a.GroupData()
	}
	return a._dataPlayerJsonPath[identifier], nil
}

// ByDefaultAvatarHeadIconPath returns the ActivityAdventurePlayer uniquely identified by DefaultAvatarHeadIconPath
//
// Error is only non-nil if the source errors out
func (a *ActivityAdventurePlayerAccessor) ByDefaultAvatarHeadIconPath(identifier string) (ActivityAdventurePlayer, error) {
	if a._dataDefaultAvatarHeadIconPath == nil {
		err := a.LoadData()
		if err != nil {
			return ActivityAdventurePlayer{}, err
		}
		a.GroupData()
	}
	return a._dataDefaultAvatarHeadIconPath[identifier], nil
}
