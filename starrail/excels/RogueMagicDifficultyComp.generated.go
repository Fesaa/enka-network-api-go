package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type RogueMagicDifficultyComp struct {
	DifficultyCompID json.Number              `json:"DifficultyCompID"`
	DifficultyDesc   map[string]json.Number   `json:"DifficultyDesc"`
	Level            json.Number              `json:"Level"`
	ParamList        []map[string]json.Number `json:"ParamList"`
	UnlockID         json.Number              `json:"UnlockID"`
}
type RogueMagicDifficultyCompAccessor struct {
	_data                 []RogueMagicDifficultyComp
	_dataDifficultyCompID map[json.Number]RogueMagicDifficultyComp
	_dataLevel            map[json.Number]RogueMagicDifficultyComp
	_dataUnlockID         map[json.Number]RogueMagicDifficultyComp
}

// LoadData retrieves the data. Must be called before RogueMagicDifficultyComp.GroupData
func (a *RogueMagicDifficultyCompAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueMagicDifficultyComp.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueMagicDifficultyCompAccessor) Raw() ([]RogueMagicDifficultyComp, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueMagicDifficultyComp{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueMagicDifficultyCompAccessor.LoadData to preload everything
func (a *RogueMagicDifficultyCompAccessor) GroupData() {
	a._dataDifficultyCompID = map[json.Number]RogueMagicDifficultyComp{}
	a._dataLevel = map[json.Number]RogueMagicDifficultyComp{}
	a._dataUnlockID = map[json.Number]RogueMagicDifficultyComp{}
	for _, d := range a._data {
		a._dataDifficultyCompID[d.DifficultyCompID] = d
		a._dataLevel[d.Level] = d
		a._dataUnlockID[d.UnlockID] = d
	}
}

// ByDifficultyCompID returns the RogueMagicDifficultyComp uniquely identified by DifficultyCompID
//
// Error is only non-nil if the source errors out
func (a *RogueMagicDifficultyCompAccessor) ByDifficultyCompID(identifier json.Number) (RogueMagicDifficultyComp, error) {
	if a._dataDifficultyCompID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueMagicDifficultyComp{}, err
			}
		}
		a.GroupData()
	}
	return a._dataDifficultyCompID[identifier], nil
}

// ByLevel returns the RogueMagicDifficultyComp uniquely identified by Level
//
// Error is only non-nil if the source errors out
func (a *RogueMagicDifficultyCompAccessor) ByLevel(identifier json.Number) (RogueMagicDifficultyComp, error) {
	if a._dataLevel == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueMagicDifficultyComp{}, err
			}
		}
		a.GroupData()
	}
	return a._dataLevel[identifier], nil
}

// ByUnlockID returns the RogueMagicDifficultyComp uniquely identified by UnlockID
//
// Error is only non-nil if the source errors out
func (a *RogueMagicDifficultyCompAccessor) ByUnlockID(identifier json.Number) (RogueMagicDifficultyComp, error) {
	if a._dataUnlockID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueMagicDifficultyComp{}, err
			}
		}
		a.GroupData()
	}
	return a._dataUnlockID[identifier], nil
}
