package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type RogueMagicDifficultyComp struct {
	DifficultyCompID float64         `json:"DifficultyCompID"`
	DifficultyDesc   hash.Hash       `json:"DifficultyDesc"`
	Level            float64         `json:"Level"`
	ParamList        []hash.IntValue `json:"ParamList"`
	UnlockID         float64         `json:"UnlockID"`
}
type RogueMagicDifficultyCompAccessor struct {
	_data                 []RogueMagicDifficultyComp
	_dataDifficultyCompID map[float64]RogueMagicDifficultyComp
	_dataUnlockID         map[float64]RogueMagicDifficultyComp
	_dataLevel            map[float64]RogueMagicDifficultyComp
}

// LoadData retrieves the data. Must be called before RogueMagicDifficultyComp.GroupData
func (a *RogueMagicDifficultyCompAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueMagicDifficultyComp.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueMagicDifficultyCompAccessor) Raw() ([]RogueMagicDifficultyComp, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueMagicDifficultyComp{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueMagicDifficultyCompAccessor.LoadData to preload everything
func (a *RogueMagicDifficultyCompAccessor) GroupData() {
	for _, d := range a._data {
		a._dataDifficultyCompID[d.DifficultyCompID] = d
		a._dataUnlockID[d.UnlockID] = d
		a._dataLevel[d.Level] = d
	}
}

// ByDifficultyCompID returns the RogueMagicDifficultyComp uniquely identified by DifficultyCompID
//
// Error is only non-nil if the source errors out
func (a *RogueMagicDifficultyCompAccessor) ByDifficultyCompID(identifier float64) (RogueMagicDifficultyComp, error) {
	if a._dataDifficultyCompID == nil {
		err := a.LoadData()
		if err != nil {
			return RogueMagicDifficultyComp{}, err
		}
		a.GroupData()
	}
	return a._dataDifficultyCompID[identifier], nil
}

// ByUnlockID returns the RogueMagicDifficultyComp uniquely identified by UnlockID
//
// Error is only non-nil if the source errors out
func (a *RogueMagicDifficultyCompAccessor) ByUnlockID(identifier float64) (RogueMagicDifficultyComp, error) {
	if a._dataUnlockID == nil {
		err := a.LoadData()
		if err != nil {
			return RogueMagicDifficultyComp{}, err
		}
		a.GroupData()
	}
	return a._dataUnlockID[identifier], nil
}

// ByLevel returns the RogueMagicDifficultyComp uniquely identified by Level
//
// Error is only non-nil if the source errors out
func (a *RogueMagicDifficultyCompAccessor) ByLevel(identifier float64) (RogueMagicDifficultyComp, error) {
	if a._dataLevel == nil {
		err := a.LoadData()
		if err != nil {
			return RogueMagicDifficultyComp{}, err
		}
		a.GroupData()
	}
	return a._dataLevel[identifier], nil
}
