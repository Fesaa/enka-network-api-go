package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type EquipmentPromotionConfig struct {
	BaseAttack         map[string]json.Number   `json:"BaseAttack"`
	BaseAttackAdd      map[string]json.Number   `json:"BaseAttackAdd"`
	BaseDefence        map[string]json.Number   `json:"BaseDefence"`
	BaseDefenceAdd     map[string]json.Number   `json:"BaseDefenceAdd"`
	BaseHP             map[string]json.Number   `json:"BaseHP"`
	BaseHPAdd          map[string]json.Number   `json:"BaseHPAdd"`
	EquipmentID        json.Number              `json:"EquipmentID"`
	MaxLevel           json.Number              `json:"MaxLevel"`
	PlayerLevelRequire json.Number              `json:"PlayerLevelRequire"`
	Promotion          json.Number              `json:"Promotion"`
	PromotionCostList  []map[string]json.Number `json:"PromotionCostList"`
	WorldLevelRequire  json.Number              `json:"WorldLevelRequire"`
}
type EquipmentPromotionConfigAccessor struct {
	_data []EquipmentPromotionConfig
}

// LoadData retrieves the data. Must be called before EquipmentPromotionConfig.GroupData
func (a *EquipmentPromotionConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/EquipmentPromotionConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *EquipmentPromotionConfigAccessor) Raw() ([]EquipmentPromotionConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []EquipmentPromotionConfig{}, err
		}
	}
	return a._data, nil
}
