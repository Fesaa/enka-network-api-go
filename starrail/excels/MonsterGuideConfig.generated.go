package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type MonsterGuideConfig struct {
	Difficulty          float64   `json:"Difficulty"`
	DifficultyGuideList []float64 `json:"DifficultyGuideList"`
	DifficultyList      []float64 `json:"DifficultyList"`
	MonsterID           float64   `json:"MonsterID"`
	PhaseList           []float64 `json:"PhaseList"`
	TagList             []float64 `json:"TagList"`
	TextGuideList       []float64 `json:"TextGuideList"`
}
type MonsterGuideConfigAccessor struct {
	_data          []MonsterGuideConfig
	_dataMonsterID map[float64]MonsterGuideConfig
}

// LoadData retrieves the data. Must be called before MonsterGuideConfig.GroupData
func (a *MonsterGuideConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MonsterGuideConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MonsterGuideConfigAccessor) Raw() ([]MonsterGuideConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MonsterGuideConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MonsterGuideConfigAccessor.LoadData to preload everything
func (a *MonsterGuideConfigAccessor) GroupData() {
	a._dataMonsterID = map[float64]MonsterGuideConfig{}
	for _, d := range a._data {
		a._dataMonsterID[d.MonsterID] = d
	}
}

// ByMonsterID returns the MonsterGuideConfig uniquely identified by MonsterID
//
// Error is only non-nil if the source errors out
func (a *MonsterGuideConfigAccessor) ByMonsterID(identifier float64) (MonsterGuideConfig, error) {
	if a._dataMonsterID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MonsterGuideConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataMonsterID[identifier], nil
}
