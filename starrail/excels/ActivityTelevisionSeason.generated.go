package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type ActivityTelevisionSeason struct {
	BuffLevelBackgroundPathList    []string    `json:"BuffLevelBackgroundPathList"`
	BuffLevelDefaultBackgroundPath string      `json:"BuffLevelDefaultBackgroundPath"`
	BuffLevelIconPathList          []string    `json:"BuffLevelIconPathList"`
	FirstMainMissionID             json.Number `json:"FirstMainMissionID"`
	LastStage                      json.Number `json:"LastStage"`
	LastStageQuest                 json.Number `json:"LastStageQuest"`
	LevelMessageSubmission         json.Number `json:"LevelMessageSubmission"`
	Season                         json.Number `json:"Season"`
}
type ActivityTelevisionSeasonAccessor struct {
	_data                               []ActivityTelevisionSeason
	_dataBuffLevelDefaultBackgroundPath map[string]ActivityTelevisionSeason
	_dataFirstMainMissionID             map[json.Number]ActivityTelevisionSeason
	_dataLastStage                      map[json.Number]ActivityTelevisionSeason
	_dataLastStageQuest                 map[json.Number]ActivityTelevisionSeason
	_dataLevelMessageSubmission         map[json.Number]ActivityTelevisionSeason
	_dataSeason                         map[json.Number]ActivityTelevisionSeason
}

// LoadData retrieves the data. Must be called before ActivityTelevisionSeason.GroupData
func (a *ActivityTelevisionSeasonAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ActivityTelevisionSeason.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ActivityTelevisionSeasonAccessor) Raw() ([]ActivityTelevisionSeason, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ActivityTelevisionSeason{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ActivityTelevisionSeasonAccessor.LoadData to preload everything
func (a *ActivityTelevisionSeasonAccessor) GroupData() {
	a._dataBuffLevelDefaultBackgroundPath = map[string]ActivityTelevisionSeason{}
	a._dataFirstMainMissionID = map[json.Number]ActivityTelevisionSeason{}
	a._dataLastStage = map[json.Number]ActivityTelevisionSeason{}
	a._dataLastStageQuest = map[json.Number]ActivityTelevisionSeason{}
	a._dataLevelMessageSubmission = map[json.Number]ActivityTelevisionSeason{}
	a._dataSeason = map[json.Number]ActivityTelevisionSeason{}
	for _, d := range a._data {
		a._dataBuffLevelDefaultBackgroundPath[d.BuffLevelDefaultBackgroundPath] = d
		a._dataFirstMainMissionID[d.FirstMainMissionID] = d
		a._dataLastStage[d.LastStage] = d
		a._dataLastStageQuest[d.LastStageQuest] = d
		a._dataLevelMessageSubmission[d.LevelMessageSubmission] = d
		a._dataSeason[d.Season] = d
	}
}

// ByBuffLevelDefaultBackgroundPath returns the ActivityTelevisionSeason uniquely identified by BuffLevelDefaultBackgroundPath
//
// Error is only non-nil if the source errors out
func (a *ActivityTelevisionSeasonAccessor) ByBuffLevelDefaultBackgroundPath(identifier string) (ActivityTelevisionSeason, error) {
	if a._dataBuffLevelDefaultBackgroundPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityTelevisionSeason{}, err
			}
		}
		a.GroupData()
	}
	return a._dataBuffLevelDefaultBackgroundPath[identifier], nil
}

// ByFirstMainMissionID returns the ActivityTelevisionSeason uniquely identified by FirstMainMissionID
//
// Error is only non-nil if the source errors out
func (a *ActivityTelevisionSeasonAccessor) ByFirstMainMissionID(identifier json.Number) (ActivityTelevisionSeason, error) {
	if a._dataFirstMainMissionID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityTelevisionSeason{}, err
			}
		}
		a.GroupData()
	}
	return a._dataFirstMainMissionID[identifier], nil
}

// ByLastStage returns the ActivityTelevisionSeason uniquely identified by LastStage
//
// Error is only non-nil if the source errors out
func (a *ActivityTelevisionSeasonAccessor) ByLastStage(identifier json.Number) (ActivityTelevisionSeason, error) {
	if a._dataLastStage == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityTelevisionSeason{}, err
			}
		}
		a.GroupData()
	}
	return a._dataLastStage[identifier], nil
}

// ByLastStageQuest returns the ActivityTelevisionSeason uniquely identified by LastStageQuest
//
// Error is only non-nil if the source errors out
func (a *ActivityTelevisionSeasonAccessor) ByLastStageQuest(identifier json.Number) (ActivityTelevisionSeason, error) {
	if a._dataLastStageQuest == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityTelevisionSeason{}, err
			}
		}
		a.GroupData()
	}
	return a._dataLastStageQuest[identifier], nil
}

// ByLevelMessageSubmission returns the ActivityTelevisionSeason uniquely identified by LevelMessageSubmission
//
// Error is only non-nil if the source errors out
func (a *ActivityTelevisionSeasonAccessor) ByLevelMessageSubmission(identifier json.Number) (ActivityTelevisionSeason, error) {
	if a._dataLevelMessageSubmission == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityTelevisionSeason{}, err
			}
		}
		a.GroupData()
	}
	return a._dataLevelMessageSubmission[identifier], nil
}

// BySeason returns the ActivityTelevisionSeason uniquely identified by Season
//
// Error is only non-nil if the source errors out
func (a *ActivityTelevisionSeasonAccessor) BySeason(identifier json.Number) (ActivityTelevisionSeason, error) {
	if a._dataSeason == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityTelevisionSeason{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSeason[identifier], nil
}
