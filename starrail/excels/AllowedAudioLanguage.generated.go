package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type AllowedAudioLanguage struct {
	AudioLanguageKey   string                 `json:"AudioLanguageKey"`
	AudioTrackIndex    json.Number            `json:"AudioTrackIndex"`
	ShowString         map[string]json.Number `json:"ShowString"`
	WwiseLanguageKey   string                 `json:"WwiseLanguageKey"`
	WwiseLanguageState string                 `json:"WwiseLanguageState"`
}
type AllowedAudioLanguageAccessor struct {
	_data                   []AllowedAudioLanguage
	_dataAudioLanguageKey   map[string]AllowedAudioLanguage
	_dataWwiseLanguageKey   map[string]AllowedAudioLanguage
	_dataWwiseLanguageState map[string]AllowedAudioLanguage
}

// LoadData retrieves the data. Must be called before AllowedAudioLanguage.GroupData
func (a *AllowedAudioLanguageAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/AllowedAudioLanguage.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *AllowedAudioLanguageAccessor) Raw() ([]AllowedAudioLanguage, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []AllowedAudioLanguage{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with AllowedAudioLanguageAccessor.LoadData to preload everything
func (a *AllowedAudioLanguageAccessor) GroupData() {
	a._dataAudioLanguageKey = map[string]AllowedAudioLanguage{}
	a._dataWwiseLanguageKey = map[string]AllowedAudioLanguage{}
	a._dataWwiseLanguageState = map[string]AllowedAudioLanguage{}
	for _, d := range a._data {
		a._dataAudioLanguageKey[d.AudioLanguageKey] = d
		a._dataWwiseLanguageKey[d.WwiseLanguageKey] = d
		a._dataWwiseLanguageState[d.WwiseLanguageState] = d
	}
}

// ByAudioLanguageKey returns the AllowedAudioLanguage uniquely identified by AudioLanguageKey
//
// Error is only non-nil if the source errors out
func (a *AllowedAudioLanguageAccessor) ByAudioLanguageKey(identifier string) (AllowedAudioLanguage, error) {
	if a._dataAudioLanguageKey == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AllowedAudioLanguage{}, err
			}
		}
		a.GroupData()
	}
	return a._dataAudioLanguageKey[identifier], nil
}

// ByWwiseLanguageKey returns the AllowedAudioLanguage uniquely identified by WwiseLanguageKey
//
// Error is only non-nil if the source errors out
func (a *AllowedAudioLanguageAccessor) ByWwiseLanguageKey(identifier string) (AllowedAudioLanguage, error) {
	if a._dataWwiseLanguageKey == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AllowedAudioLanguage{}, err
			}
		}
		a.GroupData()
	}
	return a._dataWwiseLanguageKey[identifier], nil
}

// ByWwiseLanguageState returns the AllowedAudioLanguage uniquely identified by WwiseLanguageState
//
// Error is only non-nil if the source errors out
func (a *AllowedAudioLanguageAccessor) ByWwiseLanguageState(identifier string) (AllowedAudioLanguage, error) {
	if a._dataWwiseLanguageState == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AllowedAudioLanguage{}, err
			}
		}
		a.GroupData()
	}
	return a._dataWwiseLanguageState[identifier], nil
}
