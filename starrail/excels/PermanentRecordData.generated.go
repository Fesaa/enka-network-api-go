package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type PermanentRecordData struct {
	RecordID  float64 `json:"RecordID"`
	RefreshID float64 `json:"RefreshID"`
}
type PermanentRecordDataAccessor struct {
	_data          []PermanentRecordData
	_dataRecordID  map[float64]PermanentRecordData
	_dataRefreshID map[float64]PermanentRecordData
}

// LoadData retrieves the data. Must be called before PermanentRecordData.GroupData
func (a *PermanentRecordDataAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/PermanentRecordData.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *PermanentRecordDataAccessor) Raw() ([]PermanentRecordData, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []PermanentRecordData{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with PermanentRecordDataAccessor.LoadData to preload everything
func (a *PermanentRecordDataAccessor) GroupData() {
	a._dataRecordID = map[float64]PermanentRecordData{}
	a._dataRefreshID = map[float64]PermanentRecordData{}
	for _, d := range a._data {
		a._dataRecordID[d.RecordID] = d
		a._dataRefreshID[d.RefreshID] = d
	}
}

// ByRecordID returns the PermanentRecordData uniquely identified by RecordID
//
// Error is only non-nil if the source errors out
func (a *PermanentRecordDataAccessor) ByRecordID(identifier float64) (PermanentRecordData, error) {
	if a._dataRecordID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return PermanentRecordData{}, err
			}
		}
		a.GroupData()
	}
	return a._dataRecordID[identifier], nil
}

// ByRefreshID returns the PermanentRecordData uniquely identified by RefreshID
//
// Error is only non-nil if the source errors out
func (a *PermanentRecordDataAccessor) ByRefreshID(identifier float64) (PermanentRecordData, error) {
	if a._dataRefreshID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return PermanentRecordData{}, err
			}
		}
		a.GroupData()
	}
	return a._dataRefreshID[identifier], nil
}
