package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type SubMission struct {
	DescrptionText hash.Hash `json:"DescrptionText"`
	SubMissionID   float64   `json:"SubMissionID"`
	TargetText     hash.Hash `json:"TargetText"`
}
type SubMissionAccessor struct {
	_data             []SubMission
	_dataSubMissionID map[float64]SubMission
}

// LoadData retrieves the data. Must be called before SubMission.GroupData
func (a *SubMissionAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/SubMission.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *SubMissionAccessor) Raw() ([]SubMission, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []SubMission{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with SubMissionAccessor.LoadData to preload everything
func (a *SubMissionAccessor) GroupData() {
	a._dataSubMissionID = map[float64]SubMission{}
	for _, d := range a._data {
		a._dataSubMissionID[d.SubMissionID] = d
	}
}

// BySubMissionID returns the SubMission uniquely identified by SubMissionID
//
// Error is only non-nil if the source errors out
func (a *SubMissionAccessor) BySubMissionID(identifier float64) (SubMission, error) {
	if a._dataSubMissionID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return SubMission{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSubMissionID[identifier], nil
}
