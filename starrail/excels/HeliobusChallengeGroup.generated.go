package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type HeliobusChallengeGroup struct {
	ChallengeGroupID   json.Number   `json:"ChallengeGroupID"`
	ChallengeStageList []json.Number `json:"ChallengeStageList"`
}
type HeliobusChallengeGroupAccessor struct {
	_data                 []HeliobusChallengeGroup
	_dataChallengeGroupID map[json.Number]HeliobusChallengeGroup
}

// LoadData retrieves the data. Must be called before HeliobusChallengeGroup.GroupData
func (a *HeliobusChallengeGroupAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/HeliobusChallengeGroup.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *HeliobusChallengeGroupAccessor) Raw() ([]HeliobusChallengeGroup, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []HeliobusChallengeGroup{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with HeliobusChallengeGroupAccessor.LoadData to preload everything
func (a *HeliobusChallengeGroupAccessor) GroupData() {
	a._dataChallengeGroupID = map[json.Number]HeliobusChallengeGroup{}
	for _, d := range a._data {
		a._dataChallengeGroupID[d.ChallengeGroupID] = d
	}
}

// ByChallengeGroupID returns the HeliobusChallengeGroup uniquely identified by ChallengeGroupID
//
// Error is only non-nil if the source errors out
func (a *HeliobusChallengeGroupAccessor) ByChallengeGroupID(identifier json.Number) (HeliobusChallengeGroup, error) {
	if a._dataChallengeGroupID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return HeliobusChallengeGroup{}, err
			}
		}
		a.GroupData()
	}
	return a._dataChallengeGroupID[identifier], nil
}
