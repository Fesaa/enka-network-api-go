package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type RogueMagicLayer struct {
	LayerID    float64 `json:"LayerID"`
	LayerNumID float64 `json:"LayerNumID"`
}
type RogueMagicLayerAccessor struct {
	_data        []RogueMagicLayer
	_dataLayerID map[float64]RogueMagicLayer
}

// LoadData retrieves the data. Must be called before RogueMagicLayer.GroupData
func (a *RogueMagicLayerAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueMagicLayer.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueMagicLayerAccessor) Raw() ([]RogueMagicLayer, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueMagicLayer{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueMagicLayerAccessor.LoadData to preload everything
func (a *RogueMagicLayerAccessor) GroupData() {
	a._dataLayerID = map[float64]RogueMagicLayer{}
	for _, d := range a._data {
		a._dataLayerID[d.LayerID] = d
	}
}

// ByLayerID returns the RogueMagicLayer uniquely identified by LayerID
//
// Error is only non-nil if the source errors out
func (a *RogueMagicLayerAccessor) ByLayerID(identifier float64) (RogueMagicLayer, error) {
	if a._dataLayerID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueMagicLayer{}, err
			}
		}
		a.GroupData()
	}
	return a._dataLayerID[identifier], nil
}
