package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type PlanetFesQuestGroup struct {
	GroupID      json.Number   `json:"GroupID"`
	QuestList    []json.Number `json:"QuestList"`
	RewardIDList []json.Number `json:"RewardIDList"`
}
type PlanetFesQuestGroupAccessor struct {
	_data        []PlanetFesQuestGroup
	_dataGroupID map[json.Number]PlanetFesQuestGroup
}

// LoadData retrieves the data. Must be called before PlanetFesQuestGroup.GroupData
func (a *PlanetFesQuestGroupAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/PlanetFesQuestGroup.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *PlanetFesQuestGroupAccessor) Raw() ([]PlanetFesQuestGroup, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []PlanetFesQuestGroup{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with PlanetFesQuestGroupAccessor.LoadData to preload everything
func (a *PlanetFesQuestGroupAccessor) GroupData() {
	a._dataGroupID = map[json.Number]PlanetFesQuestGroup{}
	for _, d := range a._data {
		a._dataGroupID[d.GroupID] = d
	}
}

// ByGroupID returns the PlanetFesQuestGroup uniquely identified by GroupID
//
// Error is only non-nil if the source errors out
func (a *PlanetFesQuestGroupAccessor) ByGroupID(identifier json.Number) (PlanetFesQuestGroup, error) {
	if a._dataGroupID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return PlanetFesQuestGroup{}, err
			}
		}
		a.GroupData()
	}
	return a._dataGroupID[identifier], nil
}
