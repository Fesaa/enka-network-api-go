package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type AtlasUnlockData struct {
	Conditions    []AtlasUnlockDataConditions `json:"Conditions"`
	ShowCondition []interface{}               `json:"ShowCondition"`
	UnlockID      float64                     `json:"UnlockID"`
}
type AtlasUnlockDataConditions struct {
	Param string `json:"Param"`
	Type  string `json:"Type"`
}
type AtlasUnlockDataAccessor struct {
	_data         []AtlasUnlockData
	_dataUnlockID map[float64]AtlasUnlockData
}

// LoadData retrieves the data. Must be called before AtlasUnlockData.GroupData
func (a *AtlasUnlockDataAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/AtlasUnlockData.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *AtlasUnlockDataAccessor) Raw() ([]AtlasUnlockData, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []AtlasUnlockData{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with AtlasUnlockDataAccessor.LoadData to preload everything
func (a *AtlasUnlockDataAccessor) GroupData() {
	a._dataUnlockID = map[float64]AtlasUnlockData{}
	for _, d := range a._data {
		a._dataUnlockID[d.UnlockID] = d
	}
}

// ByUnlockID returns the AtlasUnlockData uniquely identified by UnlockID
//
// Error is only non-nil if the source errors out
func (a *AtlasUnlockDataAccessor) ByUnlockID(identifier float64) (AtlasUnlockData, error) {
	if a._dataUnlockID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AtlasUnlockData{}, err
			}
		}
		a.GroupData()
	}
	return a._dataUnlockID[identifier], nil
}
