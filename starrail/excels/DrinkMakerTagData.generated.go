package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type DrinkMakerTagData struct {
	IsShow     bool      `json:"IsShow"`
	MixParam   []float64 `json:"MixParam"`
	MixType    string    `json:"MixType"`
	Priority   float64   `json:"Priority"`
	SourceType string    `json:"SourceType"`
	TagID      float64   `json:"TagID"`
	TagName    hash.Hash `json:"TagName"`
	Type       string    `json:"Type"`
}
type DrinkMakerTagDataAccessor struct {
	_data      []DrinkMakerTagData
	_dataTagID map[float64]DrinkMakerTagData
}

// LoadData retrieves the data. Must be called before DrinkMakerTagData.GroupData
func (a *DrinkMakerTagDataAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/DrinkMakerTagData.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *DrinkMakerTagDataAccessor) Raw() ([]DrinkMakerTagData, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []DrinkMakerTagData{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with DrinkMakerTagDataAccessor.LoadData to preload everything
func (a *DrinkMakerTagDataAccessor) GroupData() {
	for _, d := range a._data {
		a._dataTagID[d.TagID] = d
	}
}

// ByTagID returns the DrinkMakerTagData uniquely identified by TagID
//
// Error is only non-nil if the source errors out
func (a *DrinkMakerTagDataAccessor) ByTagID(identifier float64) (DrinkMakerTagData, error) {
	if a._dataTagID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return DrinkMakerTagData{}, err
			}
		}
		a.GroupData()
	}
	return a._dataTagID[identifier], nil
}
