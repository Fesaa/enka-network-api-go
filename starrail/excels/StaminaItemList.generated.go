package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type StaminaItemList struct {
	Desc          map[string]json.Number `json:"Desc"`
	IsAlwaysShown bool                   `json:"IsAlwaysShown"`
	ItemID        json.Number            `json:"ItemID"`
	SortWeight    json.Number            `json:"SortWeight"`
}
type StaminaItemListAccessor struct {
	_data           []StaminaItemList
	_dataItemID     map[json.Number]StaminaItemList
	_dataSortWeight map[json.Number]StaminaItemList
}

// LoadData retrieves the data. Must be called before StaminaItemList.GroupData
func (a *StaminaItemListAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/StaminaItemList.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *StaminaItemListAccessor) Raw() ([]StaminaItemList, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []StaminaItemList{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with StaminaItemListAccessor.LoadData to preload everything
func (a *StaminaItemListAccessor) GroupData() {
	a._dataItemID = map[json.Number]StaminaItemList{}
	a._dataSortWeight = map[json.Number]StaminaItemList{}
	for _, d := range a._data {
		a._dataItemID[d.ItemID] = d
		a._dataSortWeight[d.SortWeight] = d
	}
}

// ByItemID returns the StaminaItemList uniquely identified by ItemID
//
// Error is only non-nil if the source errors out
func (a *StaminaItemListAccessor) ByItemID(identifier json.Number) (StaminaItemList, error) {
	if a._dataItemID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return StaminaItemList{}, err
			}
		}
		a.GroupData()
	}
	return a._dataItemID[identifier], nil
}

// BySortWeight returns the StaminaItemList uniquely identified by SortWeight
//
// Error is only non-nil if the source errors out
func (a *StaminaItemListAccessor) BySortWeight(identifier json.Number) (StaminaItemList, error) {
	if a._dataSortWeight == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return StaminaItemList{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSortWeight[identifier], nil
}
