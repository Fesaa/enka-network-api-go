package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type RogueRoomType struct {
	IsSuper                bool      `json:"IsSuper"`
	MapShowType            bool      `json:"MapShowType"`
	RogueRoomType          float64   `json:"RogueRoomType"`
	RogueRoomTypeIcon      string    `json:"RogueRoomTypeIcon"`
	RogueRoomTypeTextmapID hash.Hash `json:"RogueRoomTypeTextmapID"`
	RoomIconEffect         string    `json:"RoomIconEffect"`
	RoomTypeDescTextmapID  hash.Hash `json:"RoomTypeDescTextmapID"`
	RoomTypeDescTextmapID2 hash.Hash `json:"RoomTypeDescTextmapID2"`
}
type RogueRoomTypeAccessor struct {
	_data              []RogueRoomType
	_dataRogueRoomType map[float64]RogueRoomType
}

// LoadData retrieves the data. Must be called before RogueRoomType.GroupData
func (a *RogueRoomTypeAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueRoomType.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueRoomTypeAccessor) Raw() ([]RogueRoomType, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueRoomType{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueRoomTypeAccessor.LoadData to preload everything
func (a *RogueRoomTypeAccessor) GroupData() {
	a._dataRogueRoomType = map[float64]RogueRoomType{}
	for _, d := range a._data {
		a._dataRogueRoomType[d.RogueRoomType] = d
	}
}

// ByRogueRoomType returns the RogueRoomType uniquely identified by RogueRoomType
//
// Error is only non-nil if the source errors out
func (a *RogueRoomTypeAccessor) ByRogueRoomType(identifier float64) (RogueRoomType, error) {
	if a._dataRogueRoomType == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueRoomType{}, err
			}
		}
		a.GroupData()
	}
	return a._dataRogueRoomType[identifier], nil
}
