package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type AetherDivideChallengeList struct {
	BattleAreaID          json.Number            `json:"BattleAreaID"`
	ChallengeType         string                 `json:"ChallengeType"`
	EventID               json.Number            `json:"EventID"`
	GroupID               json.Number            `json:"GroupID"`
	ID                    json.Number            `json:"ID"`
	MissionID             json.Number            `json:"MissionID"`
	OpponentImageIconPath string                 `json:"OpponentImageIconPath"`
	OpponentImagePath     string                 `json:"OpponentImagePath"`
	OpponentName          map[string]json.Number `json:"OpponentName"`
	OpponentPrefabPath    string                 `json:"OpponentPrefabPath"`
	OpponentStrength      json.Number            `json:"OpponentStrength"`
	Rank                  json.Number            `json:"Rank"`
	RewardID              json.Number            `json:"RewardID"`
	VersusImagePath       string                 `json:"VersusImagePath"`
}
type AetherDivideChallengeListAccessor struct {
	_data        []AetherDivideChallengeList
	_dataEventID map[json.Number]AetherDivideChallengeList
	_dataID      map[json.Number]AetherDivideChallengeList
}

// LoadData retrieves the data. Must be called before AetherDivideChallengeList.GroupData
func (a *AetherDivideChallengeListAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/AetherDivideChallengeList.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *AetherDivideChallengeListAccessor) Raw() ([]AetherDivideChallengeList, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []AetherDivideChallengeList{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with AetherDivideChallengeListAccessor.LoadData to preload everything
func (a *AetherDivideChallengeListAccessor) GroupData() {
	a._dataEventID = map[json.Number]AetherDivideChallengeList{}
	a._dataID = map[json.Number]AetherDivideChallengeList{}
	for _, d := range a._data {
		a._dataEventID[d.EventID] = d
		a._dataID[d.ID] = d
	}
}

// ByEventID returns the AetherDivideChallengeList uniquely identified by EventID
//
// Error is only non-nil if the source errors out
func (a *AetherDivideChallengeListAccessor) ByEventID(identifier json.Number) (AetherDivideChallengeList, error) {
	if a._dataEventID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AetherDivideChallengeList{}, err
			}
		}
		a.GroupData()
	}
	return a._dataEventID[identifier], nil
}

// ByID returns the AetherDivideChallengeList uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *AetherDivideChallengeListAccessor) ByID(identifier json.Number) (AetherDivideChallengeList, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AetherDivideChallengeList{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}
