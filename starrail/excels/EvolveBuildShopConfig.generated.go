package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type EvolveBuildShopConfig struct {
	BuffTextFormat map[string]json.Number   `json:"BuffTextFormat"`
	Category       map[string]json.Number   `json:"Category"`
	ID             json.Number              `json:"ID"`
	ItemBackground string                   `json:"ItemBackground"`
	ItemIcon       string                   `json:"ItemIcon"`
	LvMax          json.Number              `json:"LvMax"`
	MazeBuffID     json.Number              `json:"MazeBuffID"`
	Name           map[string]json.Number   `json:"Name"`
	ParamList      []map[string]json.Number `json:"ParamList"`
	PriceList      []map[string]json.Number `json:"PriceList"`
	ShopDesc       map[string]json.Number   `json:"ShopDesc"`
	ShopType       string                   `json:"ShopType"`
	TotalBuff      map[string]json.Number   `json:"TotalBuff"`
}
type EvolveBuildShopConfigAccessor struct {
	_data         []EvolveBuildShopConfig
	_dataItemIcon map[string]EvolveBuildShopConfig
}

// LoadData retrieves the data. Must be called before EvolveBuildShopConfig.GroupData
func (a *EvolveBuildShopConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/EvolveBuildShopConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *EvolveBuildShopConfigAccessor) Raw() ([]EvolveBuildShopConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []EvolveBuildShopConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with EvolveBuildShopConfigAccessor.LoadData to preload everything
func (a *EvolveBuildShopConfigAccessor) GroupData() {
	a._dataItemIcon = map[string]EvolveBuildShopConfig{}
	for _, d := range a._data {
		a._dataItemIcon[d.ItemIcon] = d
	}
}

// ByItemIcon returns the EvolveBuildShopConfig uniquely identified by ItemIcon
//
// Error is only non-nil if the source errors out
func (a *EvolveBuildShopConfigAccessor) ByItemIcon(identifier string) (EvolveBuildShopConfig, error) {
	if a._dataItemIcon == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return EvolveBuildShopConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataItemIcon[identifier], nil
}
