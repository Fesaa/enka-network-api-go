package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type RogueUpgradeAvatar struct {
	AvatarLevel           json.Number `json:"AvatarLevel"`
	AvatarPromotion       json.Number `json:"AvatarPromotion"`
	AvatarSkillTreeKey    string      `json:"AvatarSkillTreeKey"`
	EquipmentLevel        json.Number `json:"EquipmentLevel"`
	EquipmentPromotion    json.Number `json:"EquipmentPromotion"`
	RelicSet2AverageLevel json.Number `json:"RelicSet2AverageLevel"`
	RelicSet2Rarity       string      `json:"RelicSet2Rarity"`
	RelicSet4AverageLevel json.Number `json:"RelicSet4AverageLevel"`
	RelicSet4Rarity       string      `json:"RelicSet4Rarity"`
	WorldLevel            json.Number `json:"WorldLevel"`
}
type RogueUpgradeAvatarAccessor struct {
	_data []RogueUpgradeAvatar
}

// LoadData retrieves the data. Must be called before RogueUpgradeAvatar.GroupData
func (a *RogueUpgradeAvatarAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueUpgradeAvatar.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueUpgradeAvatarAccessor) Raw() ([]RogueUpgradeAvatar, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueUpgradeAvatar{}, err
		}
	}
	return a._data, nil
}
