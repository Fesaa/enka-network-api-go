package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type RogueUpgradeAvatar struct {
	AvatarLevel           float64 `json:"AvatarLevel"`
	AvatarPromotion       float64 `json:"AvatarPromotion"`
	AvatarSkillTreeKey    string  `json:"AvatarSkillTreeKey"`
	EquipmentLevel        float64 `json:"EquipmentLevel"`
	EquipmentPromotion    float64 `json:"EquipmentPromotion"`
	RelicSet2AverageLevel float64 `json:"RelicSet2AverageLevel"`
	RelicSet2Rarity       string  `json:"RelicSet2Rarity"`
	RelicSet4AverageLevel float64 `json:"RelicSet4AverageLevel"`
	RelicSet4Rarity       string  `json:"RelicSet4Rarity"`
	WorldLevel            float64 `json:"WorldLevel"`
}
type RogueUpgradeAvatarAccessor struct {
	_data               []RogueUpgradeAvatar
	_dataAvatarLevel    map[float64]RogueUpgradeAvatar
	_dataEquipmentLevel map[float64]RogueUpgradeAvatar
}

// LoadData retrieves the data. Must be called before RogueUpgradeAvatar.GroupData
func (a *RogueUpgradeAvatarAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueUpgradeAvatar.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueUpgradeAvatarAccessor) Raw() ([]RogueUpgradeAvatar, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueUpgradeAvatar{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueUpgradeAvatarAccessor.LoadData to preload everything
func (a *RogueUpgradeAvatarAccessor) GroupData() {
	for _, d := range a._data {
		a._dataAvatarLevel[d.AvatarLevel] = d
		a._dataEquipmentLevel[d.EquipmentLevel] = d
	}
}

// ByAvatarLevel returns the RogueUpgradeAvatar uniquely identified by AvatarLevel
//
// Error is only non-nil if the source errors out
func (a *RogueUpgradeAvatarAccessor) ByAvatarLevel(identifier float64) (RogueUpgradeAvatar, error) {
	if a._dataAvatarLevel == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueUpgradeAvatar{}, err
			}
		}
		a.GroupData()
	}
	return a._dataAvatarLevel[identifier], nil
}

// ByEquipmentLevel returns the RogueUpgradeAvatar uniquely identified by EquipmentLevel
//
// Error is only non-nil if the source errors out
func (a *RogueUpgradeAvatarAccessor) ByEquipmentLevel(identifier float64) (RogueUpgradeAvatar, error) {
	if a._dataEquipmentLevel == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueUpgradeAvatar{}, err
			}
		}
		a.GroupData()
	}
	return a._dataEquipmentLevel[identifier], nil
}
