package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type PamSkinConfig struct {
	ConfigEntityPath string      `json:"ConfigEntityPath"`
	JsonPath         string      `json:"JsonPath"`
	SkinID           json.Number `json:"SkinID"`
	SkinIcon         string      `json:"SkinIcon"`
}
type PamSkinConfigAccessor struct {
	_data                 []PamSkinConfig
	_dataConfigEntityPath map[string]PamSkinConfig
	_dataJsonPath         map[string]PamSkinConfig
	_dataSkinID           map[json.Number]PamSkinConfig
	_dataSkinIcon         map[string]PamSkinConfig
}

// LoadData retrieves the data. Must be called before PamSkinConfig.GroupData
func (a *PamSkinConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/PamSkinConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *PamSkinConfigAccessor) Raw() ([]PamSkinConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []PamSkinConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with PamSkinConfigAccessor.LoadData to preload everything
func (a *PamSkinConfigAccessor) GroupData() {
	a._dataConfigEntityPath = map[string]PamSkinConfig{}
	a._dataJsonPath = map[string]PamSkinConfig{}
	a._dataSkinID = map[json.Number]PamSkinConfig{}
	a._dataSkinIcon = map[string]PamSkinConfig{}
	for _, d := range a._data {
		a._dataConfigEntityPath[d.ConfigEntityPath] = d
		a._dataJsonPath[d.JsonPath] = d
		a._dataSkinID[d.SkinID] = d
		a._dataSkinIcon[d.SkinIcon] = d
	}
}

// ByConfigEntityPath returns the PamSkinConfig uniquely identified by ConfigEntityPath
//
// Error is only non-nil if the source errors out
func (a *PamSkinConfigAccessor) ByConfigEntityPath(identifier string) (PamSkinConfig, error) {
	if a._dataConfigEntityPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return PamSkinConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataConfigEntityPath[identifier], nil
}

// ByJsonPath returns the PamSkinConfig uniquely identified by JsonPath
//
// Error is only non-nil if the source errors out
func (a *PamSkinConfigAccessor) ByJsonPath(identifier string) (PamSkinConfig, error) {
	if a._dataJsonPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return PamSkinConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataJsonPath[identifier], nil
}

// BySkinID returns the PamSkinConfig uniquely identified by SkinID
//
// Error is only non-nil if the source errors out
func (a *PamSkinConfigAccessor) BySkinID(identifier json.Number) (PamSkinConfig, error) {
	if a._dataSkinID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return PamSkinConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSkinID[identifier], nil
}

// BySkinIcon returns the PamSkinConfig uniquely identified by SkinIcon
//
// Error is only non-nil if the source errors out
func (a *PamSkinConfigAccessor) BySkinIcon(identifier string) (PamSkinConfig, error) {
	if a._dataSkinIcon == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return PamSkinConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSkinIcon[identifier], nil
}
