package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type TarotWikiTimeline struct {
	DataList    []float64 `json:"DataList"`
	ID          float64   `json:"ID"`
	Progress    float64   `json:"Progress"`
	SpecialType float64   `json:"SpecialType"`
	Title       hash.Hash `json:"Title"`
}
type TarotWikiTimelineAccessor struct {
	_data         []TarotWikiTimeline
	_dataID       map[float64]TarotWikiTimeline
	_dataProgress map[float64]TarotWikiTimeline
}

// LoadData retrieves the data. Must be called before TarotWikiTimeline.GroupData
func (a *TarotWikiTimelineAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/TarotWikiTimeline.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *TarotWikiTimelineAccessor) Raw() ([]TarotWikiTimeline, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []TarotWikiTimeline{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with TarotWikiTimelineAccessor.LoadData to preload everything
func (a *TarotWikiTimelineAccessor) GroupData() {
	a._dataID = map[float64]TarotWikiTimeline{}
	a._dataProgress = map[float64]TarotWikiTimeline{}
	for _, d := range a._data {
		a._dataID[d.ID] = d
		a._dataProgress[d.Progress] = d
	}
}

// ByID returns the TarotWikiTimeline uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *TarotWikiTimelineAccessor) ByID(identifier float64) (TarotWikiTimeline, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return TarotWikiTimeline{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}

// ByProgress returns the TarotWikiTimeline uniquely identified by Progress
//
// Error is only non-nil if the source errors out
func (a *TarotWikiTimelineAccessor) ByProgress(identifier float64) (TarotWikiTimeline, error) {
	if a._dataProgress == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return TarotWikiTimeline{}, err
			}
		}
		a.GroupData()
	}
	return a._dataProgress[identifier], nil
}
