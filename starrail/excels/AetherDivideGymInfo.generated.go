package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type AetherDivideGymInfo struct {
	ActivityModuleID   json.Number            `json:"ActivityModuleID"`
	BGPath             string                 `json:"BGPath"`
	BadgeUnlockID      json.Number            `json:"BadgeUnlockID"`
	ChallengeQuestList []json.Number          `json:"ChallengeQuestList"`
	Description        map[string]json.Number `json:"Description"`
	DisplayMonsterMap  map[string]json.Number `json:"DisplayMonsterMap"`
	EntranceID         json.Number            `json:"EntranceID"`
	ID                 json.Number            `json:"ID"`
	IconPath           string                 `json:"IconPath"`
	Name               map[string]json.Number `json:"Name"`
	SpiritQuest        json.Number            `json:"SpiritQuest"`
	TabIconPath        string                 `json:"TabIconPath"`
	TrainerQuest       json.Number            `json:"TrainerQuest"`
	UnlockID           json.Number            `json:"UnlockID"`
}
type AetherDivideGymInfoAccessor struct {
	_data            []AetherDivideGymInfo
	_dataBGPath      map[string]AetherDivideGymInfo
	_dataIconPath    map[string]AetherDivideGymInfo
	_dataTabIconPath map[string]AetherDivideGymInfo
}

// LoadData retrieves the data. Must be called before AetherDivideGymInfo.GroupData
func (a *AetherDivideGymInfoAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/AetherDivideGymInfo.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *AetherDivideGymInfoAccessor) Raw() ([]AetherDivideGymInfo, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []AetherDivideGymInfo{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with AetherDivideGymInfoAccessor.LoadData to preload everything
func (a *AetherDivideGymInfoAccessor) GroupData() {
	a._dataBGPath = map[string]AetherDivideGymInfo{}
	a._dataIconPath = map[string]AetherDivideGymInfo{}
	a._dataTabIconPath = map[string]AetherDivideGymInfo{}
	for _, d := range a._data {
		a._dataBGPath[d.BGPath] = d
		a._dataIconPath[d.IconPath] = d
		a._dataTabIconPath[d.TabIconPath] = d
	}
}

// ByBGPath returns the AetherDivideGymInfo uniquely identified by BGPath
//
// Error is only non-nil if the source errors out
func (a *AetherDivideGymInfoAccessor) ByBGPath(identifier string) (AetherDivideGymInfo, error) {
	if a._dataBGPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AetherDivideGymInfo{}, err
			}
		}
		a.GroupData()
	}
	return a._dataBGPath[identifier], nil
}

// ByIconPath returns the AetherDivideGymInfo uniquely identified by IconPath
//
// Error is only non-nil if the source errors out
func (a *AetherDivideGymInfoAccessor) ByIconPath(identifier string) (AetherDivideGymInfo, error) {
	if a._dataIconPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AetherDivideGymInfo{}, err
			}
		}
		a.GroupData()
	}
	return a._dataIconPath[identifier], nil
}

// ByTabIconPath returns the AetherDivideGymInfo uniquely identified by TabIconPath
//
// Error is only non-nil if the source errors out
func (a *AetherDivideGymInfoAccessor) ByTabIconPath(identifier string) (AetherDivideGymInfo, error) {
	if a._dataTabIconPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AetherDivideGymInfo{}, err
			}
		}
		a.GroupData()
	}
	return a._dataTabIconPath[identifier], nil
}
