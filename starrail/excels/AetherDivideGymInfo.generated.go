package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type AetherDivideGymInfo struct {
	ActivityModuleID   float64            `json:"ActivityModuleID"`
	BGPath             string             `json:"BGPath"`
	BadgeUnlockID      float64            `json:"BadgeUnlockID"`
	ChallengeQuestList []float64          `json:"ChallengeQuestList"`
	Description        hash.Hash          `json:"Description"`
	DisplayMonsterMap  map[string]float64 `json:"DisplayMonsterMap"`
	EntranceID         float64            `json:"EntranceID"`
	ID                 float64            `json:"ID"`
	IconPath           string             `json:"IconPath"`
	Name               hash.Hash          `json:"Name"`
	SpiritQuest        float64            `json:"SpiritQuest"`
	TabIconPath        string             `json:"TabIconPath"`
	TrainerQuest       float64            `json:"TrainerQuest"`
	UnlockID           float64            `json:"UnlockID"`
}
type AetherDivideGymInfoAccessor struct {
	_data              []AetherDivideGymInfo
	_dataBGPath        map[string]AetherDivideGymInfo
	_dataBadgeUnlockID map[float64]AetherDivideGymInfo
	_dataEntranceID    map[float64]AetherDivideGymInfo
	_dataID            map[float64]AetherDivideGymInfo
	_dataIconPath      map[string]AetherDivideGymInfo
	_dataSpiritQuest   map[float64]AetherDivideGymInfo
	_dataTabIconPath   map[string]AetherDivideGymInfo
	_dataTrainerQuest  map[float64]AetherDivideGymInfo
	_dataUnlockID      map[float64]AetherDivideGymInfo
}

// LoadData retrieves the data. Must be called before AetherDivideGymInfo.GroupData
func (a *AetherDivideGymInfoAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/AetherDivideGymInfo.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *AetherDivideGymInfoAccessor) Raw() ([]AetherDivideGymInfo, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []AetherDivideGymInfo{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with AetherDivideGymInfoAccessor.LoadData to preload everything
func (a *AetherDivideGymInfoAccessor) GroupData() {
	for _, d := range a._data {
		a._dataBGPath[d.BGPath] = d
		a._dataBadgeUnlockID[d.BadgeUnlockID] = d
		a._dataEntranceID[d.EntranceID] = d
		a._dataID[d.ID] = d
		a._dataIconPath[d.IconPath] = d
		a._dataSpiritQuest[d.SpiritQuest] = d
		a._dataTabIconPath[d.TabIconPath] = d
		a._dataTrainerQuest[d.TrainerQuest] = d
		a._dataUnlockID[d.UnlockID] = d
	}
}

// ByBGPath returns the AetherDivideGymInfo uniquely identified by BGPath
//
// Error is only non-nil if the source errors out
func (a *AetherDivideGymInfoAccessor) ByBGPath(identifier string) (AetherDivideGymInfo, error) {
	if a._dataBGPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AetherDivideGymInfo{}, err
			}
		}
		a.GroupData()
	}
	return a._dataBGPath[identifier], nil
}

// ByBadgeUnlockID returns the AetherDivideGymInfo uniquely identified by BadgeUnlockID
//
// Error is only non-nil if the source errors out
func (a *AetherDivideGymInfoAccessor) ByBadgeUnlockID(identifier float64) (AetherDivideGymInfo, error) {
	if a._dataBadgeUnlockID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AetherDivideGymInfo{}, err
			}
		}
		a.GroupData()
	}
	return a._dataBadgeUnlockID[identifier], nil
}

// ByEntranceID returns the AetherDivideGymInfo uniquely identified by EntranceID
//
// Error is only non-nil if the source errors out
func (a *AetherDivideGymInfoAccessor) ByEntranceID(identifier float64) (AetherDivideGymInfo, error) {
	if a._dataEntranceID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AetherDivideGymInfo{}, err
			}
		}
		a.GroupData()
	}
	return a._dataEntranceID[identifier], nil
}

// ByID returns the AetherDivideGymInfo uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *AetherDivideGymInfoAccessor) ByID(identifier float64) (AetherDivideGymInfo, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AetherDivideGymInfo{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}

// ByIconPath returns the AetherDivideGymInfo uniquely identified by IconPath
//
// Error is only non-nil if the source errors out
func (a *AetherDivideGymInfoAccessor) ByIconPath(identifier string) (AetherDivideGymInfo, error) {
	if a._dataIconPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AetherDivideGymInfo{}, err
			}
		}
		a.GroupData()
	}
	return a._dataIconPath[identifier], nil
}

// BySpiritQuest returns the AetherDivideGymInfo uniquely identified by SpiritQuest
//
// Error is only non-nil if the source errors out
func (a *AetherDivideGymInfoAccessor) BySpiritQuest(identifier float64) (AetherDivideGymInfo, error) {
	if a._dataSpiritQuest == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AetherDivideGymInfo{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSpiritQuest[identifier], nil
}

// ByTabIconPath returns the AetherDivideGymInfo uniquely identified by TabIconPath
//
// Error is only non-nil if the source errors out
func (a *AetherDivideGymInfoAccessor) ByTabIconPath(identifier string) (AetherDivideGymInfo, error) {
	if a._dataTabIconPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AetherDivideGymInfo{}, err
			}
		}
		a.GroupData()
	}
	return a._dataTabIconPath[identifier], nil
}

// ByTrainerQuest returns the AetherDivideGymInfo uniquely identified by TrainerQuest
//
// Error is only non-nil if the source errors out
func (a *AetherDivideGymInfoAccessor) ByTrainerQuest(identifier float64) (AetherDivideGymInfo, error) {
	if a._dataTrainerQuest == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AetherDivideGymInfo{}, err
			}
		}
		a.GroupData()
	}
	return a._dataTrainerQuest[identifier], nil
}

// ByUnlockID returns the AetherDivideGymInfo uniquely identified by UnlockID
//
// Error is only non-nil if the source errors out
func (a *AetherDivideGymInfoAccessor) ByUnlockID(identifier float64) (AetherDivideGymInfo, error) {
	if a._dataUnlockID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AetherDivideGymInfo{}, err
			}
		}
		a.GroupData()
	}
	return a._dataUnlockID[identifier], nil
}
