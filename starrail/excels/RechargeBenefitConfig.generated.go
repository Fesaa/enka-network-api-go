package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type RechargeBenefitConfig struct {
	ActivityModuleID float64   `json:"ActivityModuleID"`
	BenefitIDList    []float64 `json:"BenefitIDList"`
	ID               float64   `json:"ID"`
	Type             string    `json:"Type"`
}
type RechargeBenefitConfigAccessor struct {
	_data                 []RechargeBenefitConfig
	_dataActivityModuleID map[float64]RechargeBenefitConfig
	_dataID               map[float64]RechargeBenefitConfig
	_dataType             map[string]RechargeBenefitConfig
}

// LoadData retrieves the data. Must be called before RechargeBenefitConfig.GroupData
func (a *RechargeBenefitConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RechargeBenefitConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RechargeBenefitConfigAccessor) Raw() ([]RechargeBenefitConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RechargeBenefitConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RechargeBenefitConfigAccessor.LoadData to preload everything
func (a *RechargeBenefitConfigAccessor) GroupData() {
	a._dataActivityModuleID = map[float64]RechargeBenefitConfig{}
	a._dataID = map[float64]RechargeBenefitConfig{}
	a._dataType = map[string]RechargeBenefitConfig{}
	for _, d := range a._data {
		a._dataActivityModuleID[d.ActivityModuleID] = d
		a._dataID[d.ID] = d
		a._dataType[d.Type] = d
	}
}

// ByActivityModuleID returns the RechargeBenefitConfig uniquely identified by ActivityModuleID
//
// Error is only non-nil if the source errors out
func (a *RechargeBenefitConfigAccessor) ByActivityModuleID(identifier float64) (RechargeBenefitConfig, error) {
	if a._dataActivityModuleID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RechargeBenefitConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataActivityModuleID[identifier], nil
}

// ByID returns the RechargeBenefitConfig uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *RechargeBenefitConfigAccessor) ByID(identifier float64) (RechargeBenefitConfig, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RechargeBenefitConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}

// ByType returns the RechargeBenefitConfig uniquely identified by Type
//
// Error is only non-nil if the source errors out
func (a *RechargeBenefitConfigAccessor) ByType(identifier string) (RechargeBenefitConfig, error) {
	if a._dataType == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RechargeBenefitConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataType[identifier], nil
}
