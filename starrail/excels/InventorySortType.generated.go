package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type InventorySortType struct {
	SortType     string    `json:"SortType"`
	SortTypeName hash.Hash `json:"SortTypeName"`
}
type InventorySortTypeAccessor struct {
	_data         []InventorySortType
	_dataSortType map[string]InventorySortType
}

// LoadData retrieves the data. Must be called before InventorySortType.GroupData
func (a *InventorySortTypeAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/InventorySortType.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *InventorySortTypeAccessor) Raw() ([]InventorySortType, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []InventorySortType{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with InventorySortTypeAccessor.LoadData to preload everything
func (a *InventorySortTypeAccessor) GroupData() {
	a._dataSortType = map[string]InventorySortType{}
	for _, d := range a._data {
		a._dataSortType[d.SortType] = d
	}
}

// BySortType returns the InventorySortType uniquely identified by SortType
//
// Error is only non-nil if the source errors out
func (a *InventorySortTypeAccessor) BySortType(identifier string) (InventorySortType, error) {
	if a._dataSortType == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return InventorySortType{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSortType[identifier], nil
}
