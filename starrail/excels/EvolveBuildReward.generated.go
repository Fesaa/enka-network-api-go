package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type EvolveBuildReward struct {
	IncomeTarget float64 `json:"IncomeTarget"`
	Level        float64 `json:"Level"`
	RewardID     float64 `json:"RewardID"`
}
type EvolveBuildRewardAccessor struct {
	_data         []EvolveBuildReward
	_dataRewardID map[float64]EvolveBuildReward
}

// LoadData retrieves the data. Must be called before EvolveBuildReward.GroupData
func (a *EvolveBuildRewardAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/EvolveBuildReward.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *EvolveBuildRewardAccessor) Raw() ([]EvolveBuildReward, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []EvolveBuildReward{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with EvolveBuildRewardAccessor.LoadData to preload everything
func (a *EvolveBuildRewardAccessor) GroupData() {
	for _, d := range a._data {
		a._dataRewardID[d.RewardID] = d
	}
}

// ByRewardID returns the EvolveBuildReward uniquely identified by RewardID
//
// Error is only non-nil if the source errors out
func (a *EvolveBuildRewardAccessor) ByRewardID(identifier float64) (EvolveBuildReward, error) {
	if a._dataRewardID == nil {
		err := a.LoadData()
		if err != nil {
			return EvolveBuildReward{}, err
		}
		a.GroupData()
	}
	return a._dataRewardID[identifier], nil
}
