package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type EvolveGearTypeConfig struct {
	FontColor            string `json:"FontColor"`
	ID                   string `json:"ID"`
	MixDetailPropsInfoBg string `json:"MixDetailPropsInfoBg"`
	Name                 string `json:"Name"`
	Season               string `json:"Season"`
	TypeImg              string `json:"TypeImg"`
	TypeImgColor         string `json:"TypeImgColor"`
	WeaponToastEffectBg  string `json:"WeaponToastEffectBg"`
}
type EvolveGearTypeConfigAccessor struct {
	_data                     []EvolveGearTypeConfig
	_dataFontColor            map[string]EvolveGearTypeConfig
	_dataMixDetailPropsInfoBg map[string]EvolveGearTypeConfig
	_dataName                 map[string]EvolveGearTypeConfig
	_dataTypeImgColor         map[string]EvolveGearTypeConfig
	_dataWeaponToastEffectBg  map[string]EvolveGearTypeConfig
}

// LoadData retrieves the data. Must be called before EvolveGearTypeConfig.GroupData
func (a *EvolveGearTypeConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/EvolveGearTypeConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *EvolveGearTypeConfigAccessor) Raw() ([]EvolveGearTypeConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []EvolveGearTypeConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with EvolveGearTypeConfigAccessor.LoadData to preload everything
func (a *EvolveGearTypeConfigAccessor) GroupData() {
	for _, d := range a._data {
		a._dataFontColor[d.FontColor] = d
		a._dataMixDetailPropsInfoBg[d.MixDetailPropsInfoBg] = d
		a._dataName[d.Name] = d
		a._dataTypeImgColor[d.TypeImgColor] = d
		a._dataWeaponToastEffectBg[d.WeaponToastEffectBg] = d
	}
}

// ByFontColor returns the EvolveGearTypeConfig uniquely identified by FontColor
//
// Error is only non-nil if the source errors out
func (a *EvolveGearTypeConfigAccessor) ByFontColor(identifier string) (EvolveGearTypeConfig, error) {
	if a._dataFontColor == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return EvolveGearTypeConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataFontColor[identifier], nil
}

// ByMixDetailPropsInfoBg returns the EvolveGearTypeConfig uniquely identified by MixDetailPropsInfoBg
//
// Error is only non-nil if the source errors out
func (a *EvolveGearTypeConfigAccessor) ByMixDetailPropsInfoBg(identifier string) (EvolveGearTypeConfig, error) {
	if a._dataMixDetailPropsInfoBg == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return EvolveGearTypeConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataMixDetailPropsInfoBg[identifier], nil
}

// ByName returns the EvolveGearTypeConfig uniquely identified by Name
//
// Error is only non-nil if the source errors out
func (a *EvolveGearTypeConfigAccessor) ByName(identifier string) (EvolveGearTypeConfig, error) {
	if a._dataName == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return EvolveGearTypeConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataName[identifier], nil
}

// ByTypeImgColor returns the EvolveGearTypeConfig uniquely identified by TypeImgColor
//
// Error is only non-nil if the source errors out
func (a *EvolveGearTypeConfigAccessor) ByTypeImgColor(identifier string) (EvolveGearTypeConfig, error) {
	if a._dataTypeImgColor == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return EvolveGearTypeConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataTypeImgColor[identifier], nil
}

// ByWeaponToastEffectBg returns the EvolveGearTypeConfig uniquely identified by WeaponToastEffectBg
//
// Error is only non-nil if the source errors out
func (a *EvolveGearTypeConfigAccessor) ByWeaponToastEffectBg(identifier string) (EvolveGearTypeConfig, error) {
	if a._dataWeaponToastEffectBg == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return EvolveGearTypeConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataWeaponToastEffectBg[identifier], nil
}
