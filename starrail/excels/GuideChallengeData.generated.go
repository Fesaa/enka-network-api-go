package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type GuideChallengeData struct {
	ID               float64                              `json:"ID"`
	IconPath         string                               `json:"IconPath"`
	MapEntranceID    float64                              `json:"MapEntranceID"`
	Name             hash.Hash                            `json:"Name"`
	RelatedID        float64                              `json:"RelatedID"`
	TabID            float64                              `json:"TabID"`
	TabIconPath      string                               `json:"TabIconPath"`
	UnlockConditions []GuideChallengeDataUnlockConditions `json:"UnlockConditions"`
}
type GuideChallengeDataUnlockConditions struct {
	Param string `json:"Param"`
	Type  string `json:"Type"`
}
type GuideChallengeDataAccessor struct {
	_data   []GuideChallengeData
	_dataID map[float64]GuideChallengeData
}

// LoadData retrieves the data. Must be called before GuideChallengeData.GroupData
func (a *GuideChallengeDataAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/GuideChallengeData.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *GuideChallengeDataAccessor) Raw() ([]GuideChallengeData, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []GuideChallengeData{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with GuideChallengeDataAccessor.LoadData to preload everything
func (a *GuideChallengeDataAccessor) GroupData() {
	for _, d := range a._data {
		a._dataID[d.ID] = d
	}
}

// ByID returns the GuideChallengeData uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *GuideChallengeDataAccessor) ByID(identifier float64) (GuideChallengeData, error) {
	if a._dataID == nil {
		err := a.LoadData()
		if err != nil {
			return GuideChallengeData{}, err
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}
