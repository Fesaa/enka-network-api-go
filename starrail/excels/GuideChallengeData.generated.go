package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type GuideChallengeData struct {
	ID               json.Number                          `json:"ID"`
	IconPath         string                               `json:"IconPath"`
	MapEntranceID    json.Number                          `json:"MapEntranceID"`
	Name             map[string]json.Number               `json:"Name"`
	RelatedID        json.Number                          `json:"RelatedID"`
	TabID            json.Number                          `json:"TabID"`
	TabIconPath      string                               `json:"TabIconPath"`
	UnlockConditions []GuideChallengeDataUnlockConditions `json:"UnlockConditions"`
}
type GuideChallengeDataUnlockConditions struct {
	Param string `json:"Param"`
	Type  string `json:"Type"`
}
type GuideChallengeDataAccessor struct {
	_data []GuideChallengeData
}

// LoadData retrieves the data. Must be called before GuideChallengeData.GroupData
func (a *GuideChallengeDataAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/GuideChallengeData.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *GuideChallengeDataAccessor) Raw() ([]GuideChallengeData, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []GuideChallengeData{}, err
		}
	}
	return a._data, nil
}
