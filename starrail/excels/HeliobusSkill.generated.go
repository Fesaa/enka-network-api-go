package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type HeliobusSkill struct {
	BGDescription        map[string]json.Number `json:"BGDescription"`
	HeliobusSkillID      json.Number            `json:"HeliobusSkillID"`
	RelatedEventID       json.Number            `json:"RelatedEventID"`
	SkillEffect          string                 `json:"SkillEffect"`
	SkillIconPath        string                 `json:"SkillIconPath"`
	SkillUIPosition      json.Number            `json:"SkillUIPosition"`
	UnlockMissionID      json.Number            `json:"UnlockMissionID"`
	UnlockToastMissionID json.Number            `json:"UnlockToastMissionID"`
}
type HeliobusSkillAccessor struct {
	_data                     []HeliobusSkill
	_dataHeliobusSkillID      map[json.Number]HeliobusSkill
	_dataRelatedEventID       map[json.Number]HeliobusSkill
	_dataSkillIconPath        map[string]HeliobusSkill
	_dataSkillUIPosition      map[json.Number]HeliobusSkill
	_dataUnlockMissionID      map[json.Number]HeliobusSkill
	_dataUnlockToastMissionID map[json.Number]HeliobusSkill
}

// LoadData retrieves the data. Must be called before HeliobusSkill.GroupData
func (a *HeliobusSkillAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/HeliobusSkill.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *HeliobusSkillAccessor) Raw() ([]HeliobusSkill, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []HeliobusSkill{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with HeliobusSkillAccessor.LoadData to preload everything
func (a *HeliobusSkillAccessor) GroupData() {
	a._dataHeliobusSkillID = map[json.Number]HeliobusSkill{}
	a._dataRelatedEventID = map[json.Number]HeliobusSkill{}
	a._dataSkillIconPath = map[string]HeliobusSkill{}
	a._dataSkillUIPosition = map[json.Number]HeliobusSkill{}
	a._dataUnlockMissionID = map[json.Number]HeliobusSkill{}
	a._dataUnlockToastMissionID = map[json.Number]HeliobusSkill{}
	for _, d := range a._data {
		a._dataHeliobusSkillID[d.HeliobusSkillID] = d
		a._dataRelatedEventID[d.RelatedEventID] = d
		a._dataSkillIconPath[d.SkillIconPath] = d
		a._dataSkillUIPosition[d.SkillUIPosition] = d
		a._dataUnlockMissionID[d.UnlockMissionID] = d
		a._dataUnlockToastMissionID[d.UnlockToastMissionID] = d
	}
}

// ByHeliobusSkillID returns the HeliobusSkill uniquely identified by HeliobusSkillID
//
// Error is only non-nil if the source errors out
func (a *HeliobusSkillAccessor) ByHeliobusSkillID(identifier json.Number) (HeliobusSkill, error) {
	if a._dataHeliobusSkillID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return HeliobusSkill{}, err
			}
		}
		a.GroupData()
	}
	return a._dataHeliobusSkillID[identifier], nil
}

// ByRelatedEventID returns the HeliobusSkill uniquely identified by RelatedEventID
//
// Error is only non-nil if the source errors out
func (a *HeliobusSkillAccessor) ByRelatedEventID(identifier json.Number) (HeliobusSkill, error) {
	if a._dataRelatedEventID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return HeliobusSkill{}, err
			}
		}
		a.GroupData()
	}
	return a._dataRelatedEventID[identifier], nil
}

// BySkillIconPath returns the HeliobusSkill uniquely identified by SkillIconPath
//
// Error is only non-nil if the source errors out
func (a *HeliobusSkillAccessor) BySkillIconPath(identifier string) (HeliobusSkill, error) {
	if a._dataSkillIconPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return HeliobusSkill{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSkillIconPath[identifier], nil
}

// BySkillUIPosition returns the HeliobusSkill uniquely identified by SkillUIPosition
//
// Error is only non-nil if the source errors out
func (a *HeliobusSkillAccessor) BySkillUIPosition(identifier json.Number) (HeliobusSkill, error) {
	if a._dataSkillUIPosition == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return HeliobusSkill{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSkillUIPosition[identifier], nil
}

// ByUnlockMissionID returns the HeliobusSkill uniquely identified by UnlockMissionID
//
// Error is only non-nil if the source errors out
func (a *HeliobusSkillAccessor) ByUnlockMissionID(identifier json.Number) (HeliobusSkill, error) {
	if a._dataUnlockMissionID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return HeliobusSkill{}, err
			}
		}
		a.GroupData()
	}
	return a._dataUnlockMissionID[identifier], nil
}

// ByUnlockToastMissionID returns the HeliobusSkill uniquely identified by UnlockToastMissionID
//
// Error is only non-nil if the source errors out
func (a *HeliobusSkillAccessor) ByUnlockToastMissionID(identifier json.Number) (HeliobusSkill, error) {
	if a._dataUnlockToastMissionID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return HeliobusSkill{}, err
			}
		}
		a.GroupData()
	}
	return a._dataUnlockToastMissionID[identifier], nil
}
