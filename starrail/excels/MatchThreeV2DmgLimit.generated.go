package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type MatchThreeV2DmgLimit struct {
	BasicDamage float64 `json:"BasicDamage"`
	MaxDamage   float64 `json:"MaxDamage"`
	Round       float64 `json:"Round"`
}
type MatchThreeV2DmgLimitAccessor struct {
	_data      []MatchThreeV2DmgLimit
	_dataRound map[float64]MatchThreeV2DmgLimit
}

// LoadData retrieves the data. Must be called before MatchThreeV2DmgLimit.GroupData
func (a *MatchThreeV2DmgLimitAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MatchThreeV2DmgLimit.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MatchThreeV2DmgLimitAccessor) Raw() ([]MatchThreeV2DmgLimit, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MatchThreeV2DmgLimit{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MatchThreeV2DmgLimitAccessor.LoadData to preload everything
func (a *MatchThreeV2DmgLimitAccessor) GroupData() {
	a._dataRound = map[float64]MatchThreeV2DmgLimit{}
	for _, d := range a._data {
		a._dataRound[d.Round] = d
	}
}

// ByRound returns the MatchThreeV2DmgLimit uniquely identified by Round
//
// Error is only non-nil if the source errors out
func (a *MatchThreeV2DmgLimitAccessor) ByRound(identifier float64) (MatchThreeV2DmgLimit, error) {
	if a._dataRound == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MatchThreeV2DmgLimit{}, err
			}
		}
		a.GroupData()
	}
	return a._dataRound[identifier], nil
}
