package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type ActivityAvatarPromotion struct {
	AttackAdd         hash.Value                                 `json:"AttackAdd"`
	AttackBase        hash.Value                                 `json:"AttackBase"`
	AvatarID          float64                                    `json:"AvatarID"`
	BaseAggro         hash.Value                                 `json:"BaseAggro"`
	CriticalChance    hash.Value                                 `json:"CriticalChance"`
	CriticalDamage    hash.Value                                 `json:"CriticalDamage"`
	DefenceAdd        hash.Value                                 `json:"DefenceAdd"`
	DefenceBase       hash.Value                                 `json:"DefenceBase"`
	HPAdd             hash.Value                                 `json:"HPAdd"`
	HPBase            hash.Value                                 `json:"HPBase"`
	MaxLevel          float64                                    `json:"MaxLevel"`
	Promotion         float64                                    `json:"Promotion"`
	PromotionCostList []ActivityAvatarPromotionPromotionCostList `json:"PromotionCostList"`
	SpeedBase         hash.Value                                 `json:"SpeedBase"`
}
type ActivityAvatarPromotionPromotionCostList struct {
	ItemID  float64 `json:"ItemID"`
	ItemNum float64 `json:"ItemNum"`
}
type ActivityAvatarPromotionAccessor struct {
	_data []ActivityAvatarPromotion
}

// LoadData retrieves the data. Must be called before ActivityAvatarPromotion.GroupData
func (a *ActivityAvatarPromotionAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ActivityAvatarPromotion.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ActivityAvatarPromotionAccessor) Raw() ([]ActivityAvatarPromotion, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ActivityAvatarPromotion{}, err
		}
	}
	return a._data, nil
}
