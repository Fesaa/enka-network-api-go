package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type ChimeraEmoji struct {
	EmojiID   json.Number `json:"EmojiID"`
	EmojiPath string      `json:"EmojiPath"`
}
type ChimeraEmojiAccessor struct {
	_data          []ChimeraEmoji
	_dataEmojiPath map[string]ChimeraEmoji
}

// LoadData retrieves the data. Must be called before ChimeraEmoji.GroupData
func (a *ChimeraEmojiAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ChimeraEmoji.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ChimeraEmojiAccessor) Raw() ([]ChimeraEmoji, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ChimeraEmoji{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ChimeraEmojiAccessor.LoadData to preload everything
func (a *ChimeraEmojiAccessor) GroupData() {
	a._dataEmojiPath = map[string]ChimeraEmoji{}
	for _, d := range a._data {
		a._dataEmojiPath[d.EmojiPath] = d
	}
}

// ByEmojiPath returns the ChimeraEmoji uniquely identified by EmojiPath
//
// Error is only non-nil if the source errors out
func (a *ChimeraEmojiAccessor) ByEmojiPath(identifier string) (ChimeraEmoji, error) {
	if a._dataEmojiPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ChimeraEmoji{}, err
			}
		}
		a.GroupData()
	}
	return a._dataEmojiPath[identifier], nil
}
