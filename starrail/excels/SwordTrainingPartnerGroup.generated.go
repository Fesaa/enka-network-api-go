package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type SwordTrainingPartnerGroup struct {
	PartnerAbilityDrop    []json.Number `json:"PartnerAbilityDrop"`
	PartnerAbilityGroupID json.Number   `json:"PartnerAbilityGroupID"`
	PartnerAbilityWeight  json.Number   `json:"PartnerAbilityWeight"`
}
type SwordTrainingPartnerGroupAccessor struct {
	_data                      []SwordTrainingPartnerGroup
	_dataPartnerAbilityGroupID map[json.Number]SwordTrainingPartnerGroup
}

// LoadData retrieves the data. Must be called before SwordTrainingPartnerGroup.GroupData
func (a *SwordTrainingPartnerGroupAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/SwordTrainingPartnerGroup.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *SwordTrainingPartnerGroupAccessor) Raw() ([]SwordTrainingPartnerGroup, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []SwordTrainingPartnerGroup{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with SwordTrainingPartnerGroupAccessor.LoadData to preload everything
func (a *SwordTrainingPartnerGroupAccessor) GroupData() {
	a._dataPartnerAbilityGroupID = map[json.Number]SwordTrainingPartnerGroup{}
	for _, d := range a._data {
		a._dataPartnerAbilityGroupID[d.PartnerAbilityGroupID] = d
	}
}

// ByPartnerAbilityGroupID returns the SwordTrainingPartnerGroup uniquely identified by PartnerAbilityGroupID
//
// Error is only non-nil if the source errors out
func (a *SwordTrainingPartnerGroupAccessor) ByPartnerAbilityGroupID(identifier json.Number) (SwordTrainingPartnerGroup, error) {
	if a._dataPartnerAbilityGroupID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return SwordTrainingPartnerGroup{}, err
			}
		}
		a.GroupData()
	}
	return a._dataPartnerAbilityGroupID[identifier], nil
}
