package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type AvatarConfigTrial struct {
	AIPath                    string                        `json:"AIPath"`
	ActionAvatarHeadIconPath  string                        `json:"ActionAvatarHeadIconPath"`
	AdventurePlayerID         float64                       `json:"AdventurePlayerID"`
	AssistBgOffset            []float64                     `json:"AssistBgOffset"`
	AssistOffset              []float64                     `json:"AssistOffset"`
	AvatarBaseType            string                        `json:"AvatarBaseType"`
	AvatarCutinBgImgPath      string                        `json:"AvatarCutinBgImgPath"`
	AvatarCutinFrontImgPath   string                        `json:"AvatarCutinFrontImgPath"`
	AvatarCutinImgPath        string                        `json:"AvatarCutinImgPath"`
	AvatarCutinIntroText      hash.Hash                     `json:"AvatarCutinIntroText"`
	AvatarDropOffset          []float64                     `json:"AvatarDropOffset"`
	AvatarFullName            hash.Hash                     `json:"AvatarFullName"`
	AvatarGachaResultImgPath  string                        `json:"AvatarGachaResultImgPath"`
	AvatarID                  float64                       `json:"AvatarID"`
	AvatarMiniIconPath        string                        `json:"AvatarMiniIconPath"`
	AvatarName                hash.Hash                     `json:"AvatarName"`
	AvatarSelfShowOffset      []float64                     `json:"AvatarSelfShowOffset"`
	AvatarSideIconPath        string                        `json:"AvatarSideIconPath"`
	AvatarTrialOffset         []float64                     `json:"AvatarTrialOffset"`
	AvatarVOTag               string                        `json:"AvatarVOTag"`
	DamageType                string                        `json:"DamageType"`
	DamageTypeResistance      []interface{}                 `json:"DamageTypeResistance"`
	DefaultAvatarHeadIconPath string                        `json:"DefaultAvatarHeadIconPath"`
	DefaultAvatarModelPath    string                        `json:"DefaultAvatarModelPath"`
	ExpGroup                  float64                       `json:"ExpGroup"`
	JsonPath                  string                        `json:"JsonPath"`
	ManikinJsonPath           string                        `json:"ManikinJsonPath"`
	MaxPromotion              float64                       `json:"MaxPromotion"`
	MaxRank                   float64                       `json:"MaxRank"`
	PlayerCardOffset          []float64                     `json:"PlayerCardOffset"`
	RankIDList                []float64                     `json:"RankIDList"`
	Rarity                    string                        `json:"Rarity"`
	Release                   bool                          `json:"Release"`
	RewardList                []AvatarConfigTrialRewardList `json:"RewardList"`
	SPNeed                    hash.IntValue                 `json:"SPNeed"`
	SideAvatarHeadIconPath    string                        `json:"SideAvatarHeadIconPath"`
	SkillList                 []float64                     `json:"SkillList"`
	SkilltreePrefabPath       string                        `json:"SkilltreePrefabPath"`
	UIAvatarModelPath         string                        `json:"UIAvatarModelPath"`
	UltraSkillCutInPrefabPath string                        `json:"UltraSkillCutInPrefabPath"`
	WaitingAvatarHeadIconPath string                        `json:"WaitingAvatarHeadIconPath"`
}
type AvatarConfigTrialRewardList struct {
	ItemID  float64 `json:"ItemID"`
	ItemNum float64 `json:"ItemNum"`
}
type AvatarConfigTrialAccessor struct {
	_data                          []AvatarConfigTrial
	_dataManikinJsonPath           map[string]AvatarConfigTrial
	_dataSideAvatarHeadIconPath    map[string]AvatarConfigTrial
	_dataDefaultAvatarModelPath    map[string]AvatarConfigTrial
	_dataDefaultAvatarHeadIconPath map[string]AvatarConfigTrial
	_dataJsonPath                  map[string]AvatarConfigTrial
	_dataAvatarVOTag               map[string]AvatarConfigTrial
	_dataAvatarID                  map[float64]AvatarConfigTrial
	_dataWaitingAvatarHeadIconPath map[string]AvatarConfigTrial
	_dataUIAvatarModelPath         map[string]AvatarConfigTrial
	_dataDamageType                map[string]AvatarConfigTrial
	_dataAvatarCutinImgPath        map[string]AvatarConfigTrial
	_dataAvatarGachaResultImgPath  map[string]AvatarConfigTrial
	_dataAvatarCutinFrontImgPath   map[string]AvatarConfigTrial
	_dataAdventurePlayerID         map[float64]AvatarConfigTrial
	_dataAvatarSideIconPath        map[string]AvatarConfigTrial
	_dataUltraSkillCutInPrefabPath map[string]AvatarConfigTrial
	_dataActionAvatarHeadIconPath  map[string]AvatarConfigTrial
	_dataAvatarCutinBgImgPath      map[string]AvatarConfigTrial
	_dataAvatarMiniIconPath        map[string]AvatarConfigTrial
}

// LoadData retrieves the data. Must be called before AvatarConfigTrial.GroupData
func (a *AvatarConfigTrialAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/AvatarConfigTrial.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *AvatarConfigTrialAccessor) Raw() ([]AvatarConfigTrial, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []AvatarConfigTrial{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with AvatarConfigTrialAccessor.LoadData to preload everything
func (a *AvatarConfigTrialAccessor) GroupData() {
	for _, d := range a._data {
		a._dataManikinJsonPath[d.ManikinJsonPath] = d
		a._dataSideAvatarHeadIconPath[d.SideAvatarHeadIconPath] = d
		a._dataDefaultAvatarModelPath[d.DefaultAvatarModelPath] = d
		a._dataDefaultAvatarHeadIconPath[d.DefaultAvatarHeadIconPath] = d
		a._dataJsonPath[d.JsonPath] = d
		a._dataAvatarVOTag[d.AvatarVOTag] = d
		a._dataAvatarID[d.AvatarID] = d
		a._dataWaitingAvatarHeadIconPath[d.WaitingAvatarHeadIconPath] = d
		a._dataUIAvatarModelPath[d.UIAvatarModelPath] = d
		a._dataDamageType[d.DamageType] = d
		a._dataAvatarCutinImgPath[d.AvatarCutinImgPath] = d
		a._dataAvatarGachaResultImgPath[d.AvatarGachaResultImgPath] = d
		a._dataAvatarCutinFrontImgPath[d.AvatarCutinFrontImgPath] = d
		a._dataAdventurePlayerID[d.AdventurePlayerID] = d
		a._dataAvatarSideIconPath[d.AvatarSideIconPath] = d
		a._dataUltraSkillCutInPrefabPath[d.UltraSkillCutInPrefabPath] = d
		a._dataActionAvatarHeadIconPath[d.ActionAvatarHeadIconPath] = d
		a._dataAvatarCutinBgImgPath[d.AvatarCutinBgImgPath] = d
		a._dataAvatarMiniIconPath[d.AvatarMiniIconPath] = d
	}
}

// ByManikinJsonPath returns the AvatarConfigTrial uniquely identified by ManikinJsonPath
//
// Error is only non-nil if the source errors out
func (a *AvatarConfigTrialAccessor) ByManikinJsonPath(identifier string) (AvatarConfigTrial, error) {
	if a._dataManikinJsonPath == nil {
		err := a.LoadData()
		if err != nil {
			return AvatarConfigTrial{}, err
		}
		a.GroupData()
	}
	return a._dataManikinJsonPath[identifier], nil
}

// BySideAvatarHeadIconPath returns the AvatarConfigTrial uniquely identified by SideAvatarHeadIconPath
//
// Error is only non-nil if the source errors out
func (a *AvatarConfigTrialAccessor) BySideAvatarHeadIconPath(identifier string) (AvatarConfigTrial, error) {
	if a._dataSideAvatarHeadIconPath == nil {
		err := a.LoadData()
		if err != nil {
			return AvatarConfigTrial{}, err
		}
		a.GroupData()
	}
	return a._dataSideAvatarHeadIconPath[identifier], nil
}

// ByDefaultAvatarModelPath returns the AvatarConfigTrial uniquely identified by DefaultAvatarModelPath
//
// Error is only non-nil if the source errors out
func (a *AvatarConfigTrialAccessor) ByDefaultAvatarModelPath(identifier string) (AvatarConfigTrial, error) {
	if a._dataDefaultAvatarModelPath == nil {
		err := a.LoadData()
		if err != nil {
			return AvatarConfigTrial{}, err
		}
		a.GroupData()
	}
	return a._dataDefaultAvatarModelPath[identifier], nil
}

// ByDefaultAvatarHeadIconPath returns the AvatarConfigTrial uniquely identified by DefaultAvatarHeadIconPath
//
// Error is only non-nil if the source errors out
func (a *AvatarConfigTrialAccessor) ByDefaultAvatarHeadIconPath(identifier string) (AvatarConfigTrial, error) {
	if a._dataDefaultAvatarHeadIconPath == nil {
		err := a.LoadData()
		if err != nil {
			return AvatarConfigTrial{}, err
		}
		a.GroupData()
	}
	return a._dataDefaultAvatarHeadIconPath[identifier], nil
}

// ByJsonPath returns the AvatarConfigTrial uniquely identified by JsonPath
//
// Error is only non-nil if the source errors out
func (a *AvatarConfigTrialAccessor) ByJsonPath(identifier string) (AvatarConfigTrial, error) {
	if a._dataJsonPath == nil {
		err := a.LoadData()
		if err != nil {
			return AvatarConfigTrial{}, err
		}
		a.GroupData()
	}
	return a._dataJsonPath[identifier], nil
}

// ByAvatarVOTag returns the AvatarConfigTrial uniquely identified by AvatarVOTag
//
// Error is only non-nil if the source errors out
func (a *AvatarConfigTrialAccessor) ByAvatarVOTag(identifier string) (AvatarConfigTrial, error) {
	if a._dataAvatarVOTag == nil {
		err := a.LoadData()
		if err != nil {
			return AvatarConfigTrial{}, err
		}
		a.GroupData()
	}
	return a._dataAvatarVOTag[identifier], nil
}

// ByAvatarID returns the AvatarConfigTrial uniquely identified by AvatarID
//
// Error is only non-nil if the source errors out
func (a *AvatarConfigTrialAccessor) ByAvatarID(identifier float64) (AvatarConfigTrial, error) {
	if a._dataAvatarID == nil {
		err := a.LoadData()
		if err != nil {
			return AvatarConfigTrial{}, err
		}
		a.GroupData()
	}
	return a._dataAvatarID[identifier], nil
}

// ByWaitingAvatarHeadIconPath returns the AvatarConfigTrial uniquely identified by WaitingAvatarHeadIconPath
//
// Error is only non-nil if the source errors out
func (a *AvatarConfigTrialAccessor) ByWaitingAvatarHeadIconPath(identifier string) (AvatarConfigTrial, error) {
	if a._dataWaitingAvatarHeadIconPath == nil {
		err := a.LoadData()
		if err != nil {
			return AvatarConfigTrial{}, err
		}
		a.GroupData()
	}
	return a._dataWaitingAvatarHeadIconPath[identifier], nil
}

// ByUIAvatarModelPath returns the AvatarConfigTrial uniquely identified by UIAvatarModelPath
//
// Error is only non-nil if the source errors out
func (a *AvatarConfigTrialAccessor) ByUIAvatarModelPath(identifier string) (AvatarConfigTrial, error) {
	if a._dataUIAvatarModelPath == nil {
		err := a.LoadData()
		if err != nil {
			return AvatarConfigTrial{}, err
		}
		a.GroupData()
	}
	return a._dataUIAvatarModelPath[identifier], nil
}

// ByDamageType returns the AvatarConfigTrial uniquely identified by DamageType
//
// Error is only non-nil if the source errors out
func (a *AvatarConfigTrialAccessor) ByDamageType(identifier string) (AvatarConfigTrial, error) {
	if a._dataDamageType == nil {
		err := a.LoadData()
		if err != nil {
			return AvatarConfigTrial{}, err
		}
		a.GroupData()
	}
	return a._dataDamageType[identifier], nil
}

// ByAvatarCutinImgPath returns the AvatarConfigTrial uniquely identified by AvatarCutinImgPath
//
// Error is only non-nil if the source errors out
func (a *AvatarConfigTrialAccessor) ByAvatarCutinImgPath(identifier string) (AvatarConfigTrial, error) {
	if a._dataAvatarCutinImgPath == nil {
		err := a.LoadData()
		if err != nil {
			return AvatarConfigTrial{}, err
		}
		a.GroupData()
	}
	return a._dataAvatarCutinImgPath[identifier], nil
}

// ByAvatarGachaResultImgPath returns the AvatarConfigTrial uniquely identified by AvatarGachaResultImgPath
//
// Error is only non-nil if the source errors out
func (a *AvatarConfigTrialAccessor) ByAvatarGachaResultImgPath(identifier string) (AvatarConfigTrial, error) {
	if a._dataAvatarGachaResultImgPath == nil {
		err := a.LoadData()
		if err != nil {
			return AvatarConfigTrial{}, err
		}
		a.GroupData()
	}
	return a._dataAvatarGachaResultImgPath[identifier], nil
}

// ByAvatarCutinFrontImgPath returns the AvatarConfigTrial uniquely identified by AvatarCutinFrontImgPath
//
// Error is only non-nil if the source errors out
func (a *AvatarConfigTrialAccessor) ByAvatarCutinFrontImgPath(identifier string) (AvatarConfigTrial, error) {
	if a._dataAvatarCutinFrontImgPath == nil {
		err := a.LoadData()
		if err != nil {
			return AvatarConfigTrial{}, err
		}
		a.GroupData()
	}
	return a._dataAvatarCutinFrontImgPath[identifier], nil
}

// ByAdventurePlayerID returns the AvatarConfigTrial uniquely identified by AdventurePlayerID
//
// Error is only non-nil if the source errors out
func (a *AvatarConfigTrialAccessor) ByAdventurePlayerID(identifier float64) (AvatarConfigTrial, error) {
	if a._dataAdventurePlayerID == nil {
		err := a.LoadData()
		if err != nil {
			return AvatarConfigTrial{}, err
		}
		a.GroupData()
	}
	return a._dataAdventurePlayerID[identifier], nil
}

// ByAvatarSideIconPath returns the AvatarConfigTrial uniquely identified by AvatarSideIconPath
//
// Error is only non-nil if the source errors out
func (a *AvatarConfigTrialAccessor) ByAvatarSideIconPath(identifier string) (AvatarConfigTrial, error) {
	if a._dataAvatarSideIconPath == nil {
		err := a.LoadData()
		if err != nil {
			return AvatarConfigTrial{}, err
		}
		a.GroupData()
	}
	return a._dataAvatarSideIconPath[identifier], nil
}

// ByUltraSkillCutInPrefabPath returns the AvatarConfigTrial uniquely identified by UltraSkillCutInPrefabPath
//
// Error is only non-nil if the source errors out
func (a *AvatarConfigTrialAccessor) ByUltraSkillCutInPrefabPath(identifier string) (AvatarConfigTrial, error) {
	if a._dataUltraSkillCutInPrefabPath == nil {
		err := a.LoadData()
		if err != nil {
			return AvatarConfigTrial{}, err
		}
		a.GroupData()
	}
	return a._dataUltraSkillCutInPrefabPath[identifier], nil
}

// ByActionAvatarHeadIconPath returns the AvatarConfigTrial uniquely identified by ActionAvatarHeadIconPath
//
// Error is only non-nil if the source errors out
func (a *AvatarConfigTrialAccessor) ByActionAvatarHeadIconPath(identifier string) (AvatarConfigTrial, error) {
	if a._dataActionAvatarHeadIconPath == nil {
		err := a.LoadData()
		if err != nil {
			return AvatarConfigTrial{}, err
		}
		a.GroupData()
	}
	return a._dataActionAvatarHeadIconPath[identifier], nil
}

// ByAvatarCutinBgImgPath returns the AvatarConfigTrial uniquely identified by AvatarCutinBgImgPath
//
// Error is only non-nil if the source errors out
func (a *AvatarConfigTrialAccessor) ByAvatarCutinBgImgPath(identifier string) (AvatarConfigTrial, error) {
	if a._dataAvatarCutinBgImgPath == nil {
		err := a.LoadData()
		if err != nil {
			return AvatarConfigTrial{}, err
		}
		a.GroupData()
	}
	return a._dataAvatarCutinBgImgPath[identifier], nil
}

// ByAvatarMiniIconPath returns the AvatarConfigTrial uniquely identified by AvatarMiniIconPath
//
// Error is only non-nil if the source errors out
func (a *AvatarConfigTrialAccessor) ByAvatarMiniIconPath(identifier string) (AvatarConfigTrial, error) {
	if a._dataAvatarMiniIconPath == nil {
		err := a.LoadData()
		if err != nil {
			return AvatarConfigTrial{}, err
		}
		a.GroupData()
	}
	return a._dataAvatarMiniIconPath[identifier], nil
}
