package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type LittleWheelSelectConfig struct {
	GameMode string        `json:"GameMode"`
	Left1    []json.Number `json:"Left1"`
	Left2    []json.Number `json:"Left2"`
	Left3    []json.Number `json:"Left3"`
	Left4    []json.Number `json:"Left4"`
	Right1   []json.Number `json:"Right1"`
	Right2   []json.Number `json:"Right2"`
	Right3   []json.Number `json:"Right3"`
	Right4   []interface{} `json:"Right4"`
}
type LittleWheelSelectConfigAccessor struct {
	_data         []LittleWheelSelectConfig
	_dataGameMode map[string]LittleWheelSelectConfig
}

// LoadData retrieves the data. Must be called before LittleWheelSelectConfig.GroupData
func (a *LittleWheelSelectConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/LittleWheelSelectConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *LittleWheelSelectConfigAccessor) Raw() ([]LittleWheelSelectConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []LittleWheelSelectConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with LittleWheelSelectConfigAccessor.LoadData to preload everything
func (a *LittleWheelSelectConfigAccessor) GroupData() {
	a._dataGameMode = map[string]LittleWheelSelectConfig{}
	for _, d := range a._data {
		a._dataGameMode[d.GameMode] = d
	}
}

// ByGameMode returns the LittleWheelSelectConfig uniquely identified by GameMode
//
// Error is only non-nil if the source errors out
func (a *LittleWheelSelectConfigAccessor) ByGameMode(identifier string) (LittleWheelSelectConfig, error) {
	if a._dataGameMode == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return LittleWheelSelectConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataGameMode[identifier], nil
}
