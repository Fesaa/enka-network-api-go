package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type RogueDLCAdventureRoom struct {
	AdventureType string      `json:"AdventureType"`
	ParamGroupID  json.Number `json:"ParamGroupID"`
	RoomID        json.Number `json:"RoomID"`
}
type RogueDLCAdventureRoomAccessor struct {
	_data       []RogueDLCAdventureRoom
	_dataRoomID map[json.Number]RogueDLCAdventureRoom
}

// LoadData retrieves the data. Must be called before RogueDLCAdventureRoom.GroupData
func (a *RogueDLCAdventureRoomAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueDLCAdventureRoom.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueDLCAdventureRoomAccessor) Raw() ([]RogueDLCAdventureRoom, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueDLCAdventureRoom{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueDLCAdventureRoomAccessor.LoadData to preload everything
func (a *RogueDLCAdventureRoomAccessor) GroupData() {
	a._dataRoomID = map[json.Number]RogueDLCAdventureRoom{}
	for _, d := range a._data {
		a._dataRoomID[d.RoomID] = d
	}
}

// ByRoomID returns the RogueDLCAdventureRoom uniquely identified by RoomID
//
// Error is only non-nil if the source errors out
func (a *RogueDLCAdventureRoomAccessor) ByRoomID(identifier json.Number) (RogueDLCAdventureRoom, error) {
	if a._dataRoomID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueDLCAdventureRoom{}, err
			}
		}
		a.GroupData()
	}
	return a._dataRoomID[identifier], nil
}
