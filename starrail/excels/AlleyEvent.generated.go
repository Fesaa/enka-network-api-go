package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type AlleyEvent struct {
	EventFinishTitle   map[string]json.Number       `json:"EventFinishTitle"`
	EventID            json.Number                  `json:"EventID"`
	EventIcon          string                       `json:"EventIcon"`
	EventNewOrderTips  map[string]json.Number       `json:"EventNewOrderTips"`
	EventPic           string                       `json:"EventPic"`
	EventPriority      json.Number                  `json:"EventPriority"`
	EventShopContent   map[string]json.Number       `json:"EventShopContent"`
	EventShopFinish    map[string]json.Number       `json:"EventShopFinish"`
	EventShopOrder     map[string]json.Number       `json:"EventShopOrder"`
	EventShopTitle     map[string]json.Number       `json:"EventShopTitle"`
	EventTitle         map[string]json.Number       `json:"EventTitle"`
	EventType          string                       `json:"EventType"`
	MapEntranceID      json.Number                  `json:"MapEntranceID"`
	MappingInfoID      json.Number                  `json:"MappingInfoID"`
	RewardID           json.Number                  `json:"RewardID"`
	StartMissionIDList []json.Number                `json:"StartMissionIDList"`
	UnlockConditions   []AlleyEventUnlockConditions `json:"UnlockConditions"`
}
type AlleyEventUnlockConditions struct {
	CAOAPDCCPCA json.Number `json:"CAOAPDCCPCA"`
	PICHIHHCOCB string      `json:"PICHIHHCOCB"`
}
type AlleyEventAccessor struct {
	_data []AlleyEvent
}

// LoadData retrieves the data. Must be called before AlleyEvent.GroupData
func (a *AlleyEventAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/AlleyEvent.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *AlleyEventAccessor) Raw() ([]AlleyEvent, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []AlleyEvent{}, err
		}
	}
	return a._data, nil
}
