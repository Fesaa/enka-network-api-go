package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type MazePuzzleWolfGunPlayLevel struct {
	Description         hash.Hash `json:"Description"`
	GunLevel            float64   `json:"GunLevel"`
	GunMode             string    `json:"GunMode"`
	QuestList           []float64 `json:"QuestList"`
	ShowInUI            bool      `json:"ShowInUI"`
	TargetScore         float64   `json:"TargetScore"`
	Title               hash.Hash `json:"Title"`
	TriggerCustomString string    `json:"TriggerCustomString"`
	UnlockCondition     float64   `json:"UnlockCondition"`
}
type MazePuzzleWolfGunPlayLevelAccessor struct {
	_data                    []MazePuzzleWolfGunPlayLevel
	_dataTriggerCustomString map[string]MazePuzzleWolfGunPlayLevel
}

// LoadData retrieves the data. Must be called before MazePuzzleWolfGunPlayLevel.GroupData
func (a *MazePuzzleWolfGunPlayLevelAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MazePuzzleWolfGunPlayLevel.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MazePuzzleWolfGunPlayLevelAccessor) Raw() ([]MazePuzzleWolfGunPlayLevel, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MazePuzzleWolfGunPlayLevel{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MazePuzzleWolfGunPlayLevelAccessor.LoadData to preload everything
func (a *MazePuzzleWolfGunPlayLevelAccessor) GroupData() {
	for _, d := range a._data {
		a._dataTriggerCustomString[d.TriggerCustomString] = d
	}
}

// ByTriggerCustomString returns the MazePuzzleWolfGunPlayLevel uniquely identified by TriggerCustomString
//
// Error is only non-nil if the source errors out
func (a *MazePuzzleWolfGunPlayLevelAccessor) ByTriggerCustomString(identifier string) (MazePuzzleWolfGunPlayLevel, error) {
	if a._dataTriggerCustomString == nil {
		err := a.LoadData()
		if err != nil {
			return MazePuzzleWolfGunPlayLevel{}, err
		}
		a.GroupData()
	}
	return a._dataTriggerCustomString[identifier], nil
}
