package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type MatchThreePVPScore struct {
	Desc       hash.Hash `json:"Desc"`
	FinishType string    `json:"FinishType"`
	FixedScore float64   `json:"FixedScore"`
	Param1     float64   `json:"Param1"`
	Param2     float64   `json:"Param2"`
	Rarity     string    `json:"Rarity"`
	ScoreID    float64   `json:"ScoreID"`
	Title      hash.Hash `json:"Title"`
	Title2     hash.Hash `json:"Title2"`
	Type       string    `json:"Type"`
}
type MatchThreePVPScoreAccessor struct {
	_data        []MatchThreePVPScore
	_dataScoreID map[float64]MatchThreePVPScore
}

// LoadData retrieves the data. Must be called before MatchThreePVPScore.GroupData
func (a *MatchThreePVPScoreAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MatchThreePVPScore.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MatchThreePVPScoreAccessor) Raw() ([]MatchThreePVPScore, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MatchThreePVPScore{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MatchThreePVPScoreAccessor.LoadData to preload everything
func (a *MatchThreePVPScoreAccessor) GroupData() {
	a._dataScoreID = map[float64]MatchThreePVPScore{}
	for _, d := range a._data {
		a._dataScoreID[d.ScoreID] = d
	}
}

// ByScoreID returns the MatchThreePVPScore uniquely identified by ScoreID
//
// Error is only non-nil if the source errors out
func (a *MatchThreePVPScoreAccessor) ByScoreID(identifier float64) (MatchThreePVPScore, error) {
	if a._dataScoreID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MatchThreePVPScore{}, err
			}
		}
		a.GroupData()
	}
	return a._dataScoreID[identifier], nil
}
