package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type StoryLineFloorData struct {
	ConditionExpression string  `json:"ConditionExpression"`
	DimensionID         float64 `json:"DimensionID"`
	FloorID             float64 `json:"FloorID"`
	StoryLineID         float64 `json:"StoryLineID"`
}
type StoryLineFloorDataAccessor struct {
	_data                    []StoryLineFloorData
	_dataConditionExpression map[string]StoryLineFloorData
}

// LoadData retrieves the data. Must be called before StoryLineFloorData.GroupData
func (a *StoryLineFloorDataAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/StoryLineFloorData.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *StoryLineFloorDataAccessor) Raw() ([]StoryLineFloorData, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []StoryLineFloorData{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with StoryLineFloorDataAccessor.LoadData to preload everything
func (a *StoryLineFloorDataAccessor) GroupData() {
	a._dataConditionExpression = map[string]StoryLineFloorData{}
	for _, d := range a._data {
		a._dataConditionExpression[d.ConditionExpression] = d
	}
}

// ByConditionExpression returns the StoryLineFloorData uniquely identified by ConditionExpression
//
// Error is only non-nil if the source errors out
func (a *StoryLineFloorDataAccessor) ByConditionExpression(identifier string) (StoryLineFloorData, error) {
	if a._dataConditionExpression == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return StoryLineFloorData{}, err
			}
		}
		a.GroupData()
	}
	return a._dataConditionExpression[identifier], nil
}
