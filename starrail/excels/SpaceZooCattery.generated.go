package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type SpaceZooCattery struct {
	CatteryID       float64 `json:"CatteryID"`
	FloorID         float64 `json:"FloorID"`
	NpcGroupID      float64 `json:"NpcGroupID"`
	NpcInstanceID   float64 `json:"NpcInstanceID"`
	UnlockMissionID float64 `json:"UnlockMissionID"`
}
type SpaceZooCatteryAccessor struct {
	_data          []SpaceZooCattery
	_dataCatteryID map[float64]SpaceZooCattery
}

// LoadData retrieves the data. Must be called before SpaceZooCattery.GroupData
func (a *SpaceZooCatteryAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/SpaceZooCattery.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *SpaceZooCatteryAccessor) Raw() ([]SpaceZooCattery, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []SpaceZooCattery{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with SpaceZooCatteryAccessor.LoadData to preload everything
func (a *SpaceZooCatteryAccessor) GroupData() {
	a._dataCatteryID = map[float64]SpaceZooCattery{}
	for _, d := range a._data {
		a._dataCatteryID[d.CatteryID] = d
	}
}

// ByCatteryID returns the SpaceZooCattery uniquely identified by CatteryID
//
// Error is only non-nil if the source errors out
func (a *SpaceZooCatteryAccessor) ByCatteryID(identifier float64) (SpaceZooCattery, error) {
	if a._dataCatteryID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return SpaceZooCattery{}, err
			}
		}
		a.GroupData()
	}
	return a._dataCatteryID[identifier], nil
}
