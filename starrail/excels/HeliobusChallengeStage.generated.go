package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type HeliobusChallengeStage struct {
	BattleAreaGroupID     float64   `json:"BattleAreaGroupID"`
	BattleAreaID          float64   `json:"BattleAreaID"`
	BattleTargetList      []float64 `json:"BattleTargetList"`
	ChallengeDesc         hash.Hash `json:"ChallengeDesc"`
	ChallengeID           float64   `json:"ChallengeID"`
	ChallengeName         hash.Hash `json:"ChallengeName"`
	EventID               float64   `json:"EventID"`
	FloorID               float64   `json:"FloorID"`
	HeliobusChallengeHard float64   `json:"HeliobusChallengeHard"`
	HeliobusMazeBuff      float64   `json:"HeliobusMazeBuff"`
	HeliobusSkillRecList  []float64 `json:"HeliobusSkillRecList"`
	MonsterList           []float64 `json:"MonsterList"`
	PlaneID               float64   `json:"PlaneID"`
	PreChallengeID        float64   `json:"PreChallengeID"`
	RewardID              float64   `json:"RewardID"`
	UnlockPhase           float64   `json:"UnlockPhase"`
}
type HeliobusChallengeStageAccessor struct {
	_data            []HeliobusChallengeStage
	_dataChallengeID map[float64]HeliobusChallengeStage
	_dataEventID     map[float64]HeliobusChallengeStage
}

// LoadData retrieves the data. Must be called before HeliobusChallengeStage.GroupData
func (a *HeliobusChallengeStageAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/HeliobusChallengeStage.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *HeliobusChallengeStageAccessor) Raw() ([]HeliobusChallengeStage, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []HeliobusChallengeStage{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with HeliobusChallengeStageAccessor.LoadData to preload everything
func (a *HeliobusChallengeStageAccessor) GroupData() {
	a._dataChallengeID = map[float64]HeliobusChallengeStage{}
	a._dataEventID = map[float64]HeliobusChallengeStage{}
	for _, d := range a._data {
		a._dataChallengeID[d.ChallengeID] = d
		a._dataEventID[d.EventID] = d
	}
}

// ByChallengeID returns the HeliobusChallengeStage uniquely identified by ChallengeID
//
// Error is only non-nil if the source errors out
func (a *HeliobusChallengeStageAccessor) ByChallengeID(identifier float64) (HeliobusChallengeStage, error) {
	if a._dataChallengeID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return HeliobusChallengeStage{}, err
			}
		}
		a.GroupData()
	}
	return a._dataChallengeID[identifier], nil
}

// ByEventID returns the HeliobusChallengeStage uniquely identified by EventID
//
// Error is only non-nil if the source errors out
func (a *HeliobusChallengeStageAccessor) ByEventID(identifier float64) (HeliobusChallengeStage, error) {
	if a._dataEventID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return HeliobusChallengeStage{}, err
			}
		}
		a.GroupData()
	}
	return a._dataEventID[identifier], nil
}
