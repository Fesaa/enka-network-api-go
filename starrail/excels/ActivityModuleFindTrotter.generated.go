package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type ActivityModuleFindTrotter struct {
	ActivityID         json.Number            `json:"ActivityID"`
	ActivityModuleID   json.Number            `json:"ActivityModuleID"`
	Aim01              map[string]json.Number `json:"Aim01"`
	Aim02              map[string]json.Number `json:"Aim02"`
	FinishSubMissionID json.Number            `json:"FinishSubMissionID"`
	MissionID          json.Number            `json:"MissionID"`
	Order              json.Number            `json:"Order"`
	Result01           map[string]json.Number `json:"Result01"`
	Result02           map[string]json.Number `json:"Result02"`
	RewardQuestID      json.Number            `json:"RewardQuestID"`
	StartSubMissionID  json.Number            `json:"StartSubMissionID"`
	Title              map[string]json.Number `json:"Title"`
}
type ActivityModuleFindTrotterAccessor struct {
	_data                   []ActivityModuleFindTrotter
	_dataActivityModuleID   map[json.Number]ActivityModuleFindTrotter
	_dataFinishSubMissionID map[json.Number]ActivityModuleFindTrotter
	_dataMissionID          map[json.Number]ActivityModuleFindTrotter
	_dataOrder              map[json.Number]ActivityModuleFindTrotter
	_dataRewardQuestID      map[json.Number]ActivityModuleFindTrotter
	_dataStartSubMissionID  map[json.Number]ActivityModuleFindTrotter
}

// LoadData retrieves the data. Must be called before ActivityModuleFindTrotter.GroupData
func (a *ActivityModuleFindTrotterAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ActivityModuleFindTrotter.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ActivityModuleFindTrotterAccessor) Raw() ([]ActivityModuleFindTrotter, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ActivityModuleFindTrotter{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ActivityModuleFindTrotterAccessor.LoadData to preload everything
func (a *ActivityModuleFindTrotterAccessor) GroupData() {
	a._dataActivityModuleID = map[json.Number]ActivityModuleFindTrotter{}
	a._dataFinishSubMissionID = map[json.Number]ActivityModuleFindTrotter{}
	a._dataMissionID = map[json.Number]ActivityModuleFindTrotter{}
	a._dataOrder = map[json.Number]ActivityModuleFindTrotter{}
	a._dataRewardQuestID = map[json.Number]ActivityModuleFindTrotter{}
	a._dataStartSubMissionID = map[json.Number]ActivityModuleFindTrotter{}
	for _, d := range a._data {
		a._dataActivityModuleID[d.ActivityModuleID] = d
		a._dataFinishSubMissionID[d.FinishSubMissionID] = d
		a._dataMissionID[d.MissionID] = d
		a._dataOrder[d.Order] = d
		a._dataRewardQuestID[d.RewardQuestID] = d
		a._dataStartSubMissionID[d.StartSubMissionID] = d
	}
}

// ByActivityModuleID returns the ActivityModuleFindTrotter uniquely identified by ActivityModuleID
//
// Error is only non-nil if the source errors out
func (a *ActivityModuleFindTrotterAccessor) ByActivityModuleID(identifier json.Number) (ActivityModuleFindTrotter, error) {
	if a._dataActivityModuleID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityModuleFindTrotter{}, err
			}
		}
		a.GroupData()
	}
	return a._dataActivityModuleID[identifier], nil
}

// ByFinishSubMissionID returns the ActivityModuleFindTrotter uniquely identified by FinishSubMissionID
//
// Error is only non-nil if the source errors out
func (a *ActivityModuleFindTrotterAccessor) ByFinishSubMissionID(identifier json.Number) (ActivityModuleFindTrotter, error) {
	if a._dataFinishSubMissionID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityModuleFindTrotter{}, err
			}
		}
		a.GroupData()
	}
	return a._dataFinishSubMissionID[identifier], nil
}

// ByMissionID returns the ActivityModuleFindTrotter uniquely identified by MissionID
//
// Error is only non-nil if the source errors out
func (a *ActivityModuleFindTrotterAccessor) ByMissionID(identifier json.Number) (ActivityModuleFindTrotter, error) {
	if a._dataMissionID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityModuleFindTrotter{}, err
			}
		}
		a.GroupData()
	}
	return a._dataMissionID[identifier], nil
}

// ByOrder returns the ActivityModuleFindTrotter uniquely identified by Order
//
// Error is only non-nil if the source errors out
func (a *ActivityModuleFindTrotterAccessor) ByOrder(identifier json.Number) (ActivityModuleFindTrotter, error) {
	if a._dataOrder == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityModuleFindTrotter{}, err
			}
		}
		a.GroupData()
	}
	return a._dataOrder[identifier], nil
}

// ByRewardQuestID returns the ActivityModuleFindTrotter uniquely identified by RewardQuestID
//
// Error is only non-nil if the source errors out
func (a *ActivityModuleFindTrotterAccessor) ByRewardQuestID(identifier json.Number) (ActivityModuleFindTrotter, error) {
	if a._dataRewardQuestID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityModuleFindTrotter{}, err
			}
		}
		a.GroupData()
	}
	return a._dataRewardQuestID[identifier], nil
}

// ByStartSubMissionID returns the ActivityModuleFindTrotter uniquely identified by StartSubMissionID
//
// Error is only non-nil if the source errors out
func (a *ActivityModuleFindTrotterAccessor) ByStartSubMissionID(identifier json.Number) (ActivityModuleFindTrotter, error) {
	if a._dataStartSubMissionID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityModuleFindTrotter{}, err
			}
		}
		a.GroupData()
	}
	return a._dataStartSubMissionID[identifier], nil
}
