package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type ActivityModuleFindTrotter struct {
	ActivityID         json.Number            `json:"ActivityID"`
	ActivityModuleID   json.Number            `json:"ActivityModuleID"`
	Aim01              map[string]json.Number `json:"Aim01"`
	Aim02              map[string]json.Number `json:"Aim02"`
	FinishSubMissionID json.Number            `json:"FinishSubMissionID"`
	MissionID          json.Number            `json:"MissionID"`
	Order              json.Number            `json:"Order"`
	Result01           map[string]json.Number `json:"Result01"`
	Result02           map[string]json.Number `json:"Result02"`
	RewardQuestID      json.Number            `json:"RewardQuestID"`
	StartSubMissionID  json.Number            `json:"StartSubMissionID"`
	Title              map[string]json.Number `json:"Title"`
}
type ActivityModuleFindTrotterAccessor struct {
	_data []ActivityModuleFindTrotter
}

// LoadData retrieves the data. Must be called before ActivityModuleFindTrotter.GroupData
func (a *ActivityModuleFindTrotterAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ActivityModuleFindTrotter.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ActivityModuleFindTrotterAccessor) Raw() ([]ActivityModuleFindTrotter, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ActivityModuleFindTrotter{}, err
		}
	}
	return a._data, nil
}
