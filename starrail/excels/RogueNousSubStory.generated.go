package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type RogueNousSubStory struct {
	DisplayID        []float64 `json:"DisplayID"`
	Layer            float64   `json:"Layer"`
	LevelGraphPath   string    `json:"LevelGraphPath"`
	MaxNousValue     float64   `json:"MaxNousValue"`
	MinNousValue     float64   `json:"MinNousValue"`
	NextIDList       []float64 `json:"NextIDList"`
	QuestID          float64   `json:"QuestID"`
	RequireArea      float64   `json:"RequireArea"`
	StoryID          float64   `json:"StoryID"`
	TalkNameID       float64   `json:"TalkNameID"`
	TriggerCondition hash.Hash `json:"TriggerCondition"`
}
type RogueNousSubStoryAccessor struct {
	_data               []RogueNousSubStory
	_dataLevelGraphPath map[string]RogueNousSubStory
	_dataQuestID        map[float64]RogueNousSubStory
	_dataStoryID        map[float64]RogueNousSubStory
	_dataTalkNameID     map[float64]RogueNousSubStory
}

// LoadData retrieves the data. Must be called before RogueNousSubStory.GroupData
func (a *RogueNousSubStoryAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueNousSubStory.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueNousSubStoryAccessor) Raw() ([]RogueNousSubStory, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueNousSubStory{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueNousSubStoryAccessor.LoadData to preload everything
func (a *RogueNousSubStoryAccessor) GroupData() {
	a._dataLevelGraphPath = map[string]RogueNousSubStory{}
	a._dataQuestID = map[float64]RogueNousSubStory{}
	a._dataStoryID = map[float64]RogueNousSubStory{}
	a._dataTalkNameID = map[float64]RogueNousSubStory{}
	for _, d := range a._data {
		a._dataLevelGraphPath[d.LevelGraphPath] = d
		a._dataQuestID[d.QuestID] = d
		a._dataStoryID[d.StoryID] = d
		a._dataTalkNameID[d.TalkNameID] = d
	}
}

// ByLevelGraphPath returns the RogueNousSubStory uniquely identified by LevelGraphPath
//
// Error is only non-nil if the source errors out
func (a *RogueNousSubStoryAccessor) ByLevelGraphPath(identifier string) (RogueNousSubStory, error) {
	if a._dataLevelGraphPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueNousSubStory{}, err
			}
		}
		a.GroupData()
	}
	return a._dataLevelGraphPath[identifier], nil
}

// ByQuestID returns the RogueNousSubStory uniquely identified by QuestID
//
// Error is only non-nil if the source errors out
func (a *RogueNousSubStoryAccessor) ByQuestID(identifier float64) (RogueNousSubStory, error) {
	if a._dataQuestID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueNousSubStory{}, err
			}
		}
		a.GroupData()
	}
	return a._dataQuestID[identifier], nil
}

// ByStoryID returns the RogueNousSubStory uniquely identified by StoryID
//
// Error is only non-nil if the source errors out
func (a *RogueNousSubStoryAccessor) ByStoryID(identifier float64) (RogueNousSubStory, error) {
	if a._dataStoryID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueNousSubStory{}, err
			}
		}
		a.GroupData()
	}
	return a._dataStoryID[identifier], nil
}

// ByTalkNameID returns the RogueNousSubStory uniquely identified by TalkNameID
//
// Error is only non-nil if the source errors out
func (a *RogueNousSubStoryAccessor) ByTalkNameID(identifier float64) (RogueNousSubStory, error) {
	if a._dataTalkNameID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueNousSubStory{}, err
			}
		}
		a.GroupData()
	}
	return a._dataTalkNameID[identifier], nil
}
