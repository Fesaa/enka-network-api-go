package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type MonopolyEventEffect struct {
	EffectID  float64   `json:"EffectID"`
	Type      string    `json:"Type"`
	TypeParam []float64 `json:"TypeParam"`
}
type MonopolyEventEffectAccessor struct {
	_data         []MonopolyEventEffect
	_dataEffectID map[float64]MonopolyEventEffect
}

// LoadData retrieves the data. Must be called before MonopolyEventEffect.GroupData
func (a *MonopolyEventEffectAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MonopolyEventEffect.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MonopolyEventEffectAccessor) Raw() ([]MonopolyEventEffect, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MonopolyEventEffect{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MonopolyEventEffectAccessor.LoadData to preload everything
func (a *MonopolyEventEffectAccessor) GroupData() {
	for _, d := range a._data {
		a._dataEffectID[d.EffectID] = d
	}
}

// ByEffectID returns the MonopolyEventEffect uniquely identified by EffectID
//
// Error is only non-nil if the source errors out
func (a *MonopolyEventEffectAccessor) ByEffectID(identifier float64) (MonopolyEventEffect, error) {
	if a._dataEffectID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MonopolyEventEffect{}, err
			}
		}
		a.GroupData()
	}
	return a._dataEffectID[identifier], nil
}
