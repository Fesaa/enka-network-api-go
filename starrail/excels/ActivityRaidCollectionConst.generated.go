package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type ActivityRaidCollectionConst struct {
	ConstValueName string                 `json:"ConstValueName"`
	Value          map[string]json.Number `json:"Value"`
}
type ActivityRaidCollectionConstAccessor struct {
	_data               []ActivityRaidCollectionConst
	_dataConstValueName map[string]ActivityRaidCollectionConst
}

// LoadData retrieves the data. Must be called before ActivityRaidCollectionConst.GroupData
func (a *ActivityRaidCollectionConstAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ActivityRaidCollectionConst.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ActivityRaidCollectionConstAccessor) Raw() ([]ActivityRaidCollectionConst, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ActivityRaidCollectionConst{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ActivityRaidCollectionConstAccessor.LoadData to preload everything
func (a *ActivityRaidCollectionConstAccessor) GroupData() {
	a._dataConstValueName = map[string]ActivityRaidCollectionConst{}
	for _, d := range a._data {
		a._dataConstValueName[d.ConstValueName] = d
	}
}

// ByConstValueName returns the ActivityRaidCollectionConst uniquely identified by ConstValueName
//
// Error is only non-nil if the source errors out
func (a *ActivityRaidCollectionConstAccessor) ByConstValueName(identifier string) (ActivityRaidCollectionConst, error) {
	if a._dataConstValueName == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityRaidCollectionConst{}, err
			}
		}
		a.GroupData()
	}
	return a._dataConstValueName[identifier], nil
}
