package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type MazeCampData struct {
	CampID          string    `json:"CampID"`
	HostileCampList []float64 `json:"HostileCampList"`
}
type MazeCampDataAccessor struct {
	_data       []MazeCampData
	_dataCampID map[string]MazeCampData
}

// LoadData retrieves the data. Must be called before MazeCampData.GroupData
func (a *MazeCampDataAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MazeCampData.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MazeCampDataAccessor) Raw() ([]MazeCampData, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MazeCampData{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MazeCampDataAccessor.LoadData to preload everything
func (a *MazeCampDataAccessor) GroupData() {
	a._dataCampID = map[string]MazeCampData{}
	for _, d := range a._data {
		a._dataCampID[d.CampID] = d
	}
}

// ByCampID returns the MazeCampData uniquely identified by CampID
//
// Error is only non-nil if the source errors out
func (a *MazeCampDataAccessor) ByCampID(identifier string) (MazeCampData, error) {
	if a._dataCampID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MazeCampData{}, err
			}
		}
		a.GroupData()
	}
	return a._dataCampID[identifier], nil
}
