package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type DrinkMakerTagCombination struct {
	ExcludeTags      []float64 `json:"ExcludeTags"`
	HintIconType     string    `json:"HintIconType"`
	HintStr          string    `json:"HintStr"`
	IncludeTags      []float64 `json:"IncludeTags"`
	TagCombinationID float64   `json:"TagCombinationID"`
	TagRequestDesc   hash.Hash `json:"TagRequestDesc"`
}
type DrinkMakerTagCombinationAccessor struct {
	_data                 []DrinkMakerTagCombination
	_dataTagCombinationID map[float64]DrinkMakerTagCombination
}

// LoadData retrieves the data. Must be called before DrinkMakerTagCombination.GroupData
func (a *DrinkMakerTagCombinationAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/DrinkMakerTagCombination.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *DrinkMakerTagCombinationAccessor) Raw() ([]DrinkMakerTagCombination, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []DrinkMakerTagCombination{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with DrinkMakerTagCombinationAccessor.LoadData to preload everything
func (a *DrinkMakerTagCombinationAccessor) GroupData() {
	for _, d := range a._data {
		a._dataTagCombinationID[d.TagCombinationID] = d
	}
}

// ByTagCombinationID returns the DrinkMakerTagCombination uniquely identified by TagCombinationID
//
// Error is only non-nil if the source errors out
func (a *DrinkMakerTagCombinationAccessor) ByTagCombinationID(identifier float64) (DrinkMakerTagCombination, error) {
	if a._dataTagCombinationID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return DrinkMakerTagCombination{}, err
			}
		}
		a.GroupData()
	}
	return a._dataTagCombinationID[identifier], nil
}
