package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type RelicSubAffixBaseValue struct {
	BaseValue     float64 `json:"BaseValue"`
	RelicSubAffix string  `json:"RelicSubAffix"`
	Type          string  `json:"Type"`
}
type RelicSubAffixBaseValueAccessor struct {
	_data              []RelicSubAffixBaseValue
	_dataRelicSubAffix map[string]RelicSubAffixBaseValue
}

// LoadData retrieves the data. Must be called before RelicSubAffixBaseValue.GroupData
func (a *RelicSubAffixBaseValueAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RelicSubAffixBaseValue.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RelicSubAffixBaseValueAccessor) Raw() ([]RelicSubAffixBaseValue, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RelicSubAffixBaseValue{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RelicSubAffixBaseValueAccessor.LoadData to preload everything
func (a *RelicSubAffixBaseValueAccessor) GroupData() {
	for _, d := range a._data {
		a._dataRelicSubAffix[d.RelicSubAffix] = d
	}
}

// ByRelicSubAffix returns the RelicSubAffixBaseValue uniquely identified by RelicSubAffix
//
// Error is only non-nil if the source errors out
func (a *RelicSubAffixBaseValueAccessor) ByRelicSubAffix(identifier string) (RelicSubAffixBaseValue, error) {
	if a._dataRelicSubAffix == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RelicSubAffixBaseValue{}, err
			}
		}
		a.GroupData()
	}
	return a._dataRelicSubAffix[identifier], nil
}
