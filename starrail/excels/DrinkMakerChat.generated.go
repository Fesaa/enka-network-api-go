package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type DrinkMakerChat struct {
	ChatID            float64 `json:"ChatID"`
	FailNextChatID    float64 `json:"FailNextChatID"`
	PerformanceID     float64 `json:"PerformanceID"`
	RequestID         float64 `json:"RequestID"`
	SuccessNextChatID float64 `json:"SuccessNextChatID"`
}
type DrinkMakerChatAccessor struct {
	_data              []DrinkMakerChat
	_dataChatID        map[float64]DrinkMakerChat
	_dataPerformanceID map[float64]DrinkMakerChat
}

// LoadData retrieves the data. Must be called before DrinkMakerChat.GroupData
func (a *DrinkMakerChatAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/DrinkMakerChat.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *DrinkMakerChatAccessor) Raw() ([]DrinkMakerChat, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []DrinkMakerChat{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with DrinkMakerChatAccessor.LoadData to preload everything
func (a *DrinkMakerChatAccessor) GroupData() {
	a._dataChatID = map[float64]DrinkMakerChat{}
	a._dataPerformanceID = map[float64]DrinkMakerChat{}
	for _, d := range a._data {
		a._dataChatID[d.ChatID] = d
		a._dataPerformanceID[d.PerformanceID] = d
	}
}

// ByChatID returns the DrinkMakerChat uniquely identified by ChatID
//
// Error is only non-nil if the source errors out
func (a *DrinkMakerChatAccessor) ByChatID(identifier float64) (DrinkMakerChat, error) {
	if a._dataChatID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return DrinkMakerChat{}, err
			}
		}
		a.GroupData()
	}
	return a._dataChatID[identifier], nil
}

// ByPerformanceID returns the DrinkMakerChat uniquely identified by PerformanceID
//
// Error is only non-nil if the source errors out
func (a *DrinkMakerChatAccessor) ByPerformanceID(identifier float64) (DrinkMakerChat, error) {
	if a._dataPerformanceID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return DrinkMakerChat{}, err
			}
		}
		a.GroupData()
	}
	return a._dataPerformanceID[identifier], nil
}
