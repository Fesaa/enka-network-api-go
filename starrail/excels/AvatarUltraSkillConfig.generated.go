package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type AvatarUltraSkillConfig struct {
	AvatarID               json.Number            `json:"AvatarID"`
	UltraSkillResourcePath string                 `json:"UltraSkillResourcePath"`
	UltraSkillType         string                 `json:"UltraSkillType"`
	UltraSkillUse          map[string]json.Number `json:"UltraSkillUse"`
}
type AvatarUltraSkillConfigAccessor struct {
	_data                       []AvatarUltraSkillConfig
	_dataAvatarID               map[json.Number]AvatarUltraSkillConfig
	_dataUltraSkillResourcePath map[string]AvatarUltraSkillConfig
}

// LoadData retrieves the data. Must be called before AvatarUltraSkillConfig.GroupData
func (a *AvatarUltraSkillConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/AvatarUltraSkillConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *AvatarUltraSkillConfigAccessor) Raw() ([]AvatarUltraSkillConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []AvatarUltraSkillConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with AvatarUltraSkillConfigAccessor.LoadData to preload everything
func (a *AvatarUltraSkillConfigAccessor) GroupData() {
	a._dataAvatarID = map[json.Number]AvatarUltraSkillConfig{}
	a._dataUltraSkillResourcePath = map[string]AvatarUltraSkillConfig{}
	for _, d := range a._data {
		a._dataAvatarID[d.AvatarID] = d
		a._dataUltraSkillResourcePath[d.UltraSkillResourcePath] = d
	}
}

// ByAvatarID returns the AvatarUltraSkillConfig uniquely identified by AvatarID
//
// Error is only non-nil if the source errors out
func (a *AvatarUltraSkillConfigAccessor) ByAvatarID(identifier json.Number) (AvatarUltraSkillConfig, error) {
	if a._dataAvatarID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AvatarUltraSkillConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataAvatarID[identifier], nil
}

// ByUltraSkillResourcePath returns the AvatarUltraSkillConfig uniquely identified by UltraSkillResourcePath
//
// Error is only non-nil if the source errors out
func (a *AvatarUltraSkillConfigAccessor) ByUltraSkillResourcePath(identifier string) (AvatarUltraSkillConfig, error) {
	if a._dataUltraSkillResourcePath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AvatarUltraSkillConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataUltraSkillResourcePath[identifier], nil
}
