package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type MainMissionType struct {
	IconMapConnect   json.Number            `json:"IconMapConnect"`
	IconMapOptional  json.Number            `json:"IconMapOptional"`
	IconMapStarted   json.Number            `json:"IconMapStarted"`
	IconMapToTake    json.Number            `json:"IconMapToTake"`
	IsDelete         bool                   `json:"IsDelete"`
	IsShowRedDot     bool                   `json:"IsShowRedDot"`
	MenuItemIcon     string                 `json:"MenuItemIcon"`
	Type             string                 `json:"Type"`
	TypeChapterColor string                 `json:"TypeChapterColor"`
	TypeColor        string                 `json:"TypeColor"`
	TypeIcon         string                 `json:"TypeIcon"`
	TypeIconMini     string                 `json:"TypeIconMini"`
	TypeName         map[string]json.Number `json:"TypeName"`
	TypePriority     json.Number            `json:"TypePriority"`
	WaypointIconType json.Number            `json:"WaypointIconType"`
}
type MainMissionTypeAccessor struct {
	_data                 []MainMissionType
	_dataTypeChapterColor map[string]MainMissionType
	_dataTypeColor        map[string]MainMissionType
	_dataTypeIcon         map[string]MainMissionType
	_dataTypeIconMini     map[string]MainMissionType
	_dataTypePriority     map[json.Number]MainMissionType
}

// LoadData retrieves the data. Must be called before MainMissionType.GroupData
func (a *MainMissionTypeAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MainMissionType.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MainMissionTypeAccessor) Raw() ([]MainMissionType, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MainMissionType{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MainMissionTypeAccessor.LoadData to preload everything
func (a *MainMissionTypeAccessor) GroupData() {
	a._dataTypeChapterColor = map[string]MainMissionType{}
	a._dataTypeColor = map[string]MainMissionType{}
	a._dataTypeIcon = map[string]MainMissionType{}
	a._dataTypeIconMini = map[string]MainMissionType{}
	a._dataTypePriority = map[json.Number]MainMissionType{}
	for _, d := range a._data {
		a._dataTypeChapterColor[d.TypeChapterColor] = d
		a._dataTypeColor[d.TypeColor] = d
		a._dataTypeIcon[d.TypeIcon] = d
		a._dataTypeIconMini[d.TypeIconMini] = d
		a._dataTypePriority[d.TypePriority] = d
	}
}

// ByTypeChapterColor returns the MainMissionType uniquely identified by TypeChapterColor
//
// Error is only non-nil if the source errors out
func (a *MainMissionTypeAccessor) ByTypeChapterColor(identifier string) (MainMissionType, error) {
	if a._dataTypeChapterColor == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MainMissionType{}, err
			}
		}
		a.GroupData()
	}
	return a._dataTypeChapterColor[identifier], nil
}

// ByTypeColor returns the MainMissionType uniquely identified by TypeColor
//
// Error is only non-nil if the source errors out
func (a *MainMissionTypeAccessor) ByTypeColor(identifier string) (MainMissionType, error) {
	if a._dataTypeColor == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MainMissionType{}, err
			}
		}
		a.GroupData()
	}
	return a._dataTypeColor[identifier], nil
}

// ByTypeIcon returns the MainMissionType uniquely identified by TypeIcon
//
// Error is only non-nil if the source errors out
func (a *MainMissionTypeAccessor) ByTypeIcon(identifier string) (MainMissionType, error) {
	if a._dataTypeIcon == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MainMissionType{}, err
			}
		}
		a.GroupData()
	}
	return a._dataTypeIcon[identifier], nil
}

// ByTypeIconMini returns the MainMissionType uniquely identified by TypeIconMini
//
// Error is only non-nil if the source errors out
func (a *MainMissionTypeAccessor) ByTypeIconMini(identifier string) (MainMissionType, error) {
	if a._dataTypeIconMini == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MainMissionType{}, err
			}
		}
		a.GroupData()
	}
	return a._dataTypeIconMini[identifier], nil
}

// ByTypePriority returns the MainMissionType uniquely identified by TypePriority
//
// Error is only non-nil if the source errors out
func (a *MainMissionTypeAccessor) ByTypePriority(identifier json.Number) (MainMissionType, error) {
	if a._dataTypePriority == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MainMissionType{}, err
			}
		}
		a.GroupData()
	}
	return a._dataTypePriority[identifier], nil
}
