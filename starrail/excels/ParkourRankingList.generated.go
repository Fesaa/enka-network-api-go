package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type ParkourRankingList struct {
	LevelBestRecordList []ParkourRankingListLevelBestRecordList `json:"LevelBestRecordList"`
	NPCIconPath         string                                  `json:"NPCIconPath"`
	NPCName             hash.Hash                               `json:"NPCName"`
	RailBallID          float64                                 `json:"RailBallID"`
}
type ParkourRankingListLevelBestRecordList struct {
	HJEJFNFAMPN float64 `json:"HJEJFNFAMPN"`
	LKBLPGHKBDA float64 `json:"LKBLPGHKBDA"`
}
type ParkourRankingListAccessor struct {
	_data           []ParkourRankingList
	_dataRailBallID map[float64]ParkourRankingList
}

// LoadData retrieves the data. Must be called before ParkourRankingList.GroupData
func (a *ParkourRankingListAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ParkourRankingList.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ParkourRankingListAccessor) Raw() ([]ParkourRankingList, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ParkourRankingList{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ParkourRankingListAccessor.LoadData to preload everything
func (a *ParkourRankingListAccessor) GroupData() {
	a._dataRailBallID = map[float64]ParkourRankingList{}
	for _, d := range a._data {
		a._dataRailBallID[d.RailBallID] = d
	}
}

// ByRailBallID returns the ParkourRankingList uniquely identified by RailBallID
//
// Error is only non-nil if the source errors out
func (a *ParkourRankingListAccessor) ByRailBallID(identifier float64) (ParkourRankingList, error) {
	if a._dataRailBallID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ParkourRankingList{}, err
			}
		}
		a.GroupData()
	}
	return a._dataRailBallID[identifier], nil
}
