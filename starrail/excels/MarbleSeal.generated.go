package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type MarbleSeal struct {
	ActionPriority         float64   `json:"ActionPriority"`
	AiStrategyID           float64   `json:"AiStrategyID"`
	Attack                 float64   `json:"Attack"`
	BuffIDList             []float64 `json:"BuffIDList"`
	CommonTalkIDList       []float64 `json:"CommonTalkIDList"`
	Desc                   string    `json:"Desc"`
	EnemyIconPath          string    `json:"EnemyIconPath"`
	Hp                     float64   `json:"Hp"`
	ID                     float64   `json:"ID"`
	IconPath               string    `json:"IconPath"`
	IsShow                 bool      `json:"IsShow"`
	LevelUpPriority        float64   `json:"LevelUpPriority"`
	Mass                   float64   `json:"Mass"`
	MaxSpeed               float64   `json:"MaxSpeed"`
	Name                   string    `json:"Name"`
	PrefabPath             string    `json:"PrefabPath"`
	Price                  float64   `json:"Price"`
	ShopTalkID             float64   `json:"ShopTalkID"`
	Size                   float64   `json:"Size"`
	SmallEnemyIconPath     string    `json:"SmallEnemyIconPath"`
	SmallIconPath          string    `json:"SmallIconPath"`
	UnlockBuySubMissionID  float64   `json:"UnlockBuySubMissionID"`
	UnlockHint             hash.Hash `json:"UnlockHint"`
	UnlockShowSubMissionID float64   `json:"UnlockShowSubMissionID"`
	UnlockSubMissionID     float64   `json:"UnlockSubMissionID"`
	VideoID                float64   `json:"VideoID"`
	VoiceType              string    `json:"VoiceType"`
}
type MarbleSealAccessor struct {
	_data     []MarbleSeal
	_dataID   map[float64]MarbleSeal
	_dataName map[string]MarbleSeal
}

// LoadData retrieves the data. Must be called before MarbleSeal.GroupData
func (a *MarbleSealAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MarbleSeal.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MarbleSealAccessor) Raw() ([]MarbleSeal, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MarbleSeal{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MarbleSealAccessor.LoadData to preload everything
func (a *MarbleSealAccessor) GroupData() {
	a._dataID = map[float64]MarbleSeal{}
	a._dataName = map[string]MarbleSeal{}
	for _, d := range a._data {
		a._dataID[d.ID] = d
		a._dataName[d.Name] = d
	}
}

// ByID returns the MarbleSeal uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *MarbleSealAccessor) ByID(identifier float64) (MarbleSeal, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MarbleSeal{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}

// ByName returns the MarbleSeal uniquely identified by Name
//
// Error is only non-nil if the source errors out
func (a *MarbleSealAccessor) ByName(identifier string) (MarbleSeal, error) {
	if a._dataName == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MarbleSeal{}, err
			}
		}
		a.GroupData()
	}
	return a._dataName[identifier], nil
}
