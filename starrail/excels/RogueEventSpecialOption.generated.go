package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type RogueEventSpecialOption struct {
	AeonFigure      string  `json:"AeonFigure"`
	AeonIcon        string  `json:"AeonIcon"`
	SpecialOptionID float64 `json:"SpecialOptionID"`
}
type RogueEventSpecialOptionAccessor struct {
	_data                []RogueEventSpecialOption
	_dataAeonFigure      map[string]RogueEventSpecialOption
	_dataAeonIcon        map[string]RogueEventSpecialOption
	_dataSpecialOptionID map[float64]RogueEventSpecialOption
}

// LoadData retrieves the data. Must be called before RogueEventSpecialOption.GroupData
func (a *RogueEventSpecialOptionAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueEventSpecialOption.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueEventSpecialOptionAccessor) Raw() ([]RogueEventSpecialOption, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueEventSpecialOption{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueEventSpecialOptionAccessor.LoadData to preload everything
func (a *RogueEventSpecialOptionAccessor) GroupData() {
	a._dataAeonFigure = map[string]RogueEventSpecialOption{}
	a._dataAeonIcon = map[string]RogueEventSpecialOption{}
	a._dataSpecialOptionID = map[float64]RogueEventSpecialOption{}
	for _, d := range a._data {
		a._dataAeonFigure[d.AeonFigure] = d
		a._dataAeonIcon[d.AeonIcon] = d
		a._dataSpecialOptionID[d.SpecialOptionID] = d
	}
}

// ByAeonFigure returns the RogueEventSpecialOption uniquely identified by AeonFigure
//
// Error is only non-nil if the source errors out
func (a *RogueEventSpecialOptionAccessor) ByAeonFigure(identifier string) (RogueEventSpecialOption, error) {
	if a._dataAeonFigure == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueEventSpecialOption{}, err
			}
		}
		a.GroupData()
	}
	return a._dataAeonFigure[identifier], nil
}

// ByAeonIcon returns the RogueEventSpecialOption uniquely identified by AeonIcon
//
// Error is only non-nil if the source errors out
func (a *RogueEventSpecialOptionAccessor) ByAeonIcon(identifier string) (RogueEventSpecialOption, error) {
	if a._dataAeonIcon == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueEventSpecialOption{}, err
			}
		}
		a.GroupData()
	}
	return a._dataAeonIcon[identifier], nil
}

// BySpecialOptionID returns the RogueEventSpecialOption uniquely identified by SpecialOptionID
//
// Error is only non-nil if the source errors out
func (a *RogueEventSpecialOptionAccessor) BySpecialOptionID(identifier float64) (RogueEventSpecialOption, error) {
	if a._dataSpecialOptionID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueEventSpecialOption{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSpecialOptionID[identifier], nil
}
