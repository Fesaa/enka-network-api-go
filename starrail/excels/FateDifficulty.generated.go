package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type FateDifficulty struct {
	AOCMPFOHJPD hash.Hash    `json:"AOCMPFOHJPD"`
	DBIFAPOBBCG []hash.Value `json:"DBIFAPOBBCG"`
	DCMHGOKCINF []float64    `json:"DCMHGOKCINF"`
	DNGCNEIGJAB hash.Hash    `json:"DNGCNEIGJAB"`
	HGNBKLNHMHI float64      `json:"HGNBKLNHMHI"`
	IIBDLPECNJM []hash.Value `json:"IIBDLPECNJM"`
	LFBLPJCJHAO float64      `json:"LFBLPJCJHAO"`
	PCLLKNNEHHM hash.Hash    `json:"PCLLKNNEHHM"`
}
type FateDifficultyAccessor struct {
	_data            []FateDifficulty
	_dataHGNBKLNHMHI map[float64]FateDifficulty
	_dataLFBLPJCJHAO map[float64]FateDifficulty
}

// LoadData retrieves the data. Must be called before FateDifficulty.GroupData
func (a *FateDifficultyAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/FateDifficulty.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *FateDifficultyAccessor) Raw() ([]FateDifficulty, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []FateDifficulty{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with FateDifficultyAccessor.LoadData to preload everything
func (a *FateDifficultyAccessor) GroupData() {
	a._dataHGNBKLNHMHI = map[float64]FateDifficulty{}
	a._dataLFBLPJCJHAO = map[float64]FateDifficulty{}
	for _, d := range a._data {
		a._dataHGNBKLNHMHI[d.HGNBKLNHMHI] = d
		a._dataLFBLPJCJHAO[d.LFBLPJCJHAO] = d
	}
}

// ByHGNBKLNHMHI returns the FateDifficulty uniquely identified by HGNBKLNHMHI
//
// Error is only non-nil if the source errors out
func (a *FateDifficultyAccessor) ByHGNBKLNHMHI(identifier float64) (FateDifficulty, error) {
	if a._dataHGNBKLNHMHI == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FateDifficulty{}, err
			}
		}
		a.GroupData()
	}
	return a._dataHGNBKLNHMHI[identifier], nil
}

// ByLFBLPJCJHAO returns the FateDifficulty uniquely identified by LFBLPJCJHAO
//
// Error is only non-nil if the source errors out
func (a *FateDifficultyAccessor) ByLFBLPJCJHAO(identifier float64) (FateDifficulty, error) {
	if a._dataLFBLPJCJHAO == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FateDifficulty{}, err
			}
		}
		a.GroupData()
	}
	return a._dataLFBLPJCJHAO[identifier], nil
}
