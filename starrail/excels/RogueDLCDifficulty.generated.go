package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type RogueDLCDifficulty struct {
	DifficultyCutList []json.Number `json:"DifficultyCutList"`
	DifficultyID      json.Number   `json:"DifficultyID"`
	LevelList         []json.Number `json:"LevelList"`
}
type RogueDLCDifficultyAccessor struct {
	_data             []RogueDLCDifficulty
	_dataDifficultyID map[json.Number]RogueDLCDifficulty
}

// LoadData retrieves the data. Must be called before RogueDLCDifficulty.GroupData
func (a *RogueDLCDifficultyAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueDLCDifficulty.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueDLCDifficultyAccessor) Raw() ([]RogueDLCDifficulty, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueDLCDifficulty{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueDLCDifficultyAccessor.LoadData to preload everything
func (a *RogueDLCDifficultyAccessor) GroupData() {
	a._dataDifficultyID = map[json.Number]RogueDLCDifficulty{}
	for _, d := range a._data {
		a._dataDifficultyID[d.DifficultyID] = d
	}
}

// ByDifficultyID returns the RogueDLCDifficulty uniquely identified by DifficultyID
//
// Error is only non-nil if the source errors out
func (a *RogueDLCDifficultyAccessor) ByDifficultyID(identifier json.Number) (RogueDLCDifficulty, error) {
	if a._dataDifficultyID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueDLCDifficulty{}, err
			}
		}
		a.GroupData()
	}
	return a._dataDifficultyID[identifier], nil
}
