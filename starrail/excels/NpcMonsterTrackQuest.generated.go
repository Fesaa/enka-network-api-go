package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type NpcMonsterTrackQuest struct {
	MapInfoID         float64 `json:"MapInfoID"`
	NpcMonsterTrackID float64 `json:"NpcMonsterTrackID"`
	QuestID           float64 `json:"QuestID"`
}
type NpcMonsterTrackQuestAccessor struct {
	_data                  []NpcMonsterTrackQuest
	_dataQuestID           map[float64]NpcMonsterTrackQuest
	_dataNpcMonsterTrackID map[float64]NpcMonsterTrackQuest
	_dataMapInfoID         map[float64]NpcMonsterTrackQuest
}

// LoadData retrieves the data. Must be called before NpcMonsterTrackQuest.GroupData
func (a *NpcMonsterTrackQuestAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/NpcMonsterTrackQuest.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *NpcMonsterTrackQuestAccessor) Raw() ([]NpcMonsterTrackQuest, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []NpcMonsterTrackQuest{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with NpcMonsterTrackQuestAccessor.LoadData to preload everything
func (a *NpcMonsterTrackQuestAccessor) GroupData() {
	for _, d := range a._data {
		a._dataQuestID[d.QuestID] = d
		a._dataNpcMonsterTrackID[d.NpcMonsterTrackID] = d
		a._dataMapInfoID[d.MapInfoID] = d
	}
}

// ByQuestID returns the NpcMonsterTrackQuest uniquely identified by QuestID
//
// Error is only non-nil if the source errors out
func (a *NpcMonsterTrackQuestAccessor) ByQuestID(identifier float64) (NpcMonsterTrackQuest, error) {
	if a._dataQuestID == nil {
		err := a.LoadData()
		if err != nil {
			return NpcMonsterTrackQuest{}, err
		}
		a.GroupData()
	}
	return a._dataQuestID[identifier], nil
}

// ByNpcMonsterTrackID returns the NpcMonsterTrackQuest uniquely identified by NpcMonsterTrackID
//
// Error is only non-nil if the source errors out
func (a *NpcMonsterTrackQuestAccessor) ByNpcMonsterTrackID(identifier float64) (NpcMonsterTrackQuest, error) {
	if a._dataNpcMonsterTrackID == nil {
		err := a.LoadData()
		if err != nil {
			return NpcMonsterTrackQuest{}, err
		}
		a.GroupData()
	}
	return a._dataNpcMonsterTrackID[identifier], nil
}

// ByMapInfoID returns the NpcMonsterTrackQuest uniquely identified by MapInfoID
//
// Error is only non-nil if the source errors out
func (a *NpcMonsterTrackQuestAccessor) ByMapInfoID(identifier float64) (NpcMonsterTrackQuest, error) {
	if a._dataMapInfoID == nil {
		err := a.LoadData()
		if err != nil {
			return NpcMonsterTrackQuest{}, err
		}
		a.GroupData()
	}
	return a._dataMapInfoID[identifier], nil
}
