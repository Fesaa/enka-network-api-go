package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type BattleTargetConfig struct {
	AbilityName        string                 `json:"AbilityName"`
	HintStep           []json.Number          `json:"HintStep"`
	ID                 json.Number            `json:"ID"`
	IconType           string                 `json:"IconType"`
	IsFixableHeight    bool                   `json:"IsFixableHeight"`
	IsShowProgress     json.Number            `json:"IsShowProgress"`
	MultiTarget        []json.Number          `json:"MultiTarget"`
	ParamType          string                 `json:"ParamType"`
	ShowInScoreCounter bool                   `json:"ShowInScoreCounter"`
	TargetName         map[string]json.Number `json:"TargetName"`
	TargetNameSimple   map[string]json.Number `json:"TargetNameSimple"`
	TargetParam        json.Number            `json:"TargetParam"`
	Type               string                 `json:"Type"`
}
type BattleTargetConfigAccessor struct {
	_data   []BattleTargetConfig
	_dataID map[json.Number]BattleTargetConfig
}

// LoadData retrieves the data. Must be called before BattleTargetConfig.GroupData
func (a *BattleTargetConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/BattleTargetConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *BattleTargetConfigAccessor) Raw() ([]BattleTargetConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []BattleTargetConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with BattleTargetConfigAccessor.LoadData to preload everything
func (a *BattleTargetConfigAccessor) GroupData() {
	a._dataID = map[json.Number]BattleTargetConfig{}
	for _, d := range a._data {
		a._dataID[d.ID] = d
	}
}

// ByID returns the BattleTargetConfig uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *BattleTargetConfigAccessor) ByID(identifier json.Number) (BattleTargetConfig, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return BattleTargetConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}
