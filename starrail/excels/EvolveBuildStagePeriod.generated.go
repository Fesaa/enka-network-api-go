package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type EvolveBuildStagePeriod struct {
	BattleArea       float64                              `json:"BattleArea"`
	CountdownList    []float64                            `json:"CountdownList"`
	DeadLinePosition hash.Value                           `json:"DeadLinePosition"`
	EmotionList      []float64                            `json:"EmotionList"`
	EventID          float64                              `json:"EventID"`
	PeriodRank       string                               `json:"PeriodRank"`
	PeriodScore      float64                              `json:"PeriodScore"`
	StageID          float64                              `json:"StageID"`
	StagePeriodID    float64                              `json:"StagePeriodID"`
	StageScore       float64                              `json:"StageScore"`
	WaveCount        float64                              `json:"WaveCount"`
	WeaknessList     []EvolveBuildStagePeriodWeaknessList `json:"WeaknessList"`
	Weight           float64                              `json:"Weight"`
}
type EvolveBuildStagePeriodWeaknessList struct {
	CIECEPNLHMJ string `json:"CIECEPNLHMJ"`
	MDDNCGAGLOJ bool   `json:"MDDNCGAGLOJ"`
}
type EvolveBuildStagePeriodAccessor struct {
	_data              []EvolveBuildStagePeriod
	_dataStagePeriodID map[float64]EvolveBuildStagePeriod
}

// LoadData retrieves the data. Must be called before EvolveBuildStagePeriod.GroupData
func (a *EvolveBuildStagePeriodAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/EvolveBuildStagePeriod.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *EvolveBuildStagePeriodAccessor) Raw() ([]EvolveBuildStagePeriod, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []EvolveBuildStagePeriod{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with EvolveBuildStagePeriodAccessor.LoadData to preload everything
func (a *EvolveBuildStagePeriodAccessor) GroupData() {
	a._dataStagePeriodID = map[float64]EvolveBuildStagePeriod{}
	for _, d := range a._data {
		a._dataStagePeriodID[d.StagePeriodID] = d
	}
}

// ByStagePeriodID returns the EvolveBuildStagePeriod uniquely identified by StagePeriodID
//
// Error is only non-nil if the source errors out
func (a *EvolveBuildStagePeriodAccessor) ByStagePeriodID(identifier float64) (EvolveBuildStagePeriod, error) {
	if a._dataStagePeriodID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return EvolveBuildStagePeriod{}, err
			}
		}
		a.GroupData()
	}
	return a._dataStagePeriodID[identifier], nil
}
