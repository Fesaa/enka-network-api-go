package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type EvolveBuildStagePeriod struct {
	BattleArea       json.Number                          `json:"BattleArea"`
	CountdownList    []json.Number                        `json:"CountdownList"`
	DeadLinePosition map[string]json.Number               `json:"DeadLinePosition"`
	EmotionList      []json.Number                        `json:"EmotionList"`
	EventID          json.Number                          `json:"EventID"`
	PeriodRank       string                               `json:"PeriodRank"`
	PeriodScore      json.Number                          `json:"PeriodScore"`
	StageID          json.Number                          `json:"StageID"`
	StagePeriodID    json.Number                          `json:"StagePeriodID"`
	StageScore       json.Number                          `json:"StageScore"`
	WaveCount        json.Number                          `json:"WaveCount"`
	WeaknessList     []EvolveBuildStagePeriodWeaknessList `json:"WeaknessList"`
	Weight           json.Number                          `json:"Weight"`
}
type EvolveBuildStagePeriodWeaknessList struct {
	CIECEPNLHMJ string `json:"CIECEPNLHMJ"`
	MDDNCGAGLOJ bool   `json:"MDDNCGAGLOJ"`
}
type EvolveBuildStagePeriodAccessor struct {
	_data []EvolveBuildStagePeriod
}

// LoadData retrieves the data. Must be called before EvolveBuildStagePeriod.GroupData
func (a *EvolveBuildStagePeriodAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/EvolveBuildStagePeriod.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *EvolveBuildStagePeriodAccessor) Raw() ([]EvolveBuildStagePeriod, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []EvolveBuildStagePeriod{}, err
		}
	}
	return a._data, nil
}
