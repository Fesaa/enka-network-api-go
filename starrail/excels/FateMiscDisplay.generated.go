package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type FateMiscDisplay struct {
	FFPOIOOMCIN float64   `json:"FFPOIOOMCIN"`
	GKCJPOIBLGM hash.Hash `json:"GKCJPOIBLGM"`
}
type FateMiscDisplayAccessor struct {
	_data            []FateMiscDisplay
	_dataFFPOIOOMCIN map[float64]FateMiscDisplay
}

// LoadData retrieves the data. Must be called before FateMiscDisplay.GroupData
func (a *FateMiscDisplayAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/FateMiscDisplay.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *FateMiscDisplayAccessor) Raw() ([]FateMiscDisplay, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []FateMiscDisplay{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with FateMiscDisplayAccessor.LoadData to preload everything
func (a *FateMiscDisplayAccessor) GroupData() {
	a._dataFFPOIOOMCIN = map[float64]FateMiscDisplay{}
	for _, d := range a._data {
		a._dataFFPOIOOMCIN[d.FFPOIOOMCIN] = d
	}
}

// ByFFPOIOOMCIN returns the FateMiscDisplay uniquely identified by FFPOIOOMCIN
//
// Error is only non-nil if the source errors out
func (a *FateMiscDisplayAccessor) ByFFPOIOOMCIN(identifier float64) (FateMiscDisplay, error) {
	if a._dataFFPOIOOMCIN == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FateMiscDisplay{}, err
			}
		}
		a.GroupData()
	}
	return a._dataFFPOIOOMCIN[identifier], nil
}
