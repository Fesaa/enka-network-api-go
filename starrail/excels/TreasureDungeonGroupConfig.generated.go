package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type TreasureDungeonGroupConfig struct {
	ATKExchangeIconPath string    `json:"ATKExchangeIconPath"`
	ATKExchangeName     hash.Hash `json:"ATKExchangeName"`
	ATKExchangeRatio    float64   `json:"ATKExchangeRatio"`
	ATKMazeBuffID       float64   `json:"ATKMazeBuffID"`
	ActivityModuleID    float64   `json:"ActivityModuleID"`
	DEFMazeBuffID       float64   `json:"DEFMazeBuffID"`
	DungeonIDList       []float64 `json:"DungeonIDList"`
	GroupID             float64   `json:"GroupID"`
	HpConversionRate    float64   `json:"HpConversionRate"`
	HpConversionRate2   float64   `json:"HpConversionRate2"`
	ImgPath             string    `json:"ImgPath"`
	MaxATK              float64   `json:"MaxATK"`
	MaxDEF              float64   `json:"MaxDEF"`
	Name                hash.Hash `json:"Name"`
}
type TreasureDungeonGroupConfigAccessor struct {
	_data                 []TreasureDungeonGroupConfig
	_dataActivityModuleID map[float64]TreasureDungeonGroupConfig
	_dataGroupID          map[float64]TreasureDungeonGroupConfig
}

// LoadData retrieves the data. Must be called before TreasureDungeonGroupConfig.GroupData
func (a *TreasureDungeonGroupConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/TreasureDungeonGroupConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *TreasureDungeonGroupConfigAccessor) Raw() ([]TreasureDungeonGroupConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []TreasureDungeonGroupConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with TreasureDungeonGroupConfigAccessor.LoadData to preload everything
func (a *TreasureDungeonGroupConfigAccessor) GroupData() {
	for _, d := range a._data {
		a._dataActivityModuleID[d.ActivityModuleID] = d
		a._dataGroupID[d.GroupID] = d
	}
}

// ByActivityModuleID returns the TreasureDungeonGroupConfig uniquely identified by ActivityModuleID
//
// Error is only non-nil if the source errors out
func (a *TreasureDungeonGroupConfigAccessor) ByActivityModuleID(identifier float64) (TreasureDungeonGroupConfig, error) {
	if a._dataActivityModuleID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return TreasureDungeonGroupConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataActivityModuleID[identifier], nil
}

// ByGroupID returns the TreasureDungeonGroupConfig uniquely identified by GroupID
//
// Error is only non-nil if the source errors out
func (a *TreasureDungeonGroupConfigAccessor) ByGroupID(identifier float64) (TreasureDungeonGroupConfig, error) {
	if a._dataGroupID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return TreasureDungeonGroupConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataGroupID[identifier], nil
}
