package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type ActivityAvatarDeliverConfig struct {
	AvatarID json.Number            `json:"AvatarID"`
	MailDesc map[string]json.Number `json:"MailDesc"`
	Name     map[string]json.Number `json:"Name"`
	Sign     map[string]json.Number `json:"Sign"`
	Sort     json.Number            `json:"Sort"`
}
type ActivityAvatarDeliverConfigAccessor struct {
	_data         []ActivityAvatarDeliverConfig
	_dataAvatarID map[json.Number]ActivityAvatarDeliverConfig
	_dataSort     map[json.Number]ActivityAvatarDeliverConfig
}

// LoadData retrieves the data. Must be called before ActivityAvatarDeliverConfig.GroupData
func (a *ActivityAvatarDeliverConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ActivityAvatarDeliverConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ActivityAvatarDeliverConfigAccessor) Raw() ([]ActivityAvatarDeliverConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ActivityAvatarDeliverConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ActivityAvatarDeliverConfigAccessor.LoadData to preload everything
func (a *ActivityAvatarDeliverConfigAccessor) GroupData() {
	a._dataAvatarID = map[json.Number]ActivityAvatarDeliverConfig{}
	a._dataSort = map[json.Number]ActivityAvatarDeliverConfig{}
	for _, d := range a._data {
		a._dataAvatarID[d.AvatarID] = d
		a._dataSort[d.Sort] = d
	}
}

// ByAvatarID returns the ActivityAvatarDeliverConfig uniquely identified by AvatarID
//
// Error is only non-nil if the source errors out
func (a *ActivityAvatarDeliverConfigAccessor) ByAvatarID(identifier json.Number) (ActivityAvatarDeliverConfig, error) {
	if a._dataAvatarID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityAvatarDeliverConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataAvatarID[identifier], nil
}

// BySort returns the ActivityAvatarDeliverConfig uniquely identified by Sort
//
// Error is only non-nil if the source errors out
func (a *ActivityAvatarDeliverConfigAccessor) BySort(identifier json.Number) (ActivityAvatarDeliverConfig, error) {
	if a._dataSort == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityAvatarDeliverConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSort[identifier], nil
}
