package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type TrainPartyEventBgConfig struct {
	BgConfigJsonPath     string      `json:"BgConfigJsonPath"`
	BgID                 json.Number `json:"BgID"`
	BgImage              string      `json:"BgImage"`
	TriggerAnimationName string      `json:"TriggerAnimationName"`
}
type TrainPartyEventBgConfigAccessor struct {
	_data     []TrainPartyEventBgConfig
	_dataBgID map[json.Number]TrainPartyEventBgConfig
}

// LoadData retrieves the data. Must be called before TrainPartyEventBgConfig.GroupData
func (a *TrainPartyEventBgConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/TrainPartyEventBgConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *TrainPartyEventBgConfigAccessor) Raw() ([]TrainPartyEventBgConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []TrainPartyEventBgConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with TrainPartyEventBgConfigAccessor.LoadData to preload everything
func (a *TrainPartyEventBgConfigAccessor) GroupData() {
	a._dataBgID = map[json.Number]TrainPartyEventBgConfig{}
	for _, d := range a._data {
		a._dataBgID[d.BgID] = d
	}
}

// ByBgID returns the TrainPartyEventBgConfig uniquely identified by BgID
//
// Error is only non-nil if the source errors out
func (a *TrainPartyEventBgConfigAccessor) ByBgID(identifier json.Number) (TrainPartyEventBgConfig, error) {
	if a._dataBgID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return TrainPartyEventBgConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataBgID[identifier], nil
}
