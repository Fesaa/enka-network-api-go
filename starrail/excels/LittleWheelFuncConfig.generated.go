package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type LittleWheelFuncConfig struct {
	IconPath          string `json:"IconPath"`
	LittleWheelFuncID string `json:"LittleWheelFuncID"`
	Type              string `json:"Type"`
}
type LittleWheelFuncConfigAccessor struct {
	_data                  []LittleWheelFuncConfig
	_dataLittleWheelFuncID map[string]LittleWheelFuncConfig
}

// LoadData retrieves the data. Must be called before LittleWheelFuncConfig.GroupData
func (a *LittleWheelFuncConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/LittleWheelFuncConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *LittleWheelFuncConfigAccessor) Raw() ([]LittleWheelFuncConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []LittleWheelFuncConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with LittleWheelFuncConfigAccessor.LoadData to preload everything
func (a *LittleWheelFuncConfigAccessor) GroupData() {
	a._dataLittleWheelFuncID = map[string]LittleWheelFuncConfig{}
	for _, d := range a._data {
		a._dataLittleWheelFuncID[d.LittleWheelFuncID] = d
	}
}

// ByLittleWheelFuncID returns the LittleWheelFuncConfig uniquely identified by LittleWheelFuncID
//
// Error is only non-nil if the source errors out
func (a *LittleWheelFuncConfigAccessor) ByLittleWheelFuncID(identifier string) (LittleWheelFuncConfig, error) {
	if a._dataLittleWheelFuncID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return LittleWheelFuncConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataLittleWheelFuncID[identifier], nil
}
