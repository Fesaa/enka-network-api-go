package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type UpgradeAvatar struct {
	AJIIOHFFKIC string  `json:"AJIIOHFFKIC"`
	ANBIHLCINPN float64 `json:"ANBIHLCINPN"`
	CBJPCHPEJOL float64 `json:"CBJPCHPEJOL"`
	HALPAHABHJG float64 `json:"HALPAHABHJG"`
	HOHJHMBFCME float64 `json:"HOHJHMBFCME"`
	IFJFCEJJBPE float64 `json:"IFJFCEJJBPE"`
	KCJEEPLFPDE float64 `json:"KCJEEPLFPDE"`
	LOPCNEPGEKE float64 `json:"LOPCNEPGEKE"`
	MHKKLIGGFCI string  `json:"MHKKLIGGFCI"`
	NFGCMOOMPDL string  `json:"NFGCMOOMPDL"`
}
type UpgradeAvatarAccessor struct {
	_data            []UpgradeAvatar
	_dataCBJPCHPEJOL map[float64]UpgradeAvatar
	_dataHOHJHMBFCME map[float64]UpgradeAvatar
}

// LoadData retrieves the data. Must be called before UpgradeAvatar.GroupData
func (a *UpgradeAvatarAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/UpgradeAvatar.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *UpgradeAvatarAccessor) Raw() ([]UpgradeAvatar, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []UpgradeAvatar{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with UpgradeAvatarAccessor.LoadData to preload everything
func (a *UpgradeAvatarAccessor) GroupData() {
	a._dataCBJPCHPEJOL = map[float64]UpgradeAvatar{}
	a._dataHOHJHMBFCME = map[float64]UpgradeAvatar{}
	for _, d := range a._data {
		a._dataCBJPCHPEJOL[d.CBJPCHPEJOL] = d
		a._dataHOHJHMBFCME[d.HOHJHMBFCME] = d
	}
}

// ByCBJPCHPEJOL returns the UpgradeAvatar uniquely identified by CBJPCHPEJOL
//
// Error is only non-nil if the source errors out
func (a *UpgradeAvatarAccessor) ByCBJPCHPEJOL(identifier float64) (UpgradeAvatar, error) {
	if a._dataCBJPCHPEJOL == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return UpgradeAvatar{}, err
			}
		}
		a.GroupData()
	}
	return a._dataCBJPCHPEJOL[identifier], nil
}

// ByHOHJHMBFCME returns the UpgradeAvatar uniquely identified by HOHJHMBFCME
//
// Error is only non-nil if the source errors out
func (a *UpgradeAvatarAccessor) ByHOHJHMBFCME(identifier float64) (UpgradeAvatar, error) {
	if a._dataHOHJHMBFCME == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return UpgradeAvatar{}, err
			}
		}
		a.GroupData()
	}
	return a._dataHOHJHMBFCME[identifier], nil
}
