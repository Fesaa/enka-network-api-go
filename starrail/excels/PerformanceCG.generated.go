package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type PerformanceCG struct {
	EndBlack             string  `json:"EndBlack"`
	FloorID              float64 `json:"FloorID"`
	IsSkip               string  `json:"IsSkip"`
	PerformanceCharacter string  `json:"PerformanceCharacter"`
	PerformanceID        float64 `json:"PerformanceID"`
	PerformancePath      string  `json:"PerformancePath"`
	PlaneID              float64 `json:"PlaneID"`
	StartBlack           string  `json:"StartBlack"`
}
type PerformanceCGAccessor struct {
	_data                []PerformanceCG
	_dataPerformanceID   map[float64]PerformanceCG
	_dataPerformancePath map[string]PerformanceCG
}

// LoadData retrieves the data. Must be called before PerformanceCG.GroupData
func (a *PerformanceCGAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/PerformanceCG.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *PerformanceCGAccessor) Raw() ([]PerformanceCG, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []PerformanceCG{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with PerformanceCGAccessor.LoadData to preload everything
func (a *PerformanceCGAccessor) GroupData() {
	a._dataPerformanceID = map[float64]PerformanceCG{}
	a._dataPerformancePath = map[string]PerformanceCG{}
	for _, d := range a._data {
		a._dataPerformanceID[d.PerformanceID] = d
		a._dataPerformancePath[d.PerformancePath] = d
	}
}

// ByPerformanceID returns the PerformanceCG uniquely identified by PerformanceID
//
// Error is only non-nil if the source errors out
func (a *PerformanceCGAccessor) ByPerformanceID(identifier float64) (PerformanceCG, error) {
	if a._dataPerformanceID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return PerformanceCG{}, err
			}
		}
		a.GroupData()
	}
	return a._dataPerformanceID[identifier], nil
}

// ByPerformancePath returns the PerformanceCG uniquely identified by PerformancePath
//
// Error is only non-nil if the source errors out
func (a *PerformanceCGAccessor) ByPerformancePath(identifier string) (PerformanceCG, error) {
	if a._dataPerformancePath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return PerformanceCG{}, err
			}
		}
		a.GroupData()
	}
	return a._dataPerformancePath[identifier], nil
}
