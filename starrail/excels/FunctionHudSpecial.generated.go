package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type FunctionHudSpecial struct {
	ActivityModuleIDList []float64 `json:"ActivityModuleIDList"`
	ControlRightHud      bool      `json:"ControlRightHud"`
	FirstWorldText       string    `json:"FirstWorldText"`
	ID                   float64   `json:"ID"`
	IsLargeBtn           bool      `json:"IsLargeBtn"`
	NotInScheduleToast   hash.Hash `json:"NotInScheduleToast"`
	OverrideIconPath     string    `json:"OverrideIconPath"`
}
type FunctionHudSpecialAccessor struct {
	_data               []FunctionHudSpecial
	_dataFirstWorldText map[string]FunctionHudSpecial
	_dataID             map[float64]FunctionHudSpecial
}

// LoadData retrieves the data. Must be called before FunctionHudSpecial.GroupData
func (a *FunctionHudSpecialAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/FunctionHudSpecial.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *FunctionHudSpecialAccessor) Raw() ([]FunctionHudSpecial, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []FunctionHudSpecial{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with FunctionHudSpecialAccessor.LoadData to preload everything
func (a *FunctionHudSpecialAccessor) GroupData() {
	a._dataFirstWorldText = map[string]FunctionHudSpecial{}
	a._dataID = map[float64]FunctionHudSpecial{}
	for _, d := range a._data {
		a._dataFirstWorldText[d.FirstWorldText] = d
		a._dataID[d.ID] = d
	}
}

// ByFirstWorldText returns the FunctionHudSpecial uniquely identified by FirstWorldText
//
// Error is only non-nil if the source errors out
func (a *FunctionHudSpecialAccessor) ByFirstWorldText(identifier string) (FunctionHudSpecial, error) {
	if a._dataFirstWorldText == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FunctionHudSpecial{}, err
			}
		}
		a.GroupData()
	}
	return a._dataFirstWorldText[identifier], nil
}

// ByID returns the FunctionHudSpecial uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *FunctionHudSpecialAccessor) ByID(identifier float64) (FunctionHudSpecial, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FunctionHudSpecial{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}
