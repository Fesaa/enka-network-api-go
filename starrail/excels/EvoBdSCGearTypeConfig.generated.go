package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type EvoBdSCGearTypeConfig struct {
	FontColor            string `json:"FontColor"`
	ID                   string `json:"ID"`
	MixDetailPropsInfoBg string `json:"MixDetailPropsInfoBg"`
	Name                 string `json:"Name"`
	Season               string `json:"Season"`
	TypeImg              string `json:"TypeImg"`
	TypeImgColor         string `json:"TypeImgColor"`
	WeaponToastEffectBg  string `json:"WeaponToastEffectBg"`
}
type EvoBdSCGearTypeConfigAccessor struct {
	_data        []EvoBdSCGearTypeConfig
	_dataName    map[string]EvoBdSCGearTypeConfig
	_dataTypeImg map[string]EvoBdSCGearTypeConfig
}

// LoadData retrieves the data. Must be called before EvoBdSCGearTypeConfig.GroupData
func (a *EvoBdSCGearTypeConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/EvoBdSCGearTypeConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *EvoBdSCGearTypeConfigAccessor) Raw() ([]EvoBdSCGearTypeConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []EvoBdSCGearTypeConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with EvoBdSCGearTypeConfigAccessor.LoadData to preload everything
func (a *EvoBdSCGearTypeConfigAccessor) GroupData() {
	a._dataName = map[string]EvoBdSCGearTypeConfig{}
	a._dataTypeImg = map[string]EvoBdSCGearTypeConfig{}
	for _, d := range a._data {
		a._dataName[d.Name] = d
		a._dataTypeImg[d.TypeImg] = d
	}
}

// ByName returns the EvoBdSCGearTypeConfig uniquely identified by Name
//
// Error is only non-nil if the source errors out
func (a *EvoBdSCGearTypeConfigAccessor) ByName(identifier string) (EvoBdSCGearTypeConfig, error) {
	if a._dataName == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return EvoBdSCGearTypeConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataName[identifier], nil
}

// ByTypeImg returns the EvoBdSCGearTypeConfig uniquely identified by TypeImg
//
// Error is only non-nil if the source errors out
func (a *EvoBdSCGearTypeConfigAccessor) ByTypeImg(identifier string) (EvoBdSCGearTypeConfig, error) {
	if a._dataTypeImg == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return EvoBdSCGearTypeConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataTypeImg[identifier], nil
}
