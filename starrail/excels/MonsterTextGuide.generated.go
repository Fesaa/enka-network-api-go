package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type MonsterTextGuide struct {
	ParameterList        []interface{}          `json:"ParameterList"`
	TextGuideDescription map[string]json.Number `json:"TextGuideDescription"`
	TextGuideID          json.Number            `json:"TextGuideID"`
}
type MonsterTextGuideAccessor struct {
	_data            []MonsterTextGuide
	_dataTextGuideID map[json.Number]MonsterTextGuide
}

// LoadData retrieves the data. Must be called before MonsterTextGuide.GroupData
func (a *MonsterTextGuideAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MonsterTextGuide.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MonsterTextGuideAccessor) Raw() ([]MonsterTextGuide, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MonsterTextGuide{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MonsterTextGuideAccessor.LoadData to preload everything
func (a *MonsterTextGuideAccessor) GroupData() {
	a._dataTextGuideID = map[json.Number]MonsterTextGuide{}
	for _, d := range a._data {
		a._dataTextGuideID[d.TextGuideID] = d
	}
}

// ByTextGuideID returns the MonsterTextGuide uniquely identified by TextGuideID
//
// Error is only non-nil if the source errors out
func (a *MonsterTextGuideAccessor) ByTextGuideID(identifier json.Number) (MonsterTextGuide, error) {
	if a._dataTextGuideID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MonsterTextGuide{}, err
			}
		}
		a.GroupData()
	}
	return a._dataTextGuideID[identifier], nil
}
