package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type RogueMagicUnitDisplay struct {
	MagicUnitID   json.Number            `json:"MagicUnitID"`
	MagicUnitIcon string                 `json:"MagicUnitIcon"`
	MagicUnitName map[string]json.Number `json:"MagicUnitName"`
}
type RogueMagicUnitDisplayAccessor struct {
	_data            []RogueMagicUnitDisplay
	_dataMagicUnitID map[json.Number]RogueMagicUnitDisplay
}

// LoadData retrieves the data. Must be called before RogueMagicUnitDisplay.GroupData
func (a *RogueMagicUnitDisplayAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueMagicUnitDisplay.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueMagicUnitDisplayAccessor) Raw() ([]RogueMagicUnitDisplay, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueMagicUnitDisplay{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueMagicUnitDisplayAccessor.LoadData to preload everything
func (a *RogueMagicUnitDisplayAccessor) GroupData() {
	a._dataMagicUnitID = map[json.Number]RogueMagicUnitDisplay{}
	for _, d := range a._data {
		a._dataMagicUnitID[d.MagicUnitID] = d
	}
}

// ByMagicUnitID returns the RogueMagicUnitDisplay uniquely identified by MagicUnitID
//
// Error is only non-nil if the source errors out
func (a *RogueMagicUnitDisplayAccessor) ByMagicUnitID(identifier json.Number) (RogueMagicUnitDisplay, error) {
	if a._dataMagicUnitID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueMagicUnitDisplay{}, err
			}
		}
		a.GroupData()
	}
	return a._dataMagicUnitID[identifier], nil
}
