package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type RollShopConfig struct {
	CostItemID       json.Number              `json:"CostItemID"`
	CostItemNum      json.Number              `json:"CostItemNum"`
	IntroduceID      json.Number              `json:"IntroduceID"`
	RollShopID       json.Number              `json:"RollShopID"`
	RollShopType     string                   `json:"RollShopType"`
	SecretGroupID    json.Number              `json:"SecretGroupID"`
	ShopName         map[string]json.Number   `json:"ShopName"`
	SpecialGroupList []map[string]json.Number `json:"SpecialGroupList"`
	T1GroupID        json.Number              `json:"T1GroupID"`
	T2GroupID        json.Number              `json:"T2GroupID"`
	T3GroupID        json.Number              `json:"T3GroupID"`
	T4GroupID        json.Number              `json:"T4GroupID"`
}
type RollShopConfigAccessor struct {
	_data []RollShopConfig
}

// LoadData retrieves the data. Must be called before RollShopConfig.GroupData
func (a *RollShopConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RollShopConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RollShopConfigAccessor) Raw() ([]RollShopConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RollShopConfig{}, err
		}
	}
	return a._data, nil
}
