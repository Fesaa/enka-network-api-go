package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type ClockParkChapterConfig struct {
	ChapterAutoUnlock              json.Number            `json:"ChapterAutoUnlock"`
	ChapterGamePlayRoundRandomList []json.Number          `json:"ChapterGamePlayRoundRandomList"`
	ChapterID                      json.Number            `json:"ChapterID"`
	ChapterRoundIDList             []json.Number          `json:"ChapterRoundIDList"`
	ChapterStoryIDList             []json.Number          `json:"ChapterStoryIDList"`
	ChapterTitle                   map[string]json.Number `json:"ChapterTitle"`
	ChapterType                    string                 `json:"ChapterType"`
	CheckPointList                 []json.Number          `json:"CheckPointList"`
	NextChapterID                  []json.Number          `json:"NextChapterID"`
	RewardID                       json.Number            `json:"RewardID"`
	RewardProgress                 json.Number            `json:"RewardProgress"`
	SuccessToRoundID               json.Number            `json:"SuccessToRoundID"`
}
type ClockParkChapterConfigAccessor struct {
	_data          []ClockParkChapterConfig
	_dataChapterID map[json.Number]ClockParkChapterConfig
}

// LoadData retrieves the data. Must be called before ClockParkChapterConfig.GroupData
func (a *ClockParkChapterConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ClockParkChapterConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ClockParkChapterConfigAccessor) Raw() ([]ClockParkChapterConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ClockParkChapterConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ClockParkChapterConfigAccessor.LoadData to preload everything
func (a *ClockParkChapterConfigAccessor) GroupData() {
	a._dataChapterID = map[json.Number]ClockParkChapterConfig{}
	for _, d := range a._data {
		a._dataChapterID[d.ChapterID] = d
	}
}

// ByChapterID returns the ClockParkChapterConfig uniquely identified by ChapterID
//
// Error is only non-nil if the source errors out
func (a *ClockParkChapterConfigAccessor) ByChapterID(identifier json.Number) (ClockParkChapterConfig, error) {
	if a._dataChapterID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ClockParkChapterConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataChapterID[identifier], nil
}
