package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type MuseumComments struct {
	AreaID          json.Number            `json:"AreaID"`
	CommentContent  map[string]json.Number `json:"CommentContent"`
	CommentID       json.Number            `json:"CommentID"`
	CommentIconPath string                 `json:"CommentIconPath"`
	CommentName     map[string]json.Number `json:"CommentName"`
	IsPositive      bool                   `json:"IsPositive"`
}
type MuseumCommentsAccessor struct {
	_data          []MuseumComments
	_dataCommentID map[json.Number]MuseumComments
}

// LoadData retrieves the data. Must be called before MuseumComments.GroupData
func (a *MuseumCommentsAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MuseumComments.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MuseumCommentsAccessor) Raw() ([]MuseumComments, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MuseumComments{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MuseumCommentsAccessor.LoadData to preload everything
func (a *MuseumCommentsAccessor) GroupData() {
	a._dataCommentID = map[json.Number]MuseumComments{}
	for _, d := range a._data {
		a._dataCommentID[d.CommentID] = d
	}
}

// ByCommentID returns the MuseumComments uniquely identified by CommentID
//
// Error is only non-nil if the source errors out
func (a *MuseumCommentsAccessor) ByCommentID(identifier json.Number) (MuseumComments, error) {
	if a._dataCommentID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MuseumComments{}, err
			}
		}
		a.GroupData()
	}
	return a._dataCommentID[identifier], nil
}
