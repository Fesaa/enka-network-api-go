package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type SFXConfig struct {
	IsPlayerInvolved bool        `json:"IsPlayerInvolved"`
	SFXID            json.Number `json:"SFXID"`
	SFXPath          string      `json:"SFXPath"`
	SFXType          string      `json:"SFXType"`
}
type SFXConfigAccessor struct {
	_data      []SFXConfig
	_dataSFXID map[json.Number]SFXConfig
}

// LoadData retrieves the data. Must be called before SFXConfig.GroupData
func (a *SFXConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/SFXConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *SFXConfigAccessor) Raw() ([]SFXConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []SFXConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with SFXConfigAccessor.LoadData to preload everything
func (a *SFXConfigAccessor) GroupData() {
	a._dataSFXID = map[json.Number]SFXConfig{}
	for _, d := range a._data {
		a._dataSFXID[d.SFXID] = d
	}
}

// BySFXID returns the SFXConfig uniquely identified by SFXID
//
// Error is only non-nil if the source errors out
func (a *SFXConfigAccessor) BySFXID(identifier json.Number) (SFXConfig, error) {
	if a._dataSFXID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return SFXConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSFXID[identifier], nil
}
