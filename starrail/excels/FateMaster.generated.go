package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type FateMaster struct {
	DJPCAIKIONP float64      `json:"DJPCAIKIONP"`
	EEOHLAHCDEH string       `json:"EEOHLAHCDEH"`
	FFAFMIFODFL string       `json:"FFAFMIFODFL"`
	GBBONBNFDGL string       `json:"GBBONBNFDGL"`
	HAIHCBBNIFL []hash.Value `json:"HAIHCBBNIFL"`
	HLACJLFDGDD hash.Hash    `json:"HLACJLFDGDD"`
	IILPOJFMPMD hash.Hash    `json:"IILPOJFMPMD"`
	KADOICNKGAL hash.Hash    `json:"KADOICNKGAL"`
}
type FateMasterAccessor struct {
	_data            []FateMaster
	_dataDJPCAIKIONP map[float64]FateMaster
	_dataEEOHLAHCDEH map[string]FateMaster
	_dataGBBONBNFDGL map[string]FateMaster
}

// LoadData retrieves the data. Must be called before FateMaster.GroupData
func (a *FateMasterAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/FateMaster.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *FateMasterAccessor) Raw() ([]FateMaster, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []FateMaster{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with FateMasterAccessor.LoadData to preload everything
func (a *FateMasterAccessor) GroupData() {
	a._dataDJPCAIKIONP = map[float64]FateMaster{}
	a._dataEEOHLAHCDEH = map[string]FateMaster{}
	a._dataGBBONBNFDGL = map[string]FateMaster{}
	for _, d := range a._data {
		a._dataDJPCAIKIONP[d.DJPCAIKIONP] = d
		a._dataEEOHLAHCDEH[d.EEOHLAHCDEH] = d
		a._dataGBBONBNFDGL[d.GBBONBNFDGL] = d
	}
}

// ByDJPCAIKIONP returns the FateMaster uniquely identified by DJPCAIKIONP
//
// Error is only non-nil if the source errors out
func (a *FateMasterAccessor) ByDJPCAIKIONP(identifier float64) (FateMaster, error) {
	if a._dataDJPCAIKIONP == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FateMaster{}, err
			}
		}
		a.GroupData()
	}
	return a._dataDJPCAIKIONP[identifier], nil
}

// ByEEOHLAHCDEH returns the FateMaster uniquely identified by EEOHLAHCDEH
//
// Error is only non-nil if the source errors out
func (a *FateMasterAccessor) ByEEOHLAHCDEH(identifier string) (FateMaster, error) {
	if a._dataEEOHLAHCDEH == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FateMaster{}, err
			}
		}
		a.GroupData()
	}
	return a._dataEEOHLAHCDEH[identifier], nil
}

// ByGBBONBNFDGL returns the FateMaster uniquely identified by GBBONBNFDGL
//
// Error is only non-nil if the source errors out
func (a *FateMasterAccessor) ByGBBONBNFDGL(identifier string) (FateMaster, error) {
	if a._dataGBBONBNFDGL == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FateMaster{}, err
			}
		}
		a.GroupData()
	}
	return a._dataGBBONBNFDGL[identifier], nil
}
