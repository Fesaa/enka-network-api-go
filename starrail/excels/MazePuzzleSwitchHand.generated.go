package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type MazePuzzleSwitchHand struct {
	BanRocketPunch   bool                     `json:"BanRocketPunch"`
	ChestID          []json.Number            `json:"ChestID"`
	CoinPropID       []map[string]json.Number `json:"CoinPropID"`
	ColliderPath     string                   `json:"ColliderPath"`
	ControllerListID []map[string]json.Number `json:"ControllerListID"`
	FloorID          json.Number              `json:"FloorID"`
	GroupIDList      []interface{}            `json:"GroupIDList"`
	IsRaid           bool                     `json:"IsRaid"`
	PlaneID          json.Number              `json:"PlaneID"`
	SwitchHandID     []json.Number            `json:"SwitchHandID"`
	SwitchID         json.Number              `json:"SwitchID"`
}
type MazePuzzleSwitchHandAccessor struct {
	_data []MazePuzzleSwitchHand
}

// LoadData retrieves the data. Must be called before MazePuzzleSwitchHand.GroupData
func (a *MazePuzzleSwitchHandAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MazePuzzleSwitchHand.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MazePuzzleSwitchHandAccessor) Raw() ([]MazePuzzleSwitchHand, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MazePuzzleSwitchHand{}, err
		}
	}
	return a._data, nil
}
