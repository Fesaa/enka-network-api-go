package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type MazePuzzleSwitchHand struct {
	BanRocketPunch   bool                                   `json:"BanRocketPunch"`
	ChestID          []float64                              `json:"ChestID"`
	CoinPropID       []MazePuzzleSwitchHandCoinPropID       `json:"CoinPropID"`
	ColliderPath     string                                 `json:"ColliderPath"`
	ControllerListID []MazePuzzleSwitchHandControllerListID `json:"ControllerListID"`
	FloorID          float64                                `json:"FloorID"`
	GroupIDList      []interface{}                          `json:"GroupIDList"`
	IsRaid           bool                                   `json:"IsRaid"`
	PlaneID          float64                                `json:"PlaneID"`
	SwitchHandID     []float64                              `json:"SwitchHandID"`
	SwitchID         float64                                `json:"SwitchID"`
}
type MazePuzzleSwitchHandCoinPropID struct {
	AFFDAADLGDO float64 `json:"AFFDAADLGDO"`
	NODHHNHDNKP float64 `json:"NODHHNHDNKP"`
}
type MazePuzzleSwitchHandControllerListID struct {
	AFFDAADLGDO float64 `json:"AFFDAADLGDO"`
	NODHHNHDNKP float64 `json:"NODHHNHDNKP"`
}
type MazePuzzleSwitchHandAccessor struct {
	_data         []MazePuzzleSwitchHand
	_dataSwitchID map[float64]MazePuzzleSwitchHand
}

// LoadData retrieves the data. Must be called before MazePuzzleSwitchHand.GroupData
func (a *MazePuzzleSwitchHandAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MazePuzzleSwitchHand.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MazePuzzleSwitchHandAccessor) Raw() ([]MazePuzzleSwitchHand, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MazePuzzleSwitchHand{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MazePuzzleSwitchHandAccessor.LoadData to preload everything
func (a *MazePuzzleSwitchHandAccessor) GroupData() {
	a._dataSwitchID = map[float64]MazePuzzleSwitchHand{}
	for _, d := range a._data {
		a._dataSwitchID[d.SwitchID] = d
	}
}

// BySwitchID returns the MazePuzzleSwitchHand uniquely identified by SwitchID
//
// Error is only non-nil if the source errors out
func (a *MazePuzzleSwitchHandAccessor) BySwitchID(identifier float64) (MazePuzzleSwitchHand, error) {
	if a._dataSwitchID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MazePuzzleSwitchHand{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSwitchID[identifier], nil
}
