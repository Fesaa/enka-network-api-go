package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type ActivityExpedition struct {
	AssignDesc          map[string]json.Number `json:"AssignDesc"`
	AssignerName        map[string]json.Number `json:"AssignerName"`
	AvatarNumMax        json.Number            `json:"AvatarNumMax"`
	AvatarNumMin        json.Number            `json:"AvatarNumMin"`
	BonusBaseTypeList   []string               `json:"BonusBaseTypeList"`
	Duration            json.Number            `json:"Duration"`
	ExpeditionID        json.Number            `json:"ExpeditionID"`
	ExpeditionRank      string                 `json:"ExpeditionRank"`
	ExpeditionTag       json.Number            `json:"ExpeditionTag"`
	Grade1ExtraRewardID json.Number            `json:"Grade1ExtraRewardID"`
	Grade2ExtraRewardID json.Number            `json:"Grade2ExtraRewardID"`
	Grade3ExtraRewardID json.Number            `json:"Grade3ExtraRewardID"`
	Name                map[string]json.Number `json:"Name"`
	RewardID            json.Number            `json:"RewardID"`
}
type ActivityExpeditionAccessor struct {
	_data []ActivityExpedition
}

// LoadData retrieves the data. Must be called before ActivityExpedition.GroupData
func (a *ActivityExpeditionAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ActivityExpedition.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ActivityExpeditionAccessor) Raw() ([]ActivityExpedition, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ActivityExpedition{}, err
		}
	}
	return a._data, nil
}
