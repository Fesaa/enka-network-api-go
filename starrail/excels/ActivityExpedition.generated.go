package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type ActivityExpedition struct {
	AssignDesc          hash.Hash `json:"AssignDesc"`
	AssignerName        hash.Hash `json:"AssignerName"`
	AvatarNumMax        float64   `json:"AvatarNumMax"`
	AvatarNumMin        float64   `json:"AvatarNumMin"`
	BonusBaseTypeList   []string  `json:"BonusBaseTypeList"`
	Duration            float64   `json:"Duration"`
	ExpeditionID        float64   `json:"ExpeditionID"`
	ExpeditionRank      string    `json:"ExpeditionRank"`
	ExpeditionTag       float64   `json:"ExpeditionTag"`
	Grade1ExtraRewardID float64   `json:"Grade1ExtraRewardID"`
	Grade2ExtraRewardID float64   `json:"Grade2ExtraRewardID"`
	Grade3ExtraRewardID float64   `json:"Grade3ExtraRewardID"`
	Name                hash.Hash `json:"Name"`
	RewardID            float64   `json:"RewardID"`
}
type ActivityExpeditionAccessor struct {
	_data                    []ActivityExpedition
	_dataExpeditionID        map[float64]ActivityExpedition
	_dataGrade1ExtraRewardID map[float64]ActivityExpedition
	_dataGrade2ExtraRewardID map[float64]ActivityExpedition
	_dataGrade3ExtraRewardID map[float64]ActivityExpedition
	_dataRewardID            map[float64]ActivityExpedition
}

// LoadData retrieves the data. Must be called before ActivityExpedition.GroupData
func (a *ActivityExpeditionAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ActivityExpedition.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ActivityExpeditionAccessor) Raw() ([]ActivityExpedition, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ActivityExpedition{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ActivityExpeditionAccessor.LoadData to preload everything
func (a *ActivityExpeditionAccessor) GroupData() {
	a._dataExpeditionID = map[float64]ActivityExpedition{}
	a._dataGrade1ExtraRewardID = map[float64]ActivityExpedition{}
	a._dataGrade2ExtraRewardID = map[float64]ActivityExpedition{}
	a._dataGrade3ExtraRewardID = map[float64]ActivityExpedition{}
	a._dataRewardID = map[float64]ActivityExpedition{}
	for _, d := range a._data {
		a._dataExpeditionID[d.ExpeditionID] = d
		a._dataGrade1ExtraRewardID[d.Grade1ExtraRewardID] = d
		a._dataGrade2ExtraRewardID[d.Grade2ExtraRewardID] = d
		a._dataGrade3ExtraRewardID[d.Grade3ExtraRewardID] = d
		a._dataRewardID[d.RewardID] = d
	}
}

// ByExpeditionID returns the ActivityExpedition uniquely identified by ExpeditionID
//
// Error is only non-nil if the source errors out
func (a *ActivityExpeditionAccessor) ByExpeditionID(identifier float64) (ActivityExpedition, error) {
	if a._dataExpeditionID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityExpedition{}, err
			}
		}
		a.GroupData()
	}
	return a._dataExpeditionID[identifier], nil
}

// ByGrade1ExtraRewardID returns the ActivityExpedition uniquely identified by Grade1ExtraRewardID
//
// Error is only non-nil if the source errors out
func (a *ActivityExpeditionAccessor) ByGrade1ExtraRewardID(identifier float64) (ActivityExpedition, error) {
	if a._dataGrade1ExtraRewardID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityExpedition{}, err
			}
		}
		a.GroupData()
	}
	return a._dataGrade1ExtraRewardID[identifier], nil
}

// ByGrade2ExtraRewardID returns the ActivityExpedition uniquely identified by Grade2ExtraRewardID
//
// Error is only non-nil if the source errors out
func (a *ActivityExpeditionAccessor) ByGrade2ExtraRewardID(identifier float64) (ActivityExpedition, error) {
	if a._dataGrade2ExtraRewardID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityExpedition{}, err
			}
		}
		a.GroupData()
	}
	return a._dataGrade2ExtraRewardID[identifier], nil
}

// ByGrade3ExtraRewardID returns the ActivityExpedition uniquely identified by Grade3ExtraRewardID
//
// Error is only non-nil if the source errors out
func (a *ActivityExpeditionAccessor) ByGrade3ExtraRewardID(identifier float64) (ActivityExpedition, error) {
	if a._dataGrade3ExtraRewardID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityExpedition{}, err
			}
		}
		a.GroupData()
	}
	return a._dataGrade3ExtraRewardID[identifier], nil
}

// ByRewardID returns the ActivityExpedition uniquely identified by RewardID
//
// Error is only non-nil if the source errors out
func (a *ActivityExpeditionAccessor) ByRewardID(identifier float64) (ActivityExpedition, error) {
	if a._dataRewardID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityExpedition{}, err
			}
		}
		a.GroupData()
	}
	return a._dataRewardID[identifier], nil
}
