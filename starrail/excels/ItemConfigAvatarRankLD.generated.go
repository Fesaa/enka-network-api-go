package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type ItemConfigAvatarRankLD struct {
	CustomDataList       []interface{} `json:"CustomDataList"`
	ID                   float64       `json:"ID"`
	InventoryDisplayTag  float64       `json:"InventoryDisplayTag"`
	ItemAvatarIconPath   string        `json:"ItemAvatarIconPath"`
	ItemCurrencyIconPath string        `json:"ItemCurrencyIconPath"`
	ItemDesc             hash.Hash     `json:"ItemDesc"`
	ItemFigureIconPath   string        `json:"ItemFigureIconPath"`
	ItemIconPath         string        `json:"ItemIconPath"`
	ItemMainType         string        `json:"ItemMainType"`
	ItemName             hash.Hash     `json:"ItemName"`
	ItemSubType          string        `json:"ItemSubType"`
	PileLimit            float64       `json:"PileLimit"`
	Rarity               string        `json:"Rarity"`
	ReturnItemIDList     []interface{} `json:"ReturnItemIDList"`
}
type ItemConfigAvatarRankLDAccessor struct {
	_data   []ItemConfigAvatarRankLD
	_dataID map[float64]ItemConfigAvatarRankLD
}

// LoadData retrieves the data. Must be called before ItemConfigAvatarRankLD.GroupData
func (a *ItemConfigAvatarRankLDAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ItemConfigAvatarRankLD.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ItemConfigAvatarRankLDAccessor) Raw() ([]ItemConfigAvatarRankLD, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ItemConfigAvatarRankLD{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ItemConfigAvatarRankLDAccessor.LoadData to preload everything
func (a *ItemConfigAvatarRankLDAccessor) GroupData() {
	a._dataID = map[float64]ItemConfigAvatarRankLD{}
	for _, d := range a._data {
		a._dataID[d.ID] = d
	}
}

// ByID returns the ItemConfigAvatarRankLD uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *ItemConfigAvatarRankLDAccessor) ByID(identifier float64) (ItemConfigAvatarRankLD, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ItemConfigAvatarRankLD{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}
