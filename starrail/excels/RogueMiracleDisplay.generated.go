package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type RogueMiracleDisplay struct {
	MiracleBGDesc         hash.Hash `json:"MiracleBGDesc"`
	MiracleDisplayID      float64   `json:"MiracleDisplayID"`
	MiracleFigureIconPath string    `json:"MiracleFigureIconPath"`
	MiracleIconPath       string    `json:"MiracleIconPath"`
	MiracleName           hash.Hash `json:"MiracleName"`
}
type RogueMiracleDisplayAccessor struct {
	_data                 []RogueMiracleDisplay
	_dataMiracleDisplayID map[float64]RogueMiracleDisplay
}

// LoadData retrieves the data. Must be called before RogueMiracleDisplay.GroupData
func (a *RogueMiracleDisplayAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueMiracleDisplay.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueMiracleDisplayAccessor) Raw() ([]RogueMiracleDisplay, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueMiracleDisplay{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueMiracleDisplayAccessor.LoadData to preload everything
func (a *RogueMiracleDisplayAccessor) GroupData() {
	a._dataMiracleDisplayID = map[float64]RogueMiracleDisplay{}
	for _, d := range a._data {
		a._dataMiracleDisplayID[d.MiracleDisplayID] = d
	}
}

// ByMiracleDisplayID returns the RogueMiracleDisplay uniquely identified by MiracleDisplayID
//
// Error is only non-nil if the source errors out
func (a *RogueMiracleDisplayAccessor) ByMiracleDisplayID(identifier float64) (RogueMiracleDisplay, error) {
	if a._dataMiracleDisplayID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueMiracleDisplay{}, err
			}
		}
		a.GroupData()
	}
	return a._dataMiracleDisplayID[identifier], nil
}
