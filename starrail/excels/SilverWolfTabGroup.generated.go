package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type SilverWolfTabGroup struct {
	ActivityModuleID  json.Number                    `json:"ActivityModuleID"`
	Conditions        []SilverWolfTabGroupConditions `json:"Conditions"`
	ExploreFigurePath string                         `json:"ExploreFigurePath"`
	GroupID           json.Number                    `json:"GroupID"`
	IconPath          string                         `json:"IconPath"`
	Name              map[string]json.Number         `json:"Name"`
	RaidFigurePath    string                         `json:"RaidFigurePath"`
}
type SilverWolfTabGroupConditions struct {
	Param string `json:"Param"`
	Type  string `json:"Type"`
}
type SilverWolfTabGroupAccessor struct {
	_data                  []SilverWolfTabGroup
	_dataActivityModuleID  map[json.Number]SilverWolfTabGroup
	_dataExploreFigurePath map[string]SilverWolfTabGroup
	_dataGroupID           map[json.Number]SilverWolfTabGroup
	_dataRaidFigurePath    map[string]SilverWolfTabGroup
}

// LoadData retrieves the data. Must be called before SilverWolfTabGroup.GroupData
func (a *SilverWolfTabGroupAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/SilverWolfTabGroup.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *SilverWolfTabGroupAccessor) Raw() ([]SilverWolfTabGroup, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []SilverWolfTabGroup{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with SilverWolfTabGroupAccessor.LoadData to preload everything
func (a *SilverWolfTabGroupAccessor) GroupData() {
	a._dataActivityModuleID = map[json.Number]SilverWolfTabGroup{}
	a._dataExploreFigurePath = map[string]SilverWolfTabGroup{}
	a._dataGroupID = map[json.Number]SilverWolfTabGroup{}
	a._dataRaidFigurePath = map[string]SilverWolfTabGroup{}
	for _, d := range a._data {
		a._dataActivityModuleID[d.ActivityModuleID] = d
		a._dataExploreFigurePath[d.ExploreFigurePath] = d
		a._dataGroupID[d.GroupID] = d
		a._dataRaidFigurePath[d.RaidFigurePath] = d
	}
}

// ByActivityModuleID returns the SilverWolfTabGroup uniquely identified by ActivityModuleID
//
// Error is only non-nil if the source errors out
func (a *SilverWolfTabGroupAccessor) ByActivityModuleID(identifier json.Number) (SilverWolfTabGroup, error) {
	if a._dataActivityModuleID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return SilverWolfTabGroup{}, err
			}
		}
		a.GroupData()
	}
	return a._dataActivityModuleID[identifier], nil
}

// ByExploreFigurePath returns the SilverWolfTabGroup uniquely identified by ExploreFigurePath
//
// Error is only non-nil if the source errors out
func (a *SilverWolfTabGroupAccessor) ByExploreFigurePath(identifier string) (SilverWolfTabGroup, error) {
	if a._dataExploreFigurePath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return SilverWolfTabGroup{}, err
			}
		}
		a.GroupData()
	}
	return a._dataExploreFigurePath[identifier], nil
}

// ByGroupID returns the SilverWolfTabGroup uniquely identified by GroupID
//
// Error is only non-nil if the source errors out
func (a *SilverWolfTabGroupAccessor) ByGroupID(identifier json.Number) (SilverWolfTabGroup, error) {
	if a._dataGroupID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return SilverWolfTabGroup{}, err
			}
		}
		a.GroupData()
	}
	return a._dataGroupID[identifier], nil
}

// ByRaidFigurePath returns the SilverWolfTabGroup uniquely identified by RaidFigurePath
//
// Error is only non-nil if the source errors out
func (a *SilverWolfTabGroupAccessor) ByRaidFigurePath(identifier string) (SilverWolfTabGroup, error) {
	if a._dataRaidFigurePath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return SilverWolfTabGroup{}, err
			}
		}
		a.GroupData()
	}
	return a._dataRaidFigurePath[identifier], nil
}
