package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type RogueDialogueOptionDisplay struct {
	OptionDesc      map[string]json.Number `json:"OptionDesc"`
	OptionDisplayID json.Number            `json:"OptionDisplayID"`
	OptionTitle     map[string]json.Number `json:"OptionTitle"`
}
type RogueDialogueOptionDisplayAccessor struct {
	_data                []RogueDialogueOptionDisplay
	_dataOptionDisplayID map[json.Number]RogueDialogueOptionDisplay
}

// LoadData retrieves the data. Must be called before RogueDialogueOptionDisplay.GroupData
func (a *RogueDialogueOptionDisplayAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueDialogueOptionDisplay.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueDialogueOptionDisplayAccessor) Raw() ([]RogueDialogueOptionDisplay, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueDialogueOptionDisplay{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueDialogueOptionDisplayAccessor.LoadData to preload everything
func (a *RogueDialogueOptionDisplayAccessor) GroupData() {
	a._dataOptionDisplayID = map[json.Number]RogueDialogueOptionDisplay{}
	for _, d := range a._data {
		a._dataOptionDisplayID[d.OptionDisplayID] = d
	}
}

// ByOptionDisplayID returns the RogueDialogueOptionDisplay uniquely identified by OptionDisplayID
//
// Error is only non-nil if the source errors out
func (a *RogueDialogueOptionDisplayAccessor) ByOptionDisplayID(identifier json.Number) (RogueDialogueOptionDisplay, error) {
	if a._dataOptionDisplayID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueDialogueOptionDisplay{}, err
			}
		}
		a.GroupData()
	}
	return a._dataOptionDisplayID[identifier], nil
}
