package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type SpaceZooCustomizedCat struct {
	AddCatID       json.Number   `json:"AddCatID"`
	ChannelFeature []json.Number `json:"ChannelFeature"`
	NotShowDialog  bool          `json:"NotShowDialog"`
}
type SpaceZooCustomizedCatAccessor struct {
	_data         []SpaceZooCustomizedCat
	_dataAddCatID map[json.Number]SpaceZooCustomizedCat
}

// LoadData retrieves the data. Must be called before SpaceZooCustomizedCat.GroupData
func (a *SpaceZooCustomizedCatAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/SpaceZooCustomizedCat.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *SpaceZooCustomizedCatAccessor) Raw() ([]SpaceZooCustomizedCat, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []SpaceZooCustomizedCat{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with SpaceZooCustomizedCatAccessor.LoadData to preload everything
func (a *SpaceZooCustomizedCatAccessor) GroupData() {
	a._dataAddCatID = map[json.Number]SpaceZooCustomizedCat{}
	for _, d := range a._data {
		a._dataAddCatID[d.AddCatID] = d
	}
}

// ByAddCatID returns the SpaceZooCustomizedCat uniquely identified by AddCatID
//
// Error is only non-nil if the source errors out
func (a *SpaceZooCustomizedCatAccessor) ByAddCatID(identifier json.Number) (SpaceZooCustomizedCat, error) {
	if a._dataAddCatID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return SpaceZooCustomizedCat{}, err
			}
		}
		a.GroupData()
	}
	return a._dataAddCatID[identifier], nil
}
