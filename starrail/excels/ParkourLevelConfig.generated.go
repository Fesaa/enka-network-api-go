package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type ParkourLevelConfig struct {
	BGMIDList             []float64 `json:"BGMIDList"`
	Desc                  hash.Hash `json:"Desc"`
	FinishDisplay         hash.Hash `json:"FinishDisplay"`
	GameAssetPath         string    `json:"GameAssetPath"`
	GameAssetPathOnClear  string    `json:"GameAssetPathOnClear"`
	ID                    float64   `json:"ID"`
	LapCount              float64   `json:"LapCount"`
	LevelRegionState      float64   `json:"LevelRegionState"`
	MinimapAngle          float64   `json:"MinimapAngle"`
	MinimapResPath        string    `json:"MinimapResPath"`
	Name                  hash.Hash `json:"Name"`
	NextStorySubMissionID float64   `json:"NextStorySubMissionID"`
	RailBallLimit         float64   `json:"RailBallLimit"`
	StoryLevel            bool      `json:"StoryLevel"`
	TargetRank            float64   `json:"TargetRank"`
	TriggerCarTaskUnlock  string    `json:"TriggerCarTaskUnlock"`
	UnlockParam           float64   `json:"UnlockParam"`
	UnlockType            string    `json:"UnlockType"`
}
type ParkourLevelConfigAccessor struct {
	_data                 []ParkourLevelConfig
	_dataGameAssetPath    map[string]ParkourLevelConfig
	_dataID               map[float64]ParkourLevelConfig
	_dataLevelRegionState map[float64]ParkourLevelConfig
	_dataMinimapResPath   map[string]ParkourLevelConfig
	_dataUnlockParam      map[float64]ParkourLevelConfig
}

// LoadData retrieves the data. Must be called before ParkourLevelConfig.GroupData
func (a *ParkourLevelConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ParkourLevelConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ParkourLevelConfigAccessor) Raw() ([]ParkourLevelConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ParkourLevelConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ParkourLevelConfigAccessor.LoadData to preload everything
func (a *ParkourLevelConfigAccessor) GroupData() {
	a._dataGameAssetPath = map[string]ParkourLevelConfig{}
	a._dataID = map[float64]ParkourLevelConfig{}
	a._dataLevelRegionState = map[float64]ParkourLevelConfig{}
	a._dataMinimapResPath = map[string]ParkourLevelConfig{}
	a._dataUnlockParam = map[float64]ParkourLevelConfig{}
	for _, d := range a._data {
		a._dataGameAssetPath[d.GameAssetPath] = d
		a._dataID[d.ID] = d
		a._dataLevelRegionState[d.LevelRegionState] = d
		a._dataMinimapResPath[d.MinimapResPath] = d
		a._dataUnlockParam[d.UnlockParam] = d
	}
}

// ByGameAssetPath returns the ParkourLevelConfig uniquely identified by GameAssetPath
//
// Error is only non-nil if the source errors out
func (a *ParkourLevelConfigAccessor) ByGameAssetPath(identifier string) (ParkourLevelConfig, error) {
	if a._dataGameAssetPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ParkourLevelConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataGameAssetPath[identifier], nil
}

// ByID returns the ParkourLevelConfig uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *ParkourLevelConfigAccessor) ByID(identifier float64) (ParkourLevelConfig, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ParkourLevelConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}

// ByLevelRegionState returns the ParkourLevelConfig uniquely identified by LevelRegionState
//
// Error is only non-nil if the source errors out
func (a *ParkourLevelConfigAccessor) ByLevelRegionState(identifier float64) (ParkourLevelConfig, error) {
	if a._dataLevelRegionState == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ParkourLevelConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataLevelRegionState[identifier], nil
}

// ByMinimapResPath returns the ParkourLevelConfig uniquely identified by MinimapResPath
//
// Error is only non-nil if the source errors out
func (a *ParkourLevelConfigAccessor) ByMinimapResPath(identifier string) (ParkourLevelConfig, error) {
	if a._dataMinimapResPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ParkourLevelConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataMinimapResPath[identifier], nil
}

// ByUnlockParam returns the ParkourLevelConfig uniquely identified by UnlockParam
//
// Error is only non-nil if the source errors out
func (a *ParkourLevelConfigAccessor) ByUnlockParam(identifier float64) (ParkourLevelConfig, error) {
	if a._dataUnlockParam == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ParkourLevelConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataUnlockParam[identifier], nil
}
