package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type EnterPageConfig struct {
	Key string `json:"Key"`
}
type EnterPageConfigAccessor struct {
	_data    []EnterPageConfig
	_dataKey map[string]EnterPageConfig
}

// LoadData retrieves the data. Must be called before EnterPageConfig.GroupData
func (a *EnterPageConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/EnterPageConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *EnterPageConfigAccessor) Raw() ([]EnterPageConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []EnterPageConfig{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with EnterPageConfigAccessor.LoadData to preload everything
func (a *EnterPageConfigAccessor) GroupData() {
	for _, d := range a._data {
		a._dataKey[d.Key] = d
	}
}

// ByKey returns the EnterPageConfig uniquely identified by Key
//
// Error is only non-nil if the source errors out
func (a *EnterPageConfigAccessor) ByKey(identifier string) (EnterPageConfig, error) {
	if a._dataKey == nil {
		err := a.LoadData()
		if err != nil {
			return EnterPageConfig{}, err
		}
		a.GroupData()
	}
	return a._dataKey[identifier], nil
}
