package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type AlleyMapGrade struct {
	GradeConditions []AlleyMapGradeGradeConditions `json:"GradeConditions"`
	GradeID         json.Number                    `json:"GradeID"`
	MapConfig       string                         `json:"MapConfig"`
	MapID           json.Number                    `json:"MapID"`
}
type AlleyMapGradeGradeConditions struct {
	CAOAPDCCPCA json.Number `json:"CAOAPDCCPCA"`
	PICHIHHCOCB string      `json:"PICHIHHCOCB"`
}
type AlleyMapGradeAccessor struct {
	_data          []AlleyMapGrade
	_dataMapConfig map[string]AlleyMapGrade
}

// LoadData retrieves the data. Must be called before AlleyMapGrade.GroupData
func (a *AlleyMapGradeAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/AlleyMapGrade.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *AlleyMapGradeAccessor) Raw() ([]AlleyMapGrade, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []AlleyMapGrade{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with AlleyMapGradeAccessor.LoadData to preload everything
func (a *AlleyMapGradeAccessor) GroupData() {
	a._dataMapConfig = map[string]AlleyMapGrade{}
	for _, d := range a._data {
		a._dataMapConfig[d.MapConfig] = d
	}
}

// ByMapConfig returns the AlleyMapGrade uniquely identified by MapConfig
//
// Error is only non-nil if the source errors out
func (a *AlleyMapGradeAccessor) ByMapConfig(identifier string) (AlleyMapGrade, error) {
	if a._dataMapConfig == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AlleyMapGrade{}, err
			}
		}
		a.GroupData()
	}
	return a._dataMapConfig[identifier], nil
}
