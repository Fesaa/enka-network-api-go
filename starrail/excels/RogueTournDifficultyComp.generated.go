package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type RogueTournDifficultyComp struct {
	DifficultyCompID float64 `json:"DifficultyCompID"`
	Level            float64 `json:"Level"`
}
type RogueTournDifficultyCompAccessor struct {
	_data                 []RogueTournDifficultyComp
	_dataDifficultyCompID map[float64]RogueTournDifficultyComp
	_dataLevel            map[float64]RogueTournDifficultyComp
}

// LoadData retrieves the data. Must be called before RogueTournDifficultyComp.GroupData
func (a *RogueTournDifficultyCompAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueTournDifficultyComp.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueTournDifficultyCompAccessor) Raw() ([]RogueTournDifficultyComp, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueTournDifficultyComp{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueTournDifficultyCompAccessor.LoadData to preload everything
func (a *RogueTournDifficultyCompAccessor) GroupData() {
	for _, d := range a._data {
		a._dataDifficultyCompID[d.DifficultyCompID] = d
		a._dataLevel[d.Level] = d
	}
}

// ByDifficultyCompID returns the RogueTournDifficultyComp uniquely identified by DifficultyCompID
//
// Error is only non-nil if the source errors out
func (a *RogueTournDifficultyCompAccessor) ByDifficultyCompID(identifier float64) (RogueTournDifficultyComp, error) {
	if a._dataDifficultyCompID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueTournDifficultyComp{}, err
			}
		}
		a.GroupData()
	}
	return a._dataDifficultyCompID[identifier], nil
}

// ByLevel returns the RogueTournDifficultyComp uniquely identified by Level
//
// Error is only non-nil if the source errors out
func (a *RogueTournDifficultyCompAccessor) ByLevel(identifier float64) (RogueTournDifficultyComp, error) {
	if a._dataLevel == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueTournDifficultyComp{}, err
			}
		}
		a.GroupData()
	}
	return a._dataLevel[identifier], nil
}
