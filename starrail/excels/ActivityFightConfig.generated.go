package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type ActivityFightConfig struct {
	ActivityFightGroupID json.Number `json:"ActivityFightGroupID"`
	DifficultyLevel      string      `json:"DifficultyLevel"`
	FightEventID         json.Number `json:"FightEventID"`
	OffsetLevel          json.Number `json:"OffsetLevel"`
	RewardID             json.Number `json:"RewardID"`
	RewardQuest          json.Number `json:"RewardQuest"`
	RewardWave           json.Number `json:"RewardWave"`
	RewardWave2          json.Number `json:"RewardWave2"`
	RoundsLimit          json.Number `json:"RoundsLimit"`
	TotalWave            json.Number `json:"TotalWave"`
}
type ActivityFightConfigAccessor struct {
	_data []ActivityFightConfig
}

// LoadData retrieves the data. Must be called before ActivityFightConfig.GroupData
func (a *ActivityFightConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ActivityFightConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ActivityFightConfigAccessor) Raw() ([]ActivityFightConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ActivityFightConfig{}, err
		}
	}
	return a._data, nil
}
