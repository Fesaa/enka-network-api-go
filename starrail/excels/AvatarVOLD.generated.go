package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type AvatarVOLD struct {
	ActionBegin           float64 `json:"ActionBegin"`
	ActionBeginAdvantage  float64 `json:"ActionBeginAdvantage"`
	ActionBeginHighThreat float64 `json:"ActionBeginHighThreat"`
	LightHit              float64 `json:"LightHit"`
	ReceiveHealing        float64 `json:"ReceiveHealing"`
	Revived               float64 `json:"Revived"`
	StandBy               float64 `json:"StandBy"`
	UltraReady            float64 `json:"UltraReady"`
	VOTag                 string  `json:"VOTag"`
}
type AvatarVOLDAccessor struct {
	_data      []AvatarVOLD
	_dataVOTag map[string]AvatarVOLD
}

// LoadData retrieves the data. Must be called before AvatarVOLD.GroupData
func (a *AvatarVOLDAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/AvatarVOLD.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *AvatarVOLDAccessor) Raw() ([]AvatarVOLD, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []AvatarVOLD{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with AvatarVOLDAccessor.LoadData to preload everything
func (a *AvatarVOLDAccessor) GroupData() {
	a._dataVOTag = map[string]AvatarVOLD{}
	for _, d := range a._data {
		a._dataVOTag[d.VOTag] = d
	}
}

// ByVOTag returns the AvatarVOLD uniquely identified by VOTag
//
// Error is only non-nil if the source errors out
func (a *AvatarVOLDAccessor) ByVOTag(identifier string) (AvatarVOLD, error) {
	if a._dataVOTag == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AvatarVOLD{}, err
			}
		}
		a.GroupData()
	}
	return a._dataVOTag[identifier], nil
}
