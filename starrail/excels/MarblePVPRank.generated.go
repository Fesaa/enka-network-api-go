package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type MarblePVPRank struct {
	BigIconPath   string                 `json:"BigIconPath"`
	ID            json.Number            `json:"ID"`
	IconPath      string                 `json:"IconPath"`
	LevelPool     []json.Number          `json:"LevelPool"`
	LoseAIRank    json.Number            `json:"LoseAIRank"`
	Name          map[string]json.Number `json:"Name"`
	ScoreArea     []json.Number          `json:"ScoreArea"`
	SmallIconPath string                 `json:"SmallIconPath"`
	TimeOutAIRank json.Number            `json:"TimeOutAIRank"`
}
type MarblePVPRankAccessor struct {
	_data              []MarblePVPRank
	_dataBigIconPath   map[string]MarblePVPRank
	_dataIconPath      map[string]MarblePVPRank
	_dataSmallIconPath map[string]MarblePVPRank
}

// LoadData retrieves the data. Must be called before MarblePVPRank.GroupData
func (a *MarblePVPRankAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MarblePVPRank.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MarblePVPRankAccessor) Raw() ([]MarblePVPRank, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MarblePVPRank{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MarblePVPRankAccessor.LoadData to preload everything
func (a *MarblePVPRankAccessor) GroupData() {
	a._dataBigIconPath = map[string]MarblePVPRank{}
	a._dataIconPath = map[string]MarblePVPRank{}
	a._dataSmallIconPath = map[string]MarblePVPRank{}
	for _, d := range a._data {
		a._dataBigIconPath[d.BigIconPath] = d
		a._dataIconPath[d.IconPath] = d
		a._dataSmallIconPath[d.SmallIconPath] = d
	}
}

// ByBigIconPath returns the MarblePVPRank uniquely identified by BigIconPath
//
// Error is only non-nil if the source errors out
func (a *MarblePVPRankAccessor) ByBigIconPath(identifier string) (MarblePVPRank, error) {
	if a._dataBigIconPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MarblePVPRank{}, err
			}
		}
		a.GroupData()
	}
	return a._dataBigIconPath[identifier], nil
}

// ByIconPath returns the MarblePVPRank uniquely identified by IconPath
//
// Error is only non-nil if the source errors out
func (a *MarblePVPRankAccessor) ByIconPath(identifier string) (MarblePVPRank, error) {
	if a._dataIconPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MarblePVPRank{}, err
			}
		}
		a.GroupData()
	}
	return a._dataIconPath[identifier], nil
}

// BySmallIconPath returns the MarblePVPRank uniquely identified by SmallIconPath
//
// Error is only non-nil if the source errors out
func (a *MarblePVPRankAccessor) BySmallIconPath(identifier string) (MarblePVPRank, error) {
	if a._dataSmallIconPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MarblePVPRank{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSmallIconPath[identifier], nil
}
