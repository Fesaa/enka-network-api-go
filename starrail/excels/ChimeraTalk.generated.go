package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type ChimeraTalk struct {
	EvPath      string    `json:"EvPath"`
	TalkContent hash.Hash `json:"TalkContent"`
	TalkID      float64   `json:"TalkID"`
}
type ChimeraTalkAccessor struct {
	_data       []ChimeraTalk
	_dataTalkID map[float64]ChimeraTalk
}

// LoadData retrieves the data. Must be called before ChimeraTalk.GroupData
func (a *ChimeraTalkAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ChimeraTalk.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ChimeraTalkAccessor) Raw() ([]ChimeraTalk, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ChimeraTalk{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ChimeraTalkAccessor.LoadData to preload everything
func (a *ChimeraTalkAccessor) GroupData() {
	for _, d := range a._data {
		a._dataTalkID[d.TalkID] = d
	}
}

// ByTalkID returns the ChimeraTalk uniquely identified by TalkID
//
// Error is only non-nil if the source errors out
func (a *ChimeraTalkAccessor) ByTalkID(identifier float64) (ChimeraTalk, error) {
	if a._dataTalkID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ChimeraTalk{}, err
			}
		}
		a.GroupData()
	}
	return a._dataTalkID[identifier], nil
}
