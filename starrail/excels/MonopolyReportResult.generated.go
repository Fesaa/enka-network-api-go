package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type MonopolyReportResult struct {
	Desc             map[string]json.Number `json:"Desc"`
	DescDetail       map[string]json.Number `json:"DescDetail"`
	FigurePrefabPath string                 `json:"FigurePrefabPath"`
	ID               json.Number            `json:"ID"`
	IconPath         string                 `json:"IconPath"`
	MBTIValueX       json.Number            `json:"MBTIValueX"`
	MBTIValueY       json.Number            `json:"MBTIValueY"`
	Name             map[string]json.Number `json:"Name"`
	UnlockTips       map[string]json.Number `json:"UnlockTips"`
}
type MonopolyReportResultAccessor struct {
	_data                 []MonopolyReportResult
	_dataFigurePrefabPath map[string]MonopolyReportResult
	_dataID               map[json.Number]MonopolyReportResult
}

// LoadData retrieves the data. Must be called before MonopolyReportResult.GroupData
func (a *MonopolyReportResultAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MonopolyReportResult.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MonopolyReportResultAccessor) Raw() ([]MonopolyReportResult, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MonopolyReportResult{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MonopolyReportResultAccessor.LoadData to preload everything
func (a *MonopolyReportResultAccessor) GroupData() {
	a._dataFigurePrefabPath = map[string]MonopolyReportResult{}
	a._dataID = map[json.Number]MonopolyReportResult{}
	for _, d := range a._data {
		a._dataFigurePrefabPath[d.FigurePrefabPath] = d
		a._dataID[d.ID] = d
	}
}

// ByFigurePrefabPath returns the MonopolyReportResult uniquely identified by FigurePrefabPath
//
// Error is only non-nil if the source errors out
func (a *MonopolyReportResultAccessor) ByFigurePrefabPath(identifier string) (MonopolyReportResult, error) {
	if a._dataFigurePrefabPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MonopolyReportResult{}, err
			}
		}
		a.GroupData()
	}
	return a._dataFigurePrefabPath[identifier], nil
}

// ByID returns the MonopolyReportResult uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *MonopolyReportResultAccessor) ByID(identifier json.Number) (MonopolyReportResult, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MonopolyReportResult{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}
