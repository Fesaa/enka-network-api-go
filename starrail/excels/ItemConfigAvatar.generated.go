package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type ItemConfigAvatar struct {
	CustomDataList       []interface{}          `json:"CustomDataList"`
	ID                   json.Number            `json:"ID"`
	InventoryDisplayTag  json.Number            `json:"InventoryDisplayTag"`
	ItemAvatarIconPath   string                 `json:"ItemAvatarIconPath"`
	ItemBGDesc           map[string]json.Number `json:"ItemBGDesc"`
	ItemCurrencyIconPath string                 `json:"ItemCurrencyIconPath"`
	ItemFigureIconPath   string                 `json:"ItemFigureIconPath"`
	ItemIconPath         string                 `json:"ItemIconPath"`
	ItemMainType         string                 `json:"ItemMainType"`
	ItemName             map[string]json.Number `json:"ItemName"`
	ItemSubType          string                 `json:"ItemSubType"`
	PileLimit            json.Number            `json:"PileLimit"`
	Rarity               string                 `json:"Rarity"`
	ReturnItemIDList     []interface{}          `json:"ReturnItemIDList"`
}
type ItemConfigAvatarAccessor struct {
	_data   []ItemConfigAvatar
	_dataID map[json.Number]ItemConfigAvatar
}

// LoadData retrieves the data. Must be called before ItemConfigAvatar.GroupData
func (a *ItemConfigAvatarAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ItemConfigAvatar.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ItemConfigAvatarAccessor) Raw() ([]ItemConfigAvatar, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ItemConfigAvatar{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ItemConfigAvatarAccessor.LoadData to preload everything
func (a *ItemConfigAvatarAccessor) GroupData() {
	a._dataID = map[json.Number]ItemConfigAvatar{}
	for _, d := range a._data {
		a._dataID[d.ID] = d
	}
}

// ByID returns the ItemConfigAvatar uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *ItemConfigAvatarAccessor) ByID(identifier json.Number) (ItemConfigAvatar, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ItemConfigAvatar{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}
