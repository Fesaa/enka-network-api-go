package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type DrinkMakerQuantifyTag struct {
	TagID float64 `json:"TagID"`
	Type  string  `json:"Type"`
	Value float64 `json:"Value"`
}
type DrinkMakerQuantifyTagAccessor struct {
	_data      []DrinkMakerQuantifyTag
	_dataTagID map[float64]DrinkMakerQuantifyTag
}

// LoadData retrieves the data. Must be called before DrinkMakerQuantifyTag.GroupData
func (a *DrinkMakerQuantifyTagAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/DrinkMakerQuantifyTag.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *DrinkMakerQuantifyTagAccessor) Raw() ([]DrinkMakerQuantifyTag, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []DrinkMakerQuantifyTag{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with DrinkMakerQuantifyTagAccessor.LoadData to preload everything
func (a *DrinkMakerQuantifyTagAccessor) GroupData() {
	a._dataTagID = map[float64]DrinkMakerQuantifyTag{}
	for _, d := range a._data {
		a._dataTagID[d.TagID] = d
	}
}

// ByTagID returns the DrinkMakerQuantifyTag uniquely identified by TagID
//
// Error is only non-nil if the source errors out
func (a *DrinkMakerQuantifyTagAccessor) ByTagID(identifier float64) (DrinkMakerQuantifyTag, error) {
	if a._dataTagID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return DrinkMakerQuantifyTag{}, err
			}
		}
		a.GroupData()
	}
	return a._dataTagID[identifier], nil
}
