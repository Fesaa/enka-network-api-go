package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type EvolveBuildRaccoonTalk struct {
	RaccoonPicPath string      `json:"RaccoonPicPath"`
	RaccoonState   string      `json:"RaccoonState"`
	Season         string      `json:"Season"`
	TextmapList    []hash.Hash `json:"TextmapList"`
}
type EvolveBuildRaccoonTalkAccessor struct {
	_data               []EvolveBuildRaccoonTalk
	_dataRaccoonPicPath map[string]EvolveBuildRaccoonTalk
	_dataRaccoonState   map[string]EvolveBuildRaccoonTalk
}

// LoadData retrieves the data. Must be called before EvolveBuildRaccoonTalk.GroupData
func (a *EvolveBuildRaccoonTalkAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/EvolveBuildRaccoonTalk.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *EvolveBuildRaccoonTalkAccessor) Raw() ([]EvolveBuildRaccoonTalk, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []EvolveBuildRaccoonTalk{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with EvolveBuildRaccoonTalkAccessor.LoadData to preload everything
func (a *EvolveBuildRaccoonTalkAccessor) GroupData() {
	a._dataRaccoonPicPath = map[string]EvolveBuildRaccoonTalk{}
	a._dataRaccoonState = map[string]EvolveBuildRaccoonTalk{}
	for _, d := range a._data {
		a._dataRaccoonPicPath[d.RaccoonPicPath] = d
		a._dataRaccoonState[d.RaccoonState] = d
	}
}

// ByRaccoonPicPath returns the EvolveBuildRaccoonTalk uniquely identified by RaccoonPicPath
//
// Error is only non-nil if the source errors out
func (a *EvolveBuildRaccoonTalkAccessor) ByRaccoonPicPath(identifier string) (EvolveBuildRaccoonTalk, error) {
	if a._dataRaccoonPicPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return EvolveBuildRaccoonTalk{}, err
			}
		}
		a.GroupData()
	}
	return a._dataRaccoonPicPath[identifier], nil
}

// ByRaccoonState returns the EvolveBuildRaccoonTalk uniquely identified by RaccoonState
//
// Error is only non-nil if the source errors out
func (a *EvolveBuildRaccoonTalkAccessor) ByRaccoonState(identifier string) (EvolveBuildRaccoonTalk, error) {
	if a._dataRaccoonState == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return EvolveBuildRaccoonTalk{}, err
			}
		}
		a.GroupData()
	}
	return a._dataRaccoonState[identifier], nil
}
