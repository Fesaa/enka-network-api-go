package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type MultipleDropFarmType struct {
	MultipleDropType string  `json:"MultipleDropType"`
	SignIconPath     string  `json:"SignIconPath"`
	UnlockID         float64 `json:"UnlockID"`
}
type MultipleDropFarmTypeAccessor struct {
	_data                 []MultipleDropFarmType
	_dataMultipleDropType map[string]MultipleDropFarmType
	_dataUnlockID         map[float64]MultipleDropFarmType
}

// LoadData retrieves the data. Must be called before MultipleDropFarmType.GroupData
func (a *MultipleDropFarmTypeAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MultipleDropFarmType.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MultipleDropFarmTypeAccessor) Raw() ([]MultipleDropFarmType, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MultipleDropFarmType{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MultipleDropFarmTypeAccessor.LoadData to preload everything
func (a *MultipleDropFarmTypeAccessor) GroupData() {
	a._dataMultipleDropType = map[string]MultipleDropFarmType{}
	a._dataUnlockID = map[float64]MultipleDropFarmType{}
	for _, d := range a._data {
		a._dataMultipleDropType[d.MultipleDropType] = d
		a._dataUnlockID[d.UnlockID] = d
	}
}

// ByMultipleDropType returns the MultipleDropFarmType uniquely identified by MultipleDropType
//
// Error is only non-nil if the source errors out
func (a *MultipleDropFarmTypeAccessor) ByMultipleDropType(identifier string) (MultipleDropFarmType, error) {
	if a._dataMultipleDropType == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MultipleDropFarmType{}, err
			}
		}
		a.GroupData()
	}
	return a._dataMultipleDropType[identifier], nil
}

// ByUnlockID returns the MultipleDropFarmType uniquely identified by UnlockID
//
// Error is only non-nil if the source errors out
func (a *MultipleDropFarmTypeAccessor) ByUnlockID(identifier float64) (MultipleDropFarmType, error) {
	if a._dataUnlockID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MultipleDropFarmType{}, err
			}
		}
		a.GroupData()
	}
	return a._dataUnlockID[identifier], nil
}
