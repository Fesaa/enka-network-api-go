package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type RogueHandBookEvent struct {
	EventHandbookID         float64                                     `json:"EventHandbookID"`
	EventReward             float64                                     `json:"EventReward"`
	EventTitle              hash.Hash                                   `json:"EventTitle"`
	EventType               hash.Hash                                   `json:"EventType"`
	EventTypeList           []float64                                   `json:"EventTypeList"`
	ImageID                 float64                                     `json:"ImageID"`
	Order                   float64                                     `json:"Order"`
	UnlockHintDesc          hash.Hash                                   `json:"UnlockHintDesc"`
	UnlockNPCProgressIDList []RogueHandBookEventUnlockNPCProgressIDList `json:"UnlockNPCProgressIDList"`
}
type RogueHandBookEventUnlockNPCProgressIDList struct {
	MBNKLBEBOHB float64 `json:"MBNKLBEBOHB"`
	NNDEOKKKKPE float64 `json:"NNDEOKKKKPE"`
}
type RogueHandBookEventAccessor struct {
	_data                []RogueHandBookEvent
	_dataOrder           map[float64]RogueHandBookEvent
	_dataEventHandbookID map[float64]RogueHandBookEvent
}

// LoadData retrieves the data. Must be called before RogueHandBookEvent.GroupData
func (a *RogueHandBookEventAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueHandBookEvent.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueHandBookEventAccessor) Raw() ([]RogueHandBookEvent, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueHandBookEvent{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueHandBookEventAccessor.LoadData to preload everything
func (a *RogueHandBookEventAccessor) GroupData() {
	for _, d := range a._data {
		a._dataOrder[d.Order] = d
		a._dataEventHandbookID[d.EventHandbookID] = d
	}
}

// ByOrder returns the RogueHandBookEvent uniquely identified by Order
//
// Error is only non-nil if the source errors out
func (a *RogueHandBookEventAccessor) ByOrder(identifier float64) (RogueHandBookEvent, error) {
	if a._dataOrder == nil {
		err := a.LoadData()
		if err != nil {
			return RogueHandBookEvent{}, err
		}
		a.GroupData()
	}
	return a._dataOrder[identifier], nil
}

// ByEventHandbookID returns the RogueHandBookEvent uniquely identified by EventHandbookID
//
// Error is only non-nil if the source errors out
func (a *RogueHandBookEventAccessor) ByEventHandbookID(identifier float64) (RogueHandBookEvent, error) {
	if a._dataEventHandbookID == nil {
		err := a.LoadData()
		if err != nil {
			return RogueHandBookEvent{}, err
		}
		a.GroupData()
	}
	return a._dataEventHandbookID[identifier], nil
}
