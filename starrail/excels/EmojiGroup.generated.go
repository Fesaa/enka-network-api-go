package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type EmojiGroup struct {
	EmojiGroupID   float64   `json:"EmojiGroupID"`
	EmojiGroupType string    `json:"EmojiGroupType"`
	GroupName      hash.Hash `json:"GroupName"`
	ImgPath        string    `json:"ImgPath"`
}
type EmojiGroupAccessor struct {
	_data             []EmojiGroup
	_dataEmojiGroupID map[float64]EmojiGroup
	_dataImgPath      map[string]EmojiGroup
}

// LoadData retrieves the data. Must be called before EmojiGroup.GroupData
func (a *EmojiGroupAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/EmojiGroup.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *EmojiGroupAccessor) Raw() ([]EmojiGroup, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []EmojiGroup{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with EmojiGroupAccessor.LoadData to preload everything
func (a *EmojiGroupAccessor) GroupData() {
	for _, d := range a._data {
		a._dataEmojiGroupID[d.EmojiGroupID] = d
		a._dataImgPath[d.ImgPath] = d
	}
}

// ByEmojiGroupID returns the EmojiGroup uniquely identified by EmojiGroupID
//
// Error is only non-nil if the source errors out
func (a *EmojiGroupAccessor) ByEmojiGroupID(identifier float64) (EmojiGroup, error) {
	if a._dataEmojiGroupID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return EmojiGroup{}, err
			}
		}
		a.GroupData()
	}
	return a._dataEmojiGroupID[identifier], nil
}

// ByImgPath returns the EmojiGroup uniquely identified by ImgPath
//
// Error is only non-nil if the source errors out
func (a *EmojiGroupAccessor) ByImgPath(identifier string) (EmojiGroup, error) {
	if a._dataImgPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return EmojiGroup{}, err
			}
		}
		a.GroupData()
	}
	return a._dataImgPath[identifier], nil
}
