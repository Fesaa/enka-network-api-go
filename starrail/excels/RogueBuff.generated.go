package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type RogueBuff struct {
	ActivityModuleID    json.Number            `json:"ActivityModuleID"`
	AeonCrossIcon       string                 `json:"AeonCrossIcon"`
	AeonID              json.Number            `json:"AeonID"`
	BattleEventBuffType string                 `json:"BattleEventBuffType"`
	ExtraEffectIDList   []json.Number          `json:"ExtraEffectIDList"`
	HandbookUnlockDesc  map[string]json.Number `json:"HandbookUnlockDesc"`
	IsShow              bool                   `json:"IsShow"`
	MazeBuffID          json.Number            `json:"MazeBuffID"`
	MazeBuffLevel       json.Number            `json:"MazeBuffLevel"`
	RogueBuffCategory   string                 `json:"RogueBuffCategory"`
	RogueBuffTag        json.Number            `json:"RogueBuffTag"`
	RogueBuffType       json.Number            `json:"RogueBuffType"`
	RogueVersion        json.Number            `json:"RogueVersion"`
	UnlockIDList        []json.Number          `json:"UnlockIDList"`
}
type RogueBuffAccessor struct {
	_data             []RogueBuff
	_dataRogueBuffTag map[json.Number]RogueBuff
}

// LoadData retrieves the data. Must be called before RogueBuff.GroupData
func (a *RogueBuffAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueBuff.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueBuffAccessor) Raw() ([]RogueBuff, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueBuff{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueBuffAccessor.LoadData to preload everything
func (a *RogueBuffAccessor) GroupData() {
	a._dataRogueBuffTag = map[json.Number]RogueBuff{}
	for _, d := range a._data {
		a._dataRogueBuffTag[d.RogueBuffTag] = d
	}
}

// ByRogueBuffTag returns the RogueBuff uniquely identified by RogueBuffTag
//
// Error is only non-nil if the source errors out
func (a *RogueBuffAccessor) ByRogueBuffTag(identifier json.Number) (RogueBuff, error) {
	if a._dataRogueBuffTag == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueBuff{}, err
			}
		}
		a.GroupData()
	}
	return a._dataRogueBuffTag[identifier], nil
}
