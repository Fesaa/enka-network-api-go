package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type ChallengeGeneralConfig struct {
	ChallengeGroupType   string                                  `json:"ChallengeGroupType"`
	EarlyAccessContentID json.Number                             `json:"EarlyAccessContentID"`
	GotoID               json.Number                             `json:"GotoID"`
	GuideConditions      []ChallengeGeneralConfigGuideConditions `json:"GuideConditions"`
	PreConditions        []ChallengeGeneralConfigPreConditions   `json:"PreConditions"`
	TabImgPath           string                                  `json:"TabImgPath"`
}
type ChallengeGeneralConfigGuideConditions struct {
	Param string `json:"Param"`
	Type  string `json:"Type"`
}
type ChallengeGeneralConfigPreConditions struct {
	Param string `json:"Param"`
	Type  string `json:"Type"`
}
type ChallengeGeneralConfigAccessor struct {
	_data                   []ChallengeGeneralConfig
	_dataChallengeGroupType map[string]ChallengeGeneralConfig
	_dataTabImgPath         map[string]ChallengeGeneralConfig
}

// LoadData retrieves the data. Must be called before ChallengeGeneralConfig.GroupData
func (a *ChallengeGeneralConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ChallengeGeneralConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ChallengeGeneralConfigAccessor) Raw() ([]ChallengeGeneralConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ChallengeGeneralConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ChallengeGeneralConfigAccessor.LoadData to preload everything
func (a *ChallengeGeneralConfigAccessor) GroupData() {
	a._dataChallengeGroupType = map[string]ChallengeGeneralConfig{}
	a._dataTabImgPath = map[string]ChallengeGeneralConfig{}
	for _, d := range a._data {
		a._dataChallengeGroupType[d.ChallengeGroupType] = d
		a._dataTabImgPath[d.TabImgPath] = d
	}
}

// ByChallengeGroupType returns the ChallengeGeneralConfig uniquely identified by ChallengeGroupType
//
// Error is only non-nil if the source errors out
func (a *ChallengeGeneralConfigAccessor) ByChallengeGroupType(identifier string) (ChallengeGeneralConfig, error) {
	if a._dataChallengeGroupType == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ChallengeGeneralConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataChallengeGroupType[identifier], nil
}

// ByTabImgPath returns the ChallengeGeneralConfig uniquely identified by TabImgPath
//
// Error is only non-nil if the source errors out
func (a *ChallengeGeneralConfigAccessor) ByTabImgPath(identifier string) (ChallengeGeneralConfig, error) {
	if a._dataTabImgPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ChallengeGeneralConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataTabImgPath[identifier], nil
}
