package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type AutoFightVO struct {
	LightHit    float64 `json:"LightHit"`
	Mode        float64 `json:"Mode"`
	ReceiveBuff float64 `json:"ReceiveBuff"`
}
type AutoFightVOAccessor struct {
	_data            []AutoFightVO
	_dataLightHit    map[float64]AutoFightVO
	_dataMode        map[float64]AutoFightVO
	_dataReceiveBuff map[float64]AutoFightVO
}

// LoadData retrieves the data. Must be called before AutoFightVO.GroupData
func (a *AutoFightVOAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/AutoFightVO.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *AutoFightVOAccessor) Raw() ([]AutoFightVO, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []AutoFightVO{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with AutoFightVOAccessor.LoadData to preload everything
func (a *AutoFightVOAccessor) GroupData() {
	a._dataLightHit = map[float64]AutoFightVO{}
	a._dataMode = map[float64]AutoFightVO{}
	a._dataReceiveBuff = map[float64]AutoFightVO{}
	for _, d := range a._data {
		a._dataLightHit[d.LightHit] = d
		a._dataMode[d.Mode] = d
		a._dataReceiveBuff[d.ReceiveBuff] = d
	}
}

// ByLightHit returns the AutoFightVO uniquely identified by LightHit
//
// Error is only non-nil if the source errors out
func (a *AutoFightVOAccessor) ByLightHit(identifier float64) (AutoFightVO, error) {
	if a._dataLightHit == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AutoFightVO{}, err
			}
		}
		a.GroupData()
	}
	return a._dataLightHit[identifier], nil
}

// ByMode returns the AutoFightVO uniquely identified by Mode
//
// Error is only non-nil if the source errors out
func (a *AutoFightVOAccessor) ByMode(identifier float64) (AutoFightVO, error) {
	if a._dataMode == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AutoFightVO{}, err
			}
		}
		a.GroupData()
	}
	return a._dataMode[identifier], nil
}

// ByReceiveBuff returns the AutoFightVO uniquely identified by ReceiveBuff
//
// Error is only non-nil if the source errors out
func (a *AutoFightVOAccessor) ByReceiveBuff(identifier float64) (AutoFightVO, error) {
	if a._dataReceiveBuff == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AutoFightVO{}, err
			}
		}
		a.GroupData()
	}
	return a._dataReceiveBuff[identifier], nil
}
