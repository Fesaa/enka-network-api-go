package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type AudioBookData struct {
	AudioEvent string  `json:"AudioEvent"`
	BookID     float64 `json:"BookID"`
}
type AudioBookDataAccessor struct {
	_data           []AudioBookData
	_dataAudioEvent map[string]AudioBookData
	_dataBookID     map[float64]AudioBookData
}

// LoadData retrieves the data. Must be called before AudioBookData.GroupData
func (a *AudioBookDataAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/AudioBookData.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *AudioBookDataAccessor) Raw() ([]AudioBookData, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []AudioBookData{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with AudioBookDataAccessor.LoadData to preload everything
func (a *AudioBookDataAccessor) GroupData() {
	for _, d := range a._data {
		a._dataAudioEvent[d.AudioEvent] = d
		a._dataBookID[d.BookID] = d
	}
}

// ByAudioEvent returns the AudioBookData uniquely identified by AudioEvent
//
// Error is only non-nil if the source errors out
func (a *AudioBookDataAccessor) ByAudioEvent(identifier string) (AudioBookData, error) {
	if a._dataAudioEvent == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AudioBookData{}, err
			}
		}
		a.GroupData()
	}
	return a._dataAudioEvent[identifier], nil
}

// ByBookID returns the AudioBookData uniquely identified by BookID
//
// Error is only non-nil if the source errors out
func (a *AudioBookDataAccessor) ByBookID(identifier float64) (AudioBookData, error) {
	if a._dataBookID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AudioBookData{}, err
			}
		}
		a.GroupData()
	}
	return a._dataBookID[identifier], nil
}
