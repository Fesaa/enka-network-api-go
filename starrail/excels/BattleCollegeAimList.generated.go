package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type BattleCollegeAimList struct {
	AimDesc     hash.Hash `json:"AimDesc"`
	AimID       float64   `json:"AimID"`
	AimProgress float64   `json:"AimProgress"`
	AimTitle    hash.Hash `json:"AimTitle"`
}
type BattleCollegeAimListAccessor struct {
	_data      []BattleCollegeAimList
	_dataAimID map[float64]BattleCollegeAimList
}

// LoadData retrieves the data. Must be called before BattleCollegeAimList.GroupData
func (a *BattleCollegeAimListAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/BattleCollegeAimList.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *BattleCollegeAimListAccessor) Raw() ([]BattleCollegeAimList, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []BattleCollegeAimList{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with BattleCollegeAimListAccessor.LoadData to preload everything
func (a *BattleCollegeAimListAccessor) GroupData() {
	a._dataAimID = map[float64]BattleCollegeAimList{}
	for _, d := range a._data {
		a._dataAimID[d.AimID] = d
	}
}

// ByAimID returns the BattleCollegeAimList uniquely identified by AimID
//
// Error is only non-nil if the source errors out
func (a *BattleCollegeAimListAccessor) ByAimID(identifier float64) (BattleCollegeAimList, error) {
	if a._dataAimID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return BattleCollegeAimList{}, err
			}
		}
		a.GroupData()
	}
	return a._dataAimID[identifier], nil
}
