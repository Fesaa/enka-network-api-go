package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type ClockParkSpecialMission struct {
	EventName                  hash.Hash `json:"EventName"`
	EventNum                   float64   `json:"EventNum"`
	EventScript                float64   `json:"EventScript"`
	SpecialMissionGotoIDBefore float64   `json:"SpecialMissionGotoIDBefore"`
	SpecialMissionID           float64   `json:"SpecialMissionID"`
	SpecialMissionIconPath     string    `json:"SpecialMissionIconPath"`
	SpecialMissionImgPath      string    `json:"SpecialMissionImgPath"`
	SpecialMissionUnlockItemID float64   `json:"SpecialMissionUnlockItemID"`
}
type ClockParkSpecialMissionAccessor struct {
	_data                           []ClockParkSpecialMission
	_dataSpecialMissionID           map[float64]ClockParkSpecialMission
	_dataEventNum                   map[float64]ClockParkSpecialMission
	_dataSpecialMissionGotoIDBefore map[float64]ClockParkSpecialMission
	_dataSpecialMissionUnlockItemID map[float64]ClockParkSpecialMission
}

// LoadData retrieves the data. Must be called before ClockParkSpecialMission.GroupData
func (a *ClockParkSpecialMissionAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ClockParkSpecialMission.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ClockParkSpecialMissionAccessor) Raw() ([]ClockParkSpecialMission, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ClockParkSpecialMission{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ClockParkSpecialMissionAccessor.LoadData to preload everything
func (a *ClockParkSpecialMissionAccessor) GroupData() {
	for _, d := range a._data {
		a._dataSpecialMissionID[d.SpecialMissionID] = d
		a._dataEventNum[d.EventNum] = d
		a._dataSpecialMissionGotoIDBefore[d.SpecialMissionGotoIDBefore] = d
		a._dataSpecialMissionUnlockItemID[d.SpecialMissionUnlockItemID] = d
	}
}

// BySpecialMissionID returns the ClockParkSpecialMission uniquely identified by SpecialMissionID
//
// Error is only non-nil if the source errors out
func (a *ClockParkSpecialMissionAccessor) BySpecialMissionID(identifier float64) (ClockParkSpecialMission, error) {
	if a._dataSpecialMissionID == nil {
		err := a.LoadData()
		if err != nil {
			return ClockParkSpecialMission{}, err
		}
		a.GroupData()
	}
	return a._dataSpecialMissionID[identifier], nil
}

// ByEventNum returns the ClockParkSpecialMission uniquely identified by EventNum
//
// Error is only non-nil if the source errors out
func (a *ClockParkSpecialMissionAccessor) ByEventNum(identifier float64) (ClockParkSpecialMission, error) {
	if a._dataEventNum == nil {
		err := a.LoadData()
		if err != nil {
			return ClockParkSpecialMission{}, err
		}
		a.GroupData()
	}
	return a._dataEventNum[identifier], nil
}

// BySpecialMissionGotoIDBefore returns the ClockParkSpecialMission uniquely identified by SpecialMissionGotoIDBefore
//
// Error is only non-nil if the source errors out
func (a *ClockParkSpecialMissionAccessor) BySpecialMissionGotoIDBefore(identifier float64) (ClockParkSpecialMission, error) {
	if a._dataSpecialMissionGotoIDBefore == nil {
		err := a.LoadData()
		if err != nil {
			return ClockParkSpecialMission{}, err
		}
		a.GroupData()
	}
	return a._dataSpecialMissionGotoIDBefore[identifier], nil
}

// BySpecialMissionUnlockItemID returns the ClockParkSpecialMission uniquely identified by SpecialMissionUnlockItemID
//
// Error is only non-nil if the source errors out
func (a *ClockParkSpecialMissionAccessor) BySpecialMissionUnlockItemID(identifier float64) (ClockParkSpecialMission, error) {
	if a._dataSpecialMissionUnlockItemID == nil {
		err := a.LoadData()
		if err != nil {
			return ClockParkSpecialMission{}, err
		}
		a.GroupData()
	}
	return a._dataSpecialMissionUnlockItemID[identifier], nil
}
