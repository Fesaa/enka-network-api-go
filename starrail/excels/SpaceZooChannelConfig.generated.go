package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type SpaceZooChannelConfig struct {
	Channel          string      `json:"Channel"`
	DefaultFeatureID json.Number `json:"DefaultFeatureID"`
	HandbookTag      json.Number `json:"HandbookTag"`
	InheritType      string      `json:"InheritType"`
	OfficialNameText string      `json:"OfficialNameText"`
}
type SpaceZooChannelConfigAccessor struct {
	_data        []SpaceZooChannelConfig
	_dataChannel map[string]SpaceZooChannelConfig
}

// LoadData retrieves the data. Must be called before SpaceZooChannelConfig.GroupData
func (a *SpaceZooChannelConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/SpaceZooChannelConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *SpaceZooChannelConfigAccessor) Raw() ([]SpaceZooChannelConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []SpaceZooChannelConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with SpaceZooChannelConfigAccessor.LoadData to preload everything
func (a *SpaceZooChannelConfigAccessor) GroupData() {
	a._dataChannel = map[string]SpaceZooChannelConfig{}
	for _, d := range a._data {
		a._dataChannel[d.Channel] = d
	}
}

// ByChannel returns the SpaceZooChannelConfig uniquely identified by Channel
//
// Error is only non-nil if the source errors out
func (a *SpaceZooChannelConfigAccessor) ByChannel(identifier string) (SpaceZooChannelConfig, error) {
	if a._dataChannel == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return SpaceZooChannelConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataChannel[identifier], nil
}
