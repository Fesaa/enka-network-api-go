package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type ItemComposeType struct {
	IsMainType     bool        `json:"IsMainType"`
	MainTypeID     json.Number `json:"MainTypeID"`
	MainTypeOrder  json.Number `json:"MainTypeOrder"`
	TypeID         json.Number `json:"TypeID"`
	TypeIconPath   string      `json:"TypeIconPath"`
	TypeTextmapID  string      `json:"TypeTextmapID"`
	UnlockDescribe string      `json:"UnlockDescribe"`
	UnlockID       json.Number `json:"UnlockID"`
}
type ItemComposeTypeAccessor struct {
	_data              []ItemComposeType
	_dataTypeID        map[json.Number]ItemComposeType
	_dataTypeTextmapID map[string]ItemComposeType
}

// LoadData retrieves the data. Must be called before ItemComposeType.GroupData
func (a *ItemComposeTypeAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ItemComposeType.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ItemComposeTypeAccessor) Raw() ([]ItemComposeType, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ItemComposeType{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ItemComposeTypeAccessor.LoadData to preload everything
func (a *ItemComposeTypeAccessor) GroupData() {
	a._dataTypeID = map[json.Number]ItemComposeType{}
	a._dataTypeTextmapID = map[string]ItemComposeType{}
	for _, d := range a._data {
		a._dataTypeID[d.TypeID] = d
		a._dataTypeTextmapID[d.TypeTextmapID] = d
	}
}

// ByTypeID returns the ItemComposeType uniquely identified by TypeID
//
// Error is only non-nil if the source errors out
func (a *ItemComposeTypeAccessor) ByTypeID(identifier json.Number) (ItemComposeType, error) {
	if a._dataTypeID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ItemComposeType{}, err
			}
		}
		a.GroupData()
	}
	return a._dataTypeID[identifier], nil
}

// ByTypeTextmapID returns the ItemComposeType uniquely identified by TypeTextmapID
//
// Error is only non-nil if the source errors out
func (a *ItemComposeTypeAccessor) ByTypeTextmapID(identifier string) (ItemComposeType, error) {
	if a._dataTypeTextmapID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ItemComposeType{}, err
			}
		}
		a.GroupData()
	}
	return a._dataTypeTextmapID[identifier], nil
}
