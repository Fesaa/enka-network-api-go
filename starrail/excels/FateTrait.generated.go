package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type FateTrait struct {
	AJIHNJGJLLJ float64       `json:"AJIHNJGJLLJ"`
	BKAJGLKEGFB hash.Hash     `json:"BKAJGLKEGFB"`
	CEMMGMBGKNG []interface{} `json:"CEMMGMBGKNG"`
	COEOJHOLANO string        `json:"COEOJHOLANO"`
	FJCLHHJBDDM float64       `json:"FJCLHHJBDDM"`
	GAABNPIDEAP hash.Hash     `json:"GAABNPIDEAP"`
	GNGOLJIOFND string        `json:"GNGOLJIOFND"`
	HBIJEKNACIL hash.Hash     `json:"HBIJEKNACIL"`
	HGMFEGIDCLI string        `json:"HGMFEGIDCLI"`
	HJNBJBBPIIM hash.Hash     `json:"HJNBJBBPIIM"`
	IILPOJFMPMD hash.Hash     `json:"IILPOJFMPMD"`
	JIPAHIICCJC []string      `json:"JIPAHIICCJC"`
	KBGACNHKLHI hash.Hash     `json:"KBGACNHKLHI"`
	KGCJIHOHBPN []float64     `json:"KGCJIHOHBPN"`
	MKEDMOLPMOC string        `json:"MKEDMOLPMOC"`
	NAPCGMKCDFP hash.Hash     `json:"NAPCGMKCDFP"`
	NGFFANDGNIL float64       `json:"NGFFANDGNIL"`
	OIEKCNPMDFC []hash.Value  `json:"OIEKCNPMDFC"`
}
type FateTraitAccessor struct {
	_data            []FateTrait
	_dataGNGOLJIOFND map[string]FateTrait
	_dataHGMFEGIDCLI map[string]FateTrait
	_dataNGFFANDGNIL map[float64]FateTrait
}

// LoadData retrieves the data. Must be called before FateTrait.GroupData
func (a *FateTraitAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/FateTrait.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *FateTraitAccessor) Raw() ([]FateTrait, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []FateTrait{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with FateTraitAccessor.LoadData to preload everything
func (a *FateTraitAccessor) GroupData() {
	a._dataGNGOLJIOFND = map[string]FateTrait{}
	a._dataHGMFEGIDCLI = map[string]FateTrait{}
	a._dataNGFFANDGNIL = map[float64]FateTrait{}
	for _, d := range a._data {
		a._dataGNGOLJIOFND[d.GNGOLJIOFND] = d
		a._dataHGMFEGIDCLI[d.HGMFEGIDCLI] = d
		a._dataNGFFANDGNIL[d.NGFFANDGNIL] = d
	}
}

// ByGNGOLJIOFND returns the FateTrait uniquely identified by GNGOLJIOFND
//
// Error is only non-nil if the source errors out
func (a *FateTraitAccessor) ByGNGOLJIOFND(identifier string) (FateTrait, error) {
	if a._dataGNGOLJIOFND == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FateTrait{}, err
			}
		}
		a.GroupData()
	}
	return a._dataGNGOLJIOFND[identifier], nil
}

// ByHGMFEGIDCLI returns the FateTrait uniquely identified by HGMFEGIDCLI
//
// Error is only non-nil if the source errors out
func (a *FateTraitAccessor) ByHGMFEGIDCLI(identifier string) (FateTrait, error) {
	if a._dataHGMFEGIDCLI == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FateTrait{}, err
			}
		}
		a.GroupData()
	}
	return a._dataHGMFEGIDCLI[identifier], nil
}

// ByNGFFANDGNIL returns the FateTrait uniquely identified by NGFFANDGNIL
//
// Error is only non-nil if the source errors out
func (a *FateTraitAccessor) ByNGFFANDGNIL(identifier float64) (FateTrait, error) {
	if a._dataNGFFANDGNIL == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FateTrait{}, err
			}
		}
		a.GroupData()
	}
	return a._dataNGFFANDGNIL[identifier], nil
}
