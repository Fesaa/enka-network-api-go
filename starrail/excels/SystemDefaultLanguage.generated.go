package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type SystemDefaultLanguage struct {
	DefaultAudioLanguage string `json:"DefaultAudioLanguage"`
	DefaultTextLanguage  string `json:"DefaultTextLanguage"`
	SystemLanguage       string `json:"SystemLanguage"`
}
type SystemDefaultLanguageAccessor struct {
	_data                    []SystemDefaultLanguage
	_dataDefaultTextLanguage map[string]SystemDefaultLanguage
	_dataSystemLanguage      map[string]SystemDefaultLanguage
}

// LoadData retrieves the data. Must be called before SystemDefaultLanguage.GroupData
func (a *SystemDefaultLanguageAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/SystemDefaultLanguage.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *SystemDefaultLanguageAccessor) Raw() ([]SystemDefaultLanguage, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []SystemDefaultLanguage{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with SystemDefaultLanguageAccessor.LoadData to preload everything
func (a *SystemDefaultLanguageAccessor) GroupData() {
	for _, d := range a._data {
		a._dataDefaultTextLanguage[d.DefaultTextLanguage] = d
		a._dataSystemLanguage[d.SystemLanguage] = d
	}
}

// ByDefaultTextLanguage returns the SystemDefaultLanguage uniquely identified by DefaultTextLanguage
//
// Error is only non-nil if the source errors out
func (a *SystemDefaultLanguageAccessor) ByDefaultTextLanguage(identifier string) (SystemDefaultLanguage, error) {
	if a._dataDefaultTextLanguage == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return SystemDefaultLanguage{}, err
			}
		}
		a.GroupData()
	}
	return a._dataDefaultTextLanguage[identifier], nil
}

// BySystemLanguage returns the SystemDefaultLanguage uniquely identified by SystemLanguage
//
// Error is only non-nil if the source errors out
func (a *SystemDefaultLanguageAccessor) BySystemLanguage(identifier string) (SystemDefaultLanguage, error) {
	if a._dataSystemLanguage == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return SystemDefaultLanguage{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSystemLanguage[identifier], nil
}
