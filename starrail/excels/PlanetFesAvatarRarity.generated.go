package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type PlanetFesAvatarRarity struct {
	CostParam             float64   `json:"CostParam"`
	IconPath              string    `json:"IconPath"`
	IncomeParam           float64   `json:"IncomeParam"`
	LevelSkipStarUpDetail float64   `json:"LevelSkipStarUpDetail"`
	Name                  hash.Hash `json:"Name"`
	PieceTransferNum      float64   `json:"PieceTransferNum"`
	Rarity                float64   `json:"Rarity"`
}
type PlanetFesAvatarRarityAccessor struct {
	_data                 []PlanetFesAvatarRarity
	_dataIncomeParam      map[float64]PlanetFesAvatarRarity
	_dataCostParam        map[float64]PlanetFesAvatarRarity
	_dataPieceTransferNum map[float64]PlanetFesAvatarRarity
	_dataIconPath         map[string]PlanetFesAvatarRarity
	_dataRarity           map[float64]PlanetFesAvatarRarity
}

// LoadData retrieves the data. Must be called before PlanetFesAvatarRarity.GroupData
func (a *PlanetFesAvatarRarityAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/PlanetFesAvatarRarity.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *PlanetFesAvatarRarityAccessor) Raw() ([]PlanetFesAvatarRarity, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []PlanetFesAvatarRarity{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with PlanetFesAvatarRarityAccessor.LoadData to preload everything
func (a *PlanetFesAvatarRarityAccessor) GroupData() {
	for _, d := range a._data {
		a._dataIncomeParam[d.IncomeParam] = d
		a._dataCostParam[d.CostParam] = d
		a._dataPieceTransferNum[d.PieceTransferNum] = d
		a._dataIconPath[d.IconPath] = d
		a._dataRarity[d.Rarity] = d
	}
}

// ByIncomeParam returns the PlanetFesAvatarRarity uniquely identified by IncomeParam
//
// Error is only non-nil if the source errors out
func (a *PlanetFesAvatarRarityAccessor) ByIncomeParam(identifier float64) (PlanetFesAvatarRarity, error) {
	if a._dataIncomeParam == nil {
		err := a.LoadData()
		if err != nil {
			return PlanetFesAvatarRarity{}, err
		}
		a.GroupData()
	}
	return a._dataIncomeParam[identifier], nil
}

// ByCostParam returns the PlanetFesAvatarRarity uniquely identified by CostParam
//
// Error is only non-nil if the source errors out
func (a *PlanetFesAvatarRarityAccessor) ByCostParam(identifier float64) (PlanetFesAvatarRarity, error) {
	if a._dataCostParam == nil {
		err := a.LoadData()
		if err != nil {
			return PlanetFesAvatarRarity{}, err
		}
		a.GroupData()
	}
	return a._dataCostParam[identifier], nil
}

// ByPieceTransferNum returns the PlanetFesAvatarRarity uniquely identified by PieceTransferNum
//
// Error is only non-nil if the source errors out
func (a *PlanetFesAvatarRarityAccessor) ByPieceTransferNum(identifier float64) (PlanetFesAvatarRarity, error) {
	if a._dataPieceTransferNum == nil {
		err := a.LoadData()
		if err != nil {
			return PlanetFesAvatarRarity{}, err
		}
		a.GroupData()
	}
	return a._dataPieceTransferNum[identifier], nil
}

// ByIconPath returns the PlanetFesAvatarRarity uniquely identified by IconPath
//
// Error is only non-nil if the source errors out
func (a *PlanetFesAvatarRarityAccessor) ByIconPath(identifier string) (PlanetFesAvatarRarity, error) {
	if a._dataIconPath == nil {
		err := a.LoadData()
		if err != nil {
			return PlanetFesAvatarRarity{}, err
		}
		a.GroupData()
	}
	return a._dataIconPath[identifier], nil
}

// ByRarity returns the PlanetFesAvatarRarity uniquely identified by Rarity
//
// Error is only non-nil if the source errors out
func (a *PlanetFesAvatarRarityAccessor) ByRarity(identifier float64) (PlanetFesAvatarRarity, error) {
	if a._dataRarity == nil {
		err := a.LoadData()
		if err != nil {
			return PlanetFesAvatarRarity{}, err
		}
		a.GroupData()
	}
	return a._dataRarity[identifier], nil
}
