package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type PlanetFesAvatarRarity struct {
	CostParam             json.Number            `json:"CostParam"`
	IconPath              string                 `json:"IconPath"`
	IncomeParam           json.Number            `json:"IncomeParam"`
	LevelSkipStarUpDetail json.Number            `json:"LevelSkipStarUpDetail"`
	Name                  map[string]json.Number `json:"Name"`
	PieceTransferNum      json.Number            `json:"PieceTransferNum"`
	Rarity                json.Number            `json:"Rarity"`
}
type PlanetFesAvatarRarityAccessor struct {
	_data                 []PlanetFesAvatarRarity
	_dataCostParam        map[json.Number]PlanetFesAvatarRarity
	_dataIconPath         map[string]PlanetFesAvatarRarity
	_dataIncomeParam      map[json.Number]PlanetFesAvatarRarity
	_dataPieceTransferNum map[json.Number]PlanetFesAvatarRarity
	_dataRarity           map[json.Number]PlanetFesAvatarRarity
}

// LoadData retrieves the data. Must be called before PlanetFesAvatarRarity.GroupData
func (a *PlanetFesAvatarRarityAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/PlanetFesAvatarRarity.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *PlanetFesAvatarRarityAccessor) Raw() ([]PlanetFesAvatarRarity, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []PlanetFesAvatarRarity{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with PlanetFesAvatarRarityAccessor.LoadData to preload everything
func (a *PlanetFesAvatarRarityAccessor) GroupData() {
	a._dataCostParam = map[json.Number]PlanetFesAvatarRarity{}
	a._dataIconPath = map[string]PlanetFesAvatarRarity{}
	a._dataIncomeParam = map[json.Number]PlanetFesAvatarRarity{}
	a._dataPieceTransferNum = map[json.Number]PlanetFesAvatarRarity{}
	a._dataRarity = map[json.Number]PlanetFesAvatarRarity{}
	for _, d := range a._data {
		a._dataCostParam[d.CostParam] = d
		a._dataIconPath[d.IconPath] = d
		a._dataIncomeParam[d.IncomeParam] = d
		a._dataPieceTransferNum[d.PieceTransferNum] = d
		a._dataRarity[d.Rarity] = d
	}
}

// ByCostParam returns the PlanetFesAvatarRarity uniquely identified by CostParam
//
// Error is only non-nil if the source errors out
func (a *PlanetFesAvatarRarityAccessor) ByCostParam(identifier json.Number) (PlanetFesAvatarRarity, error) {
	if a._dataCostParam == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return PlanetFesAvatarRarity{}, err
			}
		}
		a.GroupData()
	}
	return a._dataCostParam[identifier], nil
}

// ByIconPath returns the PlanetFesAvatarRarity uniquely identified by IconPath
//
// Error is only non-nil if the source errors out
func (a *PlanetFesAvatarRarityAccessor) ByIconPath(identifier string) (PlanetFesAvatarRarity, error) {
	if a._dataIconPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return PlanetFesAvatarRarity{}, err
			}
		}
		a.GroupData()
	}
	return a._dataIconPath[identifier], nil
}

// ByIncomeParam returns the PlanetFesAvatarRarity uniquely identified by IncomeParam
//
// Error is only non-nil if the source errors out
func (a *PlanetFesAvatarRarityAccessor) ByIncomeParam(identifier json.Number) (PlanetFesAvatarRarity, error) {
	if a._dataIncomeParam == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return PlanetFesAvatarRarity{}, err
			}
		}
		a.GroupData()
	}
	return a._dataIncomeParam[identifier], nil
}

// ByPieceTransferNum returns the PlanetFesAvatarRarity uniquely identified by PieceTransferNum
//
// Error is only non-nil if the source errors out
func (a *PlanetFesAvatarRarityAccessor) ByPieceTransferNum(identifier json.Number) (PlanetFesAvatarRarity, error) {
	if a._dataPieceTransferNum == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return PlanetFesAvatarRarity{}, err
			}
		}
		a.GroupData()
	}
	return a._dataPieceTransferNum[identifier], nil
}

// ByRarity returns the PlanetFesAvatarRarity uniquely identified by Rarity
//
// Error is only non-nil if the source errors out
func (a *PlanetFesAvatarRarityAccessor) ByRarity(identifier json.Number) (PlanetFesAvatarRarity, error) {
	if a._dataRarity == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return PlanetFesAvatarRarity{}, err
			}
		}
		a.GroupData()
	}
	return a._dataRarity[identifier], nil
}
