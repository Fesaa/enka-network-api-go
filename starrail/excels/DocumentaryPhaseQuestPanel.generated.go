package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type DocumentaryPhaseQuestPanel struct {
	ExtraQuest json.Number            `json:"ExtraQuest"`
	NextPhase  json.Number            `json:"NextPhase"`
	PanelDesc  map[string]json.Number `json:"PanelDesc"`
	PanelTitle map[string]json.Number `json:"PanelTitle"`
	PhaseID    json.Number            `json:"PhaseID"`
	QuestList  []json.Number          `json:"QuestList"`
}
type DocumentaryPhaseQuestPanelAccessor struct {
	_data           []DocumentaryPhaseQuestPanel
	_dataExtraQuest map[json.Number]DocumentaryPhaseQuestPanel
	_dataPhaseID    map[json.Number]DocumentaryPhaseQuestPanel
}

// LoadData retrieves the data. Must be called before DocumentaryPhaseQuestPanel.GroupData
func (a *DocumentaryPhaseQuestPanelAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/DocumentaryPhaseQuestPanel.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *DocumentaryPhaseQuestPanelAccessor) Raw() ([]DocumentaryPhaseQuestPanel, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []DocumentaryPhaseQuestPanel{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with DocumentaryPhaseQuestPanelAccessor.LoadData to preload everything
func (a *DocumentaryPhaseQuestPanelAccessor) GroupData() {
	a._dataExtraQuest = map[json.Number]DocumentaryPhaseQuestPanel{}
	a._dataPhaseID = map[json.Number]DocumentaryPhaseQuestPanel{}
	for _, d := range a._data {
		a._dataExtraQuest[d.ExtraQuest] = d
		a._dataPhaseID[d.PhaseID] = d
	}
}

// ByExtraQuest returns the DocumentaryPhaseQuestPanel uniquely identified by ExtraQuest
//
// Error is only non-nil if the source errors out
func (a *DocumentaryPhaseQuestPanelAccessor) ByExtraQuest(identifier json.Number) (DocumentaryPhaseQuestPanel, error) {
	if a._dataExtraQuest == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return DocumentaryPhaseQuestPanel{}, err
			}
		}
		a.GroupData()
	}
	return a._dataExtraQuest[identifier], nil
}

// ByPhaseID returns the DocumentaryPhaseQuestPanel uniquely identified by PhaseID
//
// Error is only non-nil if the source errors out
func (a *DocumentaryPhaseQuestPanelAccessor) ByPhaseID(identifier json.Number) (DocumentaryPhaseQuestPanel, error) {
	if a._dataPhaseID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return DocumentaryPhaseQuestPanel{}, err
			}
		}
		a.GroupData()
	}
	return a._dataPhaseID[identifier], nil
}
