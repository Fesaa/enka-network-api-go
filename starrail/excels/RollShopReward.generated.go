package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type RollShopReward struct {
	GroupID  float64 `json:"GroupID"`
	RewardID float64 `json:"RewardID"`
}
type RollShopRewardAccessor struct {
	_data         []RollShopReward
	_dataRewardID map[float64]RollShopReward
}

// LoadData retrieves the data. Must be called before RollShopReward.GroupData
func (a *RollShopRewardAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RollShopReward.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RollShopRewardAccessor) Raw() ([]RollShopReward, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RollShopReward{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RollShopRewardAccessor.LoadData to preload everything
func (a *RollShopRewardAccessor) GroupData() {
	a._dataRewardID = map[float64]RollShopReward{}
	for _, d := range a._data {
		a._dataRewardID[d.RewardID] = d
	}
}

// ByRewardID returns the RollShopReward uniquely identified by RewardID
//
// Error is only non-nil if the source errors out
func (a *RollShopRewardAccessor) ByRewardID(identifier float64) (RollShopReward, error) {
	if a._dataRewardID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RollShopReward{}, err
			}
		}
		a.GroupData()
	}
	return a._dataRewardID[identifier], nil
}
