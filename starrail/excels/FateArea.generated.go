package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type FateArea struct {
	BGDAIKMBNFA []float64 `json:"BGDAIKMBNFA"`
	DCMHGOKCINF []float64 `json:"DCMHGOKCINF"`
	DDEDAFHPNPL hash.Hash `json:"DDEDAFHPNPL"`
	GBEHOAAAHGD hash.Hash `json:"GBEHOAAAHGD"`
	HKAMFPDJADK float64   `json:"HKAMFPDJADK"`
	LFBLPJCJHAO float64   `json:"LFBLPJCJHAO"`
	LMFMNNFCBLF hash.Hash `json:"LMFMNNFCBLF"`
	NFHAEFDFFIP []float64 `json:"NFHAEFDFFIP"`
	NHPHEMJKPJA string    `json:"NHPHEMJKPJA"`
}
type FateAreaAccessor struct {
	_data            []FateArea
	_dataHKAMFPDJADK map[float64]FateArea
	_dataNHPHEMJKPJA map[string]FateArea
}

// LoadData retrieves the data. Must be called before FateArea.GroupData
func (a *FateAreaAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/FateArea.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *FateAreaAccessor) Raw() ([]FateArea, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []FateArea{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with FateAreaAccessor.LoadData to preload everything
func (a *FateAreaAccessor) GroupData() {
	a._dataHKAMFPDJADK = map[float64]FateArea{}
	a._dataNHPHEMJKPJA = map[string]FateArea{}
	for _, d := range a._data {
		a._dataHKAMFPDJADK[d.HKAMFPDJADK] = d
		a._dataNHPHEMJKPJA[d.NHPHEMJKPJA] = d
	}
}

// ByHKAMFPDJADK returns the FateArea uniquely identified by HKAMFPDJADK
//
// Error is only non-nil if the source errors out
func (a *FateAreaAccessor) ByHKAMFPDJADK(identifier float64) (FateArea, error) {
	if a._dataHKAMFPDJADK == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FateArea{}, err
			}
		}
		a.GroupData()
	}
	return a._dataHKAMFPDJADK[identifier], nil
}

// ByNHPHEMJKPJA returns the FateArea uniquely identified by NHPHEMJKPJA
//
// Error is only non-nil if the source errors out
func (a *FateAreaAccessor) ByNHPHEMJKPJA(identifier string) (FateArea, error) {
	if a._dataNHPHEMJKPJA == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FateArea{}, err
			}
		}
		a.GroupData()
	}
	return a._dataNHPHEMJKPJA[identifier], nil
}
