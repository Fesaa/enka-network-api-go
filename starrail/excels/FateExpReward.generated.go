package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type FateExpReward struct {
	BDJECMNLHON float64 `json:"BDJECMNLHON"`
	CJLOPCIMNLI float64 `json:"CJLOPCIMNLI"`
	GBDFNEKADED float64 `json:"GBDFNEKADED"`
	OHPEKJGFNCL float64 `json:"OHPEKJGFNCL"`
}
type FateExpRewardAccessor struct {
	_data            []FateExpReward
	_dataBDJECMNLHON map[float64]FateExpReward
	_dataCJLOPCIMNLI map[float64]FateExpReward
	_dataGBDFNEKADED map[float64]FateExpReward
	_dataOHPEKJGFNCL map[float64]FateExpReward
}

// LoadData retrieves the data. Must be called before FateExpReward.GroupData
func (a *FateExpRewardAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/FateExpReward.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *FateExpRewardAccessor) Raw() ([]FateExpReward, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []FateExpReward{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with FateExpRewardAccessor.LoadData to preload everything
func (a *FateExpRewardAccessor) GroupData() {
	a._dataBDJECMNLHON = map[float64]FateExpReward{}
	a._dataCJLOPCIMNLI = map[float64]FateExpReward{}
	a._dataGBDFNEKADED = map[float64]FateExpReward{}
	a._dataOHPEKJGFNCL = map[float64]FateExpReward{}
	for _, d := range a._data {
		a._dataBDJECMNLHON[d.BDJECMNLHON] = d
		a._dataCJLOPCIMNLI[d.CJLOPCIMNLI] = d
		a._dataGBDFNEKADED[d.GBDFNEKADED] = d
		a._dataOHPEKJGFNCL[d.OHPEKJGFNCL] = d
	}
}

// ByBDJECMNLHON returns the FateExpReward uniquely identified by BDJECMNLHON
//
// Error is only non-nil if the source errors out
func (a *FateExpRewardAccessor) ByBDJECMNLHON(identifier float64) (FateExpReward, error) {
	if a._dataBDJECMNLHON == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FateExpReward{}, err
			}
		}
		a.GroupData()
	}
	return a._dataBDJECMNLHON[identifier], nil
}

// ByCJLOPCIMNLI returns the FateExpReward uniquely identified by CJLOPCIMNLI
//
// Error is only non-nil if the source errors out
func (a *FateExpRewardAccessor) ByCJLOPCIMNLI(identifier float64) (FateExpReward, error) {
	if a._dataCJLOPCIMNLI == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FateExpReward{}, err
			}
		}
		a.GroupData()
	}
	return a._dataCJLOPCIMNLI[identifier], nil
}

// ByGBDFNEKADED returns the FateExpReward uniquely identified by GBDFNEKADED
//
// Error is only non-nil if the source errors out
func (a *FateExpRewardAccessor) ByGBDFNEKADED(identifier float64) (FateExpReward, error) {
	if a._dataGBDFNEKADED == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FateExpReward{}, err
			}
		}
		a.GroupData()
	}
	return a._dataGBDFNEKADED[identifier], nil
}

// ByOHPEKJGFNCL returns the FateExpReward uniquely identified by OHPEKJGFNCL
//
// Error is only non-nil if the source errors out
func (a *FateExpRewardAccessor) ByOHPEKJGFNCL(identifier float64) (FateExpReward, error) {
	if a._dataOHPEKJGFNCL == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FateExpReward{}, err
			}
		}
		a.GroupData()
	}
	return a._dataOHPEKJGFNCL[identifier], nil
}
