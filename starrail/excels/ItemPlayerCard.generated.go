package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type ItemPlayerCard struct {
	CustomDataList       []interface{}          `json:"CustomDataList"`
	ID                   json.Number            `json:"ID"`
	InventoryDisplayTag  json.Number            `json:"InventoryDisplayTag"`
	ItemAvatarIconPath   string                 `json:"ItemAvatarIconPath"`
	ItemBGDesc           map[string]json.Number `json:"ItemBGDesc"`
	ItemCurrencyIconPath string                 `json:"ItemCurrencyIconPath"`
	ItemDesc             map[string]json.Number `json:"ItemDesc"`
	ItemFigureIconPath   string                 `json:"ItemFigureIconPath"`
	ItemIconPath         string                 `json:"ItemIconPath"`
	ItemMainType         string                 `json:"ItemMainType"`
	ItemName             map[string]json.Number `json:"ItemName"`
	ItemSubType          string                 `json:"ItemSubType"`
	PileLimit            json.Number            `json:"PileLimit"`
	Rarity               string                 `json:"Rarity"`
	ReturnItemIDList     []interface{}          `json:"ReturnItemIDList"`
	UseMethod            string                 `json:"UseMethod"`
	IsVisible            bool                   `json:"isVisible"`
}
type ItemPlayerCardAccessor struct {
	_data                   []ItemPlayerCard
	_dataID                 map[json.Number]ItemPlayerCard
	_dataItemFigureIconPath map[string]ItemPlayerCard
	_dataItemIconPath       map[string]ItemPlayerCard
}

// LoadData retrieves the data. Must be called before ItemPlayerCard.GroupData
func (a *ItemPlayerCardAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ItemPlayerCard.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ItemPlayerCardAccessor) Raw() ([]ItemPlayerCard, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ItemPlayerCard{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ItemPlayerCardAccessor.LoadData to preload everything
func (a *ItemPlayerCardAccessor) GroupData() {
	a._dataID = map[json.Number]ItemPlayerCard{}
	a._dataItemFigureIconPath = map[string]ItemPlayerCard{}
	a._dataItemIconPath = map[string]ItemPlayerCard{}
	for _, d := range a._data {
		a._dataID[d.ID] = d
		a._dataItemFigureIconPath[d.ItemFigureIconPath] = d
		a._dataItemIconPath[d.ItemIconPath] = d
	}
}

// ByID returns the ItemPlayerCard uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *ItemPlayerCardAccessor) ByID(identifier json.Number) (ItemPlayerCard, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ItemPlayerCard{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}

// ByItemFigureIconPath returns the ItemPlayerCard uniquely identified by ItemFigureIconPath
//
// Error is only non-nil if the source errors out
func (a *ItemPlayerCardAccessor) ByItemFigureIconPath(identifier string) (ItemPlayerCard, error) {
	if a._dataItemFigureIconPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ItemPlayerCard{}, err
			}
		}
		a.GroupData()
	}
	return a._dataItemFigureIconPath[identifier], nil
}

// ByItemIconPath returns the ItemPlayerCard uniquely identified by ItemIconPath
//
// Error is only non-nil if the source errors out
func (a *ItemPlayerCardAccessor) ByItemIconPath(identifier string) (ItemPlayerCard, error) {
	if a._dataItemIconPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ItemPlayerCard{}, err
			}
		}
		a.GroupData()
	}
	return a._dataItemIconPath[identifier], nil
}
