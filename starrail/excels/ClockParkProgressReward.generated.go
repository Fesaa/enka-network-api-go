package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type ClockParkProgressReward struct {
	QuestID       float64 `json:"QuestID"`
	QuestProgress float64 `json:"QuestProgress"`
}
type ClockParkProgressRewardAccessor struct {
	_data              []ClockParkProgressReward
	_dataQuestID       map[float64]ClockParkProgressReward
	_dataQuestProgress map[float64]ClockParkProgressReward
}

// LoadData retrieves the data. Must be called before ClockParkProgressReward.GroupData
func (a *ClockParkProgressRewardAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ClockParkProgressReward.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ClockParkProgressRewardAccessor) Raw() ([]ClockParkProgressReward, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ClockParkProgressReward{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ClockParkProgressRewardAccessor.LoadData to preload everything
func (a *ClockParkProgressRewardAccessor) GroupData() {
	a._dataQuestID = map[float64]ClockParkProgressReward{}
	a._dataQuestProgress = map[float64]ClockParkProgressReward{}
	for _, d := range a._data {
		a._dataQuestID[d.QuestID] = d
		a._dataQuestProgress[d.QuestProgress] = d
	}
}

// ByQuestID returns the ClockParkProgressReward uniquely identified by QuestID
//
// Error is only non-nil if the source errors out
func (a *ClockParkProgressRewardAccessor) ByQuestID(identifier float64) (ClockParkProgressReward, error) {
	if a._dataQuestID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ClockParkProgressReward{}, err
			}
		}
		a.GroupData()
	}
	return a._dataQuestID[identifier], nil
}

// ByQuestProgress returns the ClockParkProgressReward uniquely identified by QuestProgress
//
// Error is only non-nil if the source errors out
func (a *ClockParkProgressRewardAccessor) ByQuestProgress(identifier float64) (ClockParkProgressReward, error) {
	if a._dataQuestProgress == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ClockParkProgressReward{}, err
			}
		}
		a.GroupData()
	}
	return a._dataQuestProgress[identifier], nil
}
