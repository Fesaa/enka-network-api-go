package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type DrinkMakerGuestSequence struct {
	GuestID          json.Number `json:"GuestID"`
	NeedOpenWorkBook bool        `json:"NeedOpenWorkBook"`
	SequenceID       json.Number `json:"SequenceID"`
	StartChatID      json.Number `json:"StartChatID"`
}
type DrinkMakerGuestSequenceAccessor struct {
	_data            []DrinkMakerGuestSequence
	_dataSequenceID  map[json.Number]DrinkMakerGuestSequence
	_dataStartChatID map[json.Number]DrinkMakerGuestSequence
}

// LoadData retrieves the data. Must be called before DrinkMakerGuestSequence.GroupData
func (a *DrinkMakerGuestSequenceAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/DrinkMakerGuestSequence.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *DrinkMakerGuestSequenceAccessor) Raw() ([]DrinkMakerGuestSequence, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []DrinkMakerGuestSequence{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with DrinkMakerGuestSequenceAccessor.LoadData to preload everything
func (a *DrinkMakerGuestSequenceAccessor) GroupData() {
	a._dataSequenceID = map[json.Number]DrinkMakerGuestSequence{}
	a._dataStartChatID = map[json.Number]DrinkMakerGuestSequence{}
	for _, d := range a._data {
		a._dataSequenceID[d.SequenceID] = d
		a._dataStartChatID[d.StartChatID] = d
	}
}

// BySequenceID returns the DrinkMakerGuestSequence uniquely identified by SequenceID
//
// Error is only non-nil if the source errors out
func (a *DrinkMakerGuestSequenceAccessor) BySequenceID(identifier json.Number) (DrinkMakerGuestSequence, error) {
	if a._dataSequenceID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return DrinkMakerGuestSequence{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSequenceID[identifier], nil
}

// ByStartChatID returns the DrinkMakerGuestSequence uniquely identified by StartChatID
//
// Error is only non-nil if the source errors out
func (a *DrinkMakerGuestSequenceAccessor) ByStartChatID(identifier json.Number) (DrinkMakerGuestSequence, error) {
	if a._dataStartChatID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return DrinkMakerGuestSequence{}, err
			}
		}
		a.GroupData()
	}
	return a._dataStartChatID[identifier], nil
}
