package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type HeliobusPhase struct {
	HeliobusPhaseID             json.Number            `json:"HeliobusPhaseID"`
	HeliobusToDoListTitleAfter  map[string]json.Number `json:"Heliobus_ToDoListTitle_After"`
	HeliobusToDoListTitleBefore map[string]json.Number `json:"Heliobus_ToDoListTitle_Before"`
	HeliobusUpMissionDesc       map[string]json.Number `json:"Heliobus_UpMissionDesc"`
	PhaseBigIconPath            string                 `json:"PhaseBigIconPath"`
	PhaseFans                   json.Number            `json:"PhaseFans"`
	PhaseSmallIconPath          string                 `json:"PhaseSmallIconPath"`
	PhaseTextID                 map[string]json.Number `json:"PhaseTextID"`
	ReceiveMissionID            json.Number            `json:"ReceiveMissionID"`
	UnlockMissionID             json.Number            `json:"UnlockMissionID"`
}
type HeliobusPhaseAccessor struct {
	_data                []HeliobusPhase
	_dataHeliobusPhaseID map[json.Number]HeliobusPhase
}

// LoadData retrieves the data. Must be called before HeliobusPhase.GroupData
func (a *HeliobusPhaseAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/HeliobusPhase.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *HeliobusPhaseAccessor) Raw() ([]HeliobusPhase, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []HeliobusPhase{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with HeliobusPhaseAccessor.LoadData to preload everything
func (a *HeliobusPhaseAccessor) GroupData() {
	a._dataHeliobusPhaseID = map[json.Number]HeliobusPhase{}
	for _, d := range a._data {
		a._dataHeliobusPhaseID[d.HeliobusPhaseID] = d
	}
}

// ByHeliobusPhaseID returns the HeliobusPhase uniquely identified by HeliobusPhaseID
//
// Error is only non-nil if the source errors out
func (a *HeliobusPhaseAccessor) ByHeliobusPhaseID(identifier json.Number) (HeliobusPhase, error) {
	if a._dataHeliobusPhaseID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return HeliobusPhase{}, err
			}
		}
		a.GroupData()
	}
	return a._dataHeliobusPhaseID[identifier], nil
}
