package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type FightFestCoachSkill struct {
	CoachItemID         json.Number            `json:"CoachItemID"`
	CoachSkillExtraDesc map[string]json.Number `json:"CoachSkillExtraDesc"`
	CoachSkillName      map[string]json.Number `json:"CoachSkillName"`
	CoachType           string                 `json:"CoachType"`
	FigurePath          string                 `json:"FigurePath"`
	MazeBuffID          json.Number            `json:"MazeBuffID"`
	SortWeight          json.Number            `json:"SortWeight"`
	UnlockDesc          map[string]json.Number `json:"UnlockDesc"`
}
type FightFestCoachSkillAccessor struct {
	_data            []FightFestCoachSkill
	_dataCoachItemID map[json.Number]FightFestCoachSkill
	_dataFigurePath  map[string]FightFestCoachSkill
	_dataMazeBuffID  map[json.Number]FightFestCoachSkill
}

// LoadData retrieves the data. Must be called before FightFestCoachSkill.GroupData
func (a *FightFestCoachSkillAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/FightFestCoachSkill.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *FightFestCoachSkillAccessor) Raw() ([]FightFestCoachSkill, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []FightFestCoachSkill{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with FightFestCoachSkillAccessor.LoadData to preload everything
func (a *FightFestCoachSkillAccessor) GroupData() {
	a._dataCoachItemID = map[json.Number]FightFestCoachSkill{}
	a._dataFigurePath = map[string]FightFestCoachSkill{}
	a._dataMazeBuffID = map[json.Number]FightFestCoachSkill{}
	for _, d := range a._data {
		a._dataCoachItemID[d.CoachItemID] = d
		a._dataFigurePath[d.FigurePath] = d
		a._dataMazeBuffID[d.MazeBuffID] = d
	}
}

// ByCoachItemID returns the FightFestCoachSkill uniquely identified by CoachItemID
//
// Error is only non-nil if the source errors out
func (a *FightFestCoachSkillAccessor) ByCoachItemID(identifier json.Number) (FightFestCoachSkill, error) {
	if a._dataCoachItemID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FightFestCoachSkill{}, err
			}
		}
		a.GroupData()
	}
	return a._dataCoachItemID[identifier], nil
}

// ByFigurePath returns the FightFestCoachSkill uniquely identified by FigurePath
//
// Error is only non-nil if the source errors out
func (a *FightFestCoachSkillAccessor) ByFigurePath(identifier string) (FightFestCoachSkill, error) {
	if a._dataFigurePath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FightFestCoachSkill{}, err
			}
		}
		a.GroupData()
	}
	return a._dataFigurePath[identifier], nil
}

// ByMazeBuffID returns the FightFestCoachSkill uniquely identified by MazeBuffID
//
// Error is only non-nil if the source errors out
func (a *FightFestCoachSkillAccessor) ByMazeBuffID(identifier json.Number) (FightFestCoachSkill, error) {
	if a._dataMazeBuffID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FightFestCoachSkill{}, err
			}
		}
		a.GroupData()
	}
	return a._dataMazeBuffID[identifier], nil
}
