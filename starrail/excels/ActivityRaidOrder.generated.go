package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type ActivityRaidOrder struct {
	OrderContent  []map[string]json.Number `json:"OrderContent"`
	OrderGoodList []json.Number            `json:"OrderGoodList"`
	OrderID       json.Number              `json:"OrderID"`
	OrderShip     json.Number              `json:"OrderShip"`
	OrderTips     string                   `json:"OrderTips"`
	OrderTipsTime []json.Number            `json:"OrderTipsTime"`
}
type ActivityRaidOrderAccessor struct {
	_data          []ActivityRaidOrder
	_dataOrderID   map[json.Number]ActivityRaidOrder
	_dataOrderTips map[string]ActivityRaidOrder
}

// LoadData retrieves the data. Must be called before ActivityRaidOrder.GroupData
func (a *ActivityRaidOrderAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ActivityRaidOrder.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ActivityRaidOrderAccessor) Raw() ([]ActivityRaidOrder, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ActivityRaidOrder{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ActivityRaidOrderAccessor.LoadData to preload everything
func (a *ActivityRaidOrderAccessor) GroupData() {
	a._dataOrderID = map[json.Number]ActivityRaidOrder{}
	a._dataOrderTips = map[string]ActivityRaidOrder{}
	for _, d := range a._data {
		a._dataOrderID[d.OrderID] = d
		a._dataOrderTips[d.OrderTips] = d
	}
}

// ByOrderID returns the ActivityRaidOrder uniquely identified by OrderID
//
// Error is only non-nil if the source errors out
func (a *ActivityRaidOrderAccessor) ByOrderID(identifier json.Number) (ActivityRaidOrder, error) {
	if a._dataOrderID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityRaidOrder{}, err
			}
		}
		a.GroupData()
	}
	return a._dataOrderID[identifier], nil
}

// ByOrderTips returns the ActivityRaidOrder uniquely identified by OrderTips
//
// Error is only non-nil if the source errors out
func (a *ActivityRaidOrderAccessor) ByOrderTips(identifier string) (ActivityRaidOrder, error) {
	if a._dataOrderTips == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityRaidOrder{}, err
			}
		}
		a.GroupData()
	}
	return a._dataOrderTips[identifier], nil
}
