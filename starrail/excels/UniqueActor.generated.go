package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type UniqueActor struct {
	ActorID    string `json:"ActorID"`
	UniqueName string `json:"UniqueName"`
}
type UniqueActorAccessor struct {
	_data           []UniqueActor
	_dataUniqueName map[string]UniqueActor
}

// LoadData retrieves the data. Must be called before UniqueActor.GroupData
func (a *UniqueActorAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/UniqueActor.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *UniqueActorAccessor) Raw() ([]UniqueActor, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []UniqueActor{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with UniqueActorAccessor.LoadData to preload everything
func (a *UniqueActorAccessor) GroupData() {
	a._dataUniqueName = map[string]UniqueActor{}
	for _, d := range a._data {
		a._dataUniqueName[d.UniqueName] = d
	}
}

// ByUniqueName returns the UniqueActor uniquely identified by UniqueName
//
// Error is only non-nil if the source errors out
func (a *UniqueActorAccessor) ByUniqueName(identifier string) (UniqueActor, error) {
	if a._dataUniqueName == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return UniqueActor{}, err
			}
		}
		a.GroupData()
	}
	return a._dataUniqueName[identifier], nil
}
