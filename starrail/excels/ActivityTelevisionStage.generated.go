package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type ActivityTelevisionStage struct {
	ActivityModuleID         json.Number            `json:"ActivityModuleID"`
	ChannelName              map[string]json.Number `json:"ChannelName"`
	Desc                     map[string]json.Number `json:"Desc"`
	EntranceID               json.Number            `json:"EntranceID"`
	GotoID                   json.Number            `json:"GotoID"`
	ImagePath                string                 `json:"ImagePath"`
	MappingInfo              json.Number            `json:"MappingInfo"`
	MiniImagePath            string                 `json:"MiniImagePath"`
	MissionID                json.Number            `json:"MissionID"`
	OriginalDesc             map[string]json.Number `json:"OriginalDesc"`
	OriginalImagePath        string                 `json:"OriginalImagePath"`
	OriginalMiniImagePath    string                 `json:"OriginalMiniImagePath"`
	OriginalOutlineImagePath string                 `json:"OriginalOutlineImagePath"`
	OriginalStageName        map[string]json.Number `json:"OriginalStageName"`
	QuestGroupID             json.Number            `json:"QuestGroupID"`
	Season                   json.Number            `json:"Season"`
	StageName                map[string]json.Number `json:"StageName"`
	TelevisionID             json.Number            `json:"TelevisionID"`
}
type ActivityTelevisionStageAccessor struct {
	_data                      []ActivityTelevisionStage
	_dataImagePath             map[string]ActivityTelevisionStage
	_dataMiniImagePath         map[string]ActivityTelevisionStage
	_dataOriginalImagePath     map[string]ActivityTelevisionStage
	_dataOriginalMiniImagePath map[string]ActivityTelevisionStage
}

// LoadData retrieves the data. Must be called before ActivityTelevisionStage.GroupData
func (a *ActivityTelevisionStageAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ActivityTelevisionStage.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ActivityTelevisionStageAccessor) Raw() ([]ActivityTelevisionStage, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ActivityTelevisionStage{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ActivityTelevisionStageAccessor.LoadData to preload everything
func (a *ActivityTelevisionStageAccessor) GroupData() {
	a._dataImagePath = map[string]ActivityTelevisionStage{}
	a._dataMiniImagePath = map[string]ActivityTelevisionStage{}
	a._dataOriginalImagePath = map[string]ActivityTelevisionStage{}
	a._dataOriginalMiniImagePath = map[string]ActivityTelevisionStage{}
	for _, d := range a._data {
		a._dataImagePath[d.ImagePath] = d
		a._dataMiniImagePath[d.MiniImagePath] = d
		a._dataOriginalImagePath[d.OriginalImagePath] = d
		a._dataOriginalMiniImagePath[d.OriginalMiniImagePath] = d
	}
}

// ByImagePath returns the ActivityTelevisionStage uniquely identified by ImagePath
//
// Error is only non-nil if the source errors out
func (a *ActivityTelevisionStageAccessor) ByImagePath(identifier string) (ActivityTelevisionStage, error) {
	if a._dataImagePath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityTelevisionStage{}, err
			}
		}
		a.GroupData()
	}
	return a._dataImagePath[identifier], nil
}

// ByMiniImagePath returns the ActivityTelevisionStage uniquely identified by MiniImagePath
//
// Error is only non-nil if the source errors out
func (a *ActivityTelevisionStageAccessor) ByMiniImagePath(identifier string) (ActivityTelevisionStage, error) {
	if a._dataMiniImagePath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityTelevisionStage{}, err
			}
		}
		a.GroupData()
	}
	return a._dataMiniImagePath[identifier], nil
}

// ByOriginalImagePath returns the ActivityTelevisionStage uniquely identified by OriginalImagePath
//
// Error is only non-nil if the source errors out
func (a *ActivityTelevisionStageAccessor) ByOriginalImagePath(identifier string) (ActivityTelevisionStage, error) {
	if a._dataOriginalImagePath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityTelevisionStage{}, err
			}
		}
		a.GroupData()
	}
	return a._dataOriginalImagePath[identifier], nil
}

// ByOriginalMiniImagePath returns the ActivityTelevisionStage uniquely identified by OriginalMiniImagePath
//
// Error is only non-nil if the source errors out
func (a *ActivityTelevisionStageAccessor) ByOriginalMiniImagePath(identifier string) (ActivityTelevisionStage, error) {
	if a._dataOriginalMiniImagePath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityTelevisionStage{}, err
			}
		}
		a.GroupData()
	}
	return a._dataOriginalMiniImagePath[identifier], nil
}
