package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type SpecialAvatarRelicMainValue struct {
	MainValue          []SpecialAvatarRelicMainValueMainValue `json:"MainValue"`
	RelicMainValueType float64                                `json:"RelicMainValueType"`
}
type SpecialAvatarRelicMainValueMainValue struct {
	LKOEFDPJGKD string        `json:"LKOEFDPJGKD"`
	MBMDOCJIMEJ hash.IntValue `json:"MBMDOCJIMEJ"`
}
type SpecialAvatarRelicMainValueAccessor struct {
	_data                   []SpecialAvatarRelicMainValue
	_dataRelicMainValueType map[float64]SpecialAvatarRelicMainValue
}

// LoadData retrieves the data. Must be called before SpecialAvatarRelicMainValue.GroupData
func (a *SpecialAvatarRelicMainValueAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/SpecialAvatarRelicMainValue.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *SpecialAvatarRelicMainValueAccessor) Raw() ([]SpecialAvatarRelicMainValue, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []SpecialAvatarRelicMainValue{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with SpecialAvatarRelicMainValueAccessor.LoadData to preload everything
func (a *SpecialAvatarRelicMainValueAccessor) GroupData() {
	for _, d := range a._data {
		a._dataRelicMainValueType[d.RelicMainValueType] = d
	}
}

// ByRelicMainValueType returns the SpecialAvatarRelicMainValue uniquely identified by RelicMainValueType
//
// Error is only non-nil if the source errors out
func (a *SpecialAvatarRelicMainValueAccessor) ByRelicMainValueType(identifier float64) (SpecialAvatarRelicMainValue, error) {
	if a._dataRelicMainValueType == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return SpecialAvatarRelicMainValue{}, err
			}
		}
		a.GroupData()
	}
	return a._dataRelicMainValueType[identifier], nil
}
