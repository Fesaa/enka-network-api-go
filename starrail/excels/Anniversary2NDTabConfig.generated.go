package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type Anniversary2NDTabConfig struct {
	PanelType                     string    `json:"PanelType"`
	RelatedAnniversaryContentList []float64 `json:"RelatedAnniversaryContentList"`
	TabID                         float64   `json:"TabID"`
	TabIcon                       string    `json:"TabIcon"`
	TabName                       hash.Hash `json:"TabName"`
}
type Anniversary2NDTabConfigAccessor struct {
	_data          []Anniversary2NDTabConfig
	_dataPanelType map[string]Anniversary2NDTabConfig
	_dataTabID     map[float64]Anniversary2NDTabConfig
	_dataTabIcon   map[string]Anniversary2NDTabConfig
}

// LoadData retrieves the data. Must be called before Anniversary2NDTabConfig.GroupData
func (a *Anniversary2NDTabConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/Anniversary2NDTabConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *Anniversary2NDTabConfigAccessor) Raw() ([]Anniversary2NDTabConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []Anniversary2NDTabConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with Anniversary2NDTabConfigAccessor.LoadData to preload everything
func (a *Anniversary2NDTabConfigAccessor) GroupData() {
	a._dataPanelType = map[string]Anniversary2NDTabConfig{}
	a._dataTabID = map[float64]Anniversary2NDTabConfig{}
	a._dataTabIcon = map[string]Anniversary2NDTabConfig{}
	for _, d := range a._data {
		a._dataPanelType[d.PanelType] = d
		a._dataTabID[d.TabID] = d
		a._dataTabIcon[d.TabIcon] = d
	}
}

// ByPanelType returns the Anniversary2NDTabConfig uniquely identified by PanelType
//
// Error is only non-nil if the source errors out
func (a *Anniversary2NDTabConfigAccessor) ByPanelType(identifier string) (Anniversary2NDTabConfig, error) {
	if a._dataPanelType == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return Anniversary2NDTabConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataPanelType[identifier], nil
}

// ByTabID returns the Anniversary2NDTabConfig uniquely identified by TabID
//
// Error is only non-nil if the source errors out
func (a *Anniversary2NDTabConfigAccessor) ByTabID(identifier float64) (Anniversary2NDTabConfig, error) {
	if a._dataTabID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return Anniversary2NDTabConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataTabID[identifier], nil
}

// ByTabIcon returns the Anniversary2NDTabConfig uniquely identified by TabIcon
//
// Error is only non-nil if the source errors out
func (a *Anniversary2NDTabConfigAccessor) ByTabIcon(identifier string) (Anniversary2NDTabConfig, error) {
	if a._dataTabIcon == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return Anniversary2NDTabConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataTabIcon[identifier], nil
}
