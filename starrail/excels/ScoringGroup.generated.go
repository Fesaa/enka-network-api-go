package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type ScoringGroup struct {
	DisplayType    string    `json:"DisplayType"`
	ScoreName      hash.Hash `json:"ScoreName"`
	ScoringGroupID float64   `json:"ScoringGroupID"`
	ScoringIDList  []float64 `json:"ScoringIDList"`
}
type ScoringGroupAccessor struct {
	_data               []ScoringGroup
	_dataScoringGroupID map[float64]ScoringGroup
}

// LoadData retrieves the data. Must be called before ScoringGroup.GroupData
func (a *ScoringGroupAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ScoringGroup.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ScoringGroupAccessor) Raw() ([]ScoringGroup, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ScoringGroup{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ScoringGroupAccessor.LoadData to preload everything
func (a *ScoringGroupAccessor) GroupData() {
	for _, d := range a._data {
		a._dataScoringGroupID[d.ScoringGroupID] = d
	}
}

// ByScoringGroupID returns the ScoringGroup uniquely identified by ScoringGroupID
//
// Error is only non-nil if the source errors out
func (a *ScoringGroupAccessor) ByScoringGroupID(identifier float64) (ScoringGroup, error) {
	if a._dataScoringGroupID == nil {
		err := a.LoadData()
		if err != nil {
			return ScoringGroup{}, err
		}
		a.GroupData()
	}
	return a._dataScoringGroupID[identifier], nil
}
