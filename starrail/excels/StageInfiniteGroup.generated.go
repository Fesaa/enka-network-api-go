package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type StageInfiniteGroup struct {
	WaveGroupID float64   `json:"WaveGroupID"`
	WaveIDList  []float64 `json:"WaveIDList"`
}
type StageInfiniteGroupAccessor struct {
	_data            []StageInfiniteGroup
	_dataWaveGroupID map[float64]StageInfiniteGroup
}

// LoadData retrieves the data. Must be called before StageInfiniteGroup.GroupData
func (a *StageInfiniteGroupAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/StageInfiniteGroup.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *StageInfiniteGroupAccessor) Raw() ([]StageInfiniteGroup, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []StageInfiniteGroup{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with StageInfiniteGroupAccessor.LoadData to preload everything
func (a *StageInfiniteGroupAccessor) GroupData() {
	for _, d := range a._data {
		a._dataWaveGroupID[d.WaveGroupID] = d
	}
}

// ByWaveGroupID returns the StageInfiniteGroup uniquely identified by WaveGroupID
//
// Error is only non-nil if the source errors out
func (a *StageInfiniteGroupAccessor) ByWaveGroupID(identifier float64) (StageInfiniteGroup, error) {
	if a._dataWaveGroupID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return StageInfiniteGroup{}, err
			}
		}
		a.GroupData()
	}
	return a._dataWaveGroupID[identifier], nil
}
