package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type BattleCollegeTypeGroup struct {
	BackGroundImagePath           string        `json:"BackGroundImagePath"`
	BattleCollegeTypeGroupID      float64       `json:"BattleCollegeTypeGroupID"`
	BattleCollegeTypeGroupIDTitle hash.Hash     `json:"BattleCollegeTypeGroupIDTitle"`
	IsAdvanced                    bool          `json:"IsAdvanced"`
	TabIconPath                   string        `json:"TabIconPath"`
	UnlockConditions              []interface{} `json:"UnlockConditions"`
}
type BattleCollegeTypeGroupAccessor struct {
	_data                         []BattleCollegeTypeGroup
	_dataBattleCollegeTypeGroupID map[float64]BattleCollegeTypeGroup
	_dataBackGroundImagePath      map[string]BattleCollegeTypeGroup
	_dataTabIconPath              map[string]BattleCollegeTypeGroup
}

// LoadData retrieves the data. Must be called before BattleCollegeTypeGroup.GroupData
func (a *BattleCollegeTypeGroupAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/BattleCollegeTypeGroup.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *BattleCollegeTypeGroupAccessor) Raw() ([]BattleCollegeTypeGroup, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []BattleCollegeTypeGroup{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with BattleCollegeTypeGroupAccessor.LoadData to preload everything
func (a *BattleCollegeTypeGroupAccessor) GroupData() {
	for _, d := range a._data {
		a._dataBattleCollegeTypeGroupID[d.BattleCollegeTypeGroupID] = d
		a._dataBackGroundImagePath[d.BackGroundImagePath] = d
		a._dataTabIconPath[d.TabIconPath] = d
	}
}

// ByBattleCollegeTypeGroupID returns the BattleCollegeTypeGroup uniquely identified by BattleCollegeTypeGroupID
//
// Error is only non-nil if the source errors out
func (a *BattleCollegeTypeGroupAccessor) ByBattleCollegeTypeGroupID(identifier float64) (BattleCollegeTypeGroup, error) {
	if a._dataBattleCollegeTypeGroupID == nil {
		err := a.LoadData()
		if err != nil {
			return BattleCollegeTypeGroup{}, err
		}
		a.GroupData()
	}
	return a._dataBattleCollegeTypeGroupID[identifier], nil
}

// ByBackGroundImagePath returns the BattleCollegeTypeGroup uniquely identified by BackGroundImagePath
//
// Error is only non-nil if the source errors out
func (a *BattleCollegeTypeGroupAccessor) ByBackGroundImagePath(identifier string) (BattleCollegeTypeGroup, error) {
	if a._dataBackGroundImagePath == nil {
		err := a.LoadData()
		if err != nil {
			return BattleCollegeTypeGroup{}, err
		}
		a.GroupData()
	}
	return a._dataBackGroundImagePath[identifier], nil
}

// ByTabIconPath returns the BattleCollegeTypeGroup uniquely identified by TabIconPath
//
// Error is only non-nil if the source errors out
func (a *BattleCollegeTypeGroupAccessor) ByTabIconPath(identifier string) (BattleCollegeTypeGroup, error) {
	if a._dataTabIconPath == nil {
		err := a.LoadData()
		if err != nil {
			return BattleCollegeTypeGroup{}, err
		}
		a.GroupData()
	}
	return a._dataTabIconPath[identifier], nil
}
