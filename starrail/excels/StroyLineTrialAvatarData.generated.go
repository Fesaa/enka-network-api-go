package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type StroyLineTrialAvatarData struct {
	CaptainAvatarID     float64   `json:"CaptainAvatarID"`
	InitTrialAvatarList []float64 `json:"InitTrialAvatarList"`
	SkipJoinLineup      bool      `json:"SkipJoinLineup"`
	StoryLineID         float64   `json:"StoryLineID"`
	TrialAvatarList     []float64 `json:"TrialAvatarList"`
}
type StroyLineTrialAvatarDataAccessor struct {
	_data            []StroyLineTrialAvatarData
	_dataStoryLineID map[float64]StroyLineTrialAvatarData
}

// LoadData retrieves the data. Must be called before StroyLineTrialAvatarData.GroupData
func (a *StroyLineTrialAvatarDataAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/StroyLineTrialAvatarData.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *StroyLineTrialAvatarDataAccessor) Raw() ([]StroyLineTrialAvatarData, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []StroyLineTrialAvatarData{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with StroyLineTrialAvatarDataAccessor.LoadData to preload everything
func (a *StroyLineTrialAvatarDataAccessor) GroupData() {
	for _, d := range a._data {
		a._dataStoryLineID[d.StoryLineID] = d
	}
}

// ByStoryLineID returns the StroyLineTrialAvatarData uniquely identified by StoryLineID
//
// Error is only non-nil if the source errors out
func (a *StroyLineTrialAvatarDataAccessor) ByStoryLineID(identifier float64) (StroyLineTrialAvatarData, error) {
	if a._dataStoryLineID == nil {
		err := a.LoadData()
		if err != nil {
			return StroyLineTrialAvatarData{}, err
		}
		a.GroupData()
	}
	return a._dataStoryLineID[identifier], nil
}
