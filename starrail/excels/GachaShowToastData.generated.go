package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type GachaShowToastData struct {
	GachaID              float64 `json:"GachaID"`
	LoopBGMState         string  `json:"LoopBGMState"`
	LoopBGMandUIOpenTime float64 `json:"LoopBGMandUIOpenTime"`
	LoopVideoID          float64 `json:"LoopVideoID"`
	ShowVideoID          float64 `json:"ShowVideoID"`
}
type GachaShowToastDataAccessor struct {
	_data                     []GachaShowToastData
	_dataLoopBGMState         map[string]GachaShowToastData
	_dataLoopBGMandUIOpenTime map[float64]GachaShowToastData
	_dataGachaID              map[float64]GachaShowToastData
	_dataShowVideoID          map[float64]GachaShowToastData
	_dataLoopVideoID          map[float64]GachaShowToastData
}

// LoadData retrieves the data. Must be called before GachaShowToastData.GroupData
func (a *GachaShowToastDataAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/GachaShowToastData.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *GachaShowToastDataAccessor) Raw() ([]GachaShowToastData, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []GachaShowToastData{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with GachaShowToastDataAccessor.LoadData to preload everything
func (a *GachaShowToastDataAccessor) GroupData() {
	for _, d := range a._data {
		a._dataLoopBGMState[d.LoopBGMState] = d
		a._dataLoopBGMandUIOpenTime[d.LoopBGMandUIOpenTime] = d
		a._dataGachaID[d.GachaID] = d
		a._dataShowVideoID[d.ShowVideoID] = d
		a._dataLoopVideoID[d.LoopVideoID] = d
	}
}

// ByLoopBGMState returns the GachaShowToastData uniquely identified by LoopBGMState
//
// Error is only non-nil if the source errors out
func (a *GachaShowToastDataAccessor) ByLoopBGMState(identifier string) (GachaShowToastData, error) {
	if a._dataLoopBGMState == nil {
		err := a.LoadData()
		if err != nil {
			return GachaShowToastData{}, err
		}
		a.GroupData()
	}
	return a._dataLoopBGMState[identifier], nil
}

// ByLoopBGMandUIOpenTime returns the GachaShowToastData uniquely identified by LoopBGMandUIOpenTime
//
// Error is only non-nil if the source errors out
func (a *GachaShowToastDataAccessor) ByLoopBGMandUIOpenTime(identifier float64) (GachaShowToastData, error) {
	if a._dataLoopBGMandUIOpenTime == nil {
		err := a.LoadData()
		if err != nil {
			return GachaShowToastData{}, err
		}
		a.GroupData()
	}
	return a._dataLoopBGMandUIOpenTime[identifier], nil
}

// ByGachaID returns the GachaShowToastData uniquely identified by GachaID
//
// Error is only non-nil if the source errors out
func (a *GachaShowToastDataAccessor) ByGachaID(identifier float64) (GachaShowToastData, error) {
	if a._dataGachaID == nil {
		err := a.LoadData()
		if err != nil {
			return GachaShowToastData{}, err
		}
		a.GroupData()
	}
	return a._dataGachaID[identifier], nil
}

// ByShowVideoID returns the GachaShowToastData uniquely identified by ShowVideoID
//
// Error is only non-nil if the source errors out
func (a *GachaShowToastDataAccessor) ByShowVideoID(identifier float64) (GachaShowToastData, error) {
	if a._dataShowVideoID == nil {
		err := a.LoadData()
		if err != nil {
			return GachaShowToastData{}, err
		}
		a.GroupData()
	}
	return a._dataShowVideoID[identifier], nil
}

// ByLoopVideoID returns the GachaShowToastData uniquely identified by LoopVideoID
//
// Error is only non-nil if the source errors out
func (a *GachaShowToastDataAccessor) ByLoopVideoID(identifier float64) (GachaShowToastData, error) {
	if a._dataLoopVideoID == nil {
		err := a.LoadData()
		if err != nil {
			return GachaShowToastData{}, err
		}
		a.GroupData()
	}
	return a._dataLoopVideoID[identifier], nil
}
