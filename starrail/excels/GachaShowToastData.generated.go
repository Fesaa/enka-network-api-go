package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type GachaShowToastData struct {
	GachaID           float64 `json:"GachaID"`
	LoopBGMOpenTime   float64 `json:"LoopBGMOpenTime"`
	LoopBGMState      string  `json:"LoopBGMState"`
	LoopUIOpenTime    float64 `json:"LoopUIOpenTime"`
	LoopVideoID       float64 `json:"LoopVideoID"`
	ShowVideoID       float64 `json:"ShowVideoID"`
	TransitionVideoID float64 `json:"TransitionVideoID"`
}
type GachaShowToastDataAccessor struct {
	_data               []GachaShowToastData
	_dataGachaID        map[float64]GachaShowToastData
	_dataLoopBGMState   map[string]GachaShowToastData
	_dataLoopUIOpenTime map[float64]GachaShowToastData
	_dataLoopVideoID    map[float64]GachaShowToastData
	_dataShowVideoID    map[float64]GachaShowToastData
}

// LoadData retrieves the data. Must be called before GachaShowToastData.GroupData
func (a *GachaShowToastDataAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/GachaShowToastData.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *GachaShowToastDataAccessor) Raw() ([]GachaShowToastData, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []GachaShowToastData{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with GachaShowToastDataAccessor.LoadData to preload everything
func (a *GachaShowToastDataAccessor) GroupData() {
	a._dataGachaID = map[float64]GachaShowToastData{}
	a._dataLoopBGMState = map[string]GachaShowToastData{}
	a._dataLoopUIOpenTime = map[float64]GachaShowToastData{}
	a._dataLoopVideoID = map[float64]GachaShowToastData{}
	a._dataShowVideoID = map[float64]GachaShowToastData{}
	for _, d := range a._data {
		a._dataGachaID[d.GachaID] = d
		a._dataLoopBGMState[d.LoopBGMState] = d
		a._dataLoopUIOpenTime[d.LoopUIOpenTime] = d
		a._dataLoopVideoID[d.LoopVideoID] = d
		a._dataShowVideoID[d.ShowVideoID] = d
	}
}

// ByGachaID returns the GachaShowToastData uniquely identified by GachaID
//
// Error is only non-nil if the source errors out
func (a *GachaShowToastDataAccessor) ByGachaID(identifier float64) (GachaShowToastData, error) {
	if a._dataGachaID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return GachaShowToastData{}, err
			}
		}
		a.GroupData()
	}
	return a._dataGachaID[identifier], nil
}

// ByLoopBGMState returns the GachaShowToastData uniquely identified by LoopBGMState
//
// Error is only non-nil if the source errors out
func (a *GachaShowToastDataAccessor) ByLoopBGMState(identifier string) (GachaShowToastData, error) {
	if a._dataLoopBGMState == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return GachaShowToastData{}, err
			}
		}
		a.GroupData()
	}
	return a._dataLoopBGMState[identifier], nil
}

// ByLoopUIOpenTime returns the GachaShowToastData uniquely identified by LoopUIOpenTime
//
// Error is only non-nil if the source errors out
func (a *GachaShowToastDataAccessor) ByLoopUIOpenTime(identifier float64) (GachaShowToastData, error) {
	if a._dataLoopUIOpenTime == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return GachaShowToastData{}, err
			}
		}
		a.GroupData()
	}
	return a._dataLoopUIOpenTime[identifier], nil
}

// ByLoopVideoID returns the GachaShowToastData uniquely identified by LoopVideoID
//
// Error is only non-nil if the source errors out
func (a *GachaShowToastDataAccessor) ByLoopVideoID(identifier float64) (GachaShowToastData, error) {
	if a._dataLoopVideoID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return GachaShowToastData{}, err
			}
		}
		a.GroupData()
	}
	return a._dataLoopVideoID[identifier], nil
}

// ByShowVideoID returns the GachaShowToastData uniquely identified by ShowVideoID
//
// Error is only non-nil if the source errors out
func (a *GachaShowToastDataAccessor) ByShowVideoID(identifier float64) (GachaShowToastData, error) {
	if a._dataShowVideoID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return GachaShowToastData{}, err
			}
		}
		a.GroupData()
	}
	return a._dataShowVideoID[identifier], nil
}
