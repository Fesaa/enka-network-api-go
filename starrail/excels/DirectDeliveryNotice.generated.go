package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type DirectDeliveryNotice struct {
	ActivityModule float64 `json:"ActivityModule"`
	ID             float64 `json:"ID"`
	UnlockQuestId  float64 `json:"UnlockQuestId"`
}
type DirectDeliveryNoticeAccessor struct {
	_data               []DirectDeliveryNotice
	_dataActivityModule map[float64]DirectDeliveryNotice
	_dataID             map[float64]DirectDeliveryNotice
	_dataUnlockQuestId  map[float64]DirectDeliveryNotice
}

// LoadData retrieves the data. Must be called before DirectDeliveryNotice.GroupData
func (a *DirectDeliveryNoticeAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/DirectDeliveryNotice.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *DirectDeliveryNoticeAccessor) Raw() ([]DirectDeliveryNotice, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []DirectDeliveryNotice{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with DirectDeliveryNoticeAccessor.LoadData to preload everything
func (a *DirectDeliveryNoticeAccessor) GroupData() {
	a._dataActivityModule = map[float64]DirectDeliveryNotice{}
	a._dataID = map[float64]DirectDeliveryNotice{}
	a._dataUnlockQuestId = map[float64]DirectDeliveryNotice{}
	for _, d := range a._data {
		a._dataActivityModule[d.ActivityModule] = d
		a._dataID[d.ID] = d
		a._dataUnlockQuestId[d.UnlockQuestId] = d
	}
}

// ByActivityModule returns the DirectDeliveryNotice uniquely identified by ActivityModule
//
// Error is only non-nil if the source errors out
func (a *DirectDeliveryNoticeAccessor) ByActivityModule(identifier float64) (DirectDeliveryNotice, error) {
	if a._dataActivityModule == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return DirectDeliveryNotice{}, err
			}
		}
		a.GroupData()
	}
	return a._dataActivityModule[identifier], nil
}

// ByID returns the DirectDeliveryNotice uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *DirectDeliveryNoticeAccessor) ByID(identifier float64) (DirectDeliveryNotice, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return DirectDeliveryNotice{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}

// ByUnlockQuestId returns the DirectDeliveryNotice uniquely identified by UnlockQuestId
//
// Error is only non-nil if the source errors out
func (a *DirectDeliveryNoticeAccessor) ByUnlockQuestId(identifier float64) (DirectDeliveryNotice, error) {
	if a._dataUnlockQuestId == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return DirectDeliveryNotice{}, err
			}
		}
		a.GroupData()
	}
	return a._dataUnlockQuestId[identifier], nil
}
