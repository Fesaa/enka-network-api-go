package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type RogueMagicScepterDisplay struct {
	ScepterBGDesc      hash.Hash `json:"ScepterBGDesc"`
	ScepterFigurePath  string    `json:"ScepterFigurePath"`
	ScepterID          float64   `json:"ScepterID"`
	ScepterIconPath    string    `json:"ScepterIconPath"`
	ScepterName        hash.Hash `json:"ScepterName"`
	ScepterTriggerDesc hash.Hash `json:"ScepterTriggerDesc"`
}
type RogueMagicScepterDisplayAccessor struct {
	_data                  []RogueMagicScepterDisplay
	_dataScepterID         map[float64]RogueMagicScepterDisplay
	_dataScepterIconPath   map[string]RogueMagicScepterDisplay
	_dataScepterFigurePath map[string]RogueMagicScepterDisplay
}

// LoadData retrieves the data. Must be called before RogueMagicScepterDisplay.GroupData
func (a *RogueMagicScepterDisplayAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueMagicScepterDisplay.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueMagicScepterDisplayAccessor) Raw() ([]RogueMagicScepterDisplay, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueMagicScepterDisplay{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueMagicScepterDisplayAccessor.LoadData to preload everything
func (a *RogueMagicScepterDisplayAccessor) GroupData() {
	for _, d := range a._data {
		a._dataScepterID[d.ScepterID] = d
		a._dataScepterIconPath[d.ScepterIconPath] = d
		a._dataScepterFigurePath[d.ScepterFigurePath] = d
	}
}

// ByScepterID returns the RogueMagicScepterDisplay uniquely identified by ScepterID
//
// Error is only non-nil if the source errors out
func (a *RogueMagicScepterDisplayAccessor) ByScepterID(identifier float64) (RogueMagicScepterDisplay, error) {
	if a._dataScepterID == nil {
		err := a.LoadData()
		if err != nil {
			return RogueMagicScepterDisplay{}, err
		}
		a.GroupData()
	}
	return a._dataScepterID[identifier], nil
}

// ByScepterIconPath returns the RogueMagicScepterDisplay uniquely identified by ScepterIconPath
//
// Error is only non-nil if the source errors out
func (a *RogueMagicScepterDisplayAccessor) ByScepterIconPath(identifier string) (RogueMagicScepterDisplay, error) {
	if a._dataScepterIconPath == nil {
		err := a.LoadData()
		if err != nil {
			return RogueMagicScepterDisplay{}, err
		}
		a.GroupData()
	}
	return a._dataScepterIconPath[identifier], nil
}

// ByScepterFigurePath returns the RogueMagicScepterDisplay uniquely identified by ScepterFigurePath
//
// Error is only non-nil if the source errors out
func (a *RogueMagicScepterDisplayAccessor) ByScepterFigurePath(identifier string) (RogueMagicScepterDisplay, error) {
	if a._dataScepterFigurePath == nil {
		err := a.LoadData()
		if err != nil {
			return RogueMagicScepterDisplay{}, err
		}
		a.GroupData()
	}
	return a._dataScepterFigurePath[identifier], nil
}
