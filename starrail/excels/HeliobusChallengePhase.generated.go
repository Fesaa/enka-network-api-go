package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type HeliobusChallengePhase struct {
	ChallengeGroupList   []float64 `json:"ChallengeGroupList"`
	ChallengePhaseID     float64   `json:"ChallengePhaseID"`
	ChallengePhaseName   hash.Hash `json:"ChallengePhaseName"`
	ChallengePhaseUnlock hash.Hash `json:"ChallengePhaseUnlock"`
	MapEntranceID        float64   `json:"MapEntranceID"`
	MappingInfoID        float64   `json:"MappingInfoID"`
	UnlockMissionID      float64   `json:"UnlockMissionID"`
}
type HeliobusChallengePhaseAccessor struct {
	_data                 []HeliobusChallengePhase
	_dataChallengePhaseID map[float64]HeliobusChallengePhase
	_dataMappingInfoID    map[float64]HeliobusChallengePhase
	_dataUnlockMissionID  map[float64]HeliobusChallengePhase
}

// LoadData retrieves the data. Must be called before HeliobusChallengePhase.GroupData
func (a *HeliobusChallengePhaseAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/HeliobusChallengePhase.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *HeliobusChallengePhaseAccessor) Raw() ([]HeliobusChallengePhase, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []HeliobusChallengePhase{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with HeliobusChallengePhaseAccessor.LoadData to preload everything
func (a *HeliobusChallengePhaseAccessor) GroupData() {
	for _, d := range a._data {
		a._dataChallengePhaseID[d.ChallengePhaseID] = d
		a._dataMappingInfoID[d.MappingInfoID] = d
		a._dataUnlockMissionID[d.UnlockMissionID] = d
	}
}

// ByChallengePhaseID returns the HeliobusChallengePhase uniquely identified by ChallengePhaseID
//
// Error is only non-nil if the source errors out
func (a *HeliobusChallengePhaseAccessor) ByChallengePhaseID(identifier float64) (HeliobusChallengePhase, error) {
	if a._dataChallengePhaseID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return HeliobusChallengePhase{}, err
			}
		}
		a.GroupData()
	}
	return a._dataChallengePhaseID[identifier], nil
}

// ByMappingInfoID returns the HeliobusChallengePhase uniquely identified by MappingInfoID
//
// Error is only non-nil if the source errors out
func (a *HeliobusChallengePhaseAccessor) ByMappingInfoID(identifier float64) (HeliobusChallengePhase, error) {
	if a._dataMappingInfoID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return HeliobusChallengePhase{}, err
			}
		}
		a.GroupData()
	}
	return a._dataMappingInfoID[identifier], nil
}

// ByUnlockMissionID returns the HeliobusChallengePhase uniquely identified by UnlockMissionID
//
// Error is only non-nil if the source errors out
func (a *HeliobusChallengePhaseAccessor) ByUnlockMissionID(identifier float64) (HeliobusChallengePhase, error) {
	if a._dataUnlockMissionID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return HeliobusChallengePhase{}, err
			}
		}
		a.GroupData()
	}
	return a._dataUnlockMissionID[identifier], nil
}
