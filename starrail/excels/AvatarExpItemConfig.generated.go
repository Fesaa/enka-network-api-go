package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type AvatarExpItemConfig struct {
	Exp    float64 `json:"Exp"`
	ItemID float64 `json:"ItemID"`
}
type AvatarExpItemConfigAccessor struct {
	_data       []AvatarExpItemConfig
	_dataExp    map[float64]AvatarExpItemConfig
	_dataItemID map[float64]AvatarExpItemConfig
}

// LoadData retrieves the data. Must be called before AvatarExpItemConfig.GroupData
func (a *AvatarExpItemConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/AvatarExpItemConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *AvatarExpItemConfigAccessor) Raw() ([]AvatarExpItemConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []AvatarExpItemConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with AvatarExpItemConfigAccessor.LoadData to preload everything
func (a *AvatarExpItemConfigAccessor) GroupData() {
	a._dataExp = map[float64]AvatarExpItemConfig{}
	a._dataItemID = map[float64]AvatarExpItemConfig{}
	for _, d := range a._data {
		a._dataExp[d.Exp] = d
		a._dataItemID[d.ItemID] = d
	}
}

// ByExp returns the AvatarExpItemConfig uniquely identified by Exp
//
// Error is only non-nil if the source errors out
func (a *AvatarExpItemConfigAccessor) ByExp(identifier float64) (AvatarExpItemConfig, error) {
	if a._dataExp == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AvatarExpItemConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataExp[identifier], nil
}

// ByItemID returns the AvatarExpItemConfig uniquely identified by ItemID
//
// Error is only non-nil if the source errors out
func (a *AvatarExpItemConfigAccessor) ByItemID(identifier float64) (AvatarExpItemConfig, error) {
	if a._dataItemID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AvatarExpItemConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataItemID[identifier], nil
}
