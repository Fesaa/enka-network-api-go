package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type ActionSetting struct {
	ActionName             string   `json:"ActionName"`
	BlackListKeys          []string `json:"BlackListKeys"`
	GroupType              float64  `json:"GroupType"`
	SettableInControlTypes []string `json:"SettableInControlTypes"`
	ShowType               float64  `json:"ShowType"`
}
type ActionSettingAccessor struct {
	_data           []ActionSetting
	_dataActionName map[string]ActionSetting
}

// LoadData retrieves the data. Must be called before ActionSetting.GroupData
func (a *ActionSettingAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ActionSetting.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ActionSettingAccessor) Raw() ([]ActionSetting, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ActionSetting{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ActionSettingAccessor.LoadData to preload everything
func (a *ActionSettingAccessor) GroupData() {
	for _, d := range a._data {
		a._dataActionName[d.ActionName] = d
	}
}

// ByActionName returns the ActionSetting uniquely identified by ActionName
//
// Error is only non-nil if the source errors out
func (a *ActionSettingAccessor) ByActionName(identifier string) (ActionSetting, error) {
	if a._dataActionName == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActionSetting{}, err
			}
		}
		a.GroupData()
	}
	return a._dataActionName[identifier], nil
}
