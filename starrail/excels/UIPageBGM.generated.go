package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type UIPageBGM struct {
	BGMEvent   string `json:"BGMEvent"`
	PagePrefab string `json:"PagePrefab"`
}
type UIPageBGMAccessor struct {
	_data           []UIPageBGM
	_dataPagePrefab map[string]UIPageBGM
}

// LoadData retrieves the data. Must be called before UIPageBGM.GroupData
func (a *UIPageBGMAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/UIPageBGM.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *UIPageBGMAccessor) Raw() ([]UIPageBGM, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []UIPageBGM{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with UIPageBGMAccessor.LoadData to preload everything
func (a *UIPageBGMAccessor) GroupData() {
	for _, d := range a._data {
		a._dataPagePrefab[d.PagePrefab] = d
	}
}

// ByPagePrefab returns the UIPageBGM uniquely identified by PagePrefab
//
// Error is only non-nil if the source errors out
func (a *UIPageBGMAccessor) ByPagePrefab(identifier string) (UIPageBGM, error) {
	if a._dataPagePrefab == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return UIPageBGM{}, err
			}
		}
		a.GroupData()
	}
	return a._dataPagePrefab[identifier], nil
}
