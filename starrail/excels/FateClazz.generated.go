package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type FateClazz struct {
	DJGCJBIHIEB float64   `json:"DJGCJBIHIEB"`
	ENMBGINCGIB float64   `json:"ENMBGINCGIB"`
	GCDCGKKFGEF string    `json:"GCDCGKKFGEF"`
	HLNMAGHDADJ float64   `json:"HLNMAGHDADJ"`
	JDMHJHJIMHA string    `json:"JDMHJHJIMHA"`
	KIHFIOENJPH hash.Hash `json:"KIHFIOENJPH"`
	KKLJKBIPBJC string    `json:"KKLJKBIPBJC"`
	MMGMLFNEKLH string    `json:"MMGMLFNEKLH"`
}
type FateClazzAccessor struct {
	_data            []FateClazz
	_dataGCDCGKKFGEF map[string]FateClazz
	_dataJDMHJHJIMHA map[string]FateClazz
	_dataKKLJKBIPBJC map[string]FateClazz
	_dataMMGMLFNEKLH map[string]FateClazz
}

// LoadData retrieves the data. Must be called before FateClazz.GroupData
func (a *FateClazzAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/FateClazz.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *FateClazzAccessor) Raw() ([]FateClazz, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []FateClazz{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with FateClazzAccessor.LoadData to preload everything
func (a *FateClazzAccessor) GroupData() {
	a._dataGCDCGKKFGEF = map[string]FateClazz{}
	a._dataJDMHJHJIMHA = map[string]FateClazz{}
	a._dataKKLJKBIPBJC = map[string]FateClazz{}
	a._dataMMGMLFNEKLH = map[string]FateClazz{}
	for _, d := range a._data {
		a._dataGCDCGKKFGEF[d.GCDCGKKFGEF] = d
		a._dataJDMHJHJIMHA[d.JDMHJHJIMHA] = d
		a._dataKKLJKBIPBJC[d.KKLJKBIPBJC] = d
		a._dataMMGMLFNEKLH[d.MMGMLFNEKLH] = d
	}
}

// ByGCDCGKKFGEF returns the FateClazz uniquely identified by GCDCGKKFGEF
//
// Error is only non-nil if the source errors out
func (a *FateClazzAccessor) ByGCDCGKKFGEF(identifier string) (FateClazz, error) {
	if a._dataGCDCGKKFGEF == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FateClazz{}, err
			}
		}
		a.GroupData()
	}
	return a._dataGCDCGKKFGEF[identifier], nil
}

// ByJDMHJHJIMHA returns the FateClazz uniquely identified by JDMHJHJIMHA
//
// Error is only non-nil if the source errors out
func (a *FateClazzAccessor) ByJDMHJHJIMHA(identifier string) (FateClazz, error) {
	if a._dataJDMHJHJIMHA == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FateClazz{}, err
			}
		}
		a.GroupData()
	}
	return a._dataJDMHJHJIMHA[identifier], nil
}

// ByKKLJKBIPBJC returns the FateClazz uniquely identified by KKLJKBIPBJC
//
// Error is only non-nil if the source errors out
func (a *FateClazzAccessor) ByKKLJKBIPBJC(identifier string) (FateClazz, error) {
	if a._dataKKLJKBIPBJC == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FateClazz{}, err
			}
		}
		a.GroupData()
	}
	return a._dataKKLJKBIPBJC[identifier], nil
}

// ByMMGMLFNEKLH returns the FateClazz uniquely identified by MMGMLFNEKLH
//
// Error is only non-nil if the source errors out
func (a *FateClazzAccessor) ByMMGMLFNEKLH(identifier string) (FateClazz, error) {
	if a._dataMMGMLFNEKLH == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FateClazz{}, err
			}
		}
		a.GroupData()
	}
	return a._dataMMGMLFNEKLH[identifier], nil
}
