package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type BattleEventSkillConfigLD struct {
	BPNeed             hash.Value    `json:"BPNeed"`
	CutinPath          string        `json:"CutinPath"`
	DelayRatio         hash.Value    `json:"DelayRatio"`
	ParamList          []interface{} `json:"ParamList"`
	SPMultipleRatio    hash.Value    `json:"SPMultipleRatio"`
	SPNeed             hash.Value    `json:"SPNeed"`
	ShowStanceList     []hash.Value  `json:"ShowStanceList"`
	SimpleParamList    []interface{} `json:"SimpleParamList"`
	SimpleSkillDesc    hash.Hash     `json:"SimpleSkillDesc"`
	SkillButtonEffType string        `json:"SkillButtonEffType"`
	SkillEffect        string        `json:"SkillEffect"`
	SkillID            float64       `json:"SkillID"`
	SkillIcon          string        `json:"SkillIcon"`
	SkillName          hash.Hash     `json:"SkillName"`
	SkillTag           hash.Hash     `json:"SkillTag"`
	SkillTriggerKey    string        `json:"SkillTriggerKey"`
	SkillTypeDesc      hash.Hash     `json:"SkillTypeDesc"`
	UltraSkillIcon     string        `json:"UltraSkillIcon"`
}
type BattleEventSkillConfigLDAccessor struct {
	_data                   []BattleEventSkillConfigLD
	_dataCutinPath          map[string]BattleEventSkillConfigLD
	_dataSkillButtonEffType map[string]BattleEventSkillConfigLD
	_dataSkillEffect        map[string]BattleEventSkillConfigLD
	_dataSkillID            map[float64]BattleEventSkillConfigLD
	_dataSkillIcon          map[string]BattleEventSkillConfigLD
	_dataSkillTriggerKey    map[string]BattleEventSkillConfigLD
	_dataUltraSkillIcon     map[string]BattleEventSkillConfigLD
}

// LoadData retrieves the data. Must be called before BattleEventSkillConfigLD.GroupData
func (a *BattleEventSkillConfigLDAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/BattleEventSkillConfigLD.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *BattleEventSkillConfigLDAccessor) Raw() ([]BattleEventSkillConfigLD, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []BattleEventSkillConfigLD{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with BattleEventSkillConfigLDAccessor.LoadData to preload everything
func (a *BattleEventSkillConfigLDAccessor) GroupData() {
	a._dataCutinPath = map[string]BattleEventSkillConfigLD{}
	a._dataSkillButtonEffType = map[string]BattleEventSkillConfigLD{}
	a._dataSkillEffect = map[string]BattleEventSkillConfigLD{}
	a._dataSkillID = map[float64]BattleEventSkillConfigLD{}
	a._dataSkillIcon = map[string]BattleEventSkillConfigLD{}
	a._dataSkillTriggerKey = map[string]BattleEventSkillConfigLD{}
	a._dataUltraSkillIcon = map[string]BattleEventSkillConfigLD{}
	for _, d := range a._data {
		a._dataCutinPath[d.CutinPath] = d
		a._dataSkillButtonEffType[d.SkillButtonEffType] = d
		a._dataSkillEffect[d.SkillEffect] = d
		a._dataSkillID[d.SkillID] = d
		a._dataSkillIcon[d.SkillIcon] = d
		a._dataSkillTriggerKey[d.SkillTriggerKey] = d
		a._dataUltraSkillIcon[d.UltraSkillIcon] = d
	}
}

// ByCutinPath returns the BattleEventSkillConfigLD uniquely identified by CutinPath
//
// Error is only non-nil if the source errors out
func (a *BattleEventSkillConfigLDAccessor) ByCutinPath(identifier string) (BattleEventSkillConfigLD, error) {
	if a._dataCutinPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return BattleEventSkillConfigLD{}, err
			}
		}
		a.GroupData()
	}
	return a._dataCutinPath[identifier], nil
}

// BySkillButtonEffType returns the BattleEventSkillConfigLD uniquely identified by SkillButtonEffType
//
// Error is only non-nil if the source errors out
func (a *BattleEventSkillConfigLDAccessor) BySkillButtonEffType(identifier string) (BattleEventSkillConfigLD, error) {
	if a._dataSkillButtonEffType == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return BattleEventSkillConfigLD{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSkillButtonEffType[identifier], nil
}

// BySkillEffect returns the BattleEventSkillConfigLD uniquely identified by SkillEffect
//
// Error is only non-nil if the source errors out
func (a *BattleEventSkillConfigLDAccessor) BySkillEffect(identifier string) (BattleEventSkillConfigLD, error) {
	if a._dataSkillEffect == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return BattleEventSkillConfigLD{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSkillEffect[identifier], nil
}

// BySkillID returns the BattleEventSkillConfigLD uniquely identified by SkillID
//
// Error is only non-nil if the source errors out
func (a *BattleEventSkillConfigLDAccessor) BySkillID(identifier float64) (BattleEventSkillConfigLD, error) {
	if a._dataSkillID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return BattleEventSkillConfigLD{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSkillID[identifier], nil
}

// BySkillIcon returns the BattleEventSkillConfigLD uniquely identified by SkillIcon
//
// Error is only non-nil if the source errors out
func (a *BattleEventSkillConfigLDAccessor) BySkillIcon(identifier string) (BattleEventSkillConfigLD, error) {
	if a._dataSkillIcon == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return BattleEventSkillConfigLD{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSkillIcon[identifier], nil
}

// BySkillTriggerKey returns the BattleEventSkillConfigLD uniquely identified by SkillTriggerKey
//
// Error is only non-nil if the source errors out
func (a *BattleEventSkillConfigLDAccessor) BySkillTriggerKey(identifier string) (BattleEventSkillConfigLD, error) {
	if a._dataSkillTriggerKey == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return BattleEventSkillConfigLD{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSkillTriggerKey[identifier], nil
}

// ByUltraSkillIcon returns the BattleEventSkillConfigLD uniquely identified by UltraSkillIcon
//
// Error is only non-nil if the source errors out
func (a *BattleEventSkillConfigLDAccessor) ByUltraSkillIcon(identifier string) (BattleEventSkillConfigLD, error) {
	if a._dataUltraSkillIcon == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return BattleEventSkillConfigLD{}, err
			}
		}
		a.GroupData()
	}
	return a._dataUltraSkillIcon[identifier], nil
}
