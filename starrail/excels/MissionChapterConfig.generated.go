package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type MissionChapterConfig struct {
	ChapterDesc            string        `json:"ChapterDesc"`
	ChapterDisplayPriority json.Number   `json:"ChapterDisplayPriority"`
	ChapterFigureIconPath  string        `json:"ChapterFigureIconPath"`
	ChapterIconPath        string        `json:"ChapterIconPath"`
	ChapterName            string        `json:"ChapterName"`
	ChapterType            string        `json:"ChapterType"`
	FinalMainMission       json.Number   `json:"FinalMainMission"`
	ID                     json.Number   `json:"ID"`
	LinkChapterList        []json.Number `json:"LinkChapterList"`
	OriginMainMission      json.Number   `json:"OriginMainMission"`
	StageName              string        `json:"StageName"`
}
type MissionChapterConfigAccessor struct {
	_data []MissionChapterConfig
}

// LoadData retrieves the data. Must be called before MissionChapterConfig.GroupData
func (a *MissionChapterConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MissionChapterConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MissionChapterConfigAccessor) Raw() ([]MissionChapterConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MissionChapterConfig{}, err
		}
	}
	return a._data, nil
}
