package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type MissionChapterConfig struct {
	ChapterDesc            string        `json:"ChapterDesc"`
	ChapterDisplayPriority json.Number   `json:"ChapterDisplayPriority"`
	ChapterFigureIconPath  string        `json:"ChapterFigureIconPath"`
	ChapterIconPath        string        `json:"ChapterIconPath"`
	ChapterName            string        `json:"ChapterName"`
	ChapterType            string        `json:"ChapterType"`
	FinalMainMission       json.Number   `json:"FinalMainMission"`
	ID                     json.Number   `json:"ID"`
	LinkChapterList        []json.Number `json:"LinkChapterList"`
	OriginMainMission      json.Number   `json:"OriginMainMission"`
	StageName              string        `json:"StageName"`
}
type MissionChapterConfigAccessor struct {
	_data                       []MissionChapterConfig
	_dataChapterDisplayPriority map[json.Number]MissionChapterConfig
	_dataID                     map[json.Number]MissionChapterConfig
}

// LoadData retrieves the data. Must be called before MissionChapterConfig.GroupData
func (a *MissionChapterConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MissionChapterConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MissionChapterConfigAccessor) Raw() ([]MissionChapterConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MissionChapterConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MissionChapterConfigAccessor.LoadData to preload everything
func (a *MissionChapterConfigAccessor) GroupData() {
	a._dataChapterDisplayPriority = map[json.Number]MissionChapterConfig{}
	a._dataID = map[json.Number]MissionChapterConfig{}
	for _, d := range a._data {
		a._dataChapterDisplayPriority[d.ChapterDisplayPriority] = d
		a._dataID[d.ID] = d
	}
}

// ByChapterDisplayPriority returns the MissionChapterConfig uniquely identified by ChapterDisplayPriority
//
// Error is only non-nil if the source errors out
func (a *MissionChapterConfigAccessor) ByChapterDisplayPriority(identifier json.Number) (MissionChapterConfig, error) {
	if a._dataChapterDisplayPriority == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MissionChapterConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataChapterDisplayPriority[identifier], nil
}

// ByID returns the MissionChapterConfig uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *MissionChapterConfigAccessor) ByID(identifier json.Number) (MissionChapterConfig, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MissionChapterConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}
