package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type MuseumDeskTalk struct {
	CustomString      string                   `json:"CustomString"`
	Priority          json.Number              `json:"Priority"`
	TalkID            json.Number              `json:"TalkID"`
	TalkType          string                   `json:"TalkType"`
	TalkTypeParameter string                   `json:"TalkTypeParameter"`
	TextIDList        []map[string]json.Number `json:"TextIDList"`
	TriggerType       string                   `json:"TriggerType"`
}
type MuseumDeskTalkAccessor struct {
	_data             []MuseumDeskTalk
	_dataCustomString map[string]MuseumDeskTalk
	_dataTalkID       map[json.Number]MuseumDeskTalk
}

// LoadData retrieves the data. Must be called before MuseumDeskTalk.GroupData
func (a *MuseumDeskTalkAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MuseumDeskTalk.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MuseumDeskTalkAccessor) Raw() ([]MuseumDeskTalk, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MuseumDeskTalk{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MuseumDeskTalkAccessor.LoadData to preload everything
func (a *MuseumDeskTalkAccessor) GroupData() {
	a._dataCustomString = map[string]MuseumDeskTalk{}
	a._dataTalkID = map[json.Number]MuseumDeskTalk{}
	for _, d := range a._data {
		a._dataCustomString[d.CustomString] = d
		a._dataTalkID[d.TalkID] = d
	}
}

// ByCustomString returns the MuseumDeskTalk uniquely identified by CustomString
//
// Error is only non-nil if the source errors out
func (a *MuseumDeskTalkAccessor) ByCustomString(identifier string) (MuseumDeskTalk, error) {
	if a._dataCustomString == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MuseumDeskTalk{}, err
			}
		}
		a.GroupData()
	}
	return a._dataCustomString[identifier], nil
}

// ByTalkID returns the MuseumDeskTalk uniquely identified by TalkID
//
// Error is only non-nil if the source errors out
func (a *MuseumDeskTalkAccessor) ByTalkID(identifier json.Number) (MuseumDeskTalk, error) {
	if a._dataTalkID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MuseumDeskTalk{}, err
			}
		}
		a.GroupData()
	}
	return a._dataTalkID[identifier], nil
}
