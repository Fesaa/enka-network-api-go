package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type TreasureDungeonEnemyConfig struct {
	EnemyID          json.Number   `json:"EnemyID"`
	EnemyLevel       json.Number   `json:"EnemyLevel"`
	SpecialMonsterID json.Number   `json:"SpecialMonsterID"`
	StageEventList   []json.Number `json:"StageEventList"`
}
type TreasureDungeonEnemyConfigAccessor struct {
	_data        []TreasureDungeonEnemyConfig
	_dataEnemyID map[json.Number]TreasureDungeonEnemyConfig
}

// LoadData retrieves the data. Must be called before TreasureDungeonEnemyConfig.GroupData
func (a *TreasureDungeonEnemyConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/TreasureDungeonEnemyConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *TreasureDungeonEnemyConfigAccessor) Raw() ([]TreasureDungeonEnemyConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []TreasureDungeonEnemyConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with TreasureDungeonEnemyConfigAccessor.LoadData to preload everything
func (a *TreasureDungeonEnemyConfigAccessor) GroupData() {
	a._dataEnemyID = map[json.Number]TreasureDungeonEnemyConfig{}
	for _, d := range a._data {
		a._dataEnemyID[d.EnemyID] = d
	}
}

// ByEnemyID returns the TreasureDungeonEnemyConfig uniquely identified by EnemyID
//
// Error is only non-nil if the source errors out
func (a *TreasureDungeonEnemyConfigAccessor) ByEnemyID(identifier json.Number) (TreasureDungeonEnemyConfig, error) {
	if a._dataEnemyID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return TreasureDungeonEnemyConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataEnemyID[identifier], nil
}
