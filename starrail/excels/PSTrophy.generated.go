package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type PSTrophy struct {
	AchievementDesc  map[string]json.Number `json:"AchievementDesc"`
	AchievementID    json.Number            `json:"AchievementID"`
	AchievementTitle map[string]json.Number `json:"AchievementTitle"`
}
type PSTrophyAccessor struct {
	_data              []PSTrophy
	_dataAchievementID map[json.Number]PSTrophy
}

// LoadData retrieves the data. Must be called before PSTrophy.GroupData
func (a *PSTrophyAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/PSTrophy.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *PSTrophyAccessor) Raw() ([]PSTrophy, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []PSTrophy{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with PSTrophyAccessor.LoadData to preload everything
func (a *PSTrophyAccessor) GroupData() {
	a._dataAchievementID = map[json.Number]PSTrophy{}
	for _, d := range a._data {
		a._dataAchievementID[d.AchievementID] = d
	}
}

// ByAchievementID returns the PSTrophy uniquely identified by AchievementID
//
// Error is only non-nil if the source errors out
func (a *PSTrophyAccessor) ByAchievementID(identifier json.Number) (PSTrophy, error) {
	if a._dataAchievementID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return PSTrophy{}, err
			}
		}
		a.GroupData()
	}
	return a._dataAchievementID[identifier], nil
}
