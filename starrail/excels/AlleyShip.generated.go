package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type AlleyShip struct {
	ShipConfig string  `json:"ShipConfig"`
	ShipID     float64 `json:"ShipID"`
	ShipType   string  `json:"ShipType"`
}
type AlleyShipAccessor struct {
	_data           []AlleyShip
	_dataShipID     map[float64]AlleyShip
	_dataShipConfig map[string]AlleyShip
	_dataShipType   map[string]AlleyShip
}

// LoadData retrieves the data. Must be called before AlleyShip.GroupData
func (a *AlleyShipAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/AlleyShip.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *AlleyShipAccessor) Raw() ([]AlleyShip, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []AlleyShip{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with AlleyShipAccessor.LoadData to preload everything
func (a *AlleyShipAccessor) GroupData() {
	for _, d := range a._data {
		a._dataShipID[d.ShipID] = d
		a._dataShipConfig[d.ShipConfig] = d
		a._dataShipType[d.ShipType] = d
	}
}

// ByShipID returns the AlleyShip uniquely identified by ShipID
//
// Error is only non-nil if the source errors out
func (a *AlleyShipAccessor) ByShipID(identifier float64) (AlleyShip, error) {
	if a._dataShipID == nil {
		err := a.LoadData()
		if err != nil {
			return AlleyShip{}, err
		}
		a.GroupData()
	}
	return a._dataShipID[identifier], nil
}

// ByShipConfig returns the AlleyShip uniquely identified by ShipConfig
//
// Error is only non-nil if the source errors out
func (a *AlleyShipAccessor) ByShipConfig(identifier string) (AlleyShip, error) {
	if a._dataShipConfig == nil {
		err := a.LoadData()
		if err != nil {
			return AlleyShip{}, err
		}
		a.GroupData()
	}
	return a._dataShipConfig[identifier], nil
}

// ByShipType returns the AlleyShip uniquely identified by ShipType
//
// Error is only non-nil if the source errors out
func (a *AlleyShipAccessor) ByShipType(identifier string) (AlleyShip, error) {
	if a._dataShipType == nil {
		err := a.LoadData()
		if err != nil {
			return AlleyShip{}, err
		}
		a.GroupData()
	}
	return a._dataShipType[identifier], nil
}
