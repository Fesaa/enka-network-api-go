package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type ActivitySummonGroup struct {
	ActivityModuleID         json.Number              `json:"ActivityModuleID"`
	AvatarSkillList          []json.Number            `json:"AvatarSkillList"`
	BackgroundTrashImageList []string                 `json:"BackgroundTrashImageList"`
	Desc                     map[string]json.Number   `json:"Desc"`
	EntranceID               json.Number              `json:"EntranceID"`
	GotoID                   json.Number              `json:"GotoID"`
	GroupID                  json.Number              `json:"GroupID"`
	ImagePath                string                   `json:"ImagePath"`
	MappingInfo              json.Number              `json:"MappingInfo"`
	MasterImagePath          []string                 `json:"MasterImagePath"`
	MazeBuffID               json.Number              `json:"MazeBuffID"`
	MiniImagePath            string                   `json:"MiniImagePath"`
	MonsterDesc              map[string]json.Number   `json:"MonsterDesc"`
	MonsterEventID           json.Number              `json:"MonsterEventID"`
	MonsterImagePath         string                   `json:"MonsterImagePath"`
	MonsterMiddleIcon        string                   `json:"MonsterMiddleIcon"`
	MonsterName              map[string]json.Number   `json:"MonsterName"`
	MonsterSkillDescList     []map[string]json.Number `json:"MonsterSkillDescList"`
	MonsterSkillList         []json.Number            `json:"MonsterSkillList"`
	OriginalDesc             map[string]json.Number   `json:"OriginalDesc"`
	OriginalImagePath        string                   `json:"OriginalImagePath"`
	OriginalMiniImagePath    string                   `json:"OriginalMiniImagePath"`
	OriginalStageName        map[string]json.Number   `json:"OriginalStageName"`
	StageName                map[string]json.Number   `json:"StageName"`
	SubMissionID             json.Number              `json:"SubMissionID"`
}
type ActivitySummonGroupAccessor struct {
	_data                      []ActivitySummonGroup
	_dataImagePath             map[string]ActivitySummonGroup
	_dataMiniImagePath         map[string]ActivitySummonGroup
	_dataMonsterImagePath      map[string]ActivitySummonGroup
	_dataMonsterMiddleIcon     map[string]ActivitySummonGroup
	_dataOriginalImagePath     map[string]ActivitySummonGroup
	_dataOriginalMiniImagePath map[string]ActivitySummonGroup
}

// LoadData retrieves the data. Must be called before ActivitySummonGroup.GroupData
func (a *ActivitySummonGroupAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ActivitySummonGroup.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ActivitySummonGroupAccessor) Raw() ([]ActivitySummonGroup, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ActivitySummonGroup{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ActivitySummonGroupAccessor.LoadData to preload everything
func (a *ActivitySummonGroupAccessor) GroupData() {
	a._dataImagePath = map[string]ActivitySummonGroup{}
	a._dataMiniImagePath = map[string]ActivitySummonGroup{}
	a._dataMonsterImagePath = map[string]ActivitySummonGroup{}
	a._dataMonsterMiddleIcon = map[string]ActivitySummonGroup{}
	a._dataOriginalImagePath = map[string]ActivitySummonGroup{}
	a._dataOriginalMiniImagePath = map[string]ActivitySummonGroup{}
	for _, d := range a._data {
		a._dataImagePath[d.ImagePath] = d
		a._dataMiniImagePath[d.MiniImagePath] = d
		a._dataMonsterImagePath[d.MonsterImagePath] = d
		a._dataMonsterMiddleIcon[d.MonsterMiddleIcon] = d
		a._dataOriginalImagePath[d.OriginalImagePath] = d
		a._dataOriginalMiniImagePath[d.OriginalMiniImagePath] = d
	}
}

// ByImagePath returns the ActivitySummonGroup uniquely identified by ImagePath
//
// Error is only non-nil if the source errors out
func (a *ActivitySummonGroupAccessor) ByImagePath(identifier string) (ActivitySummonGroup, error) {
	if a._dataImagePath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivitySummonGroup{}, err
			}
		}
		a.GroupData()
	}
	return a._dataImagePath[identifier], nil
}

// ByMiniImagePath returns the ActivitySummonGroup uniquely identified by MiniImagePath
//
// Error is only non-nil if the source errors out
func (a *ActivitySummonGroupAccessor) ByMiniImagePath(identifier string) (ActivitySummonGroup, error) {
	if a._dataMiniImagePath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivitySummonGroup{}, err
			}
		}
		a.GroupData()
	}
	return a._dataMiniImagePath[identifier], nil
}

// ByMonsterImagePath returns the ActivitySummonGroup uniquely identified by MonsterImagePath
//
// Error is only non-nil if the source errors out
func (a *ActivitySummonGroupAccessor) ByMonsterImagePath(identifier string) (ActivitySummonGroup, error) {
	if a._dataMonsterImagePath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivitySummonGroup{}, err
			}
		}
		a.GroupData()
	}
	return a._dataMonsterImagePath[identifier], nil
}

// ByMonsterMiddleIcon returns the ActivitySummonGroup uniquely identified by MonsterMiddleIcon
//
// Error is only non-nil if the source errors out
func (a *ActivitySummonGroupAccessor) ByMonsterMiddleIcon(identifier string) (ActivitySummonGroup, error) {
	if a._dataMonsterMiddleIcon == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivitySummonGroup{}, err
			}
		}
		a.GroupData()
	}
	return a._dataMonsterMiddleIcon[identifier], nil
}

// ByOriginalImagePath returns the ActivitySummonGroup uniquely identified by OriginalImagePath
//
// Error is only non-nil if the source errors out
func (a *ActivitySummonGroupAccessor) ByOriginalImagePath(identifier string) (ActivitySummonGroup, error) {
	if a._dataOriginalImagePath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivitySummonGroup{}, err
			}
		}
		a.GroupData()
	}
	return a._dataOriginalImagePath[identifier], nil
}

// ByOriginalMiniImagePath returns the ActivitySummonGroup uniquely identified by OriginalMiniImagePath
//
// Error is only non-nil if the source errors out
func (a *ActivitySummonGroupAccessor) ByOriginalMiniImagePath(identifier string) (ActivitySummonGroup, error) {
	if a._dataOriginalMiniImagePath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivitySummonGroup{}, err
			}
		}
		a.GroupData()
	}
	return a._dataOriginalMiniImagePath[identifier], nil
}
