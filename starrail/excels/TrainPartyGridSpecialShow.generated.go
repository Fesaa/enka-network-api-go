package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type TrainPartyGridSpecialShow struct {
	GridID                   float64 `json:"GridID"`
	GridSpecialShowImagePath string  `json:"GridSpecialShowImagePath"`
}
type TrainPartyGridSpecialShowAccessor struct {
	_data                         []TrainPartyGridSpecialShow
	_dataGridSpecialShowImagePath map[string]TrainPartyGridSpecialShow
	_dataGridID                   map[float64]TrainPartyGridSpecialShow
}

// LoadData retrieves the data. Must be called before TrainPartyGridSpecialShow.GroupData
func (a *TrainPartyGridSpecialShowAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/TrainPartyGridSpecialShow.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *TrainPartyGridSpecialShowAccessor) Raw() ([]TrainPartyGridSpecialShow, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []TrainPartyGridSpecialShow{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with TrainPartyGridSpecialShowAccessor.LoadData to preload everything
func (a *TrainPartyGridSpecialShowAccessor) GroupData() {
	for _, d := range a._data {
		a._dataGridSpecialShowImagePath[d.GridSpecialShowImagePath] = d
		a._dataGridID[d.GridID] = d
	}
}

// ByGridSpecialShowImagePath returns the TrainPartyGridSpecialShow uniquely identified by GridSpecialShowImagePath
//
// Error is only non-nil if the source errors out
func (a *TrainPartyGridSpecialShowAccessor) ByGridSpecialShowImagePath(identifier string) (TrainPartyGridSpecialShow, error) {
	if a._dataGridSpecialShowImagePath == nil {
		err := a.LoadData()
		if err != nil {
			return TrainPartyGridSpecialShow{}, err
		}
		a.GroupData()
	}
	return a._dataGridSpecialShowImagePath[identifier], nil
}

// ByGridID returns the TrainPartyGridSpecialShow uniquely identified by GridID
//
// Error is only non-nil if the source errors out
func (a *TrainPartyGridSpecialShowAccessor) ByGridID(identifier float64) (TrainPartyGridSpecialShow, error) {
	if a._dataGridID == nil {
		err := a.LoadData()
		if err != nil {
			return TrainPartyGridSpecialShow{}, err
		}
		a.GroupData()
	}
	return a._dataGridID[identifier], nil
}
