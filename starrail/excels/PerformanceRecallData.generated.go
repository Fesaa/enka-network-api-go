package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type PerformanceRecallData struct {
	CategoryID      json.Number                            `json:"CategoryID"`
	ID              json.Number                            `json:"ID"`
	ImgHeightSize   json.Number                            `json:"ImgHeightSize"`
	ImgPath         string                                 `json:"ImgPath"`
	ImgPathWall     string                                 `json:"ImgPathWall"`
	ImgPathWallF    string                                 `json:"ImgPathWall_F"`
	ImgPathF        string                                 `json:"ImgPath_F"`
	Name            map[string]json.Number                 `json:"Name"`
	PerformanceID   json.Number                            `json:"PerformanceID"`
	UnlockCondition []PerformanceRecallDataUnlockCondition `json:"UnlockCondition"`
	IsVideo         bool                                   `json:"isVideo"`
}
type PerformanceRecallDataUnlockCondition struct {
	Param string `json:"Param"`
	Type  string `json:"Type"`
}
type PerformanceRecallDataAccessor struct {
	_data []PerformanceRecallData
}

// LoadData retrieves the data. Must be called before PerformanceRecallData.GroupData
func (a *PerformanceRecallDataAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/PerformanceRecallData.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *PerformanceRecallDataAccessor) Raw() ([]PerformanceRecallData, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []PerformanceRecallData{}, err
		}
	}
	return a._data, nil
}
