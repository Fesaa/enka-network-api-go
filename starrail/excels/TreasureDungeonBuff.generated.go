package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type TreasureDungeonBuff struct {
	BattleTargetBouns map[string]json.Number `json:"BattleTargetBouns"`
	BattleTargetID    json.Number            `json:"BattleTargetID"`
	BgDesc            map[string]json.Number `json:"BgDesc"`
	BuffGroupID       json.Number            `json:"BuffGroupID"`
	BuffID            json.Number            `json:"BuffID"`
	Desc              map[string]json.Number `json:"Desc"`
	DisplayRarity     json.Number            `json:"DisplayRarity"`
	FigurePath        string                 `json:"FigurePath"`
	IsSaveNextFloor   bool                   `json:"IsSaveNextFloor"`
	ParamInt          json.Number            `json:"ParamInt"`
	TargetBounsParam  json.Number            `json:"TargetBounsParam"`
	Type              string                 `json:"Type"`
	TypeParam         []json.Number          `json:"TypeParam"`
	UseTime           json.Number            `json:"UseTime"`
}
type TreasureDungeonBuffAccessor struct {
	_data       []TreasureDungeonBuff
	_dataBuffID map[json.Number]TreasureDungeonBuff
}

// LoadData retrieves the data. Must be called before TreasureDungeonBuff.GroupData
func (a *TreasureDungeonBuffAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/TreasureDungeonBuff.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *TreasureDungeonBuffAccessor) Raw() ([]TreasureDungeonBuff, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []TreasureDungeonBuff{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with TreasureDungeonBuffAccessor.LoadData to preload everything
func (a *TreasureDungeonBuffAccessor) GroupData() {
	a._dataBuffID = map[json.Number]TreasureDungeonBuff{}
	for _, d := range a._data {
		a._dataBuffID[d.BuffID] = d
	}
}

// ByBuffID returns the TreasureDungeonBuff uniquely identified by BuffID
//
// Error is only non-nil if the source errors out
func (a *TreasureDungeonBuffAccessor) ByBuffID(identifier json.Number) (TreasureDungeonBuff, error) {
	if a._dataBuffID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return TreasureDungeonBuff{}, err
			}
		}
		a.GroupData()
	}
	return a._dataBuffID[identifier], nil
}
