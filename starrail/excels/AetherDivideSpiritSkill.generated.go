package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type AetherDivideSpiritSkill struct {
	AttackType              string                   `json:"AttackType"`
	BPAdd                   map[string]json.Number   `json:"BPAdd"`
	BPNeed                  map[string]json.Number   `json:"BPNeed"`
	ExtraEffectIDList       []json.Number            `json:"ExtraEffectIDList"`
	ParamList               []map[string]json.Number `json:"ParamList"`
	PropertyType            string                   `json:"PropertyType"`
	SPMultipleRatio         map[string]json.Number   `json:"SPMultipleRatio"`
	SPNeed                  map[string]json.Number   `json:"SPNeed"`
	SimpleExtraEffectIDList []json.Number            `json:"SimpleExtraEffectIDList"`
	SimpleParamList         []map[string]json.Number `json:"SimpleParamList"`
	SimpleSkillDesc         map[string]json.Number   `json:"SimpleSkillDesc"`
	SkillDesc               map[string]json.Number   `json:"SkillDesc"`
	SkillEffect             string                   `json:"SkillEffect"`
	SkillID                 json.Number              `json:"SkillID"`
	SkillIcon               string                   `json:"SkillIcon"`
	SkillName               map[string]json.Number   `json:"SkillName"`
	SkillTag                map[string]json.Number   `json:"SkillTag"`
	SkillTriggerKey         string                   `json:"SkillTriggerKey"`
	SkillTypeDesc           map[string]json.Number   `json:"SkillTypeDesc"`
	UltraSkillIcon          string                   `json:"UltraSkillIcon"`
}
type AetherDivideSpiritSkillAccessor struct {
	_data []AetherDivideSpiritSkill
}

// LoadData retrieves the data. Must be called before AetherDivideSpiritSkill.GroupData
func (a *AetherDivideSpiritSkillAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/AetherDivideSpiritSkill.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *AetherDivideSpiritSkillAccessor) Raw() ([]AetherDivideSpiritSkill, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []AetherDivideSpiritSkill{}, err
		}
	}
	return a._data, nil
}
