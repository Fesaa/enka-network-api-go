package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type PlanetFesAssistantMessage struct {
	AssistantMessageType string                 `json:"AssistantMessageType"`
	Delay                json.Number            `json:"Delay"`
	Description          map[string]json.Number `json:"Description"`
	ID                   json.Number            `json:"ID"`
	Interval             json.Number            `json:"Interval"`
	IsUseGLobalCD        bool                   `json:"IsUseGLobalCD"`
	Priority             json.Number            `json:"Priority"`
	TypePara             []json.Number          `json:"TypePara"`
	UnlockPlanetFesLevel json.Number            `json:"UnlockPlanetFesLevel"`
}
type PlanetFesAssistantMessageAccessor struct {
	_data         []PlanetFesAssistantMessage
	_dataID       map[json.Number]PlanetFesAssistantMessage
	_dataPriority map[json.Number]PlanetFesAssistantMessage
}

// LoadData retrieves the data. Must be called before PlanetFesAssistantMessage.GroupData
func (a *PlanetFesAssistantMessageAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/PlanetFesAssistantMessage.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *PlanetFesAssistantMessageAccessor) Raw() ([]PlanetFesAssistantMessage, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []PlanetFesAssistantMessage{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with PlanetFesAssistantMessageAccessor.LoadData to preload everything
func (a *PlanetFesAssistantMessageAccessor) GroupData() {
	a._dataID = map[json.Number]PlanetFesAssistantMessage{}
	a._dataPriority = map[json.Number]PlanetFesAssistantMessage{}
	for _, d := range a._data {
		a._dataID[d.ID] = d
		a._dataPriority[d.Priority] = d
	}
}

// ByID returns the PlanetFesAssistantMessage uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *PlanetFesAssistantMessageAccessor) ByID(identifier json.Number) (PlanetFesAssistantMessage, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return PlanetFesAssistantMessage{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}

// ByPriority returns the PlanetFesAssistantMessage uniquely identified by Priority
//
// Error is only non-nil if the source errors out
func (a *PlanetFesAssistantMessageAccessor) ByPriority(identifier json.Number) (PlanetFesAssistantMessage, error) {
	if a._dataPriority == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return PlanetFesAssistantMessage{}, err
			}
		}
		a.GroupData()
	}
	return a._dataPriority[identifier], nil
}
