package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type RogueMiracle struct {
	MiracleDisplayID        float64 `json:"MiracleDisplayID"`
	MiracleEffectDisplayID  float64 `json:"MiracleEffectDisplayID"`
	MiracleID               float64 `json:"MiracleID"`
	UnlockHandbookMiracleID float64 `json:"UnlockHandbookMiracleID"`
}
type RogueMiracleAccessor struct {
	_data          []RogueMiracle
	_dataMiracleID map[float64]RogueMiracle
}

// LoadData retrieves the data. Must be called before RogueMiracle.GroupData
func (a *RogueMiracleAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueMiracle.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueMiracleAccessor) Raw() ([]RogueMiracle, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueMiracle{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueMiracleAccessor.LoadData to preload everything
func (a *RogueMiracleAccessor) GroupData() {
	for _, d := range a._data {
		a._dataMiracleID[d.MiracleID] = d
	}
}

// ByMiracleID returns the RogueMiracle uniquely identified by MiracleID
//
// Error is only non-nil if the source errors out
func (a *RogueMiracleAccessor) ByMiracleID(identifier float64) (RogueMiracle, error) {
	if a._dataMiracleID == nil {
		err := a.LoadData()
		if err != nil {
			return RogueMiracle{}, err
		}
		a.GroupData()
	}
	return a._dataMiracleID[identifier], nil
}
