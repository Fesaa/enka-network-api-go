package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type DrinkMakerChallenge struct {
	ChallengeID             json.Number   `json:"ChallengeID"`
	ChallengeIngredientList []json.Number `json:"ChallengeIngredientList"`
	ChallengePic            string        `json:"ChallengePic"`
	ChallengeRequest        json.Number   `json:"ChallengeRequest"`
	ChallengeRewardID       json.Number   `json:"ChallengeRewardID"`
	UnlockLevel             json.Number   `json:"UnlockLevel"`
	UnlockParam             []json.Number `json:"UnlockParam"`
	UnlockType              string        `json:"UnlockType"`
}
type DrinkMakerChallengeAccessor struct {
	_data                  []DrinkMakerChallenge
	_dataChallengeID       map[json.Number]DrinkMakerChallenge
	_dataChallengePic      map[string]DrinkMakerChallenge
	_dataChallengeRequest  map[json.Number]DrinkMakerChallenge
	_dataChallengeRewardID map[json.Number]DrinkMakerChallenge
}

// LoadData retrieves the data. Must be called before DrinkMakerChallenge.GroupData
func (a *DrinkMakerChallengeAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/DrinkMakerChallenge.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *DrinkMakerChallengeAccessor) Raw() ([]DrinkMakerChallenge, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []DrinkMakerChallenge{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with DrinkMakerChallengeAccessor.LoadData to preload everything
func (a *DrinkMakerChallengeAccessor) GroupData() {
	a._dataChallengeID = map[json.Number]DrinkMakerChallenge{}
	a._dataChallengePic = map[string]DrinkMakerChallenge{}
	a._dataChallengeRequest = map[json.Number]DrinkMakerChallenge{}
	a._dataChallengeRewardID = map[json.Number]DrinkMakerChallenge{}
	for _, d := range a._data {
		a._dataChallengeID[d.ChallengeID] = d
		a._dataChallengePic[d.ChallengePic] = d
		a._dataChallengeRequest[d.ChallengeRequest] = d
		a._dataChallengeRewardID[d.ChallengeRewardID] = d
	}
}

// ByChallengeID returns the DrinkMakerChallenge uniquely identified by ChallengeID
//
// Error is only non-nil if the source errors out
func (a *DrinkMakerChallengeAccessor) ByChallengeID(identifier json.Number) (DrinkMakerChallenge, error) {
	if a._dataChallengeID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return DrinkMakerChallenge{}, err
			}
		}
		a.GroupData()
	}
	return a._dataChallengeID[identifier], nil
}

// ByChallengePic returns the DrinkMakerChallenge uniquely identified by ChallengePic
//
// Error is only non-nil if the source errors out
func (a *DrinkMakerChallengeAccessor) ByChallengePic(identifier string) (DrinkMakerChallenge, error) {
	if a._dataChallengePic == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return DrinkMakerChallenge{}, err
			}
		}
		a.GroupData()
	}
	return a._dataChallengePic[identifier], nil
}

// ByChallengeRequest returns the DrinkMakerChallenge uniquely identified by ChallengeRequest
//
// Error is only non-nil if the source errors out
func (a *DrinkMakerChallengeAccessor) ByChallengeRequest(identifier json.Number) (DrinkMakerChallenge, error) {
	if a._dataChallengeRequest == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return DrinkMakerChallenge{}, err
			}
		}
		a.GroupData()
	}
	return a._dataChallengeRequest[identifier], nil
}

// ByChallengeRewardID returns the DrinkMakerChallenge uniquely identified by ChallengeRewardID
//
// Error is only non-nil if the source errors out
func (a *DrinkMakerChallengeAccessor) ByChallengeRewardID(identifier json.Number) (DrinkMakerChallenge, error) {
	if a._dataChallengeRewardID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return DrinkMakerChallenge{}, err
			}
		}
		a.GroupData()
	}
	return a._dataChallengeRewardID[identifier], nil
}
