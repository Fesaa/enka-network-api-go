package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type RogueDLCAeonCabinet struct {
	CabinetDesc                  hash.Hash                                         `json:"CabinetDesc"`
	CabinetID                    float64                                           `json:"CabinetID"`
	CabinetIcon                  string                                            `json:"CabinetIcon"`
	CabinetMissionDesc           hash.Hash                                         `json:"CabinetMissionDesc"`
	CabinetName                  hash.Hash                                         `json:"CabinetName"`
	CabinetType                  string                                            `json:"CabinetType"`
	DescParam                    []float64                                         `json:"DescParam"`
	FinishAeonDimensionPointList []RogueDLCAeonCabinetFinishAeonDimensionPointList `json:"FinishAeonDimensionPointList"`
	QuestID                      float64                                           `json:"QuestID"`
	Sort                         float64                                           `json:"Sort"`
	UnlockCabinetID              []float64                                         `json:"UnlockCabinetID"`
}
type RogueDLCAeonCabinetFinishAeonDimensionPointList struct {
	DimensionID float64 `json:"DimensionID"`
	Increments  float64 `json:"Increments"`
}
type RogueDLCAeonCabinetAccessor struct {
	_data            []RogueDLCAeonCabinet
	_dataCabinetIcon map[string]RogueDLCAeonCabinet
	_dataQuestID     map[float64]RogueDLCAeonCabinet
	_dataSort        map[float64]RogueDLCAeonCabinet
	_dataCabinetID   map[float64]RogueDLCAeonCabinet
}

// LoadData retrieves the data. Must be called before RogueDLCAeonCabinet.GroupData
func (a *RogueDLCAeonCabinetAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueDLCAeonCabinet.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueDLCAeonCabinetAccessor) Raw() ([]RogueDLCAeonCabinet, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueDLCAeonCabinet{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueDLCAeonCabinetAccessor.LoadData to preload everything
func (a *RogueDLCAeonCabinetAccessor) GroupData() {
	for _, d := range a._data {
		a._dataCabinetIcon[d.CabinetIcon] = d
		a._dataQuestID[d.QuestID] = d
		a._dataSort[d.Sort] = d
		a._dataCabinetID[d.CabinetID] = d
	}
}

// ByCabinetIcon returns the RogueDLCAeonCabinet uniquely identified by CabinetIcon
//
// Error is only non-nil if the source errors out
func (a *RogueDLCAeonCabinetAccessor) ByCabinetIcon(identifier string) (RogueDLCAeonCabinet, error) {
	if a._dataCabinetIcon == nil {
		err := a.LoadData()
		if err != nil {
			return RogueDLCAeonCabinet{}, err
		}
		a.GroupData()
	}
	return a._dataCabinetIcon[identifier], nil
}

// ByQuestID returns the RogueDLCAeonCabinet uniquely identified by QuestID
//
// Error is only non-nil if the source errors out
func (a *RogueDLCAeonCabinetAccessor) ByQuestID(identifier float64) (RogueDLCAeonCabinet, error) {
	if a._dataQuestID == nil {
		err := a.LoadData()
		if err != nil {
			return RogueDLCAeonCabinet{}, err
		}
		a.GroupData()
	}
	return a._dataQuestID[identifier], nil
}

// BySort returns the RogueDLCAeonCabinet uniquely identified by Sort
//
// Error is only non-nil if the source errors out
func (a *RogueDLCAeonCabinetAccessor) BySort(identifier float64) (RogueDLCAeonCabinet, error) {
	if a._dataSort == nil {
		err := a.LoadData()
		if err != nil {
			return RogueDLCAeonCabinet{}, err
		}
		a.GroupData()
	}
	return a._dataSort[identifier], nil
}

// ByCabinetID returns the RogueDLCAeonCabinet uniquely identified by CabinetID
//
// Error is only non-nil if the source errors out
func (a *RogueDLCAeonCabinetAccessor) ByCabinetID(identifier float64) (RogueDLCAeonCabinet, error) {
	if a._dataCabinetID == nil {
		err := a.LoadData()
		if err != nil {
			return RogueDLCAeonCabinet{}, err
		}
		a.GroupData()
	}
	return a._dataCabinetID[identifier], nil
}
