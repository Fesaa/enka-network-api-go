package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type RogueHandbookType struct {
	HandBookIconPath  string                 `json:"HandBookIconPath"`
	HandBookType      json.Number            `json:"HandBookType"`
	RogueHandBookDesc map[string]json.Number `json:"RogueHandBookDesc"`
	RogueHandBookType map[string]json.Number `json:"RogueHandBookType"`
}
type RogueHandbookTypeAccessor struct {
	_data             []RogueHandbookType
	_dataHandBookType map[json.Number]RogueHandbookType
}

// LoadData retrieves the data. Must be called before RogueHandbookType.GroupData
func (a *RogueHandbookTypeAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueHandbookType.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueHandbookTypeAccessor) Raw() ([]RogueHandbookType, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueHandbookType{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueHandbookTypeAccessor.LoadData to preload everything
func (a *RogueHandbookTypeAccessor) GroupData() {
	a._dataHandBookType = map[json.Number]RogueHandbookType{}
	for _, d := range a._data {
		a._dataHandBookType[d.HandBookType] = d
	}
}

// ByHandBookType returns the RogueHandbookType uniquely identified by HandBookType
//
// Error is only non-nil if the source errors out
func (a *RogueHandbookTypeAccessor) ByHandBookType(identifier json.Number) (RogueHandbookType, error) {
	if a._dataHandBookType == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueHandbookType{}, err
			}
		}
		a.GroupData()
	}
	return a._dataHandBookType[identifier], nil
}
