package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type MonsterTemplateUniqueConfig struct {
	AIPath              string                                       `json:"AIPath"`
	AISkillSequence     []MonsterTemplateUniqueConfigAISkillSequence `json:"AISkillSequence"`
	AttackBase          hash.Value                                   `json:"AttackBase"`
	HPBase              hash.Value                                   `json:"HPBase"`
	IconPath            string                                       `json:"IconPath"`
	ImagePath           string                                       `json:"ImagePath"`
	InitialDelayRatio   hash.Value                                   `json:"InitialDelayRatio"`
	JsonConfig          string                                       `json:"JsonConfig"`
	ManikinConfigPath   string                                       `json:"ManikinConfigPath"`
	ManikinImagePath    string                                       `json:"ManikinImagePath"`
	ManikinPrefabPath   string                                       `json:"ManikinPrefabPath"`
	MinimumFatigueRatio hash.Value                                   `json:"MinimumFatigueRatio"`
	MonsterName         hash.Hash                                    `json:"MonsterName"`
	MonsterStrategy     []interface{}                                `json:"MonsterStrategy"`
	MonsterTemplateID   float64                                      `json:"MonsterTemplateID"`
	NPCMonsterList      []interface{}                                `json:"NPCMonsterList"`
	PrefabPath          string                                       `json:"PrefabPath"`
	Rank                string                                       `json:"Rank"`
	RoundIconPath       string                                       `json:"RoundIconPath"`
	SpeedBase           hash.Value                                   `json:"SpeedBase"`
	StanceBase          hash.Value                                   `json:"StanceBase"`
	StanceCount         float64                                      `json:"StanceCount"`
}
type MonsterTemplateUniqueConfigAISkillSequence struct {
	BMEJEMLFEIO float64 `json:"BMEJEMLFEIO"`
}
type MonsterTemplateUniqueConfigAccessor struct {
	_data                  []MonsterTemplateUniqueConfig
	_dataMonsterTemplateID map[float64]MonsterTemplateUniqueConfig
}

// LoadData retrieves the data. Must be called before MonsterTemplateUniqueConfig.GroupData
func (a *MonsterTemplateUniqueConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MonsterTemplateUniqueConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MonsterTemplateUniqueConfigAccessor) Raw() ([]MonsterTemplateUniqueConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MonsterTemplateUniqueConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MonsterTemplateUniqueConfigAccessor.LoadData to preload everything
func (a *MonsterTemplateUniqueConfigAccessor) GroupData() {
	a._dataMonsterTemplateID = map[float64]MonsterTemplateUniqueConfig{}
	for _, d := range a._data {
		a._dataMonsterTemplateID[d.MonsterTemplateID] = d
	}
}

// ByMonsterTemplateID returns the MonsterTemplateUniqueConfig uniquely identified by MonsterTemplateID
//
// Error is only non-nil if the source errors out
func (a *MonsterTemplateUniqueConfigAccessor) ByMonsterTemplateID(identifier float64) (MonsterTemplateUniqueConfig, error) {
	if a._dataMonsterTemplateID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MonsterTemplateUniqueConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataMonsterTemplateID[identifier], nil
}
