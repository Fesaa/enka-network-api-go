package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type FantasticStoryConfig struct {
	ActivityModuleID json.Number   `json:"ActivityModuleID"`
	BattleIDList     []json.Number `json:"BattleIDList"`
	BuffIDList       []json.Number `json:"BuffIDList"`
	BuffSlotIDList   []json.Number `json:"BuffSlotIDList"`
	ChapterIDList    []json.Number `json:"ChapterIDList"`
	FantasticStoryID json.Number   `json:"FantasticStoryID"`
}
type FantasticStoryConfigAccessor struct {
	_data                 []FantasticStoryConfig
	_dataActivityModuleID map[json.Number]FantasticStoryConfig
	_dataFantasticStoryID map[json.Number]FantasticStoryConfig
}

// LoadData retrieves the data. Must be called before FantasticStoryConfig.GroupData
func (a *FantasticStoryConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/FantasticStoryConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *FantasticStoryConfigAccessor) Raw() ([]FantasticStoryConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []FantasticStoryConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with FantasticStoryConfigAccessor.LoadData to preload everything
func (a *FantasticStoryConfigAccessor) GroupData() {
	a._dataActivityModuleID = map[json.Number]FantasticStoryConfig{}
	a._dataFantasticStoryID = map[json.Number]FantasticStoryConfig{}
	for _, d := range a._data {
		a._dataActivityModuleID[d.ActivityModuleID] = d
		a._dataFantasticStoryID[d.FantasticStoryID] = d
	}
}

// ByActivityModuleID returns the FantasticStoryConfig uniquely identified by ActivityModuleID
//
// Error is only non-nil if the source errors out
func (a *FantasticStoryConfigAccessor) ByActivityModuleID(identifier json.Number) (FantasticStoryConfig, error) {
	if a._dataActivityModuleID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FantasticStoryConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataActivityModuleID[identifier], nil
}

// ByFantasticStoryID returns the FantasticStoryConfig uniquely identified by FantasticStoryID
//
// Error is only non-nil if the source errors out
func (a *FantasticStoryConfigAccessor) ByFantasticStoryID(identifier json.Number) (FantasticStoryConfig, error) {
	if a._dataFantasticStoryID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FantasticStoryConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataFantasticStoryID[identifier], nil
}
