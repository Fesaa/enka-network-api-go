package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type MonsterGuideSkill struct {
	Difficulty      float64   `json:"Difficulty"`
	SkillID         float64   `json:"SkillID"`
	SkillName       hash.Hash `json:"SkillName"`
	SkillTextIDList []float64 `json:"SkillTextIDList"`
	Type            string    `json:"Type"`
}
type MonsterGuideSkillAccessor struct {
	_data        []MonsterGuideSkill
	_dataSkillID map[float64]MonsterGuideSkill
}

// LoadData retrieves the data. Must be called before MonsterGuideSkill.GroupData
func (a *MonsterGuideSkillAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MonsterGuideSkill.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MonsterGuideSkillAccessor) Raw() ([]MonsterGuideSkill, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MonsterGuideSkill{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MonsterGuideSkillAccessor.LoadData to preload everything
func (a *MonsterGuideSkillAccessor) GroupData() {
	a._dataSkillID = map[float64]MonsterGuideSkill{}
	for _, d := range a._data {
		a._dataSkillID[d.SkillID] = d
	}
}

// BySkillID returns the MonsterGuideSkill uniquely identified by SkillID
//
// Error is only non-nil if the source errors out
func (a *MonsterGuideSkillAccessor) BySkillID(identifier float64) (MonsterGuideSkill, error) {
	if a._dataSkillID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MonsterGuideSkill{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSkillID[identifier], nil
}
