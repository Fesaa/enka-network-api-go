package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type MuseumItemSkillConfig struct {
	ItemSkillID   json.Number            `json:"ItemSkillID"`
	SkillDesc     map[string]json.Number `json:"SkillDesc"`
	Type          string                 `json:"Type"`
	TypeParameter []json.Number          `json:"TypeParameter"`
}
type MuseumItemSkillConfigAccessor struct {
	_data            []MuseumItemSkillConfig
	_dataItemSkillID map[json.Number]MuseumItemSkillConfig
}

// LoadData retrieves the data. Must be called before MuseumItemSkillConfig.GroupData
func (a *MuseumItemSkillConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MuseumItemSkillConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MuseumItemSkillConfigAccessor) Raw() ([]MuseumItemSkillConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MuseumItemSkillConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MuseumItemSkillConfigAccessor.LoadData to preload everything
func (a *MuseumItemSkillConfigAccessor) GroupData() {
	a._dataItemSkillID = map[json.Number]MuseumItemSkillConfig{}
	for _, d := range a._data {
		a._dataItemSkillID[d.ItemSkillID] = d
	}
}

// ByItemSkillID returns the MuseumItemSkillConfig uniquely identified by ItemSkillID
//
// Error is only non-nil if the source errors out
func (a *MuseumItemSkillConfigAccessor) ByItemSkillID(identifier json.Number) (MuseumItemSkillConfig, error) {
	if a._dataItemSkillID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MuseumItemSkillConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataItemSkillID[identifier], nil
}
