package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type EventMuseumItemConfig struct {
	EventContentTextID map[string]json.Number `json:"EventContentTextID"`
	EventMuseumItemID  json.Number            `json:"EventMuseumItemID"`
	ForceComplete      bool                   `json:"ForceComplete"`
	IsTargetReward     bool                   `json:"IsTargetReward"`
	MissionID          json.Number            `json:"MissionID"`
	MissionStartString string                 `json:"MissionStartString"`
	MuseumItemID       json.Number            `json:"MuseumItemID"`
}
type EventMuseumItemConfigAccessor struct {
	_data                   []EventMuseumItemConfig
	_dataMissionStartString map[string]EventMuseumItemConfig
}

// LoadData retrieves the data. Must be called before EventMuseumItemConfig.GroupData
func (a *EventMuseumItemConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/EventMuseumItemConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *EventMuseumItemConfigAccessor) Raw() ([]EventMuseumItemConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []EventMuseumItemConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with EventMuseumItemConfigAccessor.LoadData to preload everything
func (a *EventMuseumItemConfigAccessor) GroupData() {
	a._dataMissionStartString = map[string]EventMuseumItemConfig{}
	for _, d := range a._data {
		a._dataMissionStartString[d.MissionStartString] = d
	}
}

// ByMissionStartString returns the EventMuseumItemConfig uniquely identified by MissionStartString
//
// Error is only non-nil if the source errors out
func (a *EventMuseumItemConfigAccessor) ByMissionStartString(identifier string) (EventMuseumItemConfig, error) {
	if a._dataMissionStartString == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return EventMuseumItemConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataMissionStartString[identifier], nil
}
