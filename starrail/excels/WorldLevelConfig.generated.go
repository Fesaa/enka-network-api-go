package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type WorldLevelConfig struct {
	Breaktips1         map[string]json.Number `json:"Breaktips1"`
	Breaktips2         map[string]json.Number `json:"Breaktips2"`
	Level              json.Number            `json:"Level"`
	LevelUpMission     json.Number            `json:"LevelUpMission"`
	LevelUpMissionTips map[string]json.Number `json:"LevelUpMissionTips"`
	MaxPlayerLevel     json.Number            `json:"MaxPlayerLevel"`
}
type WorldLevelConfigAccessor struct {
	_data               []WorldLevelConfig
	_dataMaxPlayerLevel map[json.Number]WorldLevelConfig
}

// LoadData retrieves the data. Must be called before WorldLevelConfig.GroupData
func (a *WorldLevelConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/WorldLevelConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *WorldLevelConfigAccessor) Raw() ([]WorldLevelConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []WorldLevelConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with WorldLevelConfigAccessor.LoadData to preload everything
func (a *WorldLevelConfigAccessor) GroupData() {
	a._dataMaxPlayerLevel = map[json.Number]WorldLevelConfig{}
	for _, d := range a._data {
		a._dataMaxPlayerLevel[d.MaxPlayerLevel] = d
	}
}

// ByMaxPlayerLevel returns the WorldLevelConfig uniquely identified by MaxPlayerLevel
//
// Error is only non-nil if the source errors out
func (a *WorldLevelConfigAccessor) ByMaxPlayerLevel(identifier json.Number) (WorldLevelConfig, error) {
	if a._dataMaxPlayerLevel == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return WorldLevelConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataMaxPlayerLevel[identifier], nil
}
