package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type ChimeraWorkRound struct {
	ArrangeHintImage              string                 `json:"ArrangeHintImage"`
	DisplayTeamID                 json.Number            `json:"DisplayTeamID"`
	IsSSR                         bool                   `json:"IsSSR"`
	NewChimeraList                []json.Number          `json:"NewChimeraList"`
	OptionList                    []json.Number          `json:"OptionList"`
	RecommendedArrangementPresets []json.Number          `json:"RecommendedArrangementPresets"`
	RoundID                       json.Number            `json:"RoundID"`
	WarningText                   map[string]json.Number `json:"WarningText"`
	WorkList                      []json.Number          `json:"WorkList"`
}
type ChimeraWorkRoundAccessor struct {
	_data        []ChimeraWorkRound
	_dataRoundID map[json.Number]ChimeraWorkRound
}

// LoadData retrieves the data. Must be called before ChimeraWorkRound.GroupData
func (a *ChimeraWorkRoundAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ChimeraWorkRound.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ChimeraWorkRoundAccessor) Raw() ([]ChimeraWorkRound, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ChimeraWorkRound{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ChimeraWorkRoundAccessor.LoadData to preload everything
func (a *ChimeraWorkRoundAccessor) GroupData() {
	a._dataRoundID = map[json.Number]ChimeraWorkRound{}
	for _, d := range a._data {
		a._dataRoundID[d.RoundID] = d
	}
}

// ByRoundID returns the ChimeraWorkRound uniquely identified by RoundID
//
// Error is only non-nil if the source errors out
func (a *ChimeraWorkRoundAccessor) ByRoundID(identifier json.Number) (ChimeraWorkRound, error) {
	if a._dataRoundID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ChimeraWorkRound{}, err
			}
		}
		a.GroupData()
	}
	return a._dataRoundID[identifier], nil
}
