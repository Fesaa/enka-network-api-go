package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type LocalbookConfig struct {
	BookContent        hash.Hash `json:"BookContent"`
	BookDisplayType    float64   `json:"BookDisplayType"`
	BookID             float64   `json:"BookID"`
	BookInsideName     hash.Hash `json:"BookInsideName"`
	BookSeriesID       float64   `json:"BookSeriesID"`
	BookSeriesInsideID float64   `json:"BookSeriesInsideID"`
	LocalBookImagePath []string  `json:"LocalBookImagePath"`
}
type LocalbookConfigAccessor struct {
	_data       []LocalbookConfig
	_dataBookID map[float64]LocalbookConfig
}

// LoadData retrieves the data. Must be called before LocalbookConfig.GroupData
func (a *LocalbookConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/LocalbookConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *LocalbookConfigAccessor) Raw() ([]LocalbookConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []LocalbookConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with LocalbookConfigAccessor.LoadData to preload everything
func (a *LocalbookConfigAccessor) GroupData() {
	a._dataBookID = map[float64]LocalbookConfig{}
	for _, d := range a._data {
		a._dataBookID[d.BookID] = d
	}
}

// ByBookID returns the LocalbookConfig uniquely identified by BookID
//
// Error is only non-nil if the source errors out
func (a *LocalbookConfigAccessor) ByBookID(identifier float64) (LocalbookConfig, error) {
	if a._dataBookID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return LocalbookConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataBookID[identifier], nil
}
