package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type StoryProp struct {
	ConfigEntityPath         string      `json:"ConfigEntityPath"`
	JsonPath                 string      `json:"JsonPath"`
	PropID                   json.Number `json:"PropID"`
	StoryCharacterID         string      `json:"StoryCharacterID"`
	StoryCharacterModelPath  string      `json:"StoryCharacterModelPath"`
	StoryCharacterUniqueName string      `json:"StoryCharacterUniqueName"`
}
type StoryPropAccessor struct {
	_data                         []StoryProp
	_dataStoryCharacterID         map[string]StoryProp
	_dataStoryCharacterUniqueName map[string]StoryProp
}

// LoadData retrieves the data. Must be called before StoryProp.GroupData
func (a *StoryPropAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/StoryProp.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *StoryPropAccessor) Raw() ([]StoryProp, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []StoryProp{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with StoryPropAccessor.LoadData to preload everything
func (a *StoryPropAccessor) GroupData() {
	a._dataStoryCharacterID = map[string]StoryProp{}
	a._dataStoryCharacterUniqueName = map[string]StoryProp{}
	for _, d := range a._data {
		a._dataStoryCharacterID[d.StoryCharacterID] = d
		a._dataStoryCharacterUniqueName[d.StoryCharacterUniqueName] = d
	}
}

// ByStoryCharacterID returns the StoryProp uniquely identified by StoryCharacterID
//
// Error is only non-nil if the source errors out
func (a *StoryPropAccessor) ByStoryCharacterID(identifier string) (StoryProp, error) {
	if a._dataStoryCharacterID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return StoryProp{}, err
			}
		}
		a.GroupData()
	}
	return a._dataStoryCharacterID[identifier], nil
}

// ByStoryCharacterUniqueName returns the StoryProp uniquely identified by StoryCharacterUniqueName
//
// Error is only non-nil if the source errors out
func (a *StoryPropAccessor) ByStoryCharacterUniqueName(identifier string) (StoryProp, error) {
	if a._dataStoryCharacterUniqueName == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return StoryProp{}, err
			}
		}
		a.GroupData()
	}
	return a._dataStoryCharacterUniqueName[identifier], nil
}
