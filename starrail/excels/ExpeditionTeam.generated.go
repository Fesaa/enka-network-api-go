package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type ExpeditionTeam struct {
	TeamID        float64 `json:"TeamID"`
	UnlockMission float64 `json:"UnlockMission"`
}
type ExpeditionTeamAccessor struct {
	_data       []ExpeditionTeam
	_dataTeamID map[float64]ExpeditionTeam
}

// LoadData retrieves the data. Must be called before ExpeditionTeam.GroupData
func (a *ExpeditionTeamAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ExpeditionTeam.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ExpeditionTeamAccessor) Raw() ([]ExpeditionTeam, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ExpeditionTeam{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ExpeditionTeamAccessor.LoadData to preload everything
func (a *ExpeditionTeamAccessor) GroupData() {
	for _, d := range a._data {
		a._dataTeamID[d.TeamID] = d
	}
}

// ByTeamID returns the ExpeditionTeam uniquely identified by TeamID
//
// Error is only non-nil if the source errors out
func (a *ExpeditionTeamAccessor) ByTeamID(identifier float64) (ExpeditionTeam, error) {
	if a._dataTeamID == nil {
		err := a.LoadData()
		if err != nil {
			return ExpeditionTeam{}, err
		}
		a.GroupData()
	}
	return a._dataTeamID[identifier], nil
}
