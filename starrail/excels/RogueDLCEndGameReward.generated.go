package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type RogueDLCEndGameReward struct {
	EndGameRewardID float64 `json:"EndGameRewardID"`
	QuestID         float64 `json:"QuestID"`
	Sort            float64 `json:"Sort"`
}
type RogueDLCEndGameRewardAccessor struct {
	_data                []RogueDLCEndGameReward
	_dataEndGameRewardID map[float64]RogueDLCEndGameReward
	_dataQuestID         map[float64]RogueDLCEndGameReward
	_dataSort            map[float64]RogueDLCEndGameReward
}

// LoadData retrieves the data. Must be called before RogueDLCEndGameReward.GroupData
func (a *RogueDLCEndGameRewardAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueDLCEndGameReward.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueDLCEndGameRewardAccessor) Raw() ([]RogueDLCEndGameReward, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueDLCEndGameReward{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueDLCEndGameRewardAccessor.LoadData to preload everything
func (a *RogueDLCEndGameRewardAccessor) GroupData() {
	a._dataEndGameRewardID = map[float64]RogueDLCEndGameReward{}
	a._dataQuestID = map[float64]RogueDLCEndGameReward{}
	a._dataSort = map[float64]RogueDLCEndGameReward{}
	for _, d := range a._data {
		a._dataEndGameRewardID[d.EndGameRewardID] = d
		a._dataQuestID[d.QuestID] = d
		a._dataSort[d.Sort] = d
	}
}

// ByEndGameRewardID returns the RogueDLCEndGameReward uniquely identified by EndGameRewardID
//
// Error is only non-nil if the source errors out
func (a *RogueDLCEndGameRewardAccessor) ByEndGameRewardID(identifier float64) (RogueDLCEndGameReward, error) {
	if a._dataEndGameRewardID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueDLCEndGameReward{}, err
			}
		}
		a.GroupData()
	}
	return a._dataEndGameRewardID[identifier], nil
}

// ByQuestID returns the RogueDLCEndGameReward uniquely identified by QuestID
//
// Error is only non-nil if the source errors out
func (a *RogueDLCEndGameRewardAccessor) ByQuestID(identifier float64) (RogueDLCEndGameReward, error) {
	if a._dataQuestID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueDLCEndGameReward{}, err
			}
		}
		a.GroupData()
	}
	return a._dataQuestID[identifier], nil
}

// BySort returns the RogueDLCEndGameReward uniquely identified by Sort
//
// Error is only non-nil if the source errors out
func (a *RogueDLCEndGameRewardAccessor) BySort(identifier float64) (RogueDLCEndGameReward, error) {
	if a._dataSort == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueDLCEndGameReward{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSort[identifier], nil
}
