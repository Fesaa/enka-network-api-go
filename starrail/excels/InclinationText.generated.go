package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type InclinationText struct {
	InclinationAddValueList []float64 `json:"InclinationAddValueList"`
	InclinationTypeList     []float64 `json:"InclinationTypeList"`
	TalkSentenceID          float64   `json:"TalkSentenceID"`
}
type InclinationTextAccessor struct {
	_data               []InclinationText
	_dataTalkSentenceID map[float64]InclinationText
}

// LoadData retrieves the data. Must be called before InclinationText.GroupData
func (a *InclinationTextAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/InclinationText.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *InclinationTextAccessor) Raw() ([]InclinationText, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []InclinationText{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with InclinationTextAccessor.LoadData to preload everything
func (a *InclinationTextAccessor) GroupData() {
	for _, d := range a._data {
		a._dataTalkSentenceID[d.TalkSentenceID] = d
	}
}

// ByTalkSentenceID returns the InclinationText uniquely identified by TalkSentenceID
//
// Error is only non-nil if the source errors out
func (a *InclinationTextAccessor) ByTalkSentenceID(identifier float64) (InclinationText, error) {
	if a._dataTalkSentenceID == nil {
		err := a.LoadData()
		if err != nil {
			return InclinationText{}, err
		}
		a.GroupData()
	}
	return a._dataTalkSentenceID[identifier], nil
}
