package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type RewardData struct {
	Count1    json.Number `json:"Count_1"`
	Count2    json.Number `json:"Count_2"`
	Count3    json.Number `json:"Count_3"`
	Count4    json.Number `json:"Count_4"`
	Count5    json.Number `json:"Count_5"`
	Count6    json.Number `json:"Count_6"`
	Hcoin     json.Number `json:"Hcoin"`
	IsSpecial bool        `json:"IsSpecial"`
	ItemID1   json.Number `json:"ItemID_1"`
	ItemID2   json.Number `json:"ItemID_2"`
	ItemID3   json.Number `json:"ItemID_3"`
	ItemID4   json.Number `json:"ItemID_4"`
	ItemID5   json.Number `json:"ItemID_5"`
	ItemID6   json.Number `json:"ItemID_6"`
	Level1    json.Number `json:"Level_1"`
	Level2    json.Number `json:"Level_2"`
	Level3    json.Number `json:"Level_3"`
	Level4    json.Number `json:"Level_4"`
	Level5    json.Number `json:"Level_5"`
	Level6    json.Number `json:"Level_6"`
	Rank1     json.Number `json:"Rank_1"`
	Rank2     json.Number `json:"Rank_2"`
	Rank3     json.Number `json:"Rank_3"`
	Rank4     json.Number `json:"Rank_4"`
	Rank5     json.Number `json:"Rank_5"`
	Rank6     json.Number `json:"Rank_6"`
	RewardID  json.Number `json:"RewardID"`
}
type RewardDataAccessor struct {
	_data         []RewardData
	_dataRewardID map[json.Number]RewardData
}

// LoadData retrieves the data. Must be called before RewardData.GroupData
func (a *RewardDataAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RewardData.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RewardDataAccessor) Raw() ([]RewardData, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RewardData{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RewardDataAccessor.LoadData to preload everything
func (a *RewardDataAccessor) GroupData() {
	a._dataRewardID = map[json.Number]RewardData{}
	for _, d := range a._data {
		a._dataRewardID[d.RewardID] = d
	}
}

// ByRewardID returns the RewardData uniquely identified by RewardID
//
// Error is only non-nil if the source errors out
func (a *RewardDataAccessor) ByRewardID(identifier json.Number) (RewardData, error) {
	if a._dataRewardID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RewardData{}, err
			}
		}
		a.GroupData()
	}
	return a._dataRewardID[identifier], nil
}
