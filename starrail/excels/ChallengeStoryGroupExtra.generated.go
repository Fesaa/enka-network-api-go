package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type ChallengeStoryGroupExtra struct {
	BuffList                    []json.Number `json:"BuffList"`
	GroupID                     json.Number   `json:"GroupID"`
	StoryType                   string        `json:"StoryType"`
	SubMazeBuffList             []json.Number `json:"SubMazeBuffList"`
	ThemeID                     json.Number   `json:"ThemeID"`
	ThemeIconPicPath            string        `json:"ThemeIconPicPath"`
	ThemePosterBgPicPath        string        `json:"ThemePosterBgPicPath"`
	ThemePosterEffectPrefabPath string        `json:"ThemePosterEffectPrefabPath"`
	ThemePosterTabPicPath       string        `json:"ThemePosterTabPicPath"`
	ThemeToastPicPath           string        `json:"ThemeToastPicPath"`
}
type ChallengeStoryGroupExtraAccessor struct {
	_data []ChallengeStoryGroupExtra
}

// LoadData retrieves the data. Must be called before ChallengeStoryGroupExtra.GroupData
func (a *ChallengeStoryGroupExtraAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ChallengeStoryGroupExtra.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ChallengeStoryGroupExtraAccessor) Raw() ([]ChallengeStoryGroupExtra, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ChallengeStoryGroupExtra{}, err
		}
	}
	return a._data, nil
}
