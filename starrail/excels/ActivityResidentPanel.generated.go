package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type ActivityResidentPanel struct {
	DisplayItemList       []map[string]json.Number                `json:"DisplayItemList"`
	DisplayItemManualSort bool                                    `json:"DisplayItemManualSort"`
	FinishConditions      []ActivityResidentPanelFinishConditions `json:"FinishConditions"`
	IntroDesc             map[string]json.Number                  `json:"IntroDesc"`
	PanelDesc             map[string]json.Number                  `json:"PanelDesc"`
	PanelID               json.Number                             `json:"PanelID"`
	SortWeight            json.Number                             `json:"SortWeight"`
}
type ActivityResidentPanelFinishConditions struct {
	Param string `json:"Param"`
	Type  string `json:"Type"`
}
type ActivityResidentPanelAccessor struct {
	_data []ActivityResidentPanel
}

// LoadData retrieves the data. Must be called before ActivityResidentPanel.GroupData
func (a *ActivityResidentPanelAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ActivityResidentPanel.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ActivityResidentPanelAccessor) Raw() ([]ActivityResidentPanel, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ActivityResidentPanel{}, err
		}
	}
	return a._data, nil
}
