package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type EvoBdSCGearCollection struct {
	DamageCustomName string    `json:"DamageCustomName"`
	ElementList      []string  `json:"ElementList"`
	ID               float64   `json:"ID"`
	ItemIcon         string    `json:"ItemIcon"`
	LvMax            float64   `json:"LvMax"`
	Name             hash.Hash `json:"Name"`
	Season           string    `json:"Season"`
	TagList          []float64 `json:"TagList"`
	Type             string    `json:"Type"`
	UnlockQuest      float64   `json:"UnlockQuest"`
}
type EvoBdSCGearCollectionAccessor struct {
	_data         []EvoBdSCGearCollection
	_dataID       map[float64]EvoBdSCGearCollection
	_dataItemIcon map[string]EvoBdSCGearCollection
}

// LoadData retrieves the data. Must be called before EvoBdSCGearCollection.GroupData
func (a *EvoBdSCGearCollectionAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/EvoBdSCGearCollection.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *EvoBdSCGearCollectionAccessor) Raw() ([]EvoBdSCGearCollection, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []EvoBdSCGearCollection{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with EvoBdSCGearCollectionAccessor.LoadData to preload everything
func (a *EvoBdSCGearCollectionAccessor) GroupData() {
	a._dataID = map[float64]EvoBdSCGearCollection{}
	a._dataItemIcon = map[string]EvoBdSCGearCollection{}
	for _, d := range a._data {
		a._dataID[d.ID] = d
		a._dataItemIcon[d.ItemIcon] = d
	}
}

// ByID returns the EvoBdSCGearCollection uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *EvoBdSCGearCollectionAccessor) ByID(identifier float64) (EvoBdSCGearCollection, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return EvoBdSCGearCollection{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}

// ByItemIcon returns the EvoBdSCGearCollection uniquely identified by ItemIcon
//
// Error is only non-nil if the source errors out
func (a *EvoBdSCGearCollectionAccessor) ByItemIcon(identifier string) (EvoBdSCGearCollection, error) {
	if a._dataItemIcon == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return EvoBdSCGearCollection{}, err
			}
		}
		a.GroupData()
	}
	return a._dataItemIcon[identifier], nil
}
