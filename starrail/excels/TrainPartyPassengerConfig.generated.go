package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type TrainPartyPassengerConfig struct {
	AvatarCardPrefabPath  string                 `json:"AvatarCardPrefabPath"`
	AvatarRoundIconBgPath string                 `json:"AvatarRoundIconBgPath"`
	AvatarRoundIconPath   string                 `json:"AvatarRoundIconPath"`
	DiaryOrder            json.Number            `json:"DiaryOrder"`
	IconPath              string                 `json:"IconPath"`
	MeetingIconPath       string                 `json:"MeetingIconPath"`
	MiniIconPath          string                 `json:"MiniIconPath"`
	Name                  map[string]json.Number `json:"Name"`
	PassengerID           json.Number            `json:"PassengerID"`
	PassengerQuest        json.Number            `json:"PassengerQuest"`
	UnlcokDesc            map[string]json.Number `json:"UnlcokDesc"`
}
type TrainPartyPassengerConfigAccessor struct {
	_data                     []TrainPartyPassengerConfig
	_dataAvatarCardPrefabPath map[string]TrainPartyPassengerConfig
	_dataAvatarRoundIconPath  map[string]TrainPartyPassengerConfig
	_dataIconPath             map[string]TrainPartyPassengerConfig
	_dataMeetingIconPath      map[string]TrainPartyPassengerConfig
	_dataMiniIconPath         map[string]TrainPartyPassengerConfig
}

// LoadData retrieves the data. Must be called before TrainPartyPassengerConfig.GroupData
func (a *TrainPartyPassengerConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/TrainPartyPassengerConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *TrainPartyPassengerConfigAccessor) Raw() ([]TrainPartyPassengerConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []TrainPartyPassengerConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with TrainPartyPassengerConfigAccessor.LoadData to preload everything
func (a *TrainPartyPassengerConfigAccessor) GroupData() {
	a._dataAvatarCardPrefabPath = map[string]TrainPartyPassengerConfig{}
	a._dataAvatarRoundIconPath = map[string]TrainPartyPassengerConfig{}
	a._dataIconPath = map[string]TrainPartyPassengerConfig{}
	a._dataMeetingIconPath = map[string]TrainPartyPassengerConfig{}
	a._dataMiniIconPath = map[string]TrainPartyPassengerConfig{}
	for _, d := range a._data {
		a._dataAvatarCardPrefabPath[d.AvatarCardPrefabPath] = d
		a._dataAvatarRoundIconPath[d.AvatarRoundIconPath] = d
		a._dataIconPath[d.IconPath] = d
		a._dataMeetingIconPath[d.MeetingIconPath] = d
		a._dataMiniIconPath[d.MiniIconPath] = d
	}
}

// ByAvatarCardPrefabPath returns the TrainPartyPassengerConfig uniquely identified by AvatarCardPrefabPath
//
// Error is only non-nil if the source errors out
func (a *TrainPartyPassengerConfigAccessor) ByAvatarCardPrefabPath(identifier string) (TrainPartyPassengerConfig, error) {
	if a._dataAvatarCardPrefabPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return TrainPartyPassengerConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataAvatarCardPrefabPath[identifier], nil
}

// ByAvatarRoundIconPath returns the TrainPartyPassengerConfig uniquely identified by AvatarRoundIconPath
//
// Error is only non-nil if the source errors out
func (a *TrainPartyPassengerConfigAccessor) ByAvatarRoundIconPath(identifier string) (TrainPartyPassengerConfig, error) {
	if a._dataAvatarRoundIconPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return TrainPartyPassengerConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataAvatarRoundIconPath[identifier], nil
}

// ByIconPath returns the TrainPartyPassengerConfig uniquely identified by IconPath
//
// Error is only non-nil if the source errors out
func (a *TrainPartyPassengerConfigAccessor) ByIconPath(identifier string) (TrainPartyPassengerConfig, error) {
	if a._dataIconPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return TrainPartyPassengerConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataIconPath[identifier], nil
}

// ByMeetingIconPath returns the TrainPartyPassengerConfig uniquely identified by MeetingIconPath
//
// Error is only non-nil if the source errors out
func (a *TrainPartyPassengerConfigAccessor) ByMeetingIconPath(identifier string) (TrainPartyPassengerConfig, error) {
	if a._dataMeetingIconPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return TrainPartyPassengerConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataMeetingIconPath[identifier], nil
}

// ByMiniIconPath returns the TrainPartyPassengerConfig uniquely identified by MiniIconPath
//
// Error is only non-nil if the source errors out
func (a *TrainPartyPassengerConfigAccessor) ByMiniIconPath(identifier string) (TrainPartyPassengerConfig, error) {
	if a._dataMiniIconPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return TrainPartyPassengerConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataMiniIconPath[identifier], nil
}
