package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type RogueTournTitanBless struct {
	BlessBattleDisplayCategoryList []string      `json:"BlessBattleDisplayCategoryList"`
	BlessRatio                     json.Number   `json:"BlessRatio"`
	ExtraEffectIDList              []json.Number `json:"ExtraEffectIDList"`
	MazeBuffID                     json.Number   `json:"MazeBuffID"`
	TitanBlessID                   json.Number   `json:"TitanBlessID"`
	TitanBlessLevel                json.Number   `json:"TitanBlessLevel"`
	TitanType                      string        `json:"TitanType"`
}
type RogueTournTitanBlessAccessor struct {
	_data             []RogueTournTitanBless
	_dataMazeBuffID   map[json.Number]RogueTournTitanBless
	_dataTitanBlessID map[json.Number]RogueTournTitanBless
}

// LoadData retrieves the data. Must be called before RogueTournTitanBless.GroupData
func (a *RogueTournTitanBlessAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueTournTitanBless.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueTournTitanBlessAccessor) Raw() ([]RogueTournTitanBless, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueTournTitanBless{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueTournTitanBlessAccessor.LoadData to preload everything
func (a *RogueTournTitanBlessAccessor) GroupData() {
	a._dataMazeBuffID = map[json.Number]RogueTournTitanBless{}
	a._dataTitanBlessID = map[json.Number]RogueTournTitanBless{}
	for _, d := range a._data {
		a._dataMazeBuffID[d.MazeBuffID] = d
		a._dataTitanBlessID[d.TitanBlessID] = d
	}
}

// ByMazeBuffID returns the RogueTournTitanBless uniquely identified by MazeBuffID
//
// Error is only non-nil if the source errors out
func (a *RogueTournTitanBlessAccessor) ByMazeBuffID(identifier json.Number) (RogueTournTitanBless, error) {
	if a._dataMazeBuffID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueTournTitanBless{}, err
			}
		}
		a.GroupData()
	}
	return a._dataMazeBuffID[identifier], nil
}

// ByTitanBlessID returns the RogueTournTitanBless uniquely identified by TitanBlessID
//
// Error is only non-nil if the source errors out
func (a *RogueTournTitanBlessAccessor) ByTitanBlessID(identifier json.Number) (RogueTournTitanBless, error) {
	if a._dataTitanBlessID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueTournTitanBless{}, err
			}
		}
		a.GroupData()
	}
	return a._dataTitanBlessID[identifier], nil
}
