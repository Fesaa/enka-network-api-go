package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type MazeFloorLD struct {
	BGMWorldState            string        `json:"BGMWorldState"`
	BaseFloorID              float64       `json:"BaseFloorID"`
	CombatBGMHigh            string        `json:"CombatBGMHigh"`
	CombatBGMLow             string        `json:"CombatBGMLow"`
	EnterAudioEvent          []string      `json:"EnterAudioEvent"`
	ExitAudioEvent           []string      `json:"ExitAudioEvent"`
	FloorBGMBusyStateName    string        `json:"FloorBGMBusyStateName"`
	FloorBGMGroupName        string        `json:"FloorBGMGroupName"`
	FloorBGMNormalStateName  string        `json:"FloorBGMNormalStateName"`
	FloorDefaultEmotion      string        `json:"FloorDefaultEmotion"`
	FloorID                  float64       `json:"FloorID"`
	FloorName                string        `json:"FloorName"`
	FloorTag                 []interface{} `json:"FloorTag"`
	FloorType                string        `json:"FloorType"`
	MapLayerNameList         []hash.Hash   `json:"MapLayerNameList"`
	MunicipalConfigPath      string        `json:"MunicipalConfigPath"`
	OptionalLoadBlocksConfig string        `json:"OptionalLoadBlocksConfig"`
}
type MazeFloorLDAccessor struct {
	_data            []MazeFloorLD
	_dataBaseFloorID map[float64]MazeFloorLD
	_dataFloorID     map[float64]MazeFloorLD
}

// LoadData retrieves the data. Must be called before MazeFloorLD.GroupData
func (a *MazeFloorLDAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MazeFloorLD.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MazeFloorLDAccessor) Raw() ([]MazeFloorLD, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MazeFloorLD{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MazeFloorLDAccessor.LoadData to preload everything
func (a *MazeFloorLDAccessor) GroupData() {
	a._dataBaseFloorID = map[float64]MazeFloorLD{}
	a._dataFloorID = map[float64]MazeFloorLD{}
	for _, d := range a._data {
		a._dataBaseFloorID[d.BaseFloorID] = d
		a._dataFloorID[d.FloorID] = d
	}
}

// ByBaseFloorID returns the MazeFloorLD uniquely identified by BaseFloorID
//
// Error is only non-nil if the source errors out
func (a *MazeFloorLDAccessor) ByBaseFloorID(identifier float64) (MazeFloorLD, error) {
	if a._dataBaseFloorID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MazeFloorLD{}, err
			}
		}
		a.GroupData()
	}
	return a._dataBaseFloorID[identifier], nil
}

// ByFloorID returns the MazeFloorLD uniquely identified by FloorID
//
// Error is only non-nil if the source errors out
func (a *MazeFloorLDAccessor) ByFloorID(identifier float64) (MazeFloorLD, error) {
	if a._dataFloorID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MazeFloorLD{}, err
			}
		}
		a.GroupData()
	}
	return a._dataFloorID[identifier], nil
}
