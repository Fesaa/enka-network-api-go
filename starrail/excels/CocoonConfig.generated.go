package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type CocoonConfig struct {
	AutoObtainDamageType bool                     `json:"AutoObtainDamageType"`
	BuffDesc             map[string]json.Number   `json:"BuffDesc"`
	CocoonType           string                   `json:"CocoonType"`
	DamageType           []string                 `json:"DamageType"`
	DropList             []json.Number            `json:"DropList"`
	FarmType             string                   `json:"FarmType"`
	ID                   json.Number              `json:"ID"`
	MappingInfoID        json.Number              `json:"MappingInfoID"`
	MaxWave              json.Number              `json:"MaxWave"`
	OpenDate             []interface{}            `json:"OpenDate"`
	ParamList            []map[string]json.Number `json:"ParamList"`
	PropID               json.Number              `json:"PropID"`
	StageID              json.Number              `json:"StageID"`
	StageIDList          []json.Number            `json:"StageIDList"`
	StaminaCost          json.Number              `json:"StaminaCost"`
	WorldLevel           json.Number              `json:"WorldLevel"`
}
type CocoonConfigAccessor struct {
	_data []CocoonConfig
}

// LoadData retrieves the data. Must be called before CocoonConfig.GroupData
func (a *CocoonConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/CocoonConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *CocoonConfigAccessor) Raw() ([]CocoonConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []CocoonConfig{}, err
		}
	}
	return a._data, nil
}
