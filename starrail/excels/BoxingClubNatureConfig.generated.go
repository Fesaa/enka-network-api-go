package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type BoxingClubNatureConfig struct {
	BoxingBuffBackground     string `json:"BoxingBuffBackground"`
	BoxingBuffIcon           string `json:"BoxingBuffIcon"`
	BoxingBuffIconBackground string `json:"BoxingBuffIconBackground"`
	BoxingClubNatureType     string `json:"BoxingClubNatureType"`
	NatureIconBackGround     string `json:"NatureIconBackGround"`
}
type BoxingClubNatureConfigAccessor struct {
	_data                         []BoxingClubNatureConfig
	_dataBoxingBuffBackground     map[string]BoxingClubNatureConfig
	_dataBoxingBuffIcon           map[string]BoxingClubNatureConfig
	_dataBoxingBuffIconBackground map[string]BoxingClubNatureConfig
	_dataBoxingClubNatureType     map[string]BoxingClubNatureConfig
	_dataNatureIconBackGround     map[string]BoxingClubNatureConfig
}

// LoadData retrieves the data. Must be called before BoxingClubNatureConfig.GroupData
func (a *BoxingClubNatureConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/BoxingClubNatureConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *BoxingClubNatureConfigAccessor) Raw() ([]BoxingClubNatureConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []BoxingClubNatureConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with BoxingClubNatureConfigAccessor.LoadData to preload everything
func (a *BoxingClubNatureConfigAccessor) GroupData() {
	a._dataBoxingBuffBackground = map[string]BoxingClubNatureConfig{}
	a._dataBoxingBuffIcon = map[string]BoxingClubNatureConfig{}
	a._dataBoxingBuffIconBackground = map[string]BoxingClubNatureConfig{}
	a._dataBoxingClubNatureType = map[string]BoxingClubNatureConfig{}
	a._dataNatureIconBackGround = map[string]BoxingClubNatureConfig{}
	for _, d := range a._data {
		a._dataBoxingBuffBackground[d.BoxingBuffBackground] = d
		a._dataBoxingBuffIcon[d.BoxingBuffIcon] = d
		a._dataBoxingBuffIconBackground[d.BoxingBuffIconBackground] = d
		a._dataBoxingClubNatureType[d.BoxingClubNatureType] = d
		a._dataNatureIconBackGround[d.NatureIconBackGround] = d
	}
}

// ByBoxingBuffBackground returns the BoxingClubNatureConfig uniquely identified by BoxingBuffBackground
//
// Error is only non-nil if the source errors out
func (a *BoxingClubNatureConfigAccessor) ByBoxingBuffBackground(identifier string) (BoxingClubNatureConfig, error) {
	if a._dataBoxingBuffBackground == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return BoxingClubNatureConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataBoxingBuffBackground[identifier], nil
}

// ByBoxingBuffIcon returns the BoxingClubNatureConfig uniquely identified by BoxingBuffIcon
//
// Error is only non-nil if the source errors out
func (a *BoxingClubNatureConfigAccessor) ByBoxingBuffIcon(identifier string) (BoxingClubNatureConfig, error) {
	if a._dataBoxingBuffIcon == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return BoxingClubNatureConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataBoxingBuffIcon[identifier], nil
}

// ByBoxingBuffIconBackground returns the BoxingClubNatureConfig uniquely identified by BoxingBuffIconBackground
//
// Error is only non-nil if the source errors out
func (a *BoxingClubNatureConfigAccessor) ByBoxingBuffIconBackground(identifier string) (BoxingClubNatureConfig, error) {
	if a._dataBoxingBuffIconBackground == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return BoxingClubNatureConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataBoxingBuffIconBackground[identifier], nil
}

// ByBoxingClubNatureType returns the BoxingClubNatureConfig uniquely identified by BoxingClubNatureType
//
// Error is only non-nil if the source errors out
func (a *BoxingClubNatureConfigAccessor) ByBoxingClubNatureType(identifier string) (BoxingClubNatureConfig, error) {
	if a._dataBoxingClubNatureType == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return BoxingClubNatureConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataBoxingClubNatureType[identifier], nil
}

// ByNatureIconBackGround returns the BoxingClubNatureConfig uniquely identified by NatureIconBackGround
//
// Error is only non-nil if the source errors out
func (a *BoxingClubNatureConfigAccessor) ByNatureIconBackGround(identifier string) (BoxingClubNatureConfig, error) {
	if a._dataNatureIconBackGround == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return BoxingClubNatureConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataNatureIconBackGround[identifier], nil
}
