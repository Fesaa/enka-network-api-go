package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type TutorialGuideGroup struct {
	CanReview           bool                                    `json:"CanReview"`
	FinishTriggerParams []TutorialGuideGroupFinishTriggerParams `json:"FinishTriggerParams"`
	GroupID             json.Number                             `json:"GroupID"`
	MessageText         map[string]json.Number                  `json:"MessageText"`
	Order               json.Number                             `json:"Order"`
	RewardID            json.Number                             `json:"RewardID"`
	TriggerParams       []TutorialGuideGroupTriggerParams       `json:"TriggerParams"`
	TutorialGuideIDList []json.Number                           `json:"TutorialGuideIDList"`
	TutorialShowType    string                                  `json:"TutorialShowType"`
	TutorialType        json.Number                             `json:"TutorialType"`
}
type TutorialGuideGroupFinishTriggerParams struct {
	TriggerParam string `json:"TriggerParam"`
	TriggerType  string `json:"TriggerType"`
}
type TutorialGuideGroupTriggerParams struct {
	TriggerParam string `json:"TriggerParam"`
	TriggerType  string `json:"TriggerType"`
}
type TutorialGuideGroupAccessor struct {
	_data []TutorialGuideGroup
}

// LoadData retrieves the data. Must be called before TutorialGuideGroup.GroupData
func (a *TutorialGuideGroupAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/TutorialGuideGroup.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *TutorialGuideGroupAccessor) Raw() ([]TutorialGuideGroup, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []TutorialGuideGroup{}, err
		}
	}
	return a._data, nil
}
