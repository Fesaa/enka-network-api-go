package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type RogueTournWorkbenchFunc struct {
	FuncDesc map[string]json.Number `json:"FuncDesc"`
	FuncID   json.Number            `json:"FuncID"`
	FuncName map[string]json.Number `json:"FuncName"`
	FuncType string                 `json:"FuncType"`
}
type RogueTournWorkbenchFuncAccessor struct {
	_data         []RogueTournWorkbenchFunc
	_dataFuncType map[string]RogueTournWorkbenchFunc
}

// LoadData retrieves the data. Must be called before RogueTournWorkbenchFunc.GroupData
func (a *RogueTournWorkbenchFuncAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueTournWorkbenchFunc.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueTournWorkbenchFuncAccessor) Raw() ([]RogueTournWorkbenchFunc, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueTournWorkbenchFunc{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueTournWorkbenchFuncAccessor.LoadData to preload everything
func (a *RogueTournWorkbenchFuncAccessor) GroupData() {
	a._dataFuncType = map[string]RogueTournWorkbenchFunc{}
	for _, d := range a._data {
		a._dataFuncType[d.FuncType] = d
	}
}

// ByFuncType returns the RogueTournWorkbenchFunc uniquely identified by FuncType
//
// Error is only non-nil if the source errors out
func (a *RogueTournWorkbenchFuncAccessor) ByFuncType(identifier string) (RogueTournWorkbenchFunc, error) {
	if a._dataFuncType == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueTournWorkbenchFunc{}, err
			}
		}
		a.GroupData()
	}
	return a._dataFuncType[identifier], nil
}
