package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type MarbleSkill struct {
	GroupID        float64   `json:"GroupID"`
	ID             float64   `json:"ID"`
	IconPath       string    `json:"IconPath"`
	Level          float64   `json:"Level"`
	SkillDesc      hash.Hash `json:"SkillDesc"`
	SkillHintType  float64   `json:"SkillHintType"`
	SkillName      hash.Hash `json:"SkillName"`
	SkillParamList []float64 `json:"SkillParamList"`
}
type MarbleSkillAccessor struct {
	_data   []MarbleSkill
	_dataID map[float64]MarbleSkill
}

// LoadData retrieves the data. Must be called before MarbleSkill.GroupData
func (a *MarbleSkillAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MarbleSkill.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MarbleSkillAccessor) Raw() ([]MarbleSkill, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MarbleSkill{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MarbleSkillAccessor.LoadData to preload everything
func (a *MarbleSkillAccessor) GroupData() {
	for _, d := range a._data {
		a._dataID[d.ID] = d
	}
}

// ByID returns the MarbleSkill uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *MarbleSkillAccessor) ByID(identifier float64) (MarbleSkill, error) {
	if a._dataID == nil {
		err := a.LoadData()
		if err != nil {
			return MarbleSkill{}, err
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}
