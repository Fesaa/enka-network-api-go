package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type ShareChannelConfig struct {
	Content             string        `json:"Content"`
	DisplayLanguageList []string      `json:"DisplayLanguageList"`
	Forum               string        `json:"Forum"`
	IconPath            string        `json:"IconPath"`
	Platform            string        `json:"Platform"`
	ShareByNative       bool          `json:"ShareByNative"`
	ShareChannelID      float64       `json:"ShareChannelID"`
	Title               string        `json:"Title"`
	Topics              []interface{} `json:"Topics"`
	UrlTitle            string        `json:"UrlTitle"`
}
type ShareChannelConfigAccessor struct {
	_data               []ShareChannelConfig
	_dataShareChannelID map[float64]ShareChannelConfig
}

// LoadData retrieves the data. Must be called before ShareChannelConfig.GroupData
func (a *ShareChannelConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ShareChannelConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ShareChannelConfigAccessor) Raw() ([]ShareChannelConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ShareChannelConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ShareChannelConfigAccessor.LoadData to preload everything
func (a *ShareChannelConfigAccessor) GroupData() {
	a._dataShareChannelID = map[float64]ShareChannelConfig{}
	for _, d := range a._data {
		a._dataShareChannelID[d.ShareChannelID] = d
	}
}

// ByShareChannelID returns the ShareChannelConfig uniquely identified by ShareChannelID
//
// Error is only non-nil if the source errors out
func (a *ShareChannelConfigAccessor) ByShareChannelID(identifier float64) (ShareChannelConfig, error) {
	if a._dataShareChannelID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ShareChannelConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataShareChannelID[identifier], nil
}
