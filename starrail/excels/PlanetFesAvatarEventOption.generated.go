package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type PlanetFesAvatarEventOption struct {
	ActivityRewardID json.Number            `json:"ActivityRewardID"`
	EventContent     map[string]json.Number `json:"EventContent"`
	EventOptionID    json.Number            `json:"EventOptionID"`
	NextOptionList   []json.Number          `json:"NextOptionList"`
	OptionBubbleTalk map[string]json.Number `json:"OptionBubbleTalk"`
	RewardPoolID     json.Number            `json:"RewardPoolID"`
}
type PlanetFesAvatarEventOptionAccessor struct {
	_data              []PlanetFesAvatarEventOption
	_dataEventOptionID map[json.Number]PlanetFesAvatarEventOption
}

// LoadData retrieves the data. Must be called before PlanetFesAvatarEventOption.GroupData
func (a *PlanetFesAvatarEventOptionAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/PlanetFesAvatarEventOption.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *PlanetFesAvatarEventOptionAccessor) Raw() ([]PlanetFesAvatarEventOption, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []PlanetFesAvatarEventOption{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with PlanetFesAvatarEventOptionAccessor.LoadData to preload everything
func (a *PlanetFesAvatarEventOptionAccessor) GroupData() {
	a._dataEventOptionID = map[json.Number]PlanetFesAvatarEventOption{}
	for _, d := range a._data {
		a._dataEventOptionID[d.EventOptionID] = d
	}
}

// ByEventOptionID returns the PlanetFesAvatarEventOption uniquely identified by EventOptionID
//
// Error is only non-nil if the source errors out
func (a *PlanetFesAvatarEventOptionAccessor) ByEventOptionID(identifier json.Number) (PlanetFesAvatarEventOption, error) {
	if a._dataEventOptionID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return PlanetFesAvatarEventOption{}, err
			}
		}
		a.GroupData()
	}
	return a._dataEventOptionID[identifier], nil
}
