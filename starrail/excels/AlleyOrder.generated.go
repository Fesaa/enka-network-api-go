package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type AlleyOrder struct {
	OrderContent  []map[string]json.Number `json:"OrderContent"`
	OrderGoodList []json.Number            `json:"OrderGoodList"`
	OrderID       json.Number              `json:"OrderID"`
	OrderProfit   json.Number              `json:"OrderProfit"`
	OrderShip     json.Number              `json:"OrderShip"`
	OrderTips     string                   `json:"OrderTips"`
	OrderTipsTime []json.Number            `json:"OrderTipsTime"`
	UnlockMission json.Number              `json:"UnlockMission"`
}
type AlleyOrderAccessor struct {
	_data          []AlleyOrder
	_dataOrderTips map[string]AlleyOrder
}

// LoadData retrieves the data. Must be called before AlleyOrder.GroupData
func (a *AlleyOrderAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/AlleyOrder.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *AlleyOrderAccessor) Raw() ([]AlleyOrder, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []AlleyOrder{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with AlleyOrderAccessor.LoadData to preload everything
func (a *AlleyOrderAccessor) GroupData() {
	a._dataOrderTips = map[string]AlleyOrder{}
	for _, d := range a._data {
		a._dataOrderTips[d.OrderTips] = d
	}
}

// ByOrderTips returns the AlleyOrder uniquely identified by OrderTips
//
// Error is only non-nil if the source errors out
func (a *AlleyOrderAccessor) ByOrderTips(identifier string) (AlleyOrder, error) {
	if a._dataOrderTips == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AlleyOrder{}, err
			}
		}
		a.GroupData()
	}
	return a._dataOrderTips[identifier], nil
}
