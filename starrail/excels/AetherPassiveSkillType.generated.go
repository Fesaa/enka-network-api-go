package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type AetherPassiveSkillType struct {
	IconPath         string `json:"IconPath"`
	Name             string `json:"Name"`
	PassiveSkillType string `json:"PassiveSkillType"`
}
type AetherPassiveSkillTypeAccessor struct {
	_data         []AetherPassiveSkillType
	_dataName     map[string]AetherPassiveSkillType
	_dataIconPath map[string]AetherPassiveSkillType
}

// LoadData retrieves the data. Must be called before AetherPassiveSkillType.GroupData
func (a *AetherPassiveSkillTypeAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/AetherPassiveSkillType.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *AetherPassiveSkillTypeAccessor) Raw() ([]AetherPassiveSkillType, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []AetherPassiveSkillType{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with AetherPassiveSkillTypeAccessor.LoadData to preload everything
func (a *AetherPassiveSkillTypeAccessor) GroupData() {
	for _, d := range a._data {
		a._dataName[d.Name] = d
		a._dataIconPath[d.IconPath] = d
	}
}

// ByName returns the AetherPassiveSkillType uniquely identified by Name
//
// Error is only non-nil if the source errors out
func (a *AetherPassiveSkillTypeAccessor) ByName(identifier string) (AetherPassiveSkillType, error) {
	if a._dataName == nil {
		err := a.LoadData()
		if err != nil {
			return AetherPassiveSkillType{}, err
		}
		a.GroupData()
	}
	return a._dataName[identifier], nil
}

// ByIconPath returns the AetherPassiveSkillType uniquely identified by IconPath
//
// Error is only non-nil if the source errors out
func (a *AetherPassiveSkillTypeAccessor) ByIconPath(identifier string) (AetherPassiveSkillType, error) {
	if a._dataIconPath == nil {
		err := a.LoadData()
		if err != nil {
			return AetherPassiveSkillType{}, err
		}
		a.GroupData()
	}
	return a._dataIconPath[identifier], nil
}
