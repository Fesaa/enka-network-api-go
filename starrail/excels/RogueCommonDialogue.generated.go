package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type RogueCommonDialogue struct {
	DialogueID   json.Number `json:"DialogueID"`
	DialoguePath string      `json:"DialoguePath"`
}
type RogueCommonDialogueAccessor struct {
	_data             []RogueCommonDialogue
	_dataDialoguePath map[string]RogueCommonDialogue
}

// LoadData retrieves the data. Must be called before RogueCommonDialogue.GroupData
func (a *RogueCommonDialogueAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueCommonDialogue.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueCommonDialogueAccessor) Raw() ([]RogueCommonDialogue, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueCommonDialogue{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueCommonDialogueAccessor.LoadData to preload everything
func (a *RogueCommonDialogueAccessor) GroupData() {
	a._dataDialoguePath = map[string]RogueCommonDialogue{}
	for _, d := range a._data {
		a._dataDialoguePath[d.DialoguePath] = d
	}
}

// ByDialoguePath returns the RogueCommonDialogue uniquely identified by DialoguePath
//
// Error is only non-nil if the source errors out
func (a *RogueCommonDialogueAccessor) ByDialoguePath(identifier string) (RogueCommonDialogue, error) {
	if a._dataDialoguePath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueCommonDialogue{}, err
			}
		}
		a.GroupData()
	}
	return a._dataDialoguePath[identifier], nil
}
