package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type ParkourTriggerEvent struct {
	DisplayContentIDList    []float64    `json:"DisplayContentIDList"`
	EventID                 float64      `json:"EventID"`
	LimitLevelID            []float64    `json:"LimitLevelID"`
	LimitRepeatTimeOverride float64      `json:"LimitRepeatTimeOverride"`
	OriginID                float64      `json:"OriginID"`
	OriginType              string       `json:"OriginType"`
	Param                   []hash.Value `json:"Param"`
	TargetID                float64      `json:"TargetID"`
	TargetType              string       `json:"TargetType"`
	TriggerEventType        string       `json:"TriggerEventType"`
}
type ParkourTriggerEventAccessor struct {
	_data        []ParkourTriggerEvent
	_dataEventID map[float64]ParkourTriggerEvent
}

// LoadData retrieves the data. Must be called before ParkourTriggerEvent.GroupData
func (a *ParkourTriggerEventAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ParkourTriggerEvent.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ParkourTriggerEventAccessor) Raw() ([]ParkourTriggerEvent, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ParkourTriggerEvent{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ParkourTriggerEventAccessor.LoadData to preload everything
func (a *ParkourTriggerEventAccessor) GroupData() {
	a._dataEventID = map[float64]ParkourTriggerEvent{}
	for _, d := range a._data {
		a._dataEventID[d.EventID] = d
	}
}

// ByEventID returns the ParkourTriggerEvent uniquely identified by EventID
//
// Error is only non-nil if the source errors out
func (a *ParkourTriggerEventAccessor) ByEventID(identifier float64) (ParkourTriggerEvent, error) {
	if a._dataEventID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ParkourTriggerEvent{}, err
			}
		}
		a.GroupData()
	}
	return a._dataEventID[identifier], nil
}
