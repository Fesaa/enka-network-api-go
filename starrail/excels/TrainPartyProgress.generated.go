package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type TrainPartyProgress struct {
	CoinRatio              float64   `json:"CoinRatio"`
	InitialStatExp         float64   `json:"InitialStatExp"`
	PassengerUnlockActPath string    `json:"PassengerUnlockActPath"`
	ProgressID             float64   `json:"ProgressID"`
	ProgressTitle          hash.Hash `json:"ProgressTitle"`
	StatRatio              float64   `json:"StatRatio"`
	TeamIDList             []float64 `json:"TeamIDList"`
	UnlcokRequireArea      float64   `json:"UnlcokRequireArea"`
	UnlockPassengerList    []float64 `json:"UnlockPassengerList"`
}
type TrainPartyProgressAccessor struct {
	_data           []TrainPartyProgress
	_dataProgressID map[float64]TrainPartyProgress
}

// LoadData retrieves the data. Must be called before TrainPartyProgress.GroupData
func (a *TrainPartyProgressAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/TrainPartyProgress.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *TrainPartyProgressAccessor) Raw() ([]TrainPartyProgress, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []TrainPartyProgress{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with TrainPartyProgressAccessor.LoadData to preload everything
func (a *TrainPartyProgressAccessor) GroupData() {
	for _, d := range a._data {
		a._dataProgressID[d.ProgressID] = d
	}
}

// ByProgressID returns the TrainPartyProgress uniquely identified by ProgressID
//
// Error is only non-nil if the source errors out
func (a *TrainPartyProgressAccessor) ByProgressID(identifier float64) (TrainPartyProgress, error) {
	if a._dataProgressID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return TrainPartyProgress{}, err
			}
		}
		a.GroupData()
	}
	return a._dataProgressID[identifier], nil
}
