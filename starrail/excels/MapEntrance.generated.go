package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type MapEntrance struct {
	BeginMainMissionList  []interface{} `json:"BeginMainMissionList"`
	EntranceType          string        `json:"EntranceType"`
	FinishMainMissionList []json.Number `json:"FinishMainMissionList"`
	FinishSubMissionList  []json.Number `json:"FinishSubMissionList"`
	FloorID               json.Number   `json:"FloorID"`
	ID                    json.Number   `json:"ID"`
	PlaneID               json.Number   `json:"PlaneID"`
	StartAnchorID         json.Number   `json:"StartAnchorID"`
	StartGroupID          json.Number   `json:"StartGroupID"`
}
type MapEntranceAccessor struct {
	_data   []MapEntrance
	_dataID map[json.Number]MapEntrance
}

// LoadData retrieves the data. Must be called before MapEntrance.GroupData
func (a *MapEntranceAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MapEntrance.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MapEntranceAccessor) Raw() ([]MapEntrance, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MapEntrance{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MapEntranceAccessor.LoadData to preload everything
func (a *MapEntranceAccessor) GroupData() {
	a._dataID = map[json.Number]MapEntrance{}
	for _, d := range a._data {
		a._dataID[d.ID] = d
	}
}

// ByID returns the MapEntrance uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *MapEntranceAccessor) ByID(identifier json.Number) (MapEntrance, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MapEntrance{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}
