package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type MatchThreeBird struct {
	BirdDesc    hash.Hash `json:"BirdDesc"`
	BirdID      float64   `json:"BirdID"`
	BirdName    hash.Hash `json:"BirdName"`
	DefaultEmo  float64   `json:"DefaultEmo"`
	DrawEmo     float64   `json:"DrawEmo"`
	FaceMat     string    `json:"FaceMat"`
	GuideID     float64   `json:"GuideID"`
	IconPath    string    `json:"IconPath"`
	ImagePath   string    `json:"ImagePath"`
	IsShow      bool      `json:"IsShow"`
	LoseEmo     float64   `json:"LoseEmo"`
	ModelPath   string    `json:"ModelPath"`
	SkillID     float64   `json:"SkillID"`
	UnlockLevel float64   `json:"UnlockLevel"`
	WinEmo      float64   `json:"WinEmo"`
}
type MatchThreeBirdAccessor struct {
	_data       []MatchThreeBird
	_dataBirdID map[float64]MatchThreeBird
}

// LoadData retrieves the data. Must be called before MatchThreeBird.GroupData
func (a *MatchThreeBirdAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MatchThreeBird.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MatchThreeBirdAccessor) Raw() ([]MatchThreeBird, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MatchThreeBird{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MatchThreeBirdAccessor.LoadData to preload everything
func (a *MatchThreeBirdAccessor) GroupData() {
	a._dataBirdID = map[float64]MatchThreeBird{}
	for _, d := range a._data {
		a._dataBirdID[d.BirdID] = d
	}
}

// ByBirdID returns the MatchThreeBird uniquely identified by BirdID
//
// Error is only non-nil if the source errors out
func (a *MatchThreeBirdAccessor) ByBirdID(identifier float64) (MatchThreeBird, error) {
	if a._dataBirdID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MatchThreeBird{}, err
			}
		}
		a.GroupData()
	}
	return a._dataBirdID[identifier], nil
}
