package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type MatchThreeBird struct {
	BirdDesc    map[string]json.Number `json:"BirdDesc"`
	BirdID      json.Number            `json:"BirdID"`
	BirdName    map[string]json.Number `json:"BirdName"`
	DefaultEmo  json.Number            `json:"DefaultEmo"`
	DrawEmo     json.Number            `json:"DrawEmo"`
	FaceMat     string                 `json:"FaceMat"`
	GuideID     json.Number            `json:"GuideID"`
	IconPath    string                 `json:"IconPath"`
	ImagePath   string                 `json:"ImagePath"`
	IsShow      bool                   `json:"IsShow"`
	LoseEmo     json.Number            `json:"LoseEmo"`
	ModelPath   string                 `json:"ModelPath"`
	SkillID     json.Number            `json:"SkillID"`
	UnlockLevel json.Number            `json:"UnlockLevel"`
	WinEmo      json.Number            `json:"WinEmo"`
}
type MatchThreeBirdAccessor struct {
	_data          []MatchThreeBird
	_dataBirdID    map[json.Number]MatchThreeBird
	_dataIconPath  map[string]MatchThreeBird
	_dataImagePath map[string]MatchThreeBird
	_dataModelPath map[string]MatchThreeBird
}

// LoadData retrieves the data. Must be called before MatchThreeBird.GroupData
func (a *MatchThreeBirdAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MatchThreeBird.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MatchThreeBirdAccessor) Raw() ([]MatchThreeBird, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MatchThreeBird{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MatchThreeBirdAccessor.LoadData to preload everything
func (a *MatchThreeBirdAccessor) GroupData() {
	a._dataBirdID = map[json.Number]MatchThreeBird{}
	a._dataIconPath = map[string]MatchThreeBird{}
	a._dataImagePath = map[string]MatchThreeBird{}
	a._dataModelPath = map[string]MatchThreeBird{}
	for _, d := range a._data {
		a._dataBirdID[d.BirdID] = d
		a._dataIconPath[d.IconPath] = d
		a._dataImagePath[d.ImagePath] = d
		a._dataModelPath[d.ModelPath] = d
	}
}

// ByBirdID returns the MatchThreeBird uniquely identified by BirdID
//
// Error is only non-nil if the source errors out
func (a *MatchThreeBirdAccessor) ByBirdID(identifier json.Number) (MatchThreeBird, error) {
	if a._dataBirdID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MatchThreeBird{}, err
			}
		}
		a.GroupData()
	}
	return a._dataBirdID[identifier], nil
}

// ByIconPath returns the MatchThreeBird uniquely identified by IconPath
//
// Error is only non-nil if the source errors out
func (a *MatchThreeBirdAccessor) ByIconPath(identifier string) (MatchThreeBird, error) {
	if a._dataIconPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MatchThreeBird{}, err
			}
		}
		a.GroupData()
	}
	return a._dataIconPath[identifier], nil
}

// ByImagePath returns the MatchThreeBird uniquely identified by ImagePath
//
// Error is only non-nil if the source errors out
func (a *MatchThreeBirdAccessor) ByImagePath(identifier string) (MatchThreeBird, error) {
	if a._dataImagePath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MatchThreeBird{}, err
			}
		}
		a.GroupData()
	}
	return a._dataImagePath[identifier], nil
}

// ByModelPath returns the MatchThreeBird uniquely identified by ModelPath
//
// Error is only non-nil if the source errors out
func (a *MatchThreeBirdAccessor) ByModelPath(identifier string) (MatchThreeBird, error) {
	if a._dataModelPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MatchThreeBird{}, err
			}
		}
		a.GroupData()
	}
	return a._dataModelPath[identifier], nil
}
