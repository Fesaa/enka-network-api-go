package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type ChimeraWorkData struct {
	Atk        json.Number `json:"Atk"`
	DisplayID  json.Number `json:"DisplayID"`
	Hp         json.Number `json:"Hp"`
	JsonConfig string      `json:"JsonConfig"`
	Tag        string      `json:"Tag"`
	WorkID     json.Number `json:"WorkID"`
	WorkIcon   string      `json:"WorkIcon"`
	WorkPrefab string      `json:"WorkPrefab"`
	WorkValue  json.Number `json:"WorkValue"`
}
type ChimeraWorkDataAccessor struct {
	_data       []ChimeraWorkData
	_dataWorkID map[json.Number]ChimeraWorkData
}

// LoadData retrieves the data. Must be called before ChimeraWorkData.GroupData
func (a *ChimeraWorkDataAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ChimeraWorkData.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ChimeraWorkDataAccessor) Raw() ([]ChimeraWorkData, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ChimeraWorkData{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ChimeraWorkDataAccessor.LoadData to preload everything
func (a *ChimeraWorkDataAccessor) GroupData() {
	a._dataWorkID = map[json.Number]ChimeraWorkData{}
	for _, d := range a._data {
		a._dataWorkID[d.WorkID] = d
	}
}

// ByWorkID returns the ChimeraWorkData uniquely identified by WorkID
//
// Error is only non-nil if the source errors out
func (a *ChimeraWorkDataAccessor) ByWorkID(identifier json.Number) (ChimeraWorkData, error) {
	if a._dataWorkID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ChimeraWorkData{}, err
			}
		}
		a.GroupData()
	}
	return a._dataWorkID[identifier], nil
}
