package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type ChimeraWorkData struct {
	Atk        float64 `json:"Atk"`
	DisplayID  float64 `json:"DisplayID"`
	Hp         float64 `json:"Hp"`
	JsonConfig string  `json:"JsonConfig"`
	Tag        string  `json:"Tag"`
	WorkID     float64 `json:"WorkID"`
	WorkIcon   string  `json:"WorkIcon"`
	WorkPrefab string  `json:"WorkPrefab"`
	WorkValue  float64 `json:"WorkValue"`
}
type ChimeraWorkDataAccessor struct {
	_data       []ChimeraWorkData
	_dataWorkID map[float64]ChimeraWorkData
}

// LoadData retrieves the data. Must be called before ChimeraWorkData.GroupData
func (a *ChimeraWorkDataAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ChimeraWorkData.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ChimeraWorkDataAccessor) Raw() ([]ChimeraWorkData, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ChimeraWorkData{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ChimeraWorkDataAccessor.LoadData to preload everything
func (a *ChimeraWorkDataAccessor) GroupData() {
	for _, d := range a._data {
		a._dataWorkID[d.WorkID] = d
	}
}

// ByWorkID returns the ChimeraWorkData uniquely identified by WorkID
//
// Error is only non-nil if the source errors out
func (a *ChimeraWorkDataAccessor) ByWorkID(identifier float64) (ChimeraWorkData, error) {
	if a._dataWorkID == nil {
		err := a.LoadData()
		if err != nil {
			return ChimeraWorkData{}, err
		}
		a.GroupData()
	}
	return a._dataWorkID[identifier], nil
}
