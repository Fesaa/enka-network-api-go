package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type AvatarDemoGuideGroup struct {
	AvatarID  float64   `json:"AvatarID"`
	IndexList []float64 `json:"IndexList"`
	StageID   float64   `json:"StageID"`
}
type AvatarDemoGuideGroupAccessor struct {
	_data         []AvatarDemoGuideGroup
	_dataAvatarID map[float64]AvatarDemoGuideGroup
	_dataStageID  map[float64]AvatarDemoGuideGroup
}

// LoadData retrieves the data. Must be called before AvatarDemoGuideGroup.GroupData
func (a *AvatarDemoGuideGroupAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/AvatarDemoGuideGroup.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *AvatarDemoGuideGroupAccessor) Raw() ([]AvatarDemoGuideGroup, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []AvatarDemoGuideGroup{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with AvatarDemoGuideGroupAccessor.LoadData to preload everything
func (a *AvatarDemoGuideGroupAccessor) GroupData() {
	for _, d := range a._data {
		a._dataAvatarID[d.AvatarID] = d
		a._dataStageID[d.StageID] = d
	}
}

// ByAvatarID returns the AvatarDemoGuideGroup uniquely identified by AvatarID
//
// Error is only non-nil if the source errors out
func (a *AvatarDemoGuideGroupAccessor) ByAvatarID(identifier float64) (AvatarDemoGuideGroup, error) {
	if a._dataAvatarID == nil {
		err := a.LoadData()
		if err != nil {
			return AvatarDemoGuideGroup{}, err
		}
		a.GroupData()
	}
	return a._dataAvatarID[identifier], nil
}

// ByStageID returns the AvatarDemoGuideGroup uniquely identified by StageID
//
// Error is only non-nil if the source errors out
func (a *AvatarDemoGuideGroupAccessor) ByStageID(identifier float64) (AvatarDemoGuideGroup, error) {
	if a._dataStageID == nil {
		err := a.LoadData()
		if err != nil {
			return AvatarDemoGuideGroup{}, err
		}
		a.GroupData()
	}
	return a._dataStageID[identifier], nil
}
