package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type PamAction struct {
	AnimGroupName    string        `json:"AnimGroupName"`
	AnyDirection     bool          `json:"AnyDirection"`
	MaxMoodPoint     json.Number   `json:"MaxMoodPoint"`
	MaxStrengthPoint json.Number   `json:"MaxStrengthPoint"`
	MinMoodPoint     json.Number   `json:"MinMoodPoint"`
	MinStrengthPoint json.Number   `json:"MinStrengthPoint"`
	PamAction        string        `json:"PamAction"`
	PamMood          string        `json:"PamMood"`
	PerformanceID    json.Number   `json:"PerformanceID"`
	Settle           []json.Number `json:"Settle"`
	Weight           json.Number   `json:"Weight"`
	WithoutAnchor    bool          `json:"WithoutAnchor"`
}
type PamActionAccessor struct {
	_data              []PamAction
	_dataAnimGroupName map[string]PamAction
	_dataPamAction     map[string]PamAction
}

// LoadData retrieves the data. Must be called before PamAction.GroupData
func (a *PamActionAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/PamAction.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *PamActionAccessor) Raw() ([]PamAction, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []PamAction{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with PamActionAccessor.LoadData to preload everything
func (a *PamActionAccessor) GroupData() {
	a._dataAnimGroupName = map[string]PamAction{}
	a._dataPamAction = map[string]PamAction{}
	for _, d := range a._data {
		a._dataAnimGroupName[d.AnimGroupName] = d
		a._dataPamAction[d.PamAction] = d
	}
}

// ByAnimGroupName returns the PamAction uniquely identified by AnimGroupName
//
// Error is only non-nil if the source errors out
func (a *PamActionAccessor) ByAnimGroupName(identifier string) (PamAction, error) {
	if a._dataAnimGroupName == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return PamAction{}, err
			}
		}
		a.GroupData()
	}
	return a._dataAnimGroupName[identifier], nil
}

// ByPamAction returns the PamAction uniquely identified by PamAction
//
// Error is only non-nil if the source errors out
func (a *PamActionAccessor) ByPamAction(identifier string) (PamAction, error) {
	if a._dataPamAction == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return PamAction{}, err
			}
		}
		a.GroupData()
	}
	return a._dataPamAction[identifier], nil
}
