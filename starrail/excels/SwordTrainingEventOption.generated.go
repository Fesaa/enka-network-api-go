package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type SwordTrainingEventOption struct {
	EffectIDList []float64 `json:"EffectIDList"`
	OptionDesc   hash.Hash `json:"OptionDesc"`
	OptionID     float64   `json:"OptionID"`
	ResultAudio  string    `json:"ResultAudio"`
	ResultDesc   hash.Hash `json:"ResultDesc"`
	ResultImage  string    `json:"ResultImage"`
}
type SwordTrainingEventOptionAccessor struct {
	_data         []SwordTrainingEventOption
	_dataOptionID map[float64]SwordTrainingEventOption
}

// LoadData retrieves the data. Must be called before SwordTrainingEventOption.GroupData
func (a *SwordTrainingEventOptionAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/SwordTrainingEventOption.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *SwordTrainingEventOptionAccessor) Raw() ([]SwordTrainingEventOption, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []SwordTrainingEventOption{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with SwordTrainingEventOptionAccessor.LoadData to preload everything
func (a *SwordTrainingEventOptionAccessor) GroupData() {
	a._dataOptionID = map[float64]SwordTrainingEventOption{}
	for _, d := range a._data {
		a._dataOptionID[d.OptionID] = d
	}
}

// ByOptionID returns the SwordTrainingEventOption uniquely identified by OptionID
//
// Error is only non-nil if the source errors out
func (a *SwordTrainingEventOptionAccessor) ByOptionID(identifier float64) (SwordTrainingEventOption, error) {
	if a._dataOptionID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return SwordTrainingEventOption{}, err
			}
		}
		a.GroupData()
	}
	return a._dataOptionID[identifier], nil
}
