package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type GachaCeiling struct {
	CeilingItemList []float64 `json:"CeilingItemList"`
	CeilingNum      float64   `json:"CeilingNum"`
	CeilingType     string    `json:"CeilingType"`
	GachaType       string    `json:"GachaType"`
}
type GachaCeilingAccessor struct {
	_data            []GachaCeiling
	_dataCeilingNum  map[float64]GachaCeiling
	_dataCeilingType map[string]GachaCeiling
	_dataGachaType   map[string]GachaCeiling
}

// LoadData retrieves the data. Must be called before GachaCeiling.GroupData
func (a *GachaCeilingAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/GachaCeiling.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *GachaCeilingAccessor) Raw() ([]GachaCeiling, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []GachaCeiling{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with GachaCeilingAccessor.LoadData to preload everything
func (a *GachaCeilingAccessor) GroupData() {
	for _, d := range a._data {
		a._dataCeilingNum[d.CeilingNum] = d
		a._dataCeilingType[d.CeilingType] = d
		a._dataGachaType[d.GachaType] = d
	}
}

// ByCeilingNum returns the GachaCeiling uniquely identified by CeilingNum
//
// Error is only non-nil if the source errors out
func (a *GachaCeilingAccessor) ByCeilingNum(identifier float64) (GachaCeiling, error) {
	if a._dataCeilingNum == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return GachaCeiling{}, err
			}
		}
		a.GroupData()
	}
	return a._dataCeilingNum[identifier], nil
}

// ByCeilingType returns the GachaCeiling uniquely identified by CeilingType
//
// Error is only non-nil if the source errors out
func (a *GachaCeilingAccessor) ByCeilingType(identifier string) (GachaCeiling, error) {
	if a._dataCeilingType == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return GachaCeiling{}, err
			}
		}
		a.GroupData()
	}
	return a._dataCeilingType[identifier], nil
}

// ByGachaType returns the GachaCeiling uniquely identified by GachaType
//
// Error is only non-nil if the source errors out
func (a *GachaCeilingAccessor) ByGachaType(identifier string) (GachaCeiling, error) {
	if a._dataGachaType == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return GachaCeiling{}, err
			}
		}
		a.GroupData()
	}
	return a._dataGachaType[identifier], nil
}
