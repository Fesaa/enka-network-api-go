package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type PreAvatarTextmapConfig struct {
	PreAvatarID   float64   `json:"PreAvatarID"`
	PreAvatarName hash.Hash `json:"PreAvatarName"`
}
type PreAvatarTextmapConfigAccessor struct {
	_data            []PreAvatarTextmapConfig
	_dataPreAvatarID map[float64]PreAvatarTextmapConfig
}

// LoadData retrieves the data. Must be called before PreAvatarTextmapConfig.GroupData
func (a *PreAvatarTextmapConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/PreAvatarTextmapConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *PreAvatarTextmapConfigAccessor) Raw() ([]PreAvatarTextmapConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []PreAvatarTextmapConfig{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with PreAvatarTextmapConfigAccessor.LoadData to preload everything
func (a *PreAvatarTextmapConfigAccessor) GroupData() {
	for _, d := range a._data {
		a._dataPreAvatarID[d.PreAvatarID] = d
	}
}

// ByPreAvatarID returns the PreAvatarTextmapConfig uniquely identified by PreAvatarID
//
// Error is only non-nil if the source errors out
func (a *PreAvatarTextmapConfigAccessor) ByPreAvatarID(identifier float64) (PreAvatarTextmapConfig, error) {
	if a._dataPreAvatarID == nil {
		err := a.LoadData()
		if err != nil {
			return PreAvatarTextmapConfig{}, err
		}
		a.GroupData()
	}
	return a._dataPreAvatarID[identifier], nil
}
