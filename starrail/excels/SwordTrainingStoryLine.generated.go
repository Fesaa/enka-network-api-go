package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type SwordTrainingStoryLine struct {
	AvatarIDList      []interface{} `json:"AvatarIDList"`
	EndingOptionKey   string        `json:"EndingOptionKey"`
	EndingStoryIDList []float64     `json:"EndingStoryIDList"`
	RewardID          float64       `json:"RewardID"`
	StartTalkImage    string        `json:"StartTalkImage"`
	StoryHardDesc     hash.Hash     `json:"StoryHardDesc"`
	StoryLine         float64       `json:"StoryLine"`
	StoryLineDesc     hash.Hash     `json:"StoryLineDesc"`
	StoryLineImage    string        `json:"StoryLineImage"`
	StoryLineName     hash.Hash     `json:"StoryLineName"`
	TurnIDList        []float64     `json:"TurnIDList"`
	UnlockID          float64       `json:"UnlockID"`
}
type SwordTrainingStoryLineAccessor struct {
	_data                []SwordTrainingStoryLine
	_dataRewardID        map[float64]SwordTrainingStoryLine
	_dataEndingOptionKey map[string]SwordTrainingStoryLine
	_dataStoryLine       map[float64]SwordTrainingStoryLine
}

// LoadData retrieves the data. Must be called before SwordTrainingStoryLine.GroupData
func (a *SwordTrainingStoryLineAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/SwordTrainingStoryLine.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *SwordTrainingStoryLineAccessor) Raw() ([]SwordTrainingStoryLine, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []SwordTrainingStoryLine{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with SwordTrainingStoryLineAccessor.LoadData to preload everything
func (a *SwordTrainingStoryLineAccessor) GroupData() {
	for _, d := range a._data {
		a._dataRewardID[d.RewardID] = d
		a._dataEndingOptionKey[d.EndingOptionKey] = d
		a._dataStoryLine[d.StoryLine] = d
	}
}

// ByRewardID returns the SwordTrainingStoryLine uniquely identified by RewardID
//
// Error is only non-nil if the source errors out
func (a *SwordTrainingStoryLineAccessor) ByRewardID(identifier float64) (SwordTrainingStoryLine, error) {
	if a._dataRewardID == nil {
		err := a.LoadData()
		if err != nil {
			return SwordTrainingStoryLine{}, err
		}
		a.GroupData()
	}
	return a._dataRewardID[identifier], nil
}

// ByEndingOptionKey returns the SwordTrainingStoryLine uniquely identified by EndingOptionKey
//
// Error is only non-nil if the source errors out
func (a *SwordTrainingStoryLineAccessor) ByEndingOptionKey(identifier string) (SwordTrainingStoryLine, error) {
	if a._dataEndingOptionKey == nil {
		err := a.LoadData()
		if err != nil {
			return SwordTrainingStoryLine{}, err
		}
		a.GroupData()
	}
	return a._dataEndingOptionKey[identifier], nil
}

// ByStoryLine returns the SwordTrainingStoryLine uniquely identified by StoryLine
//
// Error is only non-nil if the source errors out
func (a *SwordTrainingStoryLineAccessor) ByStoryLine(identifier float64) (SwordTrainingStoryLine, error) {
	if a._dataStoryLine == nil {
		err := a.LoadData()
		if err != nil {
			return SwordTrainingStoryLine{}, err
		}
		a.GroupData()
	}
	return a._dataStoryLine[identifier], nil
}
