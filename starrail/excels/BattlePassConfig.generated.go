package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type BattlePassConfig struct {
	BattlePassWeekID   json.Number   `json:"BattlePassWeekID"`
	BillboardShow      []json.Number `json:"BillboardShow"`
	EquipmentShow      []json.Number `json:"EquipmentShow"`
	GroupID            json.Number   `json:"GroupID"`
	ID                 json.Number   `json:"ID"`
	LevelUpShow        []json.Number `json:"LevelUpShow"`
	NextID             json.Number   `json:"NextID"`
	Purchase128        json.Number   `json:"Purchase128"`
	Purchase68         json.Number   `json:"Purchase68"`
	ScheduleDataID     json.Number   `json:"ScheduleDataID"`
	VersionQuestList   []json.Number `json:"VersionQuestList"`
	WeekChainQuestList []json.Number `json:"WeekChainQuestList"`
	WeekOrder1         []json.Number `json:"WeekOrder1"`
	WeekOrder2         []interface{} `json:"WeekOrder2"`
	WeekQuestList      []json.Number `json:"WeekQuestList"`
}
type BattlePassConfigAccessor struct {
	_data []BattlePassConfig
}

// LoadData retrieves the data. Must be called before BattlePassConfig.GroupData
func (a *BattlePassConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/BattlePassConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *BattlePassConfigAccessor) Raw() ([]BattlePassConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []BattlePassConfig{}, err
		}
	}
	return a._data, nil
}
