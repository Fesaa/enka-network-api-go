package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type OfferingLevelConfig struct {
	ItemCost float64 `json:"ItemCost"`
	Level    float64 `json:"Level"`
	RewardID float64 `json:"RewardID"`
	Type     string  `json:"Type"`
	TypeID   float64 `json:"TypeID"`
	UnlockID float64 `json:"UnlockID"`
}
type OfferingLevelConfigAccessor struct {
	_data         []OfferingLevelConfig
	_dataRewardID map[float64]OfferingLevelConfig
}

// LoadData retrieves the data. Must be called before OfferingLevelConfig.GroupData
func (a *OfferingLevelConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/OfferingLevelConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *OfferingLevelConfigAccessor) Raw() ([]OfferingLevelConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []OfferingLevelConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with OfferingLevelConfigAccessor.LoadData to preload everything
func (a *OfferingLevelConfigAccessor) GroupData() {
	a._dataRewardID = map[float64]OfferingLevelConfig{}
	for _, d := range a._data {
		a._dataRewardID[d.RewardID] = d
	}
}

// ByRewardID returns the OfferingLevelConfig uniquely identified by RewardID
//
// Error is only non-nil if the source errors out
func (a *OfferingLevelConfigAccessor) ByRewardID(identifier float64) (OfferingLevelConfig, error) {
	if a._dataRewardID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return OfferingLevelConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataRewardID[identifier], nil
}
