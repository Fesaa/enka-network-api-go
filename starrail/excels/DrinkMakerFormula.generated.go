package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type DrinkMakerFormula struct {
	CupID           json.Number            `json:"CupID"`
	DecoID          json.Number            `json:"DecoID"`
	FormulaDesc     map[string]json.Number `json:"FormulaDesc"`
	FormulaID       json.Number            `json:"FormulaID"`
	FormulaName     map[string]json.Number `json:"FormulaName"`
	IceID           json.Number            `json:"IceID"`
	IconPath        string                 `json:"IconPath"`
	IngredientList  []json.Number          `json:"IngredientList"`
	IsChallengeMode bool                   `json:"IsChallengeMode"`
	IsMission       bool                   `json:"IsMission"`
	MixRate         json.Number            `json:"MixRate"`
	SmallIconPath   string                 `json:"SmallIconPath"`
	UnlockParam     json.Number            `json:"UnlockParam"`
	UnlockType      string                 `json:"UnlockType"`
}
type DrinkMakerFormulaAccessor struct {
	_data              []DrinkMakerFormula
	_dataIconPath      map[string]DrinkMakerFormula
	_dataSmallIconPath map[string]DrinkMakerFormula
}

// LoadData retrieves the data. Must be called before DrinkMakerFormula.GroupData
func (a *DrinkMakerFormulaAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/DrinkMakerFormula.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *DrinkMakerFormulaAccessor) Raw() ([]DrinkMakerFormula, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []DrinkMakerFormula{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with DrinkMakerFormulaAccessor.LoadData to preload everything
func (a *DrinkMakerFormulaAccessor) GroupData() {
	a._dataIconPath = map[string]DrinkMakerFormula{}
	a._dataSmallIconPath = map[string]DrinkMakerFormula{}
	for _, d := range a._data {
		a._dataIconPath[d.IconPath] = d
		a._dataSmallIconPath[d.SmallIconPath] = d
	}
}

// ByIconPath returns the DrinkMakerFormula uniquely identified by IconPath
//
// Error is only non-nil if the source errors out
func (a *DrinkMakerFormulaAccessor) ByIconPath(identifier string) (DrinkMakerFormula, error) {
	if a._dataIconPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return DrinkMakerFormula{}, err
			}
		}
		a.GroupData()
	}
	return a._dataIconPath[identifier], nil
}

// BySmallIconPath returns the DrinkMakerFormula uniquely identified by SmallIconPath
//
// Error is only non-nil if the source errors out
func (a *DrinkMakerFormulaAccessor) BySmallIconPath(identifier string) (DrinkMakerFormula, error) {
	if a._dataSmallIconPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return DrinkMakerFormula{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSmallIconPath[identifier], nil
}
