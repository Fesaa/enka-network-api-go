package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type RogueTournKeywordParam struct {
	KeywordID float64         `json:"KeywordID"`
	ParamList []hash.IntValue `json:"ParamList"`
}
type RogueTournKeywordParamAccessor struct {
	_data          []RogueTournKeywordParam
	_dataKeywordID map[float64]RogueTournKeywordParam
}

// LoadData retrieves the data. Must be called before RogueTournKeywordParam.GroupData
func (a *RogueTournKeywordParamAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueTournKeywordParam.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueTournKeywordParamAccessor) Raw() ([]RogueTournKeywordParam, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueTournKeywordParam{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueTournKeywordParamAccessor.LoadData to preload everything
func (a *RogueTournKeywordParamAccessor) GroupData() {
	for _, d := range a._data {
		a._dataKeywordID[d.KeywordID] = d
	}
}

// ByKeywordID returns the RogueTournKeywordParam uniquely identified by KeywordID
//
// Error is only non-nil if the source errors out
func (a *RogueTournKeywordParamAccessor) ByKeywordID(identifier float64) (RogueTournKeywordParam, error) {
	if a._dataKeywordID == nil {
		err := a.LoadData()
		if err != nil {
			return RogueTournKeywordParam{}, err
		}
		a.GroupData()
	}
	return a._dataKeywordID[identifier], nil
}
