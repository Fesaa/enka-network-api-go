package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type ActivitySummonSkill struct {
	SimpleSkillDesc     map[string]json.Number   `json:"SimpleSkillDesc"`
	SimpleSkillParmList []map[string]json.Number `json:"SimpleSkillParmList"`
	SkillDesc           map[string]json.Number   `json:"SkillDesc"`
	SkillID             json.Number              `json:"SkillID"`
	SkillIconPath       string                   `json:"SkillIconPath"`
	SkillName           map[string]json.Number   `json:"SkillName"`
	SkillParmList       []map[string]json.Number `json:"SkillParmList"`
	SkillTriggerKey     string                   `json:"SkillTriggerKey"`
	SkillType           string                   `json:"SkillType"`
}
type ActivitySummonSkillAccessor struct {
	_data        []ActivitySummonSkill
	_dataSkillID map[json.Number]ActivitySummonSkill
}

// LoadData retrieves the data. Must be called before ActivitySummonSkill.GroupData
func (a *ActivitySummonSkillAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ActivitySummonSkill.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ActivitySummonSkillAccessor) Raw() ([]ActivitySummonSkill, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ActivitySummonSkill{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ActivitySummonSkillAccessor.LoadData to preload everything
func (a *ActivitySummonSkillAccessor) GroupData() {
	a._dataSkillID = map[json.Number]ActivitySummonSkill{}
	for _, d := range a._data {
		a._dataSkillID[d.SkillID] = d
	}
}

// BySkillID returns the ActivitySummonSkill uniquely identified by SkillID
//
// Error is only non-nil if the source errors out
func (a *ActivitySummonSkillAccessor) BySkillID(identifier json.Number) (ActivitySummonSkill, error) {
	if a._dataSkillID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivitySummonSkill{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSkillID[identifier], nil
}
