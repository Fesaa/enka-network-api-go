package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type OpenURLWebViewRule struct {
	Default float64 `json:"Default"`
	RuleID  float64 `json:"RuleID"`
	Windows float64 `json:"Windows"`
	IOS     float64 `json:"iOS"`
}
type OpenURLWebViewRuleAccessor struct {
	_data       []OpenURLWebViewRule
	_dataRuleID map[float64]OpenURLWebViewRule
}

// LoadData retrieves the data. Must be called before OpenURLWebViewRule.GroupData
func (a *OpenURLWebViewRuleAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/OpenURLWebViewRule.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *OpenURLWebViewRuleAccessor) Raw() ([]OpenURLWebViewRule, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []OpenURLWebViewRule{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with OpenURLWebViewRuleAccessor.LoadData to preload everything
func (a *OpenURLWebViewRuleAccessor) GroupData() {
	a._dataRuleID = map[float64]OpenURLWebViewRule{}
	for _, d := range a._data {
		a._dataRuleID[d.RuleID] = d
	}
}

// ByRuleID returns the OpenURLWebViewRule uniquely identified by RuleID
//
// Error is only non-nil if the source errors out
func (a *OpenURLWebViewRuleAccessor) ByRuleID(identifier float64) (OpenURLWebViewRule, error) {
	if a._dataRuleID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return OpenURLWebViewRule{}, err
			}
		}
		a.GroupData()
	}
	return a._dataRuleID[identifier], nil
}
