package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type WheelSelectConfig struct {
	FourSlotOrder float64 `json:"FourSlotOrder"`
	FunctionHudID float64 `json:"FunctionHudID"`
	IndexID       float64 `json:"IndexID"`
	Order         float64 `json:"Order"`
}
type WheelSelectConfigAccessor struct {
	_data              []WheelSelectConfig
	_dataFunctionHudID map[float64]WheelSelectConfig
	_dataIndexID       map[float64]WheelSelectConfig
}

// LoadData retrieves the data. Must be called before WheelSelectConfig.GroupData
func (a *WheelSelectConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/WheelSelectConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *WheelSelectConfigAccessor) Raw() ([]WheelSelectConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []WheelSelectConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with WheelSelectConfigAccessor.LoadData to preload everything
func (a *WheelSelectConfigAccessor) GroupData() {
	a._dataFunctionHudID = map[float64]WheelSelectConfig{}
	a._dataIndexID = map[float64]WheelSelectConfig{}
	for _, d := range a._data {
		a._dataFunctionHudID[d.FunctionHudID] = d
		a._dataIndexID[d.IndexID] = d
	}
}

// ByFunctionHudID returns the WheelSelectConfig uniquely identified by FunctionHudID
//
// Error is only non-nil if the source errors out
func (a *WheelSelectConfigAccessor) ByFunctionHudID(identifier float64) (WheelSelectConfig, error) {
	if a._dataFunctionHudID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return WheelSelectConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataFunctionHudID[identifier], nil
}

// ByIndexID returns the WheelSelectConfig uniquely identified by IndexID
//
// Error is only non-nil if the source errors out
func (a *WheelSelectConfigAccessor) ByIndexID(identifier float64) (WheelSelectConfig, error) {
	if a._dataIndexID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return WheelSelectConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataIndexID[identifier], nil
}
