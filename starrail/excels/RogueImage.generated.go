package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type RogueImage struct {
	ImageID     float64 `json:"ImageID"`
	ImagePath   string  `json:"ImagePath"`
	ImageType   string  `json:"ImageType"`
	ParamStr1   string  `json:"ParamStr1"`
	ParamStr2   string  `json:"ParamStr2"`
	TexturePath string  `json:"TexturePath"`
}
type RogueImageAccessor struct {
	_data          []RogueImage
	_dataImagePath map[string]RogueImage
	_dataImageID   map[float64]RogueImage
}

// LoadData retrieves the data. Must be called before RogueImage.GroupData
func (a *RogueImageAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueImage.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueImageAccessor) Raw() ([]RogueImage, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueImage{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueImageAccessor.LoadData to preload everything
func (a *RogueImageAccessor) GroupData() {
	for _, d := range a._data {
		a._dataImagePath[d.ImagePath] = d
		a._dataImageID[d.ImageID] = d
	}
}

// ByImagePath returns the RogueImage uniquely identified by ImagePath
//
// Error is only non-nil if the source errors out
func (a *RogueImageAccessor) ByImagePath(identifier string) (RogueImage, error) {
	if a._dataImagePath == nil {
		err := a.LoadData()
		if err != nil {
			return RogueImage{}, err
		}
		a.GroupData()
	}
	return a._dataImagePath[identifier], nil
}

// ByImageID returns the RogueImage uniquely identified by ImageID
//
// Error is only non-nil if the source errors out
func (a *RogueImageAccessor) ByImageID(identifier float64) (RogueImage, error) {
	if a._dataImageID == nil {
		err := a.LoadData()
		if err != nil {
			return RogueImage{}, err
		}
		a.GroupData()
	}
	return a._dataImageID[identifier], nil
}
