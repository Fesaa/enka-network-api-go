package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type EvolveBuildGearCollection struct {
	DamageCustomName string                 `json:"DamageCustomName"`
	ElementList      []string               `json:"ElementList"`
	ID               json.Number            `json:"ID"`
	ItemIcon         string                 `json:"ItemIcon"`
	LvMax            json.Number            `json:"LvMax"`
	Name             map[string]json.Number `json:"Name"`
	TagList          []json.Number          `json:"TagList"`
	Type             string                 `json:"Type"`
	UnlockQuest      json.Number            `json:"UnlockQuest"`
}
type EvolveBuildGearCollectionAccessor struct {
	_data         []EvolveBuildGearCollection
	_dataID       map[json.Number]EvolveBuildGearCollection
	_dataItemIcon map[string]EvolveBuildGearCollection
}

// LoadData retrieves the data. Must be called before EvolveBuildGearCollection.GroupData
func (a *EvolveBuildGearCollectionAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/EvolveBuildGearCollection.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *EvolveBuildGearCollectionAccessor) Raw() ([]EvolveBuildGearCollection, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []EvolveBuildGearCollection{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with EvolveBuildGearCollectionAccessor.LoadData to preload everything
func (a *EvolveBuildGearCollectionAccessor) GroupData() {
	a._dataID = map[json.Number]EvolveBuildGearCollection{}
	a._dataItemIcon = map[string]EvolveBuildGearCollection{}
	for _, d := range a._data {
		a._dataID[d.ID] = d
		a._dataItemIcon[d.ItemIcon] = d
	}
}

// ByID returns the EvolveBuildGearCollection uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *EvolveBuildGearCollectionAccessor) ByID(identifier json.Number) (EvolveBuildGearCollection, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return EvolveBuildGearCollection{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}

// ByItemIcon returns the EvolveBuildGearCollection uniquely identified by ItemIcon
//
// Error is only non-nil if the source errors out
func (a *EvolveBuildGearCollectionAccessor) ByItemIcon(identifier string) (EvolveBuildGearCollection, error) {
	if a._dataItemIcon == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return EvolveBuildGearCollection{}, err
			}
		}
		a.GroupData()
	}
	return a._dataItemIcon[identifier], nil
}
