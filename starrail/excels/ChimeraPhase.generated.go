package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type ChimeraPhase struct {
	LeaderChariotState float64   `json:"LeaderChariotState"`
	NextPhaseID        float64   `json:"NextPhaseID"`
	PhaseID            float64   `json:"PhaseID"`
	RoundList          []float64 `json:"RoundList"`
	TargetParam        []float64 `json:"TargetParam"`
	TargetType         string    `json:"TargetType"`
}
type ChimeraPhaseAccessor struct {
	_data        []ChimeraPhase
	_dataPhaseID map[float64]ChimeraPhase
}

// LoadData retrieves the data. Must be called before ChimeraPhase.GroupData
func (a *ChimeraPhaseAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ChimeraPhase.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ChimeraPhaseAccessor) Raw() ([]ChimeraPhase, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ChimeraPhase{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ChimeraPhaseAccessor.LoadData to preload everything
func (a *ChimeraPhaseAccessor) GroupData() {
	for _, d := range a._data {
		a._dataPhaseID[d.PhaseID] = d
	}
}

// ByPhaseID returns the ChimeraPhase uniquely identified by PhaseID
//
// Error is only non-nil if the source errors out
func (a *ChimeraPhaseAccessor) ByPhaseID(identifier float64) (ChimeraPhase, error) {
	if a._dataPhaseID == nil {
		err := a.LoadData()
		if err != nil {
			return ChimeraPhase{}, err
		}
		a.GroupData()
	}
	return a._dataPhaseID[identifier], nil
}
