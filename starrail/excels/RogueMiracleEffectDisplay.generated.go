package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type RogueMiracleEffectDisplay struct {
	DescParamList          []map[string]json.Number `json:"DescParamList"`
	ExtraEffect            []json.Number            `json:"ExtraEffect"`
	MiracleDesc            map[string]json.Number   `json:"MiracleDesc"`
	MiracleEffectDisplayID json.Number              `json:"MiracleEffectDisplayID"`
	MiracleSimpleDesc      map[string]json.Number   `json:"MiracleSimpleDesc"`
}
type RogueMiracleEffectDisplayAccessor struct {
	_data                       []RogueMiracleEffectDisplay
	_dataMiracleEffectDisplayID map[json.Number]RogueMiracleEffectDisplay
}

// LoadData retrieves the data. Must be called before RogueMiracleEffectDisplay.GroupData
func (a *RogueMiracleEffectDisplayAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueMiracleEffectDisplay.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueMiracleEffectDisplayAccessor) Raw() ([]RogueMiracleEffectDisplay, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueMiracleEffectDisplay{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueMiracleEffectDisplayAccessor.LoadData to preload everything
func (a *RogueMiracleEffectDisplayAccessor) GroupData() {
	a._dataMiracleEffectDisplayID = map[json.Number]RogueMiracleEffectDisplay{}
	for _, d := range a._data {
		a._dataMiracleEffectDisplayID[d.MiracleEffectDisplayID] = d
	}
}

// ByMiracleEffectDisplayID returns the RogueMiracleEffectDisplay uniquely identified by MiracleEffectDisplayID
//
// Error is only non-nil if the source errors out
func (a *RogueMiracleEffectDisplayAccessor) ByMiracleEffectDisplayID(identifier json.Number) (RogueMiracleEffectDisplay, error) {
	if a._dataMiracleEffectDisplayID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueMiracleEffectDisplay{}, err
			}
		}
		a.GroupData()
	}
	return a._dataMiracleEffectDisplayID[identifier], nil
}
