package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type TrainPartyRewardConfig struct {
	Level       json.Number            `json:"Level"`
	Name        map[string]json.Number `json:"Name"`
	RequireStar json.Number            `json:"RequireStar"`
	RewardID    json.Number            `json:"RewardID"`
}
type TrainPartyRewardConfigAccessor struct {
	_data         []TrainPartyRewardConfig
	_dataLevel    map[json.Number]TrainPartyRewardConfig
	_dataRewardID map[json.Number]TrainPartyRewardConfig
}

// LoadData retrieves the data. Must be called before TrainPartyRewardConfig.GroupData
func (a *TrainPartyRewardConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/TrainPartyRewardConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *TrainPartyRewardConfigAccessor) Raw() ([]TrainPartyRewardConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []TrainPartyRewardConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with TrainPartyRewardConfigAccessor.LoadData to preload everything
func (a *TrainPartyRewardConfigAccessor) GroupData() {
	a._dataLevel = map[json.Number]TrainPartyRewardConfig{}
	a._dataRewardID = map[json.Number]TrainPartyRewardConfig{}
	for _, d := range a._data {
		a._dataLevel[d.Level] = d
		a._dataRewardID[d.RewardID] = d
	}
}

// ByLevel returns the TrainPartyRewardConfig uniquely identified by Level
//
// Error is only non-nil if the source errors out
func (a *TrainPartyRewardConfigAccessor) ByLevel(identifier json.Number) (TrainPartyRewardConfig, error) {
	if a._dataLevel == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return TrainPartyRewardConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataLevel[identifier], nil
}

// ByRewardID returns the TrainPartyRewardConfig uniquely identified by RewardID
//
// Error is only non-nil if the source errors out
func (a *TrainPartyRewardConfigAccessor) ByRewardID(identifier json.Number) (TrainPartyRewardConfig, error) {
	if a._dataRewardID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return TrainPartyRewardConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataRewardID[identifier], nil
}
