package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type FuncEntrance struct {
	FirstWorldText     string                 `json:"FirstWorldText"`
	FuncHudIconPath    string                 `json:"FuncHudIconPath"`
	FuncIconPath       string                 `json:"FuncIconPath"`
	FuncName           map[string]json.Number `json:"FuncName"`
	GotoID             json.Number            `json:"GotoID"`
	ID                 json.Number            `json:"ID"`
	IsLargeBtn         bool                   `json:"IsLargeBtn"`
	NotInScheduleToast map[string]json.Number `json:"NotInScheduleToast"`
	ParentSystem       json.Number            `json:"ParentSystem"`
	RedDot             string                 `json:"RedDot"`
	RedDotHud          string                 `json:"RedDotHud"`
	UnLockIconPath     string                 `json:"UnLockIconPath"`
	UnlockDesc         map[string]json.Number `json:"UnlockDesc"`
	UnlockID           json.Number            `json:"UnlockID"`
	UnlockMainMission  json.Number            `json:"UnlockMainMission"`
	UnlockPrompt       string                 `json:"UnlockPrompt"`
}
type FuncEntranceAccessor struct {
	_data []FuncEntrance
}

// LoadData retrieves the data. Must be called before FuncEntrance.GroupData
func (a *FuncEntranceAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/FuncEntrance.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *FuncEntranceAccessor) Raw() ([]FuncEntrance, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []FuncEntrance{}, err
		}
	}
	return a._data, nil
}
