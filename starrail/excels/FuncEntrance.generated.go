package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type FuncEntrance struct {
	FirstWorldText     string    `json:"FirstWorldText"`
	FuncHudIconPath    string    `json:"FuncHudIconPath"`
	FuncIconPath       string    `json:"FuncIconPath"`
	FuncName           hash.Hash `json:"FuncName"`
	GotoID             float64   `json:"GotoID"`
	ID                 float64   `json:"ID"`
	IsLargeBtn         bool      `json:"IsLargeBtn"`
	NotInScheduleToast hash.Hash `json:"NotInScheduleToast"`
	ParentSystem       float64   `json:"ParentSystem"`
	RedDot             string    `json:"RedDot"`
	RedDotHud          string    `json:"RedDotHud"`
	UnLockIconPath     string    `json:"UnLockIconPath"`
	UnlockDesc         hash.Hash `json:"UnlockDesc"`
	UnlockID           float64   `json:"UnlockID"`
	UnlockMainMission  float64   `json:"UnlockMainMission"`
	UnlockPrompt       string    `json:"UnlockPrompt"`
}
type FuncEntranceAccessor struct {
	_data   []FuncEntrance
	_dataID map[float64]FuncEntrance
}

// LoadData retrieves the data. Must be called before FuncEntrance.GroupData
func (a *FuncEntranceAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/FuncEntrance.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *FuncEntranceAccessor) Raw() ([]FuncEntrance, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []FuncEntrance{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with FuncEntranceAccessor.LoadData to preload everything
func (a *FuncEntranceAccessor) GroupData() {
	for _, d := range a._data {
		a._dataID[d.ID] = d
	}
}

// ByID returns the FuncEntrance uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *FuncEntranceAccessor) ByID(identifier float64) (FuncEntrance, error) {
	if a._dataID == nil {
		err := a.LoadData()
		if err != nil {
			return FuncEntrance{}, err
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}
