package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type FightFestStageInfo struct {
	ChallengeName       map[string]json.Number `json:"ChallengeName"`
	EnvironmentBuffID   json.Number            `json:"EnvironmentBuffID"`
	EventID             json.Number            `json:"EventID"`
	HighLightDesc       map[string]json.Number `json:"HighLightDesc"`
	PreviewMonsterList  []json.Number          `json:"PreviewMonsterList"`
	RecommadCoachID     []json.Number          `json:"RecommadCoachID"`
	RecommadNature      []string               `json:"RecommadNature"`
	SpecialAvatarList   []json.Number          `json:"SpecialAvatarList"`
	TutorialID          json.Number            `json:"TutorialID"`
	UIEnterBattleAreaID json.Number            `json:"UIEnterBattleAreaID"`
}
type FightFestStageInfoAccessor struct {
	_data        []FightFestStageInfo
	_dataEventID map[json.Number]FightFestStageInfo
}

// LoadData retrieves the data. Must be called before FightFestStageInfo.GroupData
func (a *FightFestStageInfoAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/FightFestStageInfo.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *FightFestStageInfoAccessor) Raw() ([]FightFestStageInfo, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []FightFestStageInfo{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with FightFestStageInfoAccessor.LoadData to preload everything
func (a *FightFestStageInfoAccessor) GroupData() {
	a._dataEventID = map[json.Number]FightFestStageInfo{}
	for _, d := range a._data {
		a._dataEventID[d.EventID] = d
	}
}

// ByEventID returns the FightFestStageInfo uniquely identified by EventID
//
// Error is only non-nil if the source errors out
func (a *FightFestStageInfoAccessor) ByEventID(identifier json.Number) (FightFestStageInfo, error) {
	if a._dataEventID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FightFestStageInfo{}, err
			}
		}
		a.GroupData()
	}
	return a._dataEventID[identifier], nil
}
