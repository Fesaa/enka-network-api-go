package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type ParkourBGMConfig struct {
	FastEventName   string  `json:"FastEventName"`
	ID              float64 `json:"ID"`
	NormalEventName string  `json:"NormalEventName"`
}
type ParkourBGMConfigAccessor struct {
	_data                []ParkourBGMConfig
	_dataFastEventName   map[string]ParkourBGMConfig
	_dataID              map[float64]ParkourBGMConfig
	_dataNormalEventName map[string]ParkourBGMConfig
}

// LoadData retrieves the data. Must be called before ParkourBGMConfig.GroupData
func (a *ParkourBGMConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ParkourBGMConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ParkourBGMConfigAccessor) Raw() ([]ParkourBGMConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ParkourBGMConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ParkourBGMConfigAccessor.LoadData to preload everything
func (a *ParkourBGMConfigAccessor) GroupData() {
	a._dataFastEventName = map[string]ParkourBGMConfig{}
	a._dataID = map[float64]ParkourBGMConfig{}
	a._dataNormalEventName = map[string]ParkourBGMConfig{}
	for _, d := range a._data {
		a._dataFastEventName[d.FastEventName] = d
		a._dataID[d.ID] = d
		a._dataNormalEventName[d.NormalEventName] = d
	}
}

// ByFastEventName returns the ParkourBGMConfig uniquely identified by FastEventName
//
// Error is only non-nil if the source errors out
func (a *ParkourBGMConfigAccessor) ByFastEventName(identifier string) (ParkourBGMConfig, error) {
	if a._dataFastEventName == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ParkourBGMConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataFastEventName[identifier], nil
}

// ByID returns the ParkourBGMConfig uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *ParkourBGMConfigAccessor) ByID(identifier float64) (ParkourBGMConfig, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ParkourBGMConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}

// ByNormalEventName returns the ParkourBGMConfig uniquely identified by NormalEventName
//
// Error is only non-nil if the source errors out
func (a *ParkourBGMConfigAccessor) ByNormalEventName(identifier string) (ParkourBGMConfig, error) {
	if a._dataNormalEventName == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ParkourBGMConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataNormalEventName[identifier], nil
}
