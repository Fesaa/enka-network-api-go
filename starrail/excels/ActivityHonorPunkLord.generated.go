package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type ActivityHonorPunkLord struct {
	DisplayPriority json.Number            `json:"DisplayPriority"`
	HonorID         json.Number            `json:"HonorID"`
	HonorName       map[string]json.Number `json:"HonorName"`
}
type ActivityHonorPunkLordAccessor struct {
	_data                []ActivityHonorPunkLord
	_dataDisplayPriority map[json.Number]ActivityHonorPunkLord
	_dataHonorID         map[json.Number]ActivityHonorPunkLord
}

// LoadData retrieves the data. Must be called before ActivityHonorPunkLord.GroupData
func (a *ActivityHonorPunkLordAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ActivityHonorPunkLord.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ActivityHonorPunkLordAccessor) Raw() ([]ActivityHonorPunkLord, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ActivityHonorPunkLord{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ActivityHonorPunkLordAccessor.LoadData to preload everything
func (a *ActivityHonorPunkLordAccessor) GroupData() {
	a._dataDisplayPriority = map[json.Number]ActivityHonorPunkLord{}
	a._dataHonorID = map[json.Number]ActivityHonorPunkLord{}
	for _, d := range a._data {
		a._dataDisplayPriority[d.DisplayPriority] = d
		a._dataHonorID[d.HonorID] = d
	}
}

// ByDisplayPriority returns the ActivityHonorPunkLord uniquely identified by DisplayPriority
//
// Error is only non-nil if the source errors out
func (a *ActivityHonorPunkLordAccessor) ByDisplayPriority(identifier json.Number) (ActivityHonorPunkLord, error) {
	if a._dataDisplayPriority == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityHonorPunkLord{}, err
			}
		}
		a.GroupData()
	}
	return a._dataDisplayPriority[identifier], nil
}

// ByHonorID returns the ActivityHonorPunkLord uniquely identified by HonorID
//
// Error is only non-nil if the source errors out
func (a *ActivityHonorPunkLordAccessor) ByHonorID(identifier json.Number) (ActivityHonorPunkLord, error) {
	if a._dataHonorID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityHonorPunkLord{}, err
			}
		}
		a.GroupData()
	}
	return a._dataHonorID[identifier], nil
}
