package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type TrainPartyLogConfig struct {
	LogContent map[string]json.Number `json:"LogContent"`
	LogType    string                 `json:"LogType"`
	Priority   json.Number            `json:"Priority"`
}
type TrainPartyLogConfigAccessor struct {
	_data         []TrainPartyLogConfig
	_dataLogType  map[string]TrainPartyLogConfig
	_dataPriority map[json.Number]TrainPartyLogConfig
}

// LoadData retrieves the data. Must be called before TrainPartyLogConfig.GroupData
func (a *TrainPartyLogConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/TrainPartyLogConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *TrainPartyLogConfigAccessor) Raw() ([]TrainPartyLogConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []TrainPartyLogConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with TrainPartyLogConfigAccessor.LoadData to preload everything
func (a *TrainPartyLogConfigAccessor) GroupData() {
	a._dataLogType = map[string]TrainPartyLogConfig{}
	a._dataPriority = map[json.Number]TrainPartyLogConfig{}
	for _, d := range a._data {
		a._dataLogType[d.LogType] = d
		a._dataPriority[d.Priority] = d
	}
}

// ByLogType returns the TrainPartyLogConfig uniquely identified by LogType
//
// Error is only non-nil if the source errors out
func (a *TrainPartyLogConfigAccessor) ByLogType(identifier string) (TrainPartyLogConfig, error) {
	if a._dataLogType == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return TrainPartyLogConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataLogType[identifier], nil
}

// ByPriority returns the TrainPartyLogConfig uniquely identified by Priority
//
// Error is only non-nil if the source errors out
func (a *TrainPartyLogConfigAccessor) ByPriority(identifier json.Number) (TrainPartyLogConfig, error) {
	if a._dataPriority == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return TrainPartyLogConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataPriority[identifier], nil
}
