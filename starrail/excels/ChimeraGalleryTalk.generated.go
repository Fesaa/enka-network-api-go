package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type ChimeraGalleryTalk struct {
	ConditionType string                 `json:"ConditionType"`
	NumberedTitle map[string]json.Number `json:"NumberedTitle"`
	Sort          json.Number            `json:"Sort"`
	Title         map[string]json.Number `json:"Title"`
}
type ChimeraGalleryTalkAccessor struct {
	_data              []ChimeraGalleryTalk
	_dataConditionType map[string]ChimeraGalleryTalk
}

// LoadData retrieves the data. Must be called before ChimeraGalleryTalk.GroupData
func (a *ChimeraGalleryTalkAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ChimeraGalleryTalk.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ChimeraGalleryTalkAccessor) Raw() ([]ChimeraGalleryTalk, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ChimeraGalleryTalk{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ChimeraGalleryTalkAccessor.LoadData to preload everything
func (a *ChimeraGalleryTalkAccessor) GroupData() {
	a._dataConditionType = map[string]ChimeraGalleryTalk{}
	for _, d := range a._data {
		a._dataConditionType[d.ConditionType] = d
	}
}

// ByConditionType returns the ChimeraGalleryTalk uniquely identified by ConditionType
//
// Error is only non-nil if the source errors out
func (a *ChimeraGalleryTalkAccessor) ByConditionType(identifier string) (ChimeraGalleryTalk, error) {
	if a._dataConditionType == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ChimeraGalleryTalk{}, err
			}
		}
		a.GroupData()
	}
	return a._dataConditionType[identifier], nil
}
