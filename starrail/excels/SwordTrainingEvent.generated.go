package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type SwordTrainingEvent struct {
	EventID        json.Number            `json:"EventID"`
	EventImage     string                 `json:"EventImage"`
	OptionIDList   []json.Number          `json:"OptionIDList"`
	TalkEventText1 map[string]json.Number `json:"TalkEventText1"`
	TalkEventText2 map[string]json.Number `json:"TalkEventText2"`
	TalkEventText3 map[string]json.Number `json:"TalkEventText3"`
}
type SwordTrainingEventAccessor struct {
	_data        []SwordTrainingEvent
	_dataEventID map[json.Number]SwordTrainingEvent
}

// LoadData retrieves the data. Must be called before SwordTrainingEvent.GroupData
func (a *SwordTrainingEventAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/SwordTrainingEvent.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *SwordTrainingEventAccessor) Raw() ([]SwordTrainingEvent, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []SwordTrainingEvent{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with SwordTrainingEventAccessor.LoadData to preload everything
func (a *SwordTrainingEventAccessor) GroupData() {
	a._dataEventID = map[json.Number]SwordTrainingEvent{}
	for _, d := range a._data {
		a._dataEventID[d.EventID] = d
	}
}

// ByEventID returns the SwordTrainingEvent uniquely identified by EventID
//
// Error is only non-nil if the source errors out
func (a *SwordTrainingEventAccessor) ByEventID(identifier json.Number) (SwordTrainingEvent, error) {
	if a._dataEventID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return SwordTrainingEvent{}, err
			}
		}
		a.GroupData()
	}
	return a._dataEventID[identifier], nil
}
