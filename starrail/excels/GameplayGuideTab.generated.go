package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type GameplayGuideTab struct {
	Desc        hash.Hash `json:"Desc"`
	GuideType   string    `json:"GuideType"`
	ID          float64   `json:"ID"`
	IconPath    string    `json:"IconPath"`
	IntroDataID float64   `json:"IntroDataID"`
	Name        hash.Hash `json:"Name"`
	Priority    float64   `json:"Priority"`
	ResBarKey   string    `json:"ResBarKey"`
	UnlockID    float64   `json:"UnlockID"`
}
type GameplayGuideTabAccessor struct {
	_data            []GameplayGuideTab
	_dataGuideType   map[string]GameplayGuideTab
	_dataID          map[float64]GameplayGuideTab
	_dataIntroDataID map[float64]GameplayGuideTab
	_dataPriority    map[float64]GameplayGuideTab
}

// LoadData retrieves the data. Must be called before GameplayGuideTab.GroupData
func (a *GameplayGuideTabAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/GameplayGuideTab.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *GameplayGuideTabAccessor) Raw() ([]GameplayGuideTab, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []GameplayGuideTab{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with GameplayGuideTabAccessor.LoadData to preload everything
func (a *GameplayGuideTabAccessor) GroupData() {
	a._dataGuideType = map[string]GameplayGuideTab{}
	a._dataID = map[float64]GameplayGuideTab{}
	a._dataIntroDataID = map[float64]GameplayGuideTab{}
	a._dataPriority = map[float64]GameplayGuideTab{}
	for _, d := range a._data {
		a._dataGuideType[d.GuideType] = d
		a._dataID[d.ID] = d
		a._dataIntroDataID[d.IntroDataID] = d
		a._dataPriority[d.Priority] = d
	}
}

// ByGuideType returns the GameplayGuideTab uniquely identified by GuideType
//
// Error is only non-nil if the source errors out
func (a *GameplayGuideTabAccessor) ByGuideType(identifier string) (GameplayGuideTab, error) {
	if a._dataGuideType == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return GameplayGuideTab{}, err
			}
		}
		a.GroupData()
	}
	return a._dataGuideType[identifier], nil
}

// ByID returns the GameplayGuideTab uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *GameplayGuideTabAccessor) ByID(identifier float64) (GameplayGuideTab, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return GameplayGuideTab{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}

// ByIntroDataID returns the GameplayGuideTab uniquely identified by IntroDataID
//
// Error is only non-nil if the source errors out
func (a *GameplayGuideTabAccessor) ByIntroDataID(identifier float64) (GameplayGuideTab, error) {
	if a._dataIntroDataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return GameplayGuideTab{}, err
			}
		}
		a.GroupData()
	}
	return a._dataIntroDataID[identifier], nil
}

// ByPriority returns the GameplayGuideTab uniquely identified by Priority
//
// Error is only non-nil if the source errors out
func (a *GameplayGuideTabAccessor) ByPriority(identifier float64) (GameplayGuideTab, error) {
	if a._dataPriority == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return GameplayGuideTab{}, err
			}
		}
		a.GroupData()
	}
	return a._dataPriority[identifier], nil
}
