package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type RogueAeon struct {
	AeonID                      json.Number            `json:"AeonID"`
	ArrivedTalkDialogueGroupID  json.Number            `json:"ArrivedTalkDialogueGroupID"`
	BattleEventBuffGroup        json.Number            `json:"BattleEventBuffGroup"`
	BattleEventEnhanceBuffGroup json.Number            `json:"BattleEventEnhanceBuffGroup"`
	DisplayID                   json.Number            `json:"DisplayID"`
	EffectDesc1                 map[string]json.Number `json:"EffectDesc1"`
	EffectDesc2                 map[string]json.Number `json:"EffectDesc2"`
	RogueBuffType               json.Number            `json:"RogueBuffType"`
	RogueVersion                json.Number            `json:"RogueVersion"`
	Sort                        json.Number            `json:"Sort"`
	UnlockID                    json.Number            `json:"UnlockID"`
}
type RogueAeonAccessor struct {
	_data                            []RogueAeon
	_dataAeonID                      map[json.Number]RogueAeon
	_dataBattleEventBuffGroup        map[json.Number]RogueAeon
	_dataBattleEventEnhanceBuffGroup map[json.Number]RogueAeon
	_dataDisplayID                   map[json.Number]RogueAeon
	_dataRogueBuffType               map[json.Number]RogueAeon
	_dataSort                        map[json.Number]RogueAeon
}

// LoadData retrieves the data. Must be called before RogueAeon.GroupData
func (a *RogueAeonAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueAeon.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueAeonAccessor) Raw() ([]RogueAeon, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueAeon{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueAeonAccessor.LoadData to preload everything
func (a *RogueAeonAccessor) GroupData() {
	a._dataAeonID = map[json.Number]RogueAeon{}
	a._dataBattleEventBuffGroup = map[json.Number]RogueAeon{}
	a._dataBattleEventEnhanceBuffGroup = map[json.Number]RogueAeon{}
	a._dataDisplayID = map[json.Number]RogueAeon{}
	a._dataRogueBuffType = map[json.Number]RogueAeon{}
	a._dataSort = map[json.Number]RogueAeon{}
	for _, d := range a._data {
		a._dataAeonID[d.AeonID] = d
		a._dataBattleEventBuffGroup[d.BattleEventBuffGroup] = d
		a._dataBattleEventEnhanceBuffGroup[d.BattleEventEnhanceBuffGroup] = d
		a._dataDisplayID[d.DisplayID] = d
		a._dataRogueBuffType[d.RogueBuffType] = d
		a._dataSort[d.Sort] = d
	}
}

// ByAeonID returns the RogueAeon uniquely identified by AeonID
//
// Error is only non-nil if the source errors out
func (a *RogueAeonAccessor) ByAeonID(identifier json.Number) (RogueAeon, error) {
	if a._dataAeonID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueAeon{}, err
			}
		}
		a.GroupData()
	}
	return a._dataAeonID[identifier], nil
}

// ByBattleEventBuffGroup returns the RogueAeon uniquely identified by BattleEventBuffGroup
//
// Error is only non-nil if the source errors out
func (a *RogueAeonAccessor) ByBattleEventBuffGroup(identifier json.Number) (RogueAeon, error) {
	if a._dataBattleEventBuffGroup == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueAeon{}, err
			}
		}
		a.GroupData()
	}
	return a._dataBattleEventBuffGroup[identifier], nil
}

// ByBattleEventEnhanceBuffGroup returns the RogueAeon uniquely identified by BattleEventEnhanceBuffGroup
//
// Error is only non-nil if the source errors out
func (a *RogueAeonAccessor) ByBattleEventEnhanceBuffGroup(identifier json.Number) (RogueAeon, error) {
	if a._dataBattleEventEnhanceBuffGroup == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueAeon{}, err
			}
		}
		a.GroupData()
	}
	return a._dataBattleEventEnhanceBuffGroup[identifier], nil
}

// ByDisplayID returns the RogueAeon uniquely identified by DisplayID
//
// Error is only non-nil if the source errors out
func (a *RogueAeonAccessor) ByDisplayID(identifier json.Number) (RogueAeon, error) {
	if a._dataDisplayID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueAeon{}, err
			}
		}
		a.GroupData()
	}
	return a._dataDisplayID[identifier], nil
}

// ByRogueBuffType returns the RogueAeon uniquely identified by RogueBuffType
//
// Error is only non-nil if the source errors out
func (a *RogueAeonAccessor) ByRogueBuffType(identifier json.Number) (RogueAeon, error) {
	if a._dataRogueBuffType == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueAeon{}, err
			}
		}
		a.GroupData()
	}
	return a._dataRogueBuffType[identifier], nil
}

// BySort returns the RogueAeon uniquely identified by Sort
//
// Error is only non-nil if the source errors out
func (a *RogueAeonAccessor) BySort(identifier json.Number) (RogueAeon, error) {
	if a._dataSort == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueAeon{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSort[identifier], nil
}
