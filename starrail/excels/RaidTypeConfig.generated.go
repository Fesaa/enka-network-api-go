package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type RaidTypeConfig struct {
	FinishCountDown json.Number `json:"FinishCountDown"`
	FinishType      string      `json:"FinishType"`
	RaidType        string      `json:"RaidType"`
}
type RaidTypeConfigAccessor struct {
	_data         []RaidTypeConfig
	_dataRaidType map[string]RaidTypeConfig
}

// LoadData retrieves the data. Must be called before RaidTypeConfig.GroupData
func (a *RaidTypeConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RaidTypeConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RaidTypeConfigAccessor) Raw() ([]RaidTypeConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RaidTypeConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RaidTypeConfigAccessor.LoadData to preload everything
func (a *RaidTypeConfigAccessor) GroupData() {
	a._dataRaidType = map[string]RaidTypeConfig{}
	for _, d := range a._data {
		a._dataRaidType[d.RaidType] = d
	}
}

// ByRaidType returns the RaidTypeConfig uniquely identified by RaidType
//
// Error is only non-nil if the source errors out
func (a *RaidTypeConfigAccessor) ByRaidType(identifier string) (RaidTypeConfig, error) {
	if a._dataRaidType == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RaidTypeConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataRaidType[identifier], nil
}
