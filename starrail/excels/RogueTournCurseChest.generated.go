package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type RogueTournCurseChest struct {
	ChestID            json.Number            `json:"ChestID"`
	MainDescDisplayID  json.Number            `json:"MainDescDisplayID"`
	MainTitleDisplayID json.Number            `json:"MainTitleDisplayID"`
	ParamValue1        map[string]json.Number `json:"ParamValue1"`
	ParamValue2        map[string]json.Number `json:"ParamValue2"`
	ParamValue3        map[string]json.Number `json:"ParamValue3"`
	ParamValue4        map[string]json.Number `json:"ParamValue4"`
	SubDescDisplayID   json.Number            `json:"SubDescDisplayID"`
	SubTitleDisplayID  json.Number            `json:"SubTitleDisplayID"`
}
type RogueTournCurseChestAccessor struct {
	_data []RogueTournCurseChest
}

// LoadData retrieves the data. Must be called before RogueTournCurseChest.GroupData
func (a *RogueTournCurseChestAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueTournCurseChest.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueTournCurseChestAccessor) Raw() ([]RogueTournCurseChest, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueTournCurseChest{}, err
		}
	}
	return a._data, nil
}
