package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type RogueTournCurseChest struct {
	ChestID            float64       `json:"ChestID"`
	MainDescDisplayID  float64       `json:"MainDescDisplayID"`
	MainTitleDisplayID float64       `json:"MainTitleDisplayID"`
	ParamValue1        hash.IntValue `json:"ParamValue1"`
	ParamValue2        hash.IntValue `json:"ParamValue2"`
	ParamValue3        hash.IntValue `json:"ParamValue3"`
	ParamValue4        hash.IntValue `json:"ParamValue4"`
	SubDescDisplayID   float64       `json:"SubDescDisplayID"`
	SubTitleDisplayID  float64       `json:"SubTitleDisplayID"`
}
type RogueTournCurseChestAccessor struct {
	_data        []RogueTournCurseChest
	_dataChestID map[float64]RogueTournCurseChest
}

// LoadData retrieves the data. Must be called before RogueTournCurseChest.GroupData
func (a *RogueTournCurseChestAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueTournCurseChest.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueTournCurseChestAccessor) Raw() ([]RogueTournCurseChest, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueTournCurseChest{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueTournCurseChestAccessor.LoadData to preload everything
func (a *RogueTournCurseChestAccessor) GroupData() {
	for _, d := range a._data {
		a._dataChestID[d.ChestID] = d
	}
}

// ByChestID returns the RogueTournCurseChest uniquely identified by ChestID
//
// Error is only non-nil if the source errors out
func (a *RogueTournCurseChestAccessor) ByChestID(identifier float64) (RogueTournCurseChest, error) {
	if a._dataChestID == nil {
		err := a.LoadData()
		if err != nil {
			return RogueTournCurseChest{}, err
		}
		a.GroupData()
	}
	return a._dataChestID[identifier], nil
}
