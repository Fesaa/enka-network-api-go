package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type PlanetFesLandType struct {
	BigBuffIconPath   string                 `json:"BigBuffIconPath"`
	IconPath          string                 `json:"IconPath"`
	Name              map[string]json.Number `json:"Name"`
	SmallBuffIconPath string                 `json:"SmallBuffIconPath"`
	Type              string                 `json:"Type"`
}
type PlanetFesLandTypeAccessor struct {
	_data                  []PlanetFesLandType
	_dataBigBuffIconPath   map[string]PlanetFesLandType
	_dataIconPath          map[string]PlanetFesLandType
	_dataSmallBuffIconPath map[string]PlanetFesLandType
	_dataType              map[string]PlanetFesLandType
}

// LoadData retrieves the data. Must be called before PlanetFesLandType.GroupData
func (a *PlanetFesLandTypeAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/PlanetFesLandType.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *PlanetFesLandTypeAccessor) Raw() ([]PlanetFesLandType, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []PlanetFesLandType{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with PlanetFesLandTypeAccessor.LoadData to preload everything
func (a *PlanetFesLandTypeAccessor) GroupData() {
	a._dataBigBuffIconPath = map[string]PlanetFesLandType{}
	a._dataIconPath = map[string]PlanetFesLandType{}
	a._dataSmallBuffIconPath = map[string]PlanetFesLandType{}
	a._dataType = map[string]PlanetFesLandType{}
	for _, d := range a._data {
		a._dataBigBuffIconPath[d.BigBuffIconPath] = d
		a._dataIconPath[d.IconPath] = d
		a._dataSmallBuffIconPath[d.SmallBuffIconPath] = d
		a._dataType[d.Type] = d
	}
}

// ByBigBuffIconPath returns the PlanetFesLandType uniquely identified by BigBuffIconPath
//
// Error is only non-nil if the source errors out
func (a *PlanetFesLandTypeAccessor) ByBigBuffIconPath(identifier string) (PlanetFesLandType, error) {
	if a._dataBigBuffIconPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return PlanetFesLandType{}, err
			}
		}
		a.GroupData()
	}
	return a._dataBigBuffIconPath[identifier], nil
}

// ByIconPath returns the PlanetFesLandType uniquely identified by IconPath
//
// Error is only non-nil if the source errors out
func (a *PlanetFesLandTypeAccessor) ByIconPath(identifier string) (PlanetFesLandType, error) {
	if a._dataIconPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return PlanetFesLandType{}, err
			}
		}
		a.GroupData()
	}
	return a._dataIconPath[identifier], nil
}

// BySmallBuffIconPath returns the PlanetFesLandType uniquely identified by SmallBuffIconPath
//
// Error is only non-nil if the source errors out
func (a *PlanetFesLandTypeAccessor) BySmallBuffIconPath(identifier string) (PlanetFesLandType, error) {
	if a._dataSmallBuffIconPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return PlanetFesLandType{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSmallBuffIconPath[identifier], nil
}

// ByType returns the PlanetFesLandType uniquely identified by Type
//
// Error is only non-nil if the source errors out
func (a *PlanetFesLandTypeAccessor) ByType(identifier string) (PlanetFesLandType, error) {
	if a._dataType == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return PlanetFesLandType{}, err
			}
		}
		a.GroupData()
	}
	return a._dataType[identifier], nil
}
