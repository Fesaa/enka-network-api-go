package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type SpecialAvatarRelicSubValue struct {
	RelicSubValueType json.Number                          `json:"RelicSubValueType"`
	SubValue          []SpecialAvatarRelicSubValueSubValue `json:"SubValue"`
}
type SpecialAvatarRelicSubValueSubValue struct {
	LKOEFDPJGKD string                 `json:"LKOEFDPJGKD"`
	MBMDOCJIMEJ map[string]json.Number `json:"MBMDOCJIMEJ"`
}
type SpecialAvatarRelicSubValueAccessor struct {
	_data                  []SpecialAvatarRelicSubValue
	_dataRelicSubValueType map[json.Number]SpecialAvatarRelicSubValue
}

// LoadData retrieves the data. Must be called before SpecialAvatarRelicSubValue.GroupData
func (a *SpecialAvatarRelicSubValueAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/SpecialAvatarRelicSubValue.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *SpecialAvatarRelicSubValueAccessor) Raw() ([]SpecialAvatarRelicSubValue, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []SpecialAvatarRelicSubValue{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with SpecialAvatarRelicSubValueAccessor.LoadData to preload everything
func (a *SpecialAvatarRelicSubValueAccessor) GroupData() {
	a._dataRelicSubValueType = map[json.Number]SpecialAvatarRelicSubValue{}
	for _, d := range a._data {
		a._dataRelicSubValueType[d.RelicSubValueType] = d
	}
}

// ByRelicSubValueType returns the SpecialAvatarRelicSubValue uniquely identified by RelicSubValueType
//
// Error is only non-nil if the source errors out
func (a *SpecialAvatarRelicSubValueAccessor) ByRelicSubValueType(identifier json.Number) (SpecialAvatarRelicSubValue, error) {
	if a._dataRelicSubValueType == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return SpecialAvatarRelicSubValue{}, err
			}
		}
		a.GroupData()
	}
	return a._dataRelicSubValueType[identifier], nil
}
