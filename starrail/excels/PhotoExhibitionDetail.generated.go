package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type PhotoExhibitionDetail struct {
	AuthorName         map[string]json.Number `json:"AuthorName"`
	FemalePicPath      []string               `json:"FemalePicPath"`
	FinishSubMissionID json.Number            `json:"FinishSubMissionID"`
	GroupphotoDesc     map[string]json.Number `json:"GroupphotoDesc"`
	ID                 json.Number            `json:"ID"`
	MalePicPath        []string               `json:"MalePicPath"`
	MissionID          json.Number            `json:"MissionID"`
	Name               map[string]json.Number `json:"Name"`
	RuikeReply         map[string]json.Number `json:"RuikeReply"`
	ShowRuikeName      bool                   `json:"ShowRuikeName"`
	TaskOption         []json.Number          `json:"TaskOption"`
	Unlock             map[string]json.Number `json:"Unlock"`
	UnlockPicPath      string                 `json:"UnlockPicPath"`
}
type PhotoExhibitionDetailAccessor struct {
	_data   []PhotoExhibitionDetail
	_dataID map[json.Number]PhotoExhibitionDetail
}

// LoadData retrieves the data. Must be called before PhotoExhibitionDetail.GroupData
func (a *PhotoExhibitionDetailAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/PhotoExhibitionDetail.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *PhotoExhibitionDetailAccessor) Raw() ([]PhotoExhibitionDetail, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []PhotoExhibitionDetail{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with PhotoExhibitionDetailAccessor.LoadData to preload everything
func (a *PhotoExhibitionDetailAccessor) GroupData() {
	a._dataID = map[json.Number]PhotoExhibitionDetail{}
	for _, d := range a._data {
		a._dataID[d.ID] = d
	}
}

// ByID returns the PhotoExhibitionDetail uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *PhotoExhibitionDetailAccessor) ByID(identifier json.Number) (PhotoExhibitionDetail, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return PhotoExhibitionDetail{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}
