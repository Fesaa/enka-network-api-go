package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type GachaGroupData struct {
	GachaIDList           []float64 `json:"GachaIDList"`
	GachaType             string    `json:"GachaType"`
	GroupID               float64   `json:"GroupID"`
	PoolLabelIcon         string    `json:"PoolLabelIcon"`
	PoolLabelIconSelected string    `json:"PoolLabelIconSelected"`
}
type GachaGroupDataAccessor struct {
	_data                      []GachaGroupData
	_dataGroupID               map[float64]GachaGroupData
	_dataPoolLabelIcon         map[string]GachaGroupData
	_dataPoolLabelIconSelected map[string]GachaGroupData
}

// LoadData retrieves the data. Must be called before GachaGroupData.GroupData
func (a *GachaGroupDataAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/GachaGroupData.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *GachaGroupDataAccessor) Raw() ([]GachaGroupData, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []GachaGroupData{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with GachaGroupDataAccessor.LoadData to preload everything
func (a *GachaGroupDataAccessor) GroupData() {
	for _, d := range a._data {
		a._dataGroupID[d.GroupID] = d
		a._dataPoolLabelIcon[d.PoolLabelIcon] = d
		a._dataPoolLabelIconSelected[d.PoolLabelIconSelected] = d
	}
}

// ByGroupID returns the GachaGroupData uniquely identified by GroupID
//
// Error is only non-nil if the source errors out
func (a *GachaGroupDataAccessor) ByGroupID(identifier float64) (GachaGroupData, error) {
	if a._dataGroupID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return GachaGroupData{}, err
			}
		}
		a.GroupData()
	}
	return a._dataGroupID[identifier], nil
}

// ByPoolLabelIcon returns the GachaGroupData uniquely identified by PoolLabelIcon
//
// Error is only non-nil if the source errors out
func (a *GachaGroupDataAccessor) ByPoolLabelIcon(identifier string) (GachaGroupData, error) {
	if a._dataPoolLabelIcon == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return GachaGroupData{}, err
			}
		}
		a.GroupData()
	}
	return a._dataPoolLabelIcon[identifier], nil
}

// ByPoolLabelIconSelected returns the GachaGroupData uniquely identified by PoolLabelIconSelected
//
// Error is only non-nil if the source errors out
func (a *GachaGroupDataAccessor) ByPoolLabelIconSelected(identifier string) (GachaGroupData, error) {
	if a._dataPoolLabelIconSelected == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return GachaGroupData{}, err
			}
		}
		a.GroupData()
	}
	return a._dataPoolLabelIconSelected[identifier], nil
}
