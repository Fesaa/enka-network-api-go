package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type MonsterDifficultyGuide struct {
	DifficultyGuideDescription hash.Hash `json:"DifficultyGuideDescription"`
	DifficultyGuideID          float64   `json:"DifficultyGuideID"`
	ParameterList              []float64 `json:"ParameterList"`
	SkillID                    float64   `json:"SkillID"`
}
type MonsterDifficultyGuideAccessor struct {
	_data                  []MonsterDifficultyGuide
	_dataDifficultyGuideID map[float64]MonsterDifficultyGuide
}

// LoadData retrieves the data. Must be called before MonsterDifficultyGuide.GroupData
func (a *MonsterDifficultyGuideAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MonsterDifficultyGuide.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MonsterDifficultyGuideAccessor) Raw() ([]MonsterDifficultyGuide, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MonsterDifficultyGuide{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MonsterDifficultyGuideAccessor.LoadData to preload everything
func (a *MonsterDifficultyGuideAccessor) GroupData() {
	for _, d := range a._data {
		a._dataDifficultyGuideID[d.DifficultyGuideID] = d
	}
}

// ByDifficultyGuideID returns the MonsterDifficultyGuide uniquely identified by DifficultyGuideID
//
// Error is only non-nil if the source errors out
func (a *MonsterDifficultyGuideAccessor) ByDifficultyGuideID(identifier float64) (MonsterDifficultyGuide, error) {
	if a._dataDifficultyGuideID == nil {
		err := a.LoadData()
		if err != nil {
			return MonsterDifficultyGuide{}, err
		}
		a.GroupData()
	}
	return a._dataDifficultyGuideID[identifier], nil
}
