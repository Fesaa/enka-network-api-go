package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type PlanetFesSkillTreePhase struct {
	Name         hash.Hash     `json:"Name"`
	Phase        float64       `json:"Phase"`
	UnlockIDList []interface{} `json:"UnlockIDList"`
}
type PlanetFesSkillTreePhaseAccessor struct {
	_data      []PlanetFesSkillTreePhase
	_dataPhase map[float64]PlanetFesSkillTreePhase
}

// LoadData retrieves the data. Must be called before PlanetFesSkillTreePhase.GroupData
func (a *PlanetFesSkillTreePhaseAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/PlanetFesSkillTreePhase.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *PlanetFesSkillTreePhaseAccessor) Raw() ([]PlanetFesSkillTreePhase, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []PlanetFesSkillTreePhase{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with PlanetFesSkillTreePhaseAccessor.LoadData to preload everything
func (a *PlanetFesSkillTreePhaseAccessor) GroupData() {
	a._dataPhase = map[float64]PlanetFesSkillTreePhase{}
	for _, d := range a._data {
		a._dataPhase[d.Phase] = d
	}
}

// ByPhase returns the PlanetFesSkillTreePhase uniquely identified by Phase
//
// Error is only non-nil if the source errors out
func (a *PlanetFesSkillTreePhaseAccessor) ByPhase(identifier float64) (PlanetFesSkillTreePhase, error) {
	if a._dataPhase == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return PlanetFesSkillTreePhase{}, err
			}
		}
		a.GroupData()
	}
	return a._dataPhase[identifier], nil
}
