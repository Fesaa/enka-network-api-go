package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type RogueMagicUnit struct {
	AttachRangeTypeList []string               `json:"AttachRangeTypeList"`
	EffectTypeList      []string               `json:"EffectTypeList"`
	ExtraEffectID       []json.Number          `json:"ExtraEffectID"`
	FuncType            string                 `json:"FuncType"`
	LimitRange          string                 `json:"LimitRange"`
	MagicUnitCategory   string                 `json:"MagicUnitCategory"`
	MagicUnitDesc       map[string]json.Number `json:"MagicUnitDesc"`
	MagicUnitID         json.Number            `json:"MagicUnitID"`
	MagicUnitLevel      json.Number            `json:"MagicUnitLevel"`
	MagicUnitMazeBuffID json.Number            `json:"MagicUnitMazeBuffID"`
	MagicUnitSimpleDesc map[string]json.Number `json:"MagicUnitSimpleDesc"`
	MagicUnitType       string                 `json:"MagicUnitType"`
	SpecialType         string                 `json:"SpecialType"`
	StyleType           string                 `json:"StyleType"`
	UnitBasicPower      map[string]json.Number `json:"UnitBasicPower"`
	UnlockID            json.Number            `json:"UnlockID"`
}
type RogueMagicUnitAccessor struct {
	_data []RogueMagicUnit
}

// LoadData retrieves the data. Must be called before RogueMagicUnit.GroupData
func (a *RogueMagicUnitAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueMagicUnit.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueMagicUnitAccessor) Raw() ([]RogueMagicUnit, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueMagicUnit{}, err
		}
	}
	return a._data, nil
}
