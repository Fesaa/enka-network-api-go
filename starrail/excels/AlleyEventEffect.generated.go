package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type AlleyEventEffect struct {
	EventEffectID   float64 `json:"EventEffectID"`
	EventEffectType string  `json:"EventEffectType"`
	Param1          float64 `json:"Param1"`
	Param2          float64 `json:"Param2"`
}
type AlleyEventEffectAccessor struct {
	_data              []AlleyEventEffect
	_dataEventEffectID map[float64]AlleyEventEffect
}

// LoadData retrieves the data. Must be called before AlleyEventEffect.GroupData
func (a *AlleyEventEffectAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/AlleyEventEffect.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *AlleyEventEffectAccessor) Raw() ([]AlleyEventEffect, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []AlleyEventEffect{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with AlleyEventEffectAccessor.LoadData to preload everything
func (a *AlleyEventEffectAccessor) GroupData() {
	a._dataEventEffectID = map[float64]AlleyEventEffect{}
	for _, d := range a._data {
		a._dataEventEffectID[d.EventEffectID] = d
	}
}

// ByEventEffectID returns the AlleyEventEffect uniquely identified by EventEffectID
//
// Error is only non-nil if the source errors out
func (a *AlleyEventEffectAccessor) ByEventEffectID(identifier float64) (AlleyEventEffect, error) {
	if a._dataEventEffectID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AlleyEventEffect{}, err
			}
		}
		a.GroupData()
	}
	return a._dataEventEffectID[identifier], nil
}
