package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type AvatarRelicRecommendLD struct {
	AvatarID             float64                              `json:"AvatarID"`
	PropertyList         []AvatarRelicRecommendLDPropertyList `json:"PropertyList"`
	PropertyList3        []string                             `json:"PropertyList3"`
	PropertyList4        []string                             `json:"PropertyList4"`
	PropertyList5        []string                             `json:"PropertyList5"`
	PropertyList6        []string                             `json:"PropertyList6"`
	ScoreRankList        []float64                            `json:"ScoreRankList"`
	Set2IDList           []float64                            `json:"Set2IDList"`
	Set4IDList           []float64                            `json:"Set4IDList"`
	SubAffixPropertyList []string                             `json:"SubAffixPropertyList"`
}
type AvatarRelicRecommendLDPropertyList struct {
	PropertyType string `json:"PropertyType"`
	RelicType    string `json:"RelicType"`
}
type AvatarRelicRecommendLDAccessor struct {
	_data         []AvatarRelicRecommendLD
	_dataAvatarID map[float64]AvatarRelicRecommendLD
}

// LoadData retrieves the data. Must be called before AvatarRelicRecommendLD.GroupData
func (a *AvatarRelicRecommendLDAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/AvatarRelicRecommendLD.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *AvatarRelicRecommendLDAccessor) Raw() ([]AvatarRelicRecommendLD, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []AvatarRelicRecommendLD{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with AvatarRelicRecommendLDAccessor.LoadData to preload everything
func (a *AvatarRelicRecommendLDAccessor) GroupData() {
	a._dataAvatarID = map[float64]AvatarRelicRecommendLD{}
	for _, d := range a._data {
		a._dataAvatarID[d.AvatarID] = d
	}
}

// ByAvatarID returns the AvatarRelicRecommendLD uniquely identified by AvatarID
//
// Error is only non-nil if the source errors out
func (a *AvatarRelicRecommendLDAccessor) ByAvatarID(identifier float64) (AvatarRelicRecommendLD, error) {
	if a._dataAvatarID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AvatarRelicRecommendLD{}, err
			}
		}
		a.GroupData()
	}
	return a._dataAvatarID[identifier], nil
}
