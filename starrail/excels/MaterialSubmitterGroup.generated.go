package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type MaterialSubmitterGroup struct {
	ActivityID      float64   `json:"ActivityID"`
	SubmitterIDList []float64 `json:"SubmitterIDList"`
	Type            string    `json:"Type"`
}
type MaterialSubmitterGroupAccessor struct {
	_data           []MaterialSubmitterGroup
	_dataActivityID map[float64]MaterialSubmitterGroup
	_dataType       map[string]MaterialSubmitterGroup
}

// LoadData retrieves the data. Must be called before MaterialSubmitterGroup.GroupData
func (a *MaterialSubmitterGroupAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MaterialSubmitterGroup.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MaterialSubmitterGroupAccessor) Raw() ([]MaterialSubmitterGroup, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MaterialSubmitterGroup{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MaterialSubmitterGroupAccessor.LoadData to preload everything
func (a *MaterialSubmitterGroupAccessor) GroupData() {
	for _, d := range a._data {
		a._dataActivityID[d.ActivityID] = d
		a._dataType[d.Type] = d
	}
}

// ByActivityID returns the MaterialSubmitterGroup uniquely identified by ActivityID
//
// Error is only non-nil if the source errors out
func (a *MaterialSubmitterGroupAccessor) ByActivityID(identifier float64) (MaterialSubmitterGroup, error) {
	if a._dataActivityID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MaterialSubmitterGroup{}, err
			}
		}
		a.GroupData()
	}
	return a._dataActivityID[identifier], nil
}

// ByType returns the MaterialSubmitterGroup uniquely identified by Type
//
// Error is only non-nil if the source errors out
func (a *MaterialSubmitterGroupAccessor) ByType(identifier string) (MaterialSubmitterGroup, error) {
	if a._dataType == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MaterialSubmitterGroup{}, err
			}
		}
		a.GroupData()
	}
	return a._dataType[identifier], nil
}
