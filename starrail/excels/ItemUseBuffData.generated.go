package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type ItemUseBuffData struct {
	ActivityCount            float64       `json:"ActivityCount"`
	ConsumeTag               []string      `json:"ConsumeTag"`
	ConsumeType              float64       `json:"ConsumeType"`
	IsCheckHP                bool          `json:"IsCheckHP"`
	IsShowItemDesc           bool          `json:"IsShowItemDesc"`
	MazeBuffID               float64       `json:"MazeBuffID"`
	MazeBuffID2              float64       `json:"MazeBuffID2"`
	MazeBuffParam            []interface{} `json:"MazeBuffParam"`
	MazeBuffParam2           []interface{} `json:"MazeBuffParam2"`
	PreviewHPRecoveryPercent float64       `json:"PreviewHPRecoveryPercent"`
	PreviewHPRecoveryValue   float64       `json:"PreviewHPRecoveryValue"`
	PreviewPowerPercent      float64       `json:"PreviewPowerPercent"`
	PreviewSkillPoint        float64       `json:"PreviewSkillPoint"`
	UseDataID                float64       `json:"UseDataID"`
	UseEffect                string        `json:"UseEffect"`
	UseMultipleMax           float64       `json:"UseMultipleMax"`
	UseTargetType            string        `json:"UseTargetType"`
}
type ItemUseBuffDataAccessor struct {
	_data           []ItemUseBuffData
	_dataMazeBuffID map[float64]ItemUseBuffData
	_dataUseDataID  map[float64]ItemUseBuffData
}

// LoadData retrieves the data. Must be called before ItemUseBuffData.GroupData
func (a *ItemUseBuffDataAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ItemUseBuffData.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ItemUseBuffDataAccessor) Raw() ([]ItemUseBuffData, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ItemUseBuffData{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ItemUseBuffDataAccessor.LoadData to preload everything
func (a *ItemUseBuffDataAccessor) GroupData() {
	a._dataMazeBuffID = map[float64]ItemUseBuffData{}
	a._dataUseDataID = map[float64]ItemUseBuffData{}
	for _, d := range a._data {
		a._dataMazeBuffID[d.MazeBuffID] = d
		a._dataUseDataID[d.UseDataID] = d
	}
}

// ByMazeBuffID returns the ItemUseBuffData uniquely identified by MazeBuffID
//
// Error is only non-nil if the source errors out
func (a *ItemUseBuffDataAccessor) ByMazeBuffID(identifier float64) (ItemUseBuffData, error) {
	if a._dataMazeBuffID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ItemUseBuffData{}, err
			}
		}
		a.GroupData()
	}
	return a._dataMazeBuffID[identifier], nil
}

// ByUseDataID returns the ItemUseBuffData uniquely identified by UseDataID
//
// Error is only non-nil if the source errors out
func (a *ItemUseBuffDataAccessor) ByUseDataID(identifier float64) (ItemUseBuffData, error) {
	if a._dataUseDataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ItemUseBuffData{}, err
			}
		}
		a.GroupData()
	}
	return a._dataUseDataID[identifier], nil
}
