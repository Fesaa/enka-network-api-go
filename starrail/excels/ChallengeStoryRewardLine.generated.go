package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type ChallengeStoryRewardLine struct {
	GroupID   float64 `json:"GroupID"`
	RewardID  float64 `json:"RewardID"`
	StarCount float64 `json:"StarCount"`
}
type ChallengeStoryRewardLineAccessor struct {
	_data         []ChallengeStoryRewardLine
	_dataRewardID map[float64]ChallengeStoryRewardLine
}

// LoadData retrieves the data. Must be called before ChallengeStoryRewardLine.GroupData
func (a *ChallengeStoryRewardLineAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ChallengeStoryRewardLine.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ChallengeStoryRewardLineAccessor) Raw() ([]ChallengeStoryRewardLine, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ChallengeStoryRewardLine{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ChallengeStoryRewardLineAccessor.LoadData to preload everything
func (a *ChallengeStoryRewardLineAccessor) GroupData() {
	a._dataRewardID = map[float64]ChallengeStoryRewardLine{}
	for _, d := range a._data {
		a._dataRewardID[d.RewardID] = d
	}
}

// ByRewardID returns the ChallengeStoryRewardLine uniquely identified by RewardID
//
// Error is only non-nil if the source errors out
func (a *ChallengeStoryRewardLineAccessor) ByRewardID(identifier float64) (ChallengeStoryRewardLine, error) {
	if a._dataRewardID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ChallengeStoryRewardLine{}, err
			}
		}
		a.GroupData()
	}
	return a._dataRewardID[identifier], nil
}
