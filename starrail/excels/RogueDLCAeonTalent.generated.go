package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type RogueDLCAeonTalent struct {
	AeonDimensionID          json.Number              `json:"AeonDimensionID"`
	AeonTalentID             json.Number              `json:"AeonTalentID"`
	EffectDesc               map[string]json.Number   `json:"EffectDesc"`
	EffectDescParamList      []map[string]json.Number `json:"EffectDescParamList"`
	EffectTitle              map[string]json.Number   `json:"EffectTitle"`
	GamePlayEffectList       []json.Number            `json:"GamePlayEffectList"`
	IsImportant              bool                     `json:"IsImportant"`
	TalentIcon               string                   `json:"TalentIcon"`
	UnlockAeonDimensionPoint json.Number              `json:"UnlockAeonDimensionPoint"`
}
type RogueDLCAeonTalentAccessor struct {
	_data []RogueDLCAeonTalent
}

// LoadData retrieves the data. Must be called before RogueDLCAeonTalent.GroupData
func (a *RogueDLCAeonTalentAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueDLCAeonTalent.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueDLCAeonTalentAccessor) Raw() ([]RogueDLCAeonTalent, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueDLCAeonTalent{}, err
		}
	}
	return a._data, nil
}
