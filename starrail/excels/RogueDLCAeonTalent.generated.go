package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type RogueDLCAeonTalent struct {
	AeonDimensionID          json.Number              `json:"AeonDimensionID"`
	AeonTalentID             json.Number              `json:"AeonTalentID"`
	EffectDesc               map[string]json.Number   `json:"EffectDesc"`
	EffectDescParamList      []map[string]json.Number `json:"EffectDescParamList"`
	EffectTitle              map[string]json.Number   `json:"EffectTitle"`
	GamePlayEffectList       []json.Number            `json:"GamePlayEffectList"`
	IsImportant              bool                     `json:"IsImportant"`
	TalentIcon               string                   `json:"TalentIcon"`
	UnlockAeonDimensionPoint json.Number              `json:"UnlockAeonDimensionPoint"`
}
type RogueDLCAeonTalentAccessor struct {
	_data             []RogueDLCAeonTalent
	_dataAeonTalentID map[json.Number]RogueDLCAeonTalent
}

// LoadData retrieves the data. Must be called before RogueDLCAeonTalent.GroupData
func (a *RogueDLCAeonTalentAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueDLCAeonTalent.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueDLCAeonTalentAccessor) Raw() ([]RogueDLCAeonTalent, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueDLCAeonTalent{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueDLCAeonTalentAccessor.LoadData to preload everything
func (a *RogueDLCAeonTalentAccessor) GroupData() {
	a._dataAeonTalentID = map[json.Number]RogueDLCAeonTalent{}
	for _, d := range a._data {
		a._dataAeonTalentID[d.AeonTalentID] = d
	}
}

// ByAeonTalentID returns the RogueDLCAeonTalent uniquely identified by AeonTalentID
//
// Error is only non-nil if the source errors out
func (a *RogueDLCAeonTalentAccessor) ByAeonTalentID(identifier json.Number) (RogueDLCAeonTalent, error) {
	if a._dataAeonTalentID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueDLCAeonTalent{}, err
			}
		}
		a.GroupData()
	}
	return a._dataAeonTalentID[identifier], nil
}
