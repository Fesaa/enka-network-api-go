package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type SwordTrainingEnding struct {
	EndingID         json.Number            `json:"EndingID"`
	QuestID          json.Number            `json:"QuestID"`
	StoryID          json.Number            `json:"StoryID"`
	StoryImage       string                 `json:"StoryImage"`
	StoryTitle       map[string]json.Number `json:"StoryTitle"`
	StoryUnlockImage string                 `json:"StoryUnlockImage"`
	UnlockDesc       map[string]json.Number `json:"UnlockDesc"`
}
type SwordTrainingEndingAccessor struct {
	_data                 []SwordTrainingEnding
	_dataStoryImage       map[string]SwordTrainingEnding
	_dataStoryUnlockImage map[string]SwordTrainingEnding
}

// LoadData retrieves the data. Must be called before SwordTrainingEnding.GroupData
func (a *SwordTrainingEndingAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/SwordTrainingEnding.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *SwordTrainingEndingAccessor) Raw() ([]SwordTrainingEnding, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []SwordTrainingEnding{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with SwordTrainingEndingAccessor.LoadData to preload everything
func (a *SwordTrainingEndingAccessor) GroupData() {
	a._dataStoryImage = map[string]SwordTrainingEnding{}
	a._dataStoryUnlockImage = map[string]SwordTrainingEnding{}
	for _, d := range a._data {
		a._dataStoryImage[d.StoryImage] = d
		a._dataStoryUnlockImage[d.StoryUnlockImage] = d
	}
}

// ByStoryImage returns the SwordTrainingEnding uniquely identified by StoryImage
//
// Error is only non-nil if the source errors out
func (a *SwordTrainingEndingAccessor) ByStoryImage(identifier string) (SwordTrainingEnding, error) {
	if a._dataStoryImage == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return SwordTrainingEnding{}, err
			}
		}
		a.GroupData()
	}
	return a._dataStoryImage[identifier], nil
}

// ByStoryUnlockImage returns the SwordTrainingEnding uniquely identified by StoryUnlockImage
//
// Error is only non-nil if the source errors out
func (a *SwordTrainingEndingAccessor) ByStoryUnlockImage(identifier string) (SwordTrainingEnding, error) {
	if a._dataStoryUnlockImage == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return SwordTrainingEnding{}, err
			}
		}
		a.GroupData()
	}
	return a._dataStoryUnlockImage[identifier], nil
}
