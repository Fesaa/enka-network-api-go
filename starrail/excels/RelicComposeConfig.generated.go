package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type RelicComposeConfig struct {
	CoinCost          json.Number              `json:"CoinCost"`
	ID                json.Number              `json:"ID"`
	ItemID            json.Number              `json:"ItemID"`
	MaterialCost      []map[string]json.Number `json:"MaterialCost"`
	Order             json.Number              `json:"Order"`
	Type              json.Number              `json:"Type"`
	WorldLevelRequire json.Number              `json:"WorldLevelRequire"`
}
type RelicComposeConfigAccessor struct {
	_data       []RelicComposeConfig
	_dataID     map[json.Number]RelicComposeConfig
	_dataItemID map[json.Number]RelicComposeConfig
	_dataOrder  map[json.Number]RelicComposeConfig
}

// LoadData retrieves the data. Must be called before RelicComposeConfig.GroupData
func (a *RelicComposeConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RelicComposeConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RelicComposeConfigAccessor) Raw() ([]RelicComposeConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RelicComposeConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RelicComposeConfigAccessor.LoadData to preload everything
func (a *RelicComposeConfigAccessor) GroupData() {
	a._dataID = map[json.Number]RelicComposeConfig{}
	a._dataItemID = map[json.Number]RelicComposeConfig{}
	a._dataOrder = map[json.Number]RelicComposeConfig{}
	for _, d := range a._data {
		a._dataID[d.ID] = d
		a._dataItemID[d.ItemID] = d
		a._dataOrder[d.Order] = d
	}
}

// ByID returns the RelicComposeConfig uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *RelicComposeConfigAccessor) ByID(identifier json.Number) (RelicComposeConfig, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RelicComposeConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}

// ByItemID returns the RelicComposeConfig uniquely identified by ItemID
//
// Error is only non-nil if the source errors out
func (a *RelicComposeConfigAccessor) ByItemID(identifier json.Number) (RelicComposeConfig, error) {
	if a._dataItemID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RelicComposeConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataItemID[identifier], nil
}

// ByOrder returns the RelicComposeConfig uniquely identified by Order
//
// Error is only non-nil if the source errors out
func (a *RelicComposeConfigAccessor) ByOrder(identifier json.Number) (RelicComposeConfig, error) {
	if a._dataOrder == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RelicComposeConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataOrder[identifier], nil
}
