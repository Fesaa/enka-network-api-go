package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type RelicComposeConfig struct {
	CoinCost          float64                          `json:"CoinCost"`
	ID                float64                          `json:"ID"`
	ItemID            float64                          `json:"ItemID"`
	MaterialCost      []RelicComposeConfigMaterialCost `json:"MaterialCost"`
	Order             float64                          `json:"Order"`
	Type              float64                          `json:"Type"`
	WorldLevelRequire float64                          `json:"WorldLevelRequire"`
}
type RelicComposeConfigMaterialCost struct {
	ItemID  float64 `json:"ItemID"`
	ItemNum float64 `json:"ItemNum"`
}
type RelicComposeConfigAccessor struct {
	_data       []RelicComposeConfig
	_dataOrder  map[float64]RelicComposeConfig
	_dataID     map[float64]RelicComposeConfig
	_dataItemID map[float64]RelicComposeConfig
}

// LoadData retrieves the data. Must be called before RelicComposeConfig.GroupData
func (a *RelicComposeConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RelicComposeConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RelicComposeConfigAccessor) Raw() ([]RelicComposeConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RelicComposeConfig{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RelicComposeConfigAccessor.LoadData to preload everything
func (a *RelicComposeConfigAccessor) GroupData() {
	for _, d := range a._data {
		a._dataOrder[d.Order] = d
		a._dataID[d.ID] = d
		a._dataItemID[d.ItemID] = d
	}
}

// ByOrder returns the RelicComposeConfig uniquely identified by Order
//
// Error is only non-nil if the source errors out
func (a *RelicComposeConfigAccessor) ByOrder(identifier float64) (RelicComposeConfig, error) {
	if a._dataOrder == nil {
		err := a.LoadData()
		if err != nil {
			return RelicComposeConfig{}, err
		}
		a.GroupData()
	}
	return a._dataOrder[identifier], nil
}

// ByID returns the RelicComposeConfig uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *RelicComposeConfigAccessor) ByID(identifier float64) (RelicComposeConfig, error) {
	if a._dataID == nil {
		err := a.LoadData()
		if err != nil {
			return RelicComposeConfig{}, err
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}

// ByItemID returns the RelicComposeConfig uniquely identified by ItemID
//
// Error is only non-nil if the source errors out
func (a *RelicComposeConfigAccessor) ByItemID(identifier float64) (RelicComposeConfig, error) {
	if a._dataItemID == nil {
		err := a.LoadData()
		if err != nil {
			return RelicComposeConfig{}, err
		}
		a.GroupData()
	}
	return a._dataItemID[identifier], nil
}
