package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type ClockParkBuffType struct {
	BuffDisplay bool   `json:"BuffDisplay"`
	BuffJoint   bool   `json:"BuffJoint"`
	BuffRelease bool   `json:"BuffRelease"`
	BuffType    string `json:"BuffType"`
	IconPath    string `json:"IconPath"`
}
type ClockParkBuffTypeAccessor struct {
	_data         []ClockParkBuffType
	_dataBuffType map[string]ClockParkBuffType
}

// LoadData retrieves the data. Must be called before ClockParkBuffType.GroupData
func (a *ClockParkBuffTypeAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ClockParkBuffType.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ClockParkBuffTypeAccessor) Raw() ([]ClockParkBuffType, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ClockParkBuffType{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ClockParkBuffTypeAccessor.LoadData to preload everything
func (a *ClockParkBuffTypeAccessor) GroupData() {
	for _, d := range a._data {
		a._dataBuffType[d.BuffType] = d
	}
}

// ByBuffType returns the ClockParkBuffType uniquely identified by BuffType
//
// Error is only non-nil if the source errors out
func (a *ClockParkBuffTypeAccessor) ByBuffType(identifier string) (ClockParkBuffType, error) {
	if a._dataBuffType == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ClockParkBuffType{}, err
			}
		}
		a.GroupData()
	}
	return a._dataBuffType[identifier], nil
}
