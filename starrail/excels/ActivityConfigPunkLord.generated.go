package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type ActivityConfigPunkLord struct {
	AssistPoint   float64   `json:"AssistPoint"`
	ExistTime     float64   `json:"ExistTime"`
	GroupType     string    `json:"GroupType"`
	ID            float64   `json:"ID"`
	KillPoint     float64   `json:"KillPoint"`
	ManikinConfig string    `json:"ManikinConfig"`
	MonsterBuff   hash.Hash `json:"MonsterBuff"`
	MonsterHP     float64   `json:"MonsterHP"`
	MonsterLevel  float64   `json:"MonsterLevel"`
	MonsterPic    string    `json:"MonsterPic"`
	MonsterRare   string    `json:"MonsterRare"`
	PluralHP      float64   `json:"PluralHP"`
	RaidID        float64   `json:"RaidID"`
	ShowMonster   string    `json:"ShowMonster"`
	SummonPoint   float64   `json:"SummonPoint"`
	TurnLimit     float64   `json:"TurnLimit"`
	WorldLevel    float64   `json:"WorldLevel"`
}
type ActivityConfigPunkLordAccessor struct {
	_data []ActivityConfigPunkLord
}

// LoadData retrieves the data. Must be called before ActivityConfigPunkLord.GroupData
func (a *ActivityConfigPunkLordAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ActivityConfigPunkLord.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ActivityConfigPunkLordAccessor) Raw() ([]ActivityConfigPunkLord, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ActivityConfigPunkLord{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}
