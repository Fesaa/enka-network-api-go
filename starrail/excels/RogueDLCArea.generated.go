package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type RogueDLCArea struct {
	AreaGroupID               string                     `json:"AreaGroupID"`
	AreaID                    float64                    `json:"AreaID"`
	AreaNameID                hash.Hash                  `json:"AreaNameID"`
	AreaScoreMap              []RogueDLCAreaAreaScoreMap `json:"AreaScoreMap"`
	Difficulty                string                     `json:"Difficulty"`
	DifficultyID              []float64                  `json:"DifficultyID"`
	DisplayMonsterMap         map[string]float64         `json:"DisplayMonsterMap"`
	FirstReward               float64                    `json:"FirstReward"`
	IsHard                    bool                       `json:"IsHard"`
	LayerIDList               []float64                  `json:"LayerIDList"`
	MonsterEliteDropDisplayID float64                    `json:"MonsterEliteDropDisplayID"`
	RecommendLevel            float64                    `json:"RecommendLevel"`
	RecommendNature           []string                   `json:"RecommendNature"`
	SubType                   string                     `json:"SubType"`
	UnlockID                  float64                    `json:"UnlockID"`
}
type RogueDLCAreaAreaScoreMap struct {
	HIAHLOPKEKH float64 `json:"HIAHLOPKEKH"`
	JHDINJJBHEG float64 `json:"JHDINJJBHEG"`
	KMFFKFNJNJI float64 `json:"KMFFKFNJNJI"`
}
type RogueDLCAreaAccessor struct {
	_data            []RogueDLCArea
	_dataFirstReward map[float64]RogueDLCArea
	_dataAreaID      map[float64]RogueDLCArea
}

// LoadData retrieves the data. Must be called before RogueDLCArea.GroupData
func (a *RogueDLCAreaAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueDLCArea.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueDLCAreaAccessor) Raw() ([]RogueDLCArea, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueDLCArea{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueDLCAreaAccessor.LoadData to preload everything
func (a *RogueDLCAreaAccessor) GroupData() {
	for _, d := range a._data {
		a._dataFirstReward[d.FirstReward] = d
		a._dataAreaID[d.AreaID] = d
	}
}

// ByFirstReward returns the RogueDLCArea uniquely identified by FirstReward
//
// Error is only non-nil if the source errors out
func (a *RogueDLCAreaAccessor) ByFirstReward(identifier float64) (RogueDLCArea, error) {
	if a._dataFirstReward == nil {
		err := a.LoadData()
		if err != nil {
			return RogueDLCArea{}, err
		}
		a.GroupData()
	}
	return a._dataFirstReward[identifier], nil
}

// ByAreaID returns the RogueDLCArea uniquely identified by AreaID
//
// Error is only non-nil if the source errors out
func (a *RogueDLCAreaAccessor) ByAreaID(identifier float64) (RogueDLCArea, error) {
	if a._dataAreaID == nil {
		err := a.LoadData()
		if err != nil {
			return RogueDLCArea{}, err
		}
		a.GroupData()
	}
	return a._dataAreaID[identifier], nil
}
