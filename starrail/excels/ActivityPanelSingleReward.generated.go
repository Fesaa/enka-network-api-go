package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type ActivityPanelSingleReward struct {
	ActivityID json.Number   `json:"ActivityID"`
	AvatarID   json.Number   `json:"AvatarID"`
	GotoID     json.Number   `json:"GotoID"`
	QuestList  []json.Number `json:"QuestList"`
}
type ActivityPanelSingleRewardAccessor struct {
	_data           []ActivityPanelSingleReward
	_dataActivityID map[json.Number]ActivityPanelSingleReward
	_dataAvatarID   map[json.Number]ActivityPanelSingleReward
}

// LoadData retrieves the data. Must be called before ActivityPanelSingleReward.GroupData
func (a *ActivityPanelSingleRewardAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ActivityPanelSingleReward.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ActivityPanelSingleRewardAccessor) Raw() ([]ActivityPanelSingleReward, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ActivityPanelSingleReward{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ActivityPanelSingleRewardAccessor.LoadData to preload everything
func (a *ActivityPanelSingleRewardAccessor) GroupData() {
	a._dataActivityID = map[json.Number]ActivityPanelSingleReward{}
	a._dataAvatarID = map[json.Number]ActivityPanelSingleReward{}
	for _, d := range a._data {
		a._dataActivityID[d.ActivityID] = d
		a._dataAvatarID[d.AvatarID] = d
	}
}

// ByActivityID returns the ActivityPanelSingleReward uniquely identified by ActivityID
//
// Error is only non-nil if the source errors out
func (a *ActivityPanelSingleRewardAccessor) ByActivityID(identifier json.Number) (ActivityPanelSingleReward, error) {
	if a._dataActivityID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityPanelSingleReward{}, err
			}
		}
		a.GroupData()
	}
	return a._dataActivityID[identifier], nil
}

// ByAvatarID returns the ActivityPanelSingleReward uniquely identified by AvatarID
//
// Error is only non-nil if the source errors out
func (a *ActivityPanelSingleRewardAccessor) ByAvatarID(identifier json.Number) (ActivityPanelSingleReward, error) {
	if a._dataAvatarID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityPanelSingleReward{}, err
			}
		}
		a.GroupData()
	}
	return a._dataAvatarID[identifier], nil
}
