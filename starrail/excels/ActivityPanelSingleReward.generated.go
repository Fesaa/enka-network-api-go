package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type ActivityPanelSingleReward struct {
	ActivityID float64   `json:"ActivityID"`
	AvatarID   float64   `json:"AvatarID"`
	GotoID     float64   `json:"GotoID"`
	QuestList  []float64 `json:"QuestList"`
}
type ActivityPanelSingleRewardAccessor struct {
	_data           []ActivityPanelSingleReward
	_dataAvatarID   map[float64]ActivityPanelSingleReward
	_dataActivityID map[float64]ActivityPanelSingleReward
}

// LoadData retrieves the data. Must be called before ActivityPanelSingleReward.GroupData
func (a *ActivityPanelSingleRewardAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ActivityPanelSingleReward.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ActivityPanelSingleRewardAccessor) Raw() ([]ActivityPanelSingleReward, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ActivityPanelSingleReward{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ActivityPanelSingleRewardAccessor.LoadData to preload everything
func (a *ActivityPanelSingleRewardAccessor) GroupData() {
	for _, d := range a._data {
		a._dataAvatarID[d.AvatarID] = d
		a._dataActivityID[d.ActivityID] = d
	}
}

// ByAvatarID returns the ActivityPanelSingleReward uniquely identified by AvatarID
//
// Error is only non-nil if the source errors out
func (a *ActivityPanelSingleRewardAccessor) ByAvatarID(identifier float64) (ActivityPanelSingleReward, error) {
	if a._dataAvatarID == nil {
		err := a.LoadData()
		if err != nil {
			return ActivityPanelSingleReward{}, err
		}
		a.GroupData()
	}
	return a._dataAvatarID[identifier], nil
}

// ByActivityID returns the ActivityPanelSingleReward uniquely identified by ActivityID
//
// Error is only non-nil if the source errors out
func (a *ActivityPanelSingleRewardAccessor) ByActivityID(identifier float64) (ActivityPanelSingleReward, error) {
	if a._dataActivityID == nil {
		err := a.LoadData()
		if err != nil {
			return ActivityPanelSingleReward{}, err
		}
		a.GroupData()
	}
	return a._dataActivityID[identifier], nil
}
