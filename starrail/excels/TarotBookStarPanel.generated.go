package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type TarotBookStarPanel struct {
	LockedImgPath string      `json:"LockedImgPath"`
	Position      json.Number `json:"Position"`
}
type TarotBookStarPanelAccessor struct {
	_data         []TarotBookStarPanel
	_dataPosition map[json.Number]TarotBookStarPanel
}

// LoadData retrieves the data. Must be called before TarotBookStarPanel.GroupData
func (a *TarotBookStarPanelAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/TarotBookStarPanel.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *TarotBookStarPanelAccessor) Raw() ([]TarotBookStarPanel, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []TarotBookStarPanel{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with TarotBookStarPanelAccessor.LoadData to preload everything
func (a *TarotBookStarPanelAccessor) GroupData() {
	a._dataPosition = map[json.Number]TarotBookStarPanel{}
	for _, d := range a._data {
		a._dataPosition[d.Position] = d
	}
}

// ByPosition returns the TarotBookStarPanel uniquely identified by Position
//
// Error is only non-nil if the source errors out
func (a *TarotBookStarPanelAccessor) ByPosition(identifier json.Number) (TarotBookStarPanel, error) {
	if a._dataPosition == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return TarotBookStarPanel{}, err
			}
		}
		a.GroupData()
	}
	return a._dataPosition[identifier], nil
}
