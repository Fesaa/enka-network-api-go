package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type RogueDLCBlockType struct {
	BlockIntroID             json.Number            `json:"BlockIntroID"`
	BlockTypeChessBoardColor string                 `json:"BlockTypeChessBoardColor"`
	BlockTypeChessBoardIcon  string                 `json:"BlockTypeChessBoardIcon"`
	BlockTypeID              json.Number            `json:"BlockTypeID"`
	BlockTypeIcon            string                 `json:"BlockTypeIcon"`
	BlockTypeNameID          map[string]json.Number `json:"BlockTypeNameID"`
}
type RogueDLCBlockTypeAccessor struct {
	_data                        []RogueDLCBlockType
	_dataBlockTypeChessBoardIcon map[string]RogueDLCBlockType
	_dataBlockTypeIcon           map[string]RogueDLCBlockType
}

// LoadData retrieves the data. Must be called before RogueDLCBlockType.GroupData
func (a *RogueDLCBlockTypeAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueDLCBlockType.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueDLCBlockTypeAccessor) Raw() ([]RogueDLCBlockType, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueDLCBlockType{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueDLCBlockTypeAccessor.LoadData to preload everything
func (a *RogueDLCBlockTypeAccessor) GroupData() {
	a._dataBlockTypeChessBoardIcon = map[string]RogueDLCBlockType{}
	a._dataBlockTypeIcon = map[string]RogueDLCBlockType{}
	for _, d := range a._data {
		a._dataBlockTypeChessBoardIcon[d.BlockTypeChessBoardIcon] = d
		a._dataBlockTypeIcon[d.BlockTypeIcon] = d
	}
}

// ByBlockTypeChessBoardIcon returns the RogueDLCBlockType uniquely identified by BlockTypeChessBoardIcon
//
// Error is only non-nil if the source errors out
func (a *RogueDLCBlockTypeAccessor) ByBlockTypeChessBoardIcon(identifier string) (RogueDLCBlockType, error) {
	if a._dataBlockTypeChessBoardIcon == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueDLCBlockType{}, err
			}
		}
		a.GroupData()
	}
	return a._dataBlockTypeChessBoardIcon[identifier], nil
}

// ByBlockTypeIcon returns the RogueDLCBlockType uniquely identified by BlockTypeIcon
//
// Error is only non-nil if the source errors out
func (a *RogueDLCBlockTypeAccessor) ByBlockTypeIcon(identifier string) (RogueDLCBlockType, error) {
	if a._dataBlockTypeIcon == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueDLCBlockType{}, err
			}
		}
		a.GroupData()
	}
	return a._dataBlockTypeIcon[identifier], nil
}
