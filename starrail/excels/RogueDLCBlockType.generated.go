package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type RogueDLCBlockType struct {
	BlockIntroID             float64   `json:"BlockIntroID"`
	BlockTypeChessBoardColor string    `json:"BlockTypeChessBoardColor"`
	BlockTypeChessBoardIcon  string    `json:"BlockTypeChessBoardIcon"`
	BlockTypeID              float64   `json:"BlockTypeID"`
	BlockTypeIcon            string    `json:"BlockTypeIcon"`
	BlockTypeNameID          hash.Hash `json:"BlockTypeNameID"`
}
type RogueDLCBlockTypeAccessor struct {
	_data                        []RogueDLCBlockType
	_dataBlockTypeIcon           map[string]RogueDLCBlockType
	_dataBlockTypeChessBoardIcon map[string]RogueDLCBlockType
	_dataBlockTypeID             map[float64]RogueDLCBlockType
}

// LoadData retrieves the data. Must be called before RogueDLCBlockType.GroupData
func (a *RogueDLCBlockTypeAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueDLCBlockType.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueDLCBlockTypeAccessor) Raw() ([]RogueDLCBlockType, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueDLCBlockType{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueDLCBlockTypeAccessor.LoadData to preload everything
func (a *RogueDLCBlockTypeAccessor) GroupData() {
	for _, d := range a._data {
		a._dataBlockTypeIcon[d.BlockTypeIcon] = d
		a._dataBlockTypeChessBoardIcon[d.BlockTypeChessBoardIcon] = d
		a._dataBlockTypeID[d.BlockTypeID] = d
	}
}

// ByBlockTypeIcon returns the RogueDLCBlockType uniquely identified by BlockTypeIcon
//
// Error is only non-nil if the source errors out
func (a *RogueDLCBlockTypeAccessor) ByBlockTypeIcon(identifier string) (RogueDLCBlockType, error) {
	if a._dataBlockTypeIcon == nil {
		err := a.LoadData()
		if err != nil {
			return RogueDLCBlockType{}, err
		}
		a.GroupData()
	}
	return a._dataBlockTypeIcon[identifier], nil
}

// ByBlockTypeChessBoardIcon returns the RogueDLCBlockType uniquely identified by BlockTypeChessBoardIcon
//
// Error is only non-nil if the source errors out
func (a *RogueDLCBlockTypeAccessor) ByBlockTypeChessBoardIcon(identifier string) (RogueDLCBlockType, error) {
	if a._dataBlockTypeChessBoardIcon == nil {
		err := a.LoadData()
		if err != nil {
			return RogueDLCBlockType{}, err
		}
		a.GroupData()
	}
	return a._dataBlockTypeChessBoardIcon[identifier], nil
}

// ByBlockTypeID returns the RogueDLCBlockType uniquely identified by BlockTypeID
//
// Error is only non-nil if the source errors out
func (a *RogueDLCBlockTypeAccessor) ByBlockTypeID(identifier float64) (RogueDLCBlockType, error) {
	if a._dataBlockTypeID == nil {
		err := a.LoadData()
		if err != nil {
			return RogueDLCBlockType{}, err
		}
		a.GroupData()
	}
	return a._dataBlockTypeID[identifier], nil
}
