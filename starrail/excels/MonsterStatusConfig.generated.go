package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type MonsterStatusConfig struct {
	CanDispel              bool          `json:"CanDispel"`
	ModifierName           string        `json:"ModifierName"`
	ReadParamList          []string      `json:"ReadParamList"`
	StatusDesc             hash.Hash     `json:"StatusDesc"`
	StatusEffect           hash.Hash     `json:"StatusEffect"`
	StatusID               float64       `json:"StatusID"`
	StatusIconPath         string        `json:"StatusIconPath"`
	StatusIconPathHighSize string        `json:"StatusIconPathHighSize"`
	StatusName             hash.Hash     `json:"StatusName"`
	StatusType             string        `json:"StatusType"`
	TagList                []interface{} `json:"TagList"`
}
type MonsterStatusConfigAccessor struct {
	_data             []MonsterStatusConfig
	_dataModifierName map[string]MonsterStatusConfig
	_dataStatusID     map[float64]MonsterStatusConfig
}

// LoadData retrieves the data. Must be called before MonsterStatusConfig.GroupData
func (a *MonsterStatusConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MonsterStatusConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MonsterStatusConfigAccessor) Raw() ([]MonsterStatusConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MonsterStatusConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MonsterStatusConfigAccessor.LoadData to preload everything
func (a *MonsterStatusConfigAccessor) GroupData() {
	a._dataModifierName = map[string]MonsterStatusConfig{}
	a._dataStatusID = map[float64]MonsterStatusConfig{}
	for _, d := range a._data {
		a._dataModifierName[d.ModifierName] = d
		a._dataStatusID[d.StatusID] = d
	}
}

// ByModifierName returns the MonsterStatusConfig uniquely identified by ModifierName
//
// Error is only non-nil if the source errors out
func (a *MonsterStatusConfigAccessor) ByModifierName(identifier string) (MonsterStatusConfig, error) {
	if a._dataModifierName == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MonsterStatusConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataModifierName[identifier], nil
}

// ByStatusID returns the MonsterStatusConfig uniquely identified by StatusID
//
// Error is only non-nil if the source errors out
func (a *MonsterStatusConfigAccessor) ByStatusID(identifier float64) (MonsterStatusConfig, error) {
	if a._dataStatusID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MonsterStatusConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataStatusID[identifier], nil
}
