package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type CityShopConfig struct {
	HintOverNum       json.Number            `json:"HintOverNum"`
	ItemID            json.Number            `json:"ItemID"`
	MaxLevel          json.Number            `json:"MaxLevel"`
	Name              map[string]json.Number `json:"Name"`
	RewardListGroupID json.Number            `json:"RewardListGroupID"`
	ShopID            json.Number            `json:"ShopID"`
	WorldID           json.Number            `json:"WorldID"`
	WorldImgPath      string                 `json:"WorldImgPath"`
}
type CityShopConfigAccessor struct {
	_data             []CityShopConfig
	_dataWorldImgPath map[string]CityShopConfig
}

// LoadData retrieves the data. Must be called before CityShopConfig.GroupData
func (a *CityShopConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/CityShopConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *CityShopConfigAccessor) Raw() ([]CityShopConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []CityShopConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with CityShopConfigAccessor.LoadData to preload everything
func (a *CityShopConfigAccessor) GroupData() {
	a._dataWorldImgPath = map[string]CityShopConfig{}
	for _, d := range a._data {
		a._dataWorldImgPath[d.WorldImgPath] = d
	}
}

// ByWorldImgPath returns the CityShopConfig uniquely identified by WorldImgPath
//
// Error is only non-nil if the source errors out
func (a *CityShopConfigAccessor) ByWorldImgPath(identifier string) (CityShopConfig, error) {
	if a._dataWorldImgPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return CityShopConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataWorldImgPath[identifier], nil
}
