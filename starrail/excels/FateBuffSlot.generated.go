package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type FateBuffSlot struct {
	AEKENNFCFHD float64 `json:"AEKENNFCFHD"`
	BEOPPBJEIAC float64 `json:"BEOPPBJEIAC"`
	EEDKGBONENG float64 `json:"EEDKGBONENG"`
	FJLEBEEHAHF string  `json:"FJLEBEEHAHF"`
	GOBGCIDEIAL float64 `json:"GOBGCIDEIAL"`
}
type FateBuffSlotAccessor struct {
	_data            []FateBuffSlot
	_dataAEKENNFCFHD map[float64]FateBuffSlot
}

// LoadData retrieves the data. Must be called before FateBuffSlot.GroupData
func (a *FateBuffSlotAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/FateBuffSlot.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *FateBuffSlotAccessor) Raw() ([]FateBuffSlot, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []FateBuffSlot{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with FateBuffSlotAccessor.LoadData to preload everything
func (a *FateBuffSlotAccessor) GroupData() {
	a._dataAEKENNFCFHD = map[float64]FateBuffSlot{}
	for _, d := range a._data {
		a._dataAEKENNFCFHD[d.AEKENNFCFHD] = d
	}
}

// ByAEKENNFCFHD returns the FateBuffSlot uniquely identified by AEKENNFCFHD
//
// Error is only non-nil if the source errors out
func (a *FateBuffSlotAccessor) ByAEKENNFCFHD(identifier float64) (FateBuffSlot, error) {
	if a._dataAEKENNFCFHD == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FateBuffSlot{}, err
			}
		}
		a.GroupData()
	}
	return a._dataAEKENNFCFHD[identifier], nil
}
