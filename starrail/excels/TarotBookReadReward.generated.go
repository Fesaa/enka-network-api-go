package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type TarotBookReadReward struct {
	ID     float64 `json:"ID"`
	Number float64 `json:"Number"`
	Quest  float64 `json:"Quest"`
}
type TarotBookReadRewardAccessor struct {
	_data       []TarotBookReadReward
	_dataID     map[float64]TarotBookReadReward
	_dataNumber map[float64]TarotBookReadReward
	_dataQuest  map[float64]TarotBookReadReward
}

// LoadData retrieves the data. Must be called before TarotBookReadReward.GroupData
func (a *TarotBookReadRewardAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/TarotBookReadReward.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *TarotBookReadRewardAccessor) Raw() ([]TarotBookReadReward, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []TarotBookReadReward{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with TarotBookReadRewardAccessor.LoadData to preload everything
func (a *TarotBookReadRewardAccessor) GroupData() {
	a._dataID = map[float64]TarotBookReadReward{}
	a._dataNumber = map[float64]TarotBookReadReward{}
	a._dataQuest = map[float64]TarotBookReadReward{}
	for _, d := range a._data {
		a._dataID[d.ID] = d
		a._dataNumber[d.Number] = d
		a._dataQuest[d.Quest] = d
	}
}

// ByID returns the TarotBookReadReward uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *TarotBookReadRewardAccessor) ByID(identifier float64) (TarotBookReadReward, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return TarotBookReadReward{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}

// ByNumber returns the TarotBookReadReward uniquely identified by Number
//
// Error is only non-nil if the source errors out
func (a *TarotBookReadRewardAccessor) ByNumber(identifier float64) (TarotBookReadReward, error) {
	if a._dataNumber == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return TarotBookReadReward{}, err
			}
		}
		a.GroupData()
	}
	return a._dataNumber[identifier], nil
}

// ByQuest returns the TarotBookReadReward uniquely identified by Quest
//
// Error is only non-nil if the source errors out
func (a *TarotBookReadRewardAccessor) ByQuest(identifier float64) (TarotBookReadReward, error) {
	if a._dataQuest == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return TarotBookReadReward{}, err
			}
		}
		a.GroupData()
	}
	return a._dataQuest[identifier], nil
}
