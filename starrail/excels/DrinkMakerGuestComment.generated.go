package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type DrinkMakerGuestComment struct {
	CommentContent       hash.Hash `json:"CommentContent"`
	CommentID            float64   `json:"CommentID"`
	GuestID              float64   `json:"GuestID"`
	IconPath             string    `json:"IconPath"`
	SatisfyTriggerType   string    `json:"SatisfyTriggerType"`
	TriggerTypeParamList []float64 `json:"TriggerTypeParamList"`
	Type                 string    `json:"Type"`
	Weight               float64   `json:"Weight"`
}
type DrinkMakerGuestCommentAccessor struct {
	_data          []DrinkMakerGuestComment
	_dataCommentID map[float64]DrinkMakerGuestComment
}

// LoadData retrieves the data. Must be called before DrinkMakerGuestComment.GroupData
func (a *DrinkMakerGuestCommentAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/DrinkMakerGuestComment.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *DrinkMakerGuestCommentAccessor) Raw() ([]DrinkMakerGuestComment, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []DrinkMakerGuestComment{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with DrinkMakerGuestCommentAccessor.LoadData to preload everything
func (a *DrinkMakerGuestCommentAccessor) GroupData() {
	a._dataCommentID = map[float64]DrinkMakerGuestComment{}
	for _, d := range a._data {
		a._dataCommentID[d.CommentID] = d
	}
}

// ByCommentID returns the DrinkMakerGuestComment uniquely identified by CommentID
//
// Error is only non-nil if the source errors out
func (a *DrinkMakerGuestCommentAccessor) ByCommentID(identifier float64) (DrinkMakerGuestComment, error) {
	if a._dataCommentID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return DrinkMakerGuestComment{}, err
			}
		}
		a.GroupData()
	}
	return a._dataCommentID[identifier], nil
}
