package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type PamPlaceInfo struct {
	PamActionList []string `json:"PamActionList"`
	PamPlaceType  string   `json:"PamPlaceType"`
}
type PamPlaceInfoAccessor struct {
	_data             []PamPlaceInfo
	_dataPamPlaceType map[string]PamPlaceInfo
}

// LoadData retrieves the data. Must be called before PamPlaceInfo.GroupData
func (a *PamPlaceInfoAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/PamPlaceInfo.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *PamPlaceInfoAccessor) Raw() ([]PamPlaceInfo, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []PamPlaceInfo{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with PamPlaceInfoAccessor.LoadData to preload everything
func (a *PamPlaceInfoAccessor) GroupData() {
	a._dataPamPlaceType = map[string]PamPlaceInfo{}
	for _, d := range a._data {
		a._dataPamPlaceType[d.PamPlaceType] = d
	}
}

// ByPamPlaceType returns the PamPlaceInfo uniquely identified by PamPlaceType
//
// Error is only non-nil if the source errors out
func (a *PamPlaceInfoAccessor) ByPamPlaceType(identifier string) (PamPlaceInfo, error) {
	if a._dataPamPlaceType == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return PamPlaceInfo{}, err
			}
		}
		a.GroupData()
	}
	return a._dataPamPlaceType[identifier], nil
}
