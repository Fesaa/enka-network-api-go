package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type PlanetFesEvent struct {
	FailRecurCD     float64   `json:"FailRecurCD"`
	ID              string    `json:"ID"`
	InitialAppearCD float64   `json:"InitialAppearCD"`
	RecurCD         float64   `json:"RecurCD"`
	ReenterAppearCD float64   `json:"ReenterAppearCD"`
	StayInterval    float64   `json:"StayInterval"`
	UnlockIDList    []float64 `json:"UnlockIDList"`
}
type PlanetFesEventAccessor struct {
	_data                []PlanetFesEvent
	_dataID              map[string]PlanetFesEvent
	_dataInitialAppearCD map[float64]PlanetFesEvent
}

// LoadData retrieves the data. Must be called before PlanetFesEvent.GroupData
func (a *PlanetFesEventAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/PlanetFesEvent.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *PlanetFesEventAccessor) Raw() ([]PlanetFesEvent, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []PlanetFesEvent{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with PlanetFesEventAccessor.LoadData to preload everything
func (a *PlanetFesEventAccessor) GroupData() {
	for _, d := range a._data {
		a._dataID[d.ID] = d
		a._dataInitialAppearCD[d.InitialAppearCD] = d
	}
}

// ByID returns the PlanetFesEvent uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *PlanetFesEventAccessor) ByID(identifier string) (PlanetFesEvent, error) {
	if a._dataID == nil {
		err := a.LoadData()
		if err != nil {
			return PlanetFesEvent{}, err
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}

// ByInitialAppearCD returns the PlanetFesEvent uniquely identified by InitialAppearCD
//
// Error is only non-nil if the source errors out
func (a *PlanetFesEventAccessor) ByInitialAppearCD(identifier float64) (PlanetFesEvent, error) {
	if a._dataInitialAppearCD == nil {
		err := a.LoadData()
		if err != nil {
			return PlanetFesEvent{}, err
		}
		a.GroupData()
	}
	return a._dataInitialAppearCD[identifier], nil
}
