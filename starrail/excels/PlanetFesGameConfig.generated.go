package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type PlanetFesGameConfig struct {
	GameID       string  `json:"GameID"`
	LandID       float64 `json:"LandID"`
	ParamInt3    float64 `json:"ParamInt3"`
	ParamStr1    string  `json:"ParamStr1"`
	RaiseCurveID float64 `json:"RaiseCurveID"`
	RewardPool   float64 `json:"RewardPool"`
}
type PlanetFesGameConfigAccessor struct {
	_data             []PlanetFesGameConfig
	_dataParamStr1    map[string]PlanetFesGameConfig
	_dataRewardPool   map[float64]PlanetFesGameConfig
	_dataRaiseCurveID map[float64]PlanetFesGameConfig
	_dataGameID       map[string]PlanetFesGameConfig
	_dataLandID       map[float64]PlanetFesGameConfig
	_dataParamInt3    map[float64]PlanetFesGameConfig
}

// LoadData retrieves the data. Must be called before PlanetFesGameConfig.GroupData
func (a *PlanetFesGameConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/PlanetFesGameConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *PlanetFesGameConfigAccessor) Raw() ([]PlanetFesGameConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []PlanetFesGameConfig{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with PlanetFesGameConfigAccessor.LoadData to preload everything
func (a *PlanetFesGameConfigAccessor) GroupData() {
	for _, d := range a._data {
		a._dataParamStr1[d.ParamStr1] = d
		a._dataRewardPool[d.RewardPool] = d
		a._dataRaiseCurveID[d.RaiseCurveID] = d
		a._dataGameID[d.GameID] = d
		a._dataLandID[d.LandID] = d
		a._dataParamInt3[d.ParamInt3] = d
	}
}

// ByParamStr1 returns the PlanetFesGameConfig uniquely identified by ParamStr1
//
// Error is only non-nil if the source errors out
func (a *PlanetFesGameConfigAccessor) ByParamStr1(identifier string) (PlanetFesGameConfig, error) {
	if a._dataParamStr1 == nil {
		err := a.LoadData()
		if err != nil {
			return PlanetFesGameConfig{}, err
		}
		a.GroupData()
	}
	return a._dataParamStr1[identifier], nil
}

// ByRewardPool returns the PlanetFesGameConfig uniquely identified by RewardPool
//
// Error is only non-nil if the source errors out
func (a *PlanetFesGameConfigAccessor) ByRewardPool(identifier float64) (PlanetFesGameConfig, error) {
	if a._dataRewardPool == nil {
		err := a.LoadData()
		if err != nil {
			return PlanetFesGameConfig{}, err
		}
		a.GroupData()
	}
	return a._dataRewardPool[identifier], nil
}

// ByRaiseCurveID returns the PlanetFesGameConfig uniquely identified by RaiseCurveID
//
// Error is only non-nil if the source errors out
func (a *PlanetFesGameConfigAccessor) ByRaiseCurveID(identifier float64) (PlanetFesGameConfig, error) {
	if a._dataRaiseCurveID == nil {
		err := a.LoadData()
		if err != nil {
			return PlanetFesGameConfig{}, err
		}
		a.GroupData()
	}
	return a._dataRaiseCurveID[identifier], nil
}

// ByGameID returns the PlanetFesGameConfig uniquely identified by GameID
//
// Error is only non-nil if the source errors out
func (a *PlanetFesGameConfigAccessor) ByGameID(identifier string) (PlanetFesGameConfig, error) {
	if a._dataGameID == nil {
		err := a.LoadData()
		if err != nil {
			return PlanetFesGameConfig{}, err
		}
		a.GroupData()
	}
	return a._dataGameID[identifier], nil
}

// ByLandID returns the PlanetFesGameConfig uniquely identified by LandID
//
// Error is only non-nil if the source errors out
func (a *PlanetFesGameConfigAccessor) ByLandID(identifier float64) (PlanetFesGameConfig, error) {
	if a._dataLandID == nil {
		err := a.LoadData()
		if err != nil {
			return PlanetFesGameConfig{}, err
		}
		a.GroupData()
	}
	return a._dataLandID[identifier], nil
}

// ByParamInt3 returns the PlanetFesGameConfig uniquely identified by ParamInt3
//
// Error is only non-nil if the source errors out
func (a *PlanetFesGameConfigAccessor) ByParamInt3(identifier float64) (PlanetFesGameConfig, error) {
	if a._dataParamInt3 == nil {
		err := a.LoadData()
		if err != nil {
			return PlanetFesGameConfig{}, err
		}
		a.GroupData()
	}
	return a._dataParamInt3[identifier], nil
}
