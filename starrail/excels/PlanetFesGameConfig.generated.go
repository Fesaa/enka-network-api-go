package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type PlanetFesGameConfig struct {
	GameID       string      `json:"GameID"`
	LandID       json.Number `json:"LandID"`
	ParamInt3    json.Number `json:"ParamInt3"`
	ParamStr1    string      `json:"ParamStr1"`
	RaiseCurveID json.Number `json:"RaiseCurveID"`
	RewardPool   json.Number `json:"RewardPool"`
}
type PlanetFesGameConfigAccessor struct {
	_data          []PlanetFesGameConfig
	_dataGameID    map[string]PlanetFesGameConfig
	_dataParamStr1 map[string]PlanetFesGameConfig
}

// LoadData retrieves the data. Must be called before PlanetFesGameConfig.GroupData
func (a *PlanetFesGameConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/PlanetFesGameConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *PlanetFesGameConfigAccessor) Raw() ([]PlanetFesGameConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []PlanetFesGameConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with PlanetFesGameConfigAccessor.LoadData to preload everything
func (a *PlanetFesGameConfigAccessor) GroupData() {
	a._dataGameID = map[string]PlanetFesGameConfig{}
	a._dataParamStr1 = map[string]PlanetFesGameConfig{}
	for _, d := range a._data {
		a._dataGameID[d.GameID] = d
		a._dataParamStr1[d.ParamStr1] = d
	}
}

// ByGameID returns the PlanetFesGameConfig uniquely identified by GameID
//
// Error is only non-nil if the source errors out
func (a *PlanetFesGameConfigAccessor) ByGameID(identifier string) (PlanetFesGameConfig, error) {
	if a._dataGameID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return PlanetFesGameConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataGameID[identifier], nil
}

// ByParamStr1 returns the PlanetFesGameConfig uniquely identified by ParamStr1
//
// Error is only non-nil if the source errors out
func (a *PlanetFesGameConfigAccessor) ByParamStr1(identifier string) (PlanetFesGameConfig, error) {
	if a._dataParamStr1 == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return PlanetFesGameConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataParamStr1[identifier], nil
}
