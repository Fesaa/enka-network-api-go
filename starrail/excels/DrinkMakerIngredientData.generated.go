package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type DrinkMakerIngredientData struct {
	Color          []float64 `json:"Color"`
	EffParam       []float64 `json:"EffParam"`
	ID             float64   `json:"ID"`
	IconPath       string    `json:"IconPath"`
	IncludeTagList []float64 `json:"IncludeTagList"`
	IngredientDesc hash.Hash `json:"IngredientDesc"`
	IngredientName hash.Hash `json:"IngredientName"`
	IsMission      bool      `json:"IsMission"`
	PhyParam       []float64 `json:"PhyParam"`
	SmallIconPath  string    `json:"SmallIconPath"`
	UnlockParam    []float64 `json:"UnlockParam"`
	UnlockType     string    `json:"UnlockType"`
}
type DrinkMakerIngredientDataAccessor struct {
	_data              []DrinkMakerIngredientData
	_dataID            map[float64]DrinkMakerIngredientData
	_dataIconPath      map[string]DrinkMakerIngredientData
	_dataSmallIconPath map[string]DrinkMakerIngredientData
}

// LoadData retrieves the data. Must be called before DrinkMakerIngredientData.GroupData
func (a *DrinkMakerIngredientDataAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/DrinkMakerIngredientData.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *DrinkMakerIngredientDataAccessor) Raw() ([]DrinkMakerIngredientData, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []DrinkMakerIngredientData{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with DrinkMakerIngredientDataAccessor.LoadData to preload everything
func (a *DrinkMakerIngredientDataAccessor) GroupData() {
	a._dataID = map[float64]DrinkMakerIngredientData{}
	a._dataIconPath = map[string]DrinkMakerIngredientData{}
	a._dataSmallIconPath = map[string]DrinkMakerIngredientData{}
	for _, d := range a._data {
		a._dataID[d.ID] = d
		a._dataIconPath[d.IconPath] = d
		a._dataSmallIconPath[d.SmallIconPath] = d
	}
}

// ByID returns the DrinkMakerIngredientData uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *DrinkMakerIngredientDataAccessor) ByID(identifier float64) (DrinkMakerIngredientData, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return DrinkMakerIngredientData{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}

// ByIconPath returns the DrinkMakerIngredientData uniquely identified by IconPath
//
// Error is only non-nil if the source errors out
func (a *DrinkMakerIngredientDataAccessor) ByIconPath(identifier string) (DrinkMakerIngredientData, error) {
	if a._dataIconPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return DrinkMakerIngredientData{}, err
			}
		}
		a.GroupData()
	}
	return a._dataIconPath[identifier], nil
}

// BySmallIconPath returns the DrinkMakerIngredientData uniquely identified by SmallIconPath
//
// Error is only non-nil if the source errors out
func (a *DrinkMakerIngredientDataAccessor) BySmallIconPath(identifier string) (DrinkMakerIngredientData, error) {
	if a._dataSmallIconPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return DrinkMakerIngredientData{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSmallIconPath[identifier], nil
}
