package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type ActivityFeverTimeConfig struct {
	ActivityModuleID     float64   `json:"ActivityModuleID"`
	EventID              float64   `json:"EventID"`
	ExtraEffectID        float64   `json:"ExtraEffectID"`
	FeverTimeID          float64   `json:"FeverTimeID"`
	ImagePath            string    `json:"ImagePath"`
	LevelDes1            hash.Hash `json:"LevelDes1"`
	MonsterList          []float64 `json:"MonsterList"`
	P1AvailableBuffList  []float64 `json:"P1AvailableBuffList"`
	P2AvailableBuffList  []float64 `json:"P2AvailableBuffList"`
	P3MazeBuffID         []float64 `json:"P3MazeBuffID"`
	QuestGroupID         float64   `json:"QuestGroupID"`
	RecommadNature       []string  `json:"RecommadNature"`
	SpecialAvatarList    []float64 `json:"SpecialAvatarList"`
	StageName            hash.Hash `json:"StageName"`
	TutorialGuideGroupID float64   `json:"TutorialGuideGroupID"`
	UIEnterBattleAreaID  float64   `json:"UIEnterBattleAreaID"`
	WaveMonsterList1     []float64 `json:"WaveMonsterList_1"`
	WaveMonsterList2     []float64 `json:"WaveMonsterList_2"`
	WaveMonsterList3     []float64 `json:"WaveMonsterList_3"`
}
type ActivityFeverTimeConfigAccessor struct {
	_data                 []ActivityFeverTimeConfig
	_dataActivityModuleID map[float64]ActivityFeverTimeConfig
	_dataEventID          map[float64]ActivityFeverTimeConfig
	_dataFeverTimeID      map[float64]ActivityFeverTimeConfig
	_dataImagePath        map[string]ActivityFeverTimeConfig
	_dataQuestGroupID     map[float64]ActivityFeverTimeConfig
}

// LoadData retrieves the data. Must be called before ActivityFeverTimeConfig.GroupData
func (a *ActivityFeverTimeConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ActivityFeverTimeConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ActivityFeverTimeConfigAccessor) Raw() ([]ActivityFeverTimeConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ActivityFeverTimeConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ActivityFeverTimeConfigAccessor.LoadData to preload everything
func (a *ActivityFeverTimeConfigAccessor) GroupData() {
	a._dataActivityModuleID = map[float64]ActivityFeverTimeConfig{}
	a._dataEventID = map[float64]ActivityFeverTimeConfig{}
	a._dataFeverTimeID = map[float64]ActivityFeverTimeConfig{}
	a._dataImagePath = map[string]ActivityFeverTimeConfig{}
	a._dataQuestGroupID = map[float64]ActivityFeverTimeConfig{}
	for _, d := range a._data {
		a._dataActivityModuleID[d.ActivityModuleID] = d
		a._dataEventID[d.EventID] = d
		a._dataFeverTimeID[d.FeverTimeID] = d
		a._dataImagePath[d.ImagePath] = d
		a._dataQuestGroupID[d.QuestGroupID] = d
	}
}

// ByActivityModuleID returns the ActivityFeverTimeConfig uniquely identified by ActivityModuleID
//
// Error is only non-nil if the source errors out
func (a *ActivityFeverTimeConfigAccessor) ByActivityModuleID(identifier float64) (ActivityFeverTimeConfig, error) {
	if a._dataActivityModuleID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityFeverTimeConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataActivityModuleID[identifier], nil
}

// ByEventID returns the ActivityFeverTimeConfig uniquely identified by EventID
//
// Error is only non-nil if the source errors out
func (a *ActivityFeverTimeConfigAccessor) ByEventID(identifier float64) (ActivityFeverTimeConfig, error) {
	if a._dataEventID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityFeverTimeConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataEventID[identifier], nil
}

// ByFeverTimeID returns the ActivityFeverTimeConfig uniquely identified by FeverTimeID
//
// Error is only non-nil if the source errors out
func (a *ActivityFeverTimeConfigAccessor) ByFeverTimeID(identifier float64) (ActivityFeverTimeConfig, error) {
	if a._dataFeverTimeID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityFeverTimeConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataFeverTimeID[identifier], nil
}

// ByImagePath returns the ActivityFeverTimeConfig uniquely identified by ImagePath
//
// Error is only non-nil if the source errors out
func (a *ActivityFeverTimeConfigAccessor) ByImagePath(identifier string) (ActivityFeverTimeConfig, error) {
	if a._dataImagePath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityFeverTimeConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataImagePath[identifier], nil
}

// ByQuestGroupID returns the ActivityFeverTimeConfig uniquely identified by QuestGroupID
//
// Error is only non-nil if the source errors out
func (a *ActivityFeverTimeConfigAccessor) ByQuestGroupID(identifier float64) (ActivityFeverTimeConfig, error) {
	if a._dataQuestGroupID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityFeverTimeConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataQuestGroupID[identifier], nil
}
