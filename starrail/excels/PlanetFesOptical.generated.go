package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type PlanetFesOptical struct {
	ActivityModuleID float64   `json:"ActivityModuleID"`
	GotoConfig       float64   `json:"GotoConfig"`
	MainMissionID    float64   `json:"MainMissionID"`
	Progress         hash.Hash `json:"Progress"`
	QuestID          float64   `json:"QuestID"`
	RealProgress     float64   `json:"RealProgress"`
	Type             float64   `json:"Type"`
}
type PlanetFesOpticalAccessor struct {
	_data        []PlanetFesOptical
	_dataQuestID map[float64]PlanetFesOptical
}

// LoadData retrieves the data. Must be called before PlanetFesOptical.GroupData
func (a *PlanetFesOpticalAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/PlanetFesOptical.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *PlanetFesOpticalAccessor) Raw() ([]PlanetFesOptical, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []PlanetFesOptical{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with PlanetFesOpticalAccessor.LoadData to preload everything
func (a *PlanetFesOpticalAccessor) GroupData() {
	a._dataQuestID = map[float64]PlanetFesOptical{}
	for _, d := range a._data {
		a._dataQuestID[d.QuestID] = d
	}
}

// ByQuestID returns the PlanetFesOptical uniquely identified by QuestID
//
// Error is only non-nil if the source errors out
func (a *PlanetFesOpticalAccessor) ByQuestID(identifier float64) (PlanetFesOptical, error) {
	if a._dataQuestID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return PlanetFesOptical{}, err
			}
		}
		a.GroupData()
	}
	return a._dataQuestID[identifier], nil
}
