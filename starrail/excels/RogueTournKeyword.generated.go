package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type RogueTournKeyword struct {
	ExtraEffect        json.Number   `json:"ExtraEffect"`
	KeywordBuffType    json.Number   `json:"KeywordBuffType"`
	KeywordExtraEffect json.Number   `json:"KeywordExtraEffect"`
	KeywordID          json.Number   `json:"KeywordID"`
	KeywordIcon        string        `json:"KeywordIcon"`
	MazeBuffID         json.Number   `json:"MazeBuffID"`
	MazeBuffList       []json.Number `json:"MazeBuffList"`
	RogueFormulaList   []json.Number `json:"RogueFormulaList"`
}
type RogueTournKeywordAccessor struct {
	_data           []RogueTournKeyword
	_dataKeywordID  map[json.Number]RogueTournKeyword
	_dataMazeBuffID map[json.Number]RogueTournKeyword
}

// LoadData retrieves the data. Must be called before RogueTournKeyword.GroupData
func (a *RogueTournKeywordAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueTournKeyword.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueTournKeywordAccessor) Raw() ([]RogueTournKeyword, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueTournKeyword{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueTournKeywordAccessor.LoadData to preload everything
func (a *RogueTournKeywordAccessor) GroupData() {
	a._dataKeywordID = map[json.Number]RogueTournKeyword{}
	a._dataMazeBuffID = map[json.Number]RogueTournKeyword{}
	for _, d := range a._data {
		a._dataKeywordID[d.KeywordID] = d
		a._dataMazeBuffID[d.MazeBuffID] = d
	}
}

// ByKeywordID returns the RogueTournKeyword uniquely identified by KeywordID
//
// Error is only non-nil if the source errors out
func (a *RogueTournKeywordAccessor) ByKeywordID(identifier json.Number) (RogueTournKeyword, error) {
	if a._dataKeywordID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueTournKeyword{}, err
			}
		}
		a.GroupData()
	}
	return a._dataKeywordID[identifier], nil
}

// ByMazeBuffID returns the RogueTournKeyword uniquely identified by MazeBuffID
//
// Error is only non-nil if the source errors out
func (a *RogueTournKeywordAccessor) ByMazeBuffID(identifier json.Number) (RogueTournKeyword, error) {
	if a._dataMazeBuffID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueTournKeyword{}, err
			}
		}
		a.GroupData()
	}
	return a._dataMazeBuffID[identifier], nil
}
