package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type ClockParkCardAction struct {
	CardActionID      json.Number            `json:"CardActionID"`
	CardDesc          map[string]json.Number `json:"CardDesc"`
	DiceList          []json.Number          `json:"DiceList"`
	EffectList        []json.Number          `json:"EffectList"`
	ForeImgPath       string                 `json:"ForeImgPath"`
	ImgPath           string                 `json:"ImgPath"`
	ImgPath1          string                 `json:"ImgPath1"`
	ImgPath2          string                 `json:"ImgPath2"`
	ImgPath3          string                 `json:"ImgPath3"`
	SuccessEffectList []json.Number          `json:"SuccessEffectList"`
}
type ClockParkCardActionAccessor struct {
	_data []ClockParkCardAction
}

// LoadData retrieves the data. Must be called before ClockParkCardAction.GroupData
func (a *ClockParkCardActionAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ClockParkCardAction.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ClockParkCardActionAccessor) Raw() ([]ClockParkCardAction, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ClockParkCardAction{}, err
		}
	}
	return a._data, nil
}
