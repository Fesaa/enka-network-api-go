package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type ClockParkStory struct {
	ImgPath       string  `json:"ImgPath"`
	StoryID       float64 `json:"StoryID"`
	StoryJsonPath string  `json:"StoryJsonPath"`
}
type ClockParkStoryAccessor struct {
	_data              []ClockParkStory
	_dataStoryID       map[float64]ClockParkStory
	_dataStoryJsonPath map[string]ClockParkStory
}

// LoadData retrieves the data. Must be called before ClockParkStory.GroupData
func (a *ClockParkStoryAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ClockParkStory.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ClockParkStoryAccessor) Raw() ([]ClockParkStory, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ClockParkStory{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ClockParkStoryAccessor.LoadData to preload everything
func (a *ClockParkStoryAccessor) GroupData() {
	for _, d := range a._data {
		a._dataStoryID[d.StoryID] = d
		a._dataStoryJsonPath[d.StoryJsonPath] = d
	}
}

// ByStoryID returns the ClockParkStory uniquely identified by StoryID
//
// Error is only non-nil if the source errors out
func (a *ClockParkStoryAccessor) ByStoryID(identifier float64) (ClockParkStory, error) {
	if a._dataStoryID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ClockParkStory{}, err
			}
		}
		a.GroupData()
	}
	return a._dataStoryID[identifier], nil
}

// ByStoryJsonPath returns the ClockParkStory uniquely identified by StoryJsonPath
//
// Error is only non-nil if the source errors out
func (a *ClockParkStoryAccessor) ByStoryJsonPath(identifier string) (ClockParkStory, error) {
	if a._dataStoryJsonPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ClockParkStory{}, err
			}
		}
		a.GroupData()
	}
	return a._dataStoryJsonPath[identifier], nil
}
