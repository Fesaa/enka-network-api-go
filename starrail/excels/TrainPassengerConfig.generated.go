package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type TrainPassengerConfig struct {
	BehaviorList []float64 `json:"BehaviorList"`
	PassengerID  float64   `json:"PassengerID"`
}
type TrainPassengerConfigAccessor struct {
	_data            []TrainPassengerConfig
	_dataPassengerID map[float64]TrainPassengerConfig
}

// LoadData retrieves the data. Must be called before TrainPassengerConfig.GroupData
func (a *TrainPassengerConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/TrainPassengerConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *TrainPassengerConfigAccessor) Raw() ([]TrainPassengerConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []TrainPassengerConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with TrainPassengerConfigAccessor.LoadData to preload everything
func (a *TrainPassengerConfigAccessor) GroupData() {
	for _, d := range a._data {
		a._dataPassengerID[d.PassengerID] = d
	}
}

// ByPassengerID returns the TrainPassengerConfig uniquely identified by PassengerID
//
// Error is only non-nil if the source errors out
func (a *TrainPassengerConfigAccessor) ByPassengerID(identifier float64) (TrainPassengerConfig, error) {
	if a._dataPassengerID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return TrainPassengerConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataPassengerID[identifier], nil
}
