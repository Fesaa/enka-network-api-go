package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type RogueTalkNameConfig struct {
	IconPath   string                 `json:"IconPath"`
	ImageID    json.Number            `json:"ImageID"`
	Name       map[string]json.Number `json:"Name"`
	SubName    map[string]json.Number `json:"SubName"`
	TalkNameID json.Number            `json:"TalkNameID"`
}
type RogueTalkNameConfigAccessor struct {
	_data           []RogueTalkNameConfig
	_dataTalkNameID map[json.Number]RogueTalkNameConfig
}

// LoadData retrieves the data. Must be called before RogueTalkNameConfig.GroupData
func (a *RogueTalkNameConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueTalkNameConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueTalkNameConfigAccessor) Raw() ([]RogueTalkNameConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueTalkNameConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueTalkNameConfigAccessor.LoadData to preload everything
func (a *RogueTalkNameConfigAccessor) GroupData() {
	a._dataTalkNameID = map[json.Number]RogueTalkNameConfig{}
	for _, d := range a._data {
		a._dataTalkNameID[d.TalkNameID] = d
	}
}

// ByTalkNameID returns the RogueTalkNameConfig uniquely identified by TalkNameID
//
// Error is only non-nil if the source errors out
func (a *RogueTalkNameConfigAccessor) ByTalkNameID(identifier json.Number) (RogueTalkNameConfig, error) {
	if a._dataTalkNameID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueTalkNameConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataTalkNameID[identifier], nil
}
