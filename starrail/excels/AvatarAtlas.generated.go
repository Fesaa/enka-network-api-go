package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type AvatarAtlas struct {
	AvatarID      json.Number            `json:"AvatarID"`
	CVCN          map[string]json.Number `json:"CV_CN"`
	CVEN          map[string]json.Number `json:"CV_EN"`
	CVJP          map[string]json.Number `json:"CV_JP"`
	CVKR          map[string]json.Number `json:"CV_KR"`
	CampID        json.Number            `json:"CampID"`
	DefaultUnlock bool                   `json:"DefaultUnlock"`
}
type AvatarAtlasAccessor struct {
	_data         []AvatarAtlas
	_dataAvatarID map[json.Number]AvatarAtlas
}

// LoadData retrieves the data. Must be called before AvatarAtlas.GroupData
func (a *AvatarAtlasAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/AvatarAtlas.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *AvatarAtlasAccessor) Raw() ([]AvatarAtlas, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []AvatarAtlas{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with AvatarAtlasAccessor.LoadData to preload everything
func (a *AvatarAtlasAccessor) GroupData() {
	a._dataAvatarID = map[json.Number]AvatarAtlas{}
	for _, d := range a._data {
		a._dataAvatarID[d.AvatarID] = d
	}
}

// ByAvatarID returns the AvatarAtlas uniquely identified by AvatarID
//
// Error is only non-nil if the source errors out
func (a *AvatarAtlasAccessor) ByAvatarID(identifier json.Number) (AvatarAtlas, error) {
	if a._dataAvatarID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AvatarAtlas{}, err
			}
		}
		a.GroupData()
	}
	return a._dataAvatarID[identifier], nil
}
