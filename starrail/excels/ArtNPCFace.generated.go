package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type ArtNPCFace struct {
	BNJEFJOKHIK []string  `json:"BNJEFJOKHIK"`
	DDKGGEJLKGN float64   `json:"DDKGGEJLKGN"`
	DKHCFIILCIK string    `json:"DKHCFIILCIK"`
	DMNGMCCFOND float64   `json:"DMNGMCCFOND"`
	EBANPDBCCEJ float64   `json:"EBANPDBCCEJ"`
	GJJMCFFOPJD float64   `json:"GJJMCFFOPJD"`
	HBMJHGADENG float64   `json:"HBMJHGADENG"`
	HDJHBFHPOBE string    `json:"HDJHBFHPOBE"`
	HOLDJKPKPJO []float64 `json:"HOLDJKPKPJO"`
	MIPDPCFNNMK []string  `json:"MIPDPCFNNMK"`
}
type ArtNPCFaceAccessor struct {
	_data            []ArtNPCFace
	_dataHDJHBFHPOBE map[string]ArtNPCFace
	_dataDKHCFIILCIK map[string]ArtNPCFace
}

// LoadData retrieves the data. Must be called before ArtNPCFace.GroupData
func (a *ArtNPCFaceAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ArtNPCFace.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ArtNPCFaceAccessor) Raw() ([]ArtNPCFace, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ArtNPCFace{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ArtNPCFaceAccessor.LoadData to preload everything
func (a *ArtNPCFaceAccessor) GroupData() {
	for _, d := range a._data {
		a._dataHDJHBFHPOBE[d.HDJHBFHPOBE] = d
		a._dataDKHCFIILCIK[d.DKHCFIILCIK] = d
	}
}

// ByHDJHBFHPOBE returns the ArtNPCFace uniquely identified by HDJHBFHPOBE
//
// Error is only non-nil if the source errors out
func (a *ArtNPCFaceAccessor) ByHDJHBFHPOBE(identifier string) (ArtNPCFace, error) {
	if a._dataHDJHBFHPOBE == nil {
		err := a.LoadData()
		if err != nil {
			return ArtNPCFace{}, err
		}
		a.GroupData()
	}
	return a._dataHDJHBFHPOBE[identifier], nil
}

// ByDKHCFIILCIK returns the ArtNPCFace uniquely identified by DKHCFIILCIK
//
// Error is only non-nil if the source errors out
func (a *ArtNPCFaceAccessor) ByDKHCFIILCIK(identifier string) (ArtNPCFace, error) {
	if a._dataDKHCFIILCIK == nil {
		err := a.LoadData()
		if err != nil {
			return ArtNPCFace{}, err
		}
		a.GroupData()
	}
	return a._dataDKHCFIILCIK[identifier], nil
}
