package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type FateBuff struct {
	BGCDKMFDKLB float64       `json:"BGCDKMFDKLB"`
	CEMMGMBGKNG []interface{} `json:"CEMMGMBGKNG"`
	DCBHNNDNHEO float64       `json:"DCBHNNDNHEO"`
	GMGNOIACDJN float64       `json:"GMGNOIACDJN"`
	IMCOKPODCIE string        `json:"IMCOKPODCIE"`
	JLKMNCOIDLG string        `json:"JLKMNCOIDLG"`
	JOFAHBAPPIB float64       `json:"JOFAHBAPPIB"`
	OJOHNMAEMOP hash.Hash     `json:"OJOHNMAEMOP"`
}
type FateBuffAccessor struct {
	_data            []FateBuff
	_dataBGCDKMFDKLB map[float64]FateBuff
	_dataDCBHNNDNHEO map[float64]FateBuff
}

// LoadData retrieves the data. Must be called before FateBuff.GroupData
func (a *FateBuffAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/FateBuff.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *FateBuffAccessor) Raw() ([]FateBuff, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []FateBuff{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with FateBuffAccessor.LoadData to preload everything
func (a *FateBuffAccessor) GroupData() {
	a._dataBGCDKMFDKLB = map[float64]FateBuff{}
	a._dataDCBHNNDNHEO = map[float64]FateBuff{}
	for _, d := range a._data {
		a._dataBGCDKMFDKLB[d.BGCDKMFDKLB] = d
		a._dataDCBHNNDNHEO[d.DCBHNNDNHEO] = d
	}
}

// ByBGCDKMFDKLB returns the FateBuff uniquely identified by BGCDKMFDKLB
//
// Error is only non-nil if the source errors out
func (a *FateBuffAccessor) ByBGCDKMFDKLB(identifier float64) (FateBuff, error) {
	if a._dataBGCDKMFDKLB == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FateBuff{}, err
			}
		}
		a.GroupData()
	}
	return a._dataBGCDKMFDKLB[identifier], nil
}

// ByDCBHNNDNHEO returns the FateBuff uniquely identified by DCBHNNDNHEO
//
// Error is only non-nil if the source errors out
func (a *FateBuffAccessor) ByDCBHNNDNHEO(identifier float64) (FateBuff, error) {
	if a._dataDCBHNNDNHEO == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FateBuff{}, err
			}
		}
		a.GroupData()
	}
	return a._dataDCBHNNDNHEO[identifier], nil
}
