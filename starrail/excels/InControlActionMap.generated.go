package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type InControlActionMap struct {
	FuncGotoIDList        []json.Number          `json:"FuncGotoIDList"`
	ActionName            string                 `json:"actionName"`
	ActionTextmapID       map[string]json.Number `json:"actionTextmapID"`
	ActionTypeList        []json.Number          `json:"actionTypeList"`
	DefaultInControlTypes []string               `json:"defaultInControlTypes"`
	DefaultKey            string                 `json:"defaultKey"`
	DefaultMouseType      string                 `json:"defaultMouseType"`
}
type InControlActionMapAccessor struct {
	_data           []InControlActionMap
	_dataActionName map[string]InControlActionMap
}

// LoadData retrieves the data. Must be called before InControlActionMap.GroupData
func (a *InControlActionMapAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/InControlActionMap.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *InControlActionMapAccessor) Raw() ([]InControlActionMap, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []InControlActionMap{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with InControlActionMapAccessor.LoadData to preload everything
func (a *InControlActionMapAccessor) GroupData() {
	a._dataActionName = map[string]InControlActionMap{}
	for _, d := range a._data {
		a._dataActionName[d.ActionName] = d
	}
}

// ByactionName returns the InControlActionMap uniquely identified by actionName
//
// Error is only non-nil if the source errors out
func (a *InControlActionMapAccessor) ByactionName(identifier string) (InControlActionMap, error) {
	if a._dataActionName == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return InControlActionMap{}, err
			}
		}
		a.GroupData()
	}
	return a._dataActionName[identifier], nil
}
