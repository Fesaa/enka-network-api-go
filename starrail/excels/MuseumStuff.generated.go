package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type MuseumStuff struct {
	CollectedReward      json.Number            `json:"CollectedReward"`
	DisplayOrder         json.Number            `json:"DisplayOrder"`
	EvidenceInfoTextID   map[string]json.Number `json:"EvidenceInfoTextID"`
	IsInitial            bool                   `json:"IsInitial"`
	IsTargetReward       bool                   `json:"IsTargetReward"`
	ItemID               json.Number            `json:"ItemID"`
	MuseumStuffDesc      map[string]json.Number `json:"MuseumStuffDesc"`
	RecruitPrice         json.Number            `json:"RecruitPrice"`
	RecruitUnlockMission json.Number            `json:"RecruitUnlockMission"`
	SceneGroupID         json.Number            `json:"SceneGroupID"`
	ScenePropID          json.Number            `json:"ScenePropID"`
	StatsA               json.Number            `json:"StatsA"`
	StatsB               json.Number            `json:"StatsB"`
	StatsC               json.Number            `json:"StatsC"`
	Type                 string                 `json:"Type"`
	UnlockPhase          json.Number            `json:"UnlockPhase"`
}
type MuseumStuffAccessor struct {
	_data []MuseumStuff
}

// LoadData retrieves the data. Must be called before MuseumStuff.GroupData
func (a *MuseumStuffAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MuseumStuff.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MuseumStuffAccessor) Raw() ([]MuseumStuff, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MuseumStuff{}, err
		}
	}
	return a._data, nil
}
