package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type RogueHandbookMiracleType struct {
	ActivityModuleID         json.Number            `json:"ActivityModuleID"`
	RogueHandbookMiracleType json.Number            `json:"RogueHandbookMiracleType"`
	RogueMiracleTypeTitle    map[string]json.Number `json:"RogueMiracleTypeTitle"`
	TypeIcon                 string                 `json:"TypeIcon"`
}
type RogueHandbookMiracleTypeAccessor struct {
	_data         []RogueHandbookMiracleType
	_dataTypeIcon map[string]RogueHandbookMiracleType
}

// LoadData retrieves the data. Must be called before RogueHandbookMiracleType.GroupData
func (a *RogueHandbookMiracleTypeAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueHandbookMiracleType.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueHandbookMiracleTypeAccessor) Raw() ([]RogueHandbookMiracleType, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueHandbookMiracleType{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueHandbookMiracleTypeAccessor.LoadData to preload everything
func (a *RogueHandbookMiracleTypeAccessor) GroupData() {
	a._dataTypeIcon = map[string]RogueHandbookMiracleType{}
	for _, d := range a._data {
		a._dataTypeIcon[d.TypeIcon] = d
	}
}

// ByTypeIcon returns the RogueHandbookMiracleType uniquely identified by TypeIcon
//
// Error is only non-nil if the source errors out
func (a *RogueHandbookMiracleTypeAccessor) ByTypeIcon(identifier string) (RogueHandbookMiracleType, error) {
	if a._dataTypeIcon == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueHandbookMiracleType{}, err
			}
		}
		a.GroupData()
	}
	return a._dataTypeIcon[identifier], nil
}
