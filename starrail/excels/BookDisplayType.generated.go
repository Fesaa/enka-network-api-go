package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type BookDisplayType struct {
	Alignment         float64 `json:"Alignment"`
	BookDisplayTypeID float64 `json:"BookDisplayTypeID"`
}
type BookDisplayTypeAccessor struct {
	_data                  []BookDisplayType
	_dataBookDisplayTypeID map[float64]BookDisplayType
	_dataAlignment         map[float64]BookDisplayType
}

// LoadData retrieves the data. Must be called before BookDisplayType.GroupData
func (a *BookDisplayTypeAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/BookDisplayType.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *BookDisplayTypeAccessor) Raw() ([]BookDisplayType, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []BookDisplayType{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with BookDisplayTypeAccessor.LoadData to preload everything
func (a *BookDisplayTypeAccessor) GroupData() {
	for _, d := range a._data {
		a._dataBookDisplayTypeID[d.BookDisplayTypeID] = d
		a._dataAlignment[d.Alignment] = d
	}
}

// ByBookDisplayTypeID returns the BookDisplayType uniquely identified by BookDisplayTypeID
//
// Error is only non-nil if the source errors out
func (a *BookDisplayTypeAccessor) ByBookDisplayTypeID(identifier float64) (BookDisplayType, error) {
	if a._dataBookDisplayTypeID == nil {
		err := a.LoadData()
		if err != nil {
			return BookDisplayType{}, err
		}
		a.GroupData()
	}
	return a._dataBookDisplayTypeID[identifier], nil
}

// ByAlignment returns the BookDisplayType uniquely identified by Alignment
//
// Error is only non-nil if the source errors out
func (a *BookDisplayTypeAccessor) ByAlignment(identifier float64) (BookDisplayType, error) {
	if a._dataAlignment == nil {
		err := a.LoadData()
		if err != nil {
			return BookDisplayType{}, err
		}
		a.GroupData()
	}
	return a._dataAlignment[identifier], nil
}
