package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type PerformanceSkipPack struct {
	PackID   float64                       `json:"PackID"`
	PackList []PerformanceSkipPackPackList `json:"PackList"`
}
type PerformanceSkipPackPackList struct {
	CNAHHCANDCB float64 `json:"CNAHHCANDCB"`
	JLBKKIAAKMA string  `json:"JLBKKIAAKMA"`
}
type PerformanceSkipPackAccessor struct {
	_data       []PerformanceSkipPack
	_dataPackID map[float64]PerformanceSkipPack
}

// LoadData retrieves the data. Must be called before PerformanceSkipPack.GroupData
func (a *PerformanceSkipPackAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/PerformanceSkipPack.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *PerformanceSkipPackAccessor) Raw() ([]PerformanceSkipPack, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []PerformanceSkipPack{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with PerformanceSkipPackAccessor.LoadData to preload everything
func (a *PerformanceSkipPackAccessor) GroupData() {
	a._dataPackID = map[float64]PerformanceSkipPack{}
	for _, d := range a._data {
		a._dataPackID[d.PackID] = d
	}
}

// ByPackID returns the PerformanceSkipPack uniquely identified by PackID
//
// Error is only non-nil if the source errors out
func (a *PerformanceSkipPackAccessor) ByPackID(identifier float64) (PerformanceSkipPack, error) {
	if a._dataPackID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return PerformanceSkipPack{}, err
			}
		}
		a.GroupData()
	}
	return a._dataPackID[identifier], nil
}
