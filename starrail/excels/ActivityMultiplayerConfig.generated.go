package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type ActivityMultiplayerConfig struct {
	ActivityID       float64 `json:"ActivityID"`
	ActivityModuleID float64 `json:"ActivityModuleID"`
	GuideVideoID     float64 `json:"GuideVideoID"`
}
type ActivityMultiplayerConfigAccessor struct {
	_data                 []ActivityMultiplayerConfig
	_dataActivityID       map[float64]ActivityMultiplayerConfig
	_dataActivityModuleID map[float64]ActivityMultiplayerConfig
	_dataGuideVideoID     map[float64]ActivityMultiplayerConfig
}

// LoadData retrieves the data. Must be called before ActivityMultiplayerConfig.GroupData
func (a *ActivityMultiplayerConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ActivityMultiplayerConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ActivityMultiplayerConfigAccessor) Raw() ([]ActivityMultiplayerConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ActivityMultiplayerConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ActivityMultiplayerConfigAccessor.LoadData to preload everything
func (a *ActivityMultiplayerConfigAccessor) GroupData() {
	a._dataActivityID = map[float64]ActivityMultiplayerConfig{}
	a._dataActivityModuleID = map[float64]ActivityMultiplayerConfig{}
	a._dataGuideVideoID = map[float64]ActivityMultiplayerConfig{}
	for _, d := range a._data {
		a._dataActivityID[d.ActivityID] = d
		a._dataActivityModuleID[d.ActivityModuleID] = d
		a._dataGuideVideoID[d.GuideVideoID] = d
	}
}

// ByActivityID returns the ActivityMultiplayerConfig uniquely identified by ActivityID
//
// Error is only non-nil if the source errors out
func (a *ActivityMultiplayerConfigAccessor) ByActivityID(identifier float64) (ActivityMultiplayerConfig, error) {
	if a._dataActivityID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityMultiplayerConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataActivityID[identifier], nil
}

// ByActivityModuleID returns the ActivityMultiplayerConfig uniquely identified by ActivityModuleID
//
// Error is only non-nil if the source errors out
func (a *ActivityMultiplayerConfigAccessor) ByActivityModuleID(identifier float64) (ActivityMultiplayerConfig, error) {
	if a._dataActivityModuleID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityMultiplayerConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataActivityModuleID[identifier], nil
}

// ByGuideVideoID returns the ActivityMultiplayerConfig uniquely identified by GuideVideoID
//
// Error is only non-nil if the source errors out
func (a *ActivityMultiplayerConfigAccessor) ByGuideVideoID(identifier float64) (ActivityMultiplayerConfig, error) {
	if a._dataGuideVideoID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityMultiplayerConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataGuideVideoID[identifier], nil
}
