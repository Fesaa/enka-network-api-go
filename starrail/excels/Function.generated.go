package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type Function struct {
	GotoID           float64                    `json:"GotoID"`
	ID               float64                    `json:"ID"`
	OverrideGotoID   []FunctionOverrideGotoID   `json:"OverrideGotoID"`
	OverrideUnlockID []FunctionOverrideUnlockID `json:"OverrideUnlockID"`
	UnlockID         float64                    `json:"UnlockID"`
}
type FunctionOverrideGotoID struct {
	HEIKKHLKMOA float64 `json:"HEIKKHLKMOA"`
	MBMDOCJIMEJ float64 `json:"MBMDOCJIMEJ"`
}
type FunctionOverrideUnlockID struct {
	HEIKKHLKMOA float64 `json:"HEIKKHLKMOA"`
	MBMDOCJIMEJ float64 `json:"MBMDOCJIMEJ"`
}
type FunctionAccessor struct {
	_data   []Function
	_dataID map[float64]Function
}

// LoadData retrieves the data. Must be called before Function.GroupData
func (a *FunctionAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/Function.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *FunctionAccessor) Raw() ([]Function, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []Function{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with FunctionAccessor.LoadData to preload everything
func (a *FunctionAccessor) GroupData() {
	for _, d := range a._data {
		a._dataID[d.ID] = d
	}
}

// ByID returns the Function uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *FunctionAccessor) ByID(identifier float64) (Function, error) {
	if a._dataID == nil {
		err := a.LoadData()
		if err != nil {
			return Function{}, err
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}
