package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type TeleportConfig struct {
	ConfigID      float64 `json:"ConfigID"`
	FloorID       float64 `json:"FloorID"`
	GroupID       float64 `json:"GroupID"`
	ID            float64 `json:"ID"`
	InitialEnable bool    `json:"InitialEnable"`
	PlaneID       float64 `json:"PlaneID"`
}
type TeleportConfigAccessor struct {
	_data   []TeleportConfig
	_dataID map[float64]TeleportConfig
}

// LoadData retrieves the data. Must be called before TeleportConfig.GroupData
func (a *TeleportConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/TeleportConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *TeleportConfigAccessor) Raw() ([]TeleportConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []TeleportConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with TeleportConfigAccessor.LoadData to preload everything
func (a *TeleportConfigAccessor) GroupData() {
	a._dataID = map[float64]TeleportConfig{}
	for _, d := range a._data {
		a._dataID[d.ID] = d
	}
}

// ByID returns the TeleportConfig uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *TeleportConfigAccessor) ByID(identifier float64) (TeleportConfig, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return TeleportConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}
