package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type RogueNousDiceBranchTag struct {
	BranchTagName hash.Hash `json:"BranchTagName"`
	TagID         float64   `json:"TagID"`
	TagIcon       string    `json:"TagIcon"`
}
type RogueNousDiceBranchTagAccessor struct {
	_data        []RogueNousDiceBranchTag
	_dataTagID   map[float64]RogueNousDiceBranchTag
	_dataTagIcon map[string]RogueNousDiceBranchTag
}

// LoadData retrieves the data. Must be called before RogueNousDiceBranchTag.GroupData
func (a *RogueNousDiceBranchTagAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueNousDiceBranchTag.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueNousDiceBranchTagAccessor) Raw() ([]RogueNousDiceBranchTag, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueNousDiceBranchTag{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueNousDiceBranchTagAccessor.LoadData to preload everything
func (a *RogueNousDiceBranchTagAccessor) GroupData() {
	for _, d := range a._data {
		a._dataTagID[d.TagID] = d
		a._dataTagIcon[d.TagIcon] = d
	}
}

// ByTagID returns the RogueNousDiceBranchTag uniquely identified by TagID
//
// Error is only non-nil if the source errors out
func (a *RogueNousDiceBranchTagAccessor) ByTagID(identifier float64) (RogueNousDiceBranchTag, error) {
	if a._dataTagID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueNousDiceBranchTag{}, err
			}
		}
		a.GroupData()
	}
	return a._dataTagID[identifier], nil
}

// ByTagIcon returns the RogueNousDiceBranchTag uniquely identified by TagIcon
//
// Error is only non-nil if the source errors out
func (a *RogueNousDiceBranchTagAccessor) ByTagIcon(identifier string) (RogueNousDiceBranchTag, error) {
	if a._dataTagIcon == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueNousDiceBranchTag{}, err
			}
		}
		a.GroupData()
	}
	return a._dataTagIcon[identifier], nil
}
