package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type ShopGoodsConfig struct {
	CurrencyCostList      []json.Number `json:"CurrencyCostList"`
	CurrencyList          []json.Number `json:"CurrencyList"`
	CycleDays             json.Number   `json:"CycleDays"`
	GoodsID               json.Number   `json:"GoodsID"`
	GoodsSortID           json.Number   `json:"GoodsSortID"`
	IsLimitedTimePurchase bool          `json:"IsLimitedTimePurchase"`
	IsNew                 bool          `json:"IsNew"`
	IsOnSale              bool          `json:"IsOnSale"`
	ItemCount             json.Number   `json:"ItemCount"`
	ItemGroupID           json.Number   `json:"ItemGroupID"`
	ItemID                json.Number   `json:"ItemID"`
	Level                 json.Number   `json:"Level"`
	LimitTimes            json.Number   `json:"LimitTimes"`
	LimitType1            string        `json:"LimitType1"`
	LimitValue1List       []json.Number `json:"LimitValue1List"`
	LimitValue2List       []interface{} `json:"LimitValue2List"`
	OnShelfType1          string        `json:"OnShelfType1"`
	OnShelfValue1List     []json.Number `json:"OnShelfValue1List"`
	Rank                  json.Number   `json:"Rank"`
	RefreshType           string        `json:"RefreshType"`
	ScheduleDataID        json.Number   `json:"ScheduleDataID"`
	ShopID                json.Number   `json:"ShopID"`
	TagParam              json.Number   `json:"TagParam"`
	TagType               json.Number   `json:"TagType"`
}
type ShopGoodsConfigAccessor struct {
	_data []ShopGoodsConfig
}

// LoadData retrieves the data. Must be called before ShopGoodsConfig.GroupData
func (a *ShopGoodsConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ShopGoodsConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ShopGoodsConfigAccessor) Raw() ([]ShopGoodsConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ShopGoodsConfig{}, err
		}
	}
	return a._data, nil
}
