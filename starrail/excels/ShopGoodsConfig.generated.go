package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type ShopGoodsConfig struct {
	CurrencyCostList      []float64     `json:"CurrencyCostList"`
	CurrencyList          []float64     `json:"CurrencyList"`
	CycleDays             float64       `json:"CycleDays"`
	GoodsID               float64       `json:"GoodsID"`
	GoodsSortID           float64       `json:"GoodsSortID"`
	IsLimitedTimePurchase bool          `json:"IsLimitedTimePurchase"`
	IsNew                 bool          `json:"IsNew"`
	IsOnSale              bool          `json:"IsOnSale"`
	ItemCount             float64       `json:"ItemCount"`
	ItemGroupID           float64       `json:"ItemGroupID"`
	ItemID                float64       `json:"ItemID"`
	Level                 float64       `json:"Level"`
	LimitTimes            float64       `json:"LimitTimes"`
	LimitType1            string        `json:"LimitType1"`
	LimitValue1List       []float64     `json:"LimitValue1List"`
	LimitValue2List       []interface{} `json:"LimitValue2List"`
	OnShelfType1          string        `json:"OnShelfType1"`
	OnShelfValue1List     []float64     `json:"OnShelfValue1List"`
	Rank                  float64       `json:"Rank"`
	RefreshType           string        `json:"RefreshType"`
	ScheduleDataID        float64       `json:"ScheduleDataID"`
	ShopID                float64       `json:"ShopID"`
	TagParam              float64       `json:"TagParam"`
	TagType               float64       `json:"TagType"`
}
type ShopGoodsConfigAccessor struct {
	_data               []ShopGoodsConfig
	_dataScheduleDataID map[float64]ShopGoodsConfig
	_dataGoodsID        map[float64]ShopGoodsConfig
}

// LoadData retrieves the data. Must be called before ShopGoodsConfig.GroupData
func (a *ShopGoodsConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ShopGoodsConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ShopGoodsConfigAccessor) Raw() ([]ShopGoodsConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ShopGoodsConfig{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ShopGoodsConfigAccessor.LoadData to preload everything
func (a *ShopGoodsConfigAccessor) GroupData() {
	for _, d := range a._data {
		a._dataScheduleDataID[d.ScheduleDataID] = d
		a._dataGoodsID[d.GoodsID] = d
	}
}

// ByScheduleDataID returns the ShopGoodsConfig uniquely identified by ScheduleDataID
//
// Error is only non-nil if the source errors out
func (a *ShopGoodsConfigAccessor) ByScheduleDataID(identifier float64) (ShopGoodsConfig, error) {
	if a._dataScheduleDataID == nil {
		err := a.LoadData()
		if err != nil {
			return ShopGoodsConfig{}, err
		}
		a.GroupData()
	}
	return a._dataScheduleDataID[identifier], nil
}

// ByGoodsID returns the ShopGoodsConfig uniquely identified by GoodsID
//
// Error is only non-nil if the source errors out
func (a *ShopGoodsConfigAccessor) ByGoodsID(identifier float64) (ShopGoodsConfig, error) {
	if a._dataGoodsID == nil {
		err := a.LoadData()
		if err != nil {
			return ShopGoodsConfig{}, err
		}
		a.GroupData()
	}
	return a._dataGoodsID[identifier], nil
}
