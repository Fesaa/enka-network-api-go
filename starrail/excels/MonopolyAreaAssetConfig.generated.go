package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type MonopolyAreaAssetConfig struct {
	AssetList  []json.Number          `json:"AssetList"`
	FigurePath string                 `json:"FigurePath"`
	ID         json.Number            `json:"ID"`
	Name       map[string]json.Number `json:"Name"`
}
type MonopolyAreaAssetConfigAccessor struct {
	_data           []MonopolyAreaAssetConfig
	_dataFigurePath map[string]MonopolyAreaAssetConfig
}

// LoadData retrieves the data. Must be called before MonopolyAreaAssetConfig.GroupData
func (a *MonopolyAreaAssetConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MonopolyAreaAssetConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MonopolyAreaAssetConfigAccessor) Raw() ([]MonopolyAreaAssetConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MonopolyAreaAssetConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MonopolyAreaAssetConfigAccessor.LoadData to preload everything
func (a *MonopolyAreaAssetConfigAccessor) GroupData() {
	a._dataFigurePath = map[string]MonopolyAreaAssetConfig{}
	for _, d := range a._data {
		a._dataFigurePath[d.FigurePath] = d
	}
}

// ByFigurePath returns the MonopolyAreaAssetConfig uniquely identified by FigurePath
//
// Error is only non-nil if the source errors out
func (a *MonopolyAreaAssetConfigAccessor) ByFigurePath(identifier string) (MonopolyAreaAssetConfig, error) {
	if a._dataFigurePath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MonopolyAreaAssetConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataFigurePath[identifier], nil
}
