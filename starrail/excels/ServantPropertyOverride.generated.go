package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type ServantPropertyOverride struct {
	HidePropertyInBattleList []string `json:"HidePropertyInBattleList"`
	HidePropertyList         []string `json:"HidePropertyList"`
	SecretPropertyList       []string `json:"SecretPropertyList"`
	ServantID                float64  `json:"ServantID"`
}
type ServantPropertyOverrideAccessor struct {
	_data          []ServantPropertyOverride
	_dataServantID map[float64]ServantPropertyOverride
}

// LoadData retrieves the data. Must be called before ServantPropertyOverride.GroupData
func (a *ServantPropertyOverrideAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ServantPropertyOverride.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ServantPropertyOverrideAccessor) Raw() ([]ServantPropertyOverride, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ServantPropertyOverride{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ServantPropertyOverrideAccessor.LoadData to preload everything
func (a *ServantPropertyOverrideAccessor) GroupData() {
	for _, d := range a._data {
		a._dataServantID[d.ServantID] = d
	}
}

// ByServantID returns the ServantPropertyOverride uniquely identified by ServantID
//
// Error is only non-nil if the source errors out
func (a *ServantPropertyOverrideAccessor) ByServantID(identifier float64) (ServantPropertyOverride, error) {
	if a._dataServantID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ServantPropertyOverride{}, err
			}
		}
		a.GroupData()
	}
	return a._dataServantID[identifier], nil
}
