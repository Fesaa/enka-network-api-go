package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type AetherDivideSpirit struct {
	AIPath                    string        `json:"AIPath"`
	ActionAvatarHeadIconPath  string        `json:"ActionAvatarHeadIconPath"`
	AtlasAvatarHeadIconPath   string        `json:"AtlasAvatarHeadIconPath"`
	AvatarID                  float64       `json:"AvatarID"`
	AvatarName                hash.Hash     `json:"AvatarName"`
	AvatarSideIconPath        string        `json:"AvatarSideIconPath"`
	AvatarVOTag               string        `json:"AvatarVOTag"`
	DamageType                string        `json:"DamageType"`
	DefaultAvatarHeadIconPath string        `json:"DefaultAvatarHeadIconPath"`
	DefaultAvatarModelPath    string        `json:"DefaultAvatarModelPath"`
	ExpItemID                 float64       `json:"ExpItemID"`
	GymLocation               float64       `json:"GymLocation"`
	JsonPath                  string        `json:"JsonPath"`
	ManikinAvatarModelPath    string        `json:"ManikinAvatarModelPath"`
	ManikinJsonPath           string        `json:"ManikinJsonPath"`
	MaxPromotion              float64       `json:"MaxPromotion"`
	MiddleAvatarHeadIconPath  string        `json:"MiddleAvatarHeadIconPath"`
	PassiveSkillSlotList      []string      `json:"PassiveSkillSlotList"`
	Rarity                    string        `json:"Rarity"`
	RecommendPassiveSkillList []float64     `json:"RecommendPassiveSkillList"`
	SPMax                     hash.IntValue `json:"SPMax"`
	SideAvatarHeadIconPath    string        `json:"SideAvatarHeadIconPath"`
	SkillList                 []float64     `json:"SkillList"`
	SpiritDescription         hash.Hash     `json:"SpiritDescription"`
	SpiritType                string        `json:"SpiritType"`
	SpiritUnlockDescription   hash.Hash     `json:"SpiritUnlockDescription"`
	TeamLeftPrefabPath        string        `json:"TeamLeftPrefabPath"`
	TeamRightPrefabPath       string        `json:"TeamRightPrefabPath"`
	UltraSkillCutInPrefabPath string        `json:"UltraSkillCutInPrefabPath"`
	WaitingAvatarHeadIconPath string        `json:"WaitingAvatarHeadIconPath"`
}
type AetherDivideSpiritAccessor struct {
	_data                          []AetherDivideSpirit
	_dataExpItemID                 map[float64]AetherDivideSpirit
	_dataMiddleAvatarHeadIconPath  map[string]AetherDivideSpirit
	_dataDefaultAvatarModelPath    map[string]AetherDivideSpirit
	_dataDefaultAvatarHeadIconPath map[string]AetherDivideSpirit
	_dataUltraSkillCutInPrefabPath map[string]AetherDivideSpirit
	_dataTeamLeftPrefabPath        map[string]AetherDivideSpirit
	_dataWaitingAvatarHeadIconPath map[string]AetherDivideSpirit
	_dataTeamRightPrefabPath       map[string]AetherDivideSpirit
	_dataSideAvatarHeadIconPath    map[string]AetherDivideSpirit
	_dataManikinAvatarModelPath    map[string]AetherDivideSpirit
	_dataAtlasAvatarHeadIconPath   map[string]AetherDivideSpirit
	_dataAvatarID                  map[float64]AetherDivideSpirit
	_dataActionAvatarHeadIconPath  map[string]AetherDivideSpirit
	_dataJsonPath                  map[string]AetherDivideSpirit
	_dataAvatarSideIconPath        map[string]AetherDivideSpirit
}

// LoadData retrieves the data. Must be called before AetherDivideSpirit.GroupData
func (a *AetherDivideSpiritAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/AetherDivideSpirit.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *AetherDivideSpiritAccessor) Raw() ([]AetherDivideSpirit, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []AetherDivideSpirit{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with AetherDivideSpiritAccessor.LoadData to preload everything
func (a *AetherDivideSpiritAccessor) GroupData() {
	for _, d := range a._data {
		a._dataExpItemID[d.ExpItemID] = d
		a._dataMiddleAvatarHeadIconPath[d.MiddleAvatarHeadIconPath] = d
		a._dataDefaultAvatarModelPath[d.DefaultAvatarModelPath] = d
		a._dataDefaultAvatarHeadIconPath[d.DefaultAvatarHeadIconPath] = d
		a._dataUltraSkillCutInPrefabPath[d.UltraSkillCutInPrefabPath] = d
		a._dataTeamLeftPrefabPath[d.TeamLeftPrefabPath] = d
		a._dataWaitingAvatarHeadIconPath[d.WaitingAvatarHeadIconPath] = d
		a._dataTeamRightPrefabPath[d.TeamRightPrefabPath] = d
		a._dataSideAvatarHeadIconPath[d.SideAvatarHeadIconPath] = d
		a._dataManikinAvatarModelPath[d.ManikinAvatarModelPath] = d
		a._dataAtlasAvatarHeadIconPath[d.AtlasAvatarHeadIconPath] = d
		a._dataAvatarID[d.AvatarID] = d
		a._dataActionAvatarHeadIconPath[d.ActionAvatarHeadIconPath] = d
		a._dataJsonPath[d.JsonPath] = d
		a._dataAvatarSideIconPath[d.AvatarSideIconPath] = d
	}
}

// ByExpItemID returns the AetherDivideSpirit uniquely identified by ExpItemID
//
// Error is only non-nil if the source errors out
func (a *AetherDivideSpiritAccessor) ByExpItemID(identifier float64) (AetherDivideSpirit, error) {
	if a._dataExpItemID == nil {
		err := a.LoadData()
		if err != nil {
			return AetherDivideSpirit{}, err
		}
		a.GroupData()
	}
	return a._dataExpItemID[identifier], nil
}

// ByMiddleAvatarHeadIconPath returns the AetherDivideSpirit uniquely identified by MiddleAvatarHeadIconPath
//
// Error is only non-nil if the source errors out
func (a *AetherDivideSpiritAccessor) ByMiddleAvatarHeadIconPath(identifier string) (AetherDivideSpirit, error) {
	if a._dataMiddleAvatarHeadIconPath == nil {
		err := a.LoadData()
		if err != nil {
			return AetherDivideSpirit{}, err
		}
		a.GroupData()
	}
	return a._dataMiddleAvatarHeadIconPath[identifier], nil
}

// ByDefaultAvatarModelPath returns the AetherDivideSpirit uniquely identified by DefaultAvatarModelPath
//
// Error is only non-nil if the source errors out
func (a *AetherDivideSpiritAccessor) ByDefaultAvatarModelPath(identifier string) (AetherDivideSpirit, error) {
	if a._dataDefaultAvatarModelPath == nil {
		err := a.LoadData()
		if err != nil {
			return AetherDivideSpirit{}, err
		}
		a.GroupData()
	}
	return a._dataDefaultAvatarModelPath[identifier], nil
}

// ByDefaultAvatarHeadIconPath returns the AetherDivideSpirit uniquely identified by DefaultAvatarHeadIconPath
//
// Error is only non-nil if the source errors out
func (a *AetherDivideSpiritAccessor) ByDefaultAvatarHeadIconPath(identifier string) (AetherDivideSpirit, error) {
	if a._dataDefaultAvatarHeadIconPath == nil {
		err := a.LoadData()
		if err != nil {
			return AetherDivideSpirit{}, err
		}
		a.GroupData()
	}
	return a._dataDefaultAvatarHeadIconPath[identifier], nil
}

// ByUltraSkillCutInPrefabPath returns the AetherDivideSpirit uniquely identified by UltraSkillCutInPrefabPath
//
// Error is only non-nil if the source errors out
func (a *AetherDivideSpiritAccessor) ByUltraSkillCutInPrefabPath(identifier string) (AetherDivideSpirit, error) {
	if a._dataUltraSkillCutInPrefabPath == nil {
		err := a.LoadData()
		if err != nil {
			return AetherDivideSpirit{}, err
		}
		a.GroupData()
	}
	return a._dataUltraSkillCutInPrefabPath[identifier], nil
}

// ByTeamLeftPrefabPath returns the AetherDivideSpirit uniquely identified by TeamLeftPrefabPath
//
// Error is only non-nil if the source errors out
func (a *AetherDivideSpiritAccessor) ByTeamLeftPrefabPath(identifier string) (AetherDivideSpirit, error) {
	if a._dataTeamLeftPrefabPath == nil {
		err := a.LoadData()
		if err != nil {
			return AetherDivideSpirit{}, err
		}
		a.GroupData()
	}
	return a._dataTeamLeftPrefabPath[identifier], nil
}

// ByWaitingAvatarHeadIconPath returns the AetherDivideSpirit uniquely identified by WaitingAvatarHeadIconPath
//
// Error is only non-nil if the source errors out
func (a *AetherDivideSpiritAccessor) ByWaitingAvatarHeadIconPath(identifier string) (AetherDivideSpirit, error) {
	if a._dataWaitingAvatarHeadIconPath == nil {
		err := a.LoadData()
		if err != nil {
			return AetherDivideSpirit{}, err
		}
		a.GroupData()
	}
	return a._dataWaitingAvatarHeadIconPath[identifier], nil
}

// ByTeamRightPrefabPath returns the AetherDivideSpirit uniquely identified by TeamRightPrefabPath
//
// Error is only non-nil if the source errors out
func (a *AetherDivideSpiritAccessor) ByTeamRightPrefabPath(identifier string) (AetherDivideSpirit, error) {
	if a._dataTeamRightPrefabPath == nil {
		err := a.LoadData()
		if err != nil {
			return AetherDivideSpirit{}, err
		}
		a.GroupData()
	}
	return a._dataTeamRightPrefabPath[identifier], nil
}

// BySideAvatarHeadIconPath returns the AetherDivideSpirit uniquely identified by SideAvatarHeadIconPath
//
// Error is only non-nil if the source errors out
func (a *AetherDivideSpiritAccessor) BySideAvatarHeadIconPath(identifier string) (AetherDivideSpirit, error) {
	if a._dataSideAvatarHeadIconPath == nil {
		err := a.LoadData()
		if err != nil {
			return AetherDivideSpirit{}, err
		}
		a.GroupData()
	}
	return a._dataSideAvatarHeadIconPath[identifier], nil
}

// ByManikinAvatarModelPath returns the AetherDivideSpirit uniquely identified by ManikinAvatarModelPath
//
// Error is only non-nil if the source errors out
func (a *AetherDivideSpiritAccessor) ByManikinAvatarModelPath(identifier string) (AetherDivideSpirit, error) {
	if a._dataManikinAvatarModelPath == nil {
		err := a.LoadData()
		if err != nil {
			return AetherDivideSpirit{}, err
		}
		a.GroupData()
	}
	return a._dataManikinAvatarModelPath[identifier], nil
}

// ByAtlasAvatarHeadIconPath returns the AetherDivideSpirit uniquely identified by AtlasAvatarHeadIconPath
//
// Error is only non-nil if the source errors out
func (a *AetherDivideSpiritAccessor) ByAtlasAvatarHeadIconPath(identifier string) (AetherDivideSpirit, error) {
	if a._dataAtlasAvatarHeadIconPath == nil {
		err := a.LoadData()
		if err != nil {
			return AetherDivideSpirit{}, err
		}
		a.GroupData()
	}
	return a._dataAtlasAvatarHeadIconPath[identifier], nil
}

// ByAvatarID returns the AetherDivideSpirit uniquely identified by AvatarID
//
// Error is only non-nil if the source errors out
func (a *AetherDivideSpiritAccessor) ByAvatarID(identifier float64) (AetherDivideSpirit, error) {
	if a._dataAvatarID == nil {
		err := a.LoadData()
		if err != nil {
			return AetherDivideSpirit{}, err
		}
		a.GroupData()
	}
	return a._dataAvatarID[identifier], nil
}

// ByActionAvatarHeadIconPath returns the AetherDivideSpirit uniquely identified by ActionAvatarHeadIconPath
//
// Error is only non-nil if the source errors out
func (a *AetherDivideSpiritAccessor) ByActionAvatarHeadIconPath(identifier string) (AetherDivideSpirit, error) {
	if a._dataActionAvatarHeadIconPath == nil {
		err := a.LoadData()
		if err != nil {
			return AetherDivideSpirit{}, err
		}
		a.GroupData()
	}
	return a._dataActionAvatarHeadIconPath[identifier], nil
}

// ByJsonPath returns the AetherDivideSpirit uniquely identified by JsonPath
//
// Error is only non-nil if the source errors out
func (a *AetherDivideSpiritAccessor) ByJsonPath(identifier string) (AetherDivideSpirit, error) {
	if a._dataJsonPath == nil {
		err := a.LoadData()
		if err != nil {
			return AetherDivideSpirit{}, err
		}
		a.GroupData()
	}
	return a._dataJsonPath[identifier], nil
}

// ByAvatarSideIconPath returns the AetherDivideSpirit uniquely identified by AvatarSideIconPath
//
// Error is only non-nil if the source errors out
func (a *AetherDivideSpiritAccessor) ByAvatarSideIconPath(identifier string) (AetherDivideSpirit, error) {
	if a._dataAvatarSideIconPath == nil {
		err := a.LoadData()
		if err != nil {
			return AetherDivideSpirit{}, err
		}
		a.GroupData()
	}
	return a._dataAvatarSideIconPath[identifier], nil
}
