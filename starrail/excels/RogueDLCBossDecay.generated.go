package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type RogueDLCBossDecay struct {
	BossDecayComeFrom map[string]json.Number   `json:"BossDecayComeFrom"`
	BossDecayDesc     map[string]json.Number   `json:"BossDecayDesc"`
	BossDecayID       json.Number              `json:"BossDecayID"`
	BossDecayName     map[string]json.Number   `json:"BossDecayName"`
	BossEffectIcon    string                   `json:"BossEffectIcon"`
	DecayIcon         string                   `json:"DecayIcon"`
	DescParam         []map[string]json.Number `json:"DescParam"`
	EffectParamList   []json.Number            `json:"EffectParamList"`
	EffectType        string                   `json:"EffectType"`
	ExtraDesc         []json.Number            `json:"ExtraDesc"`
}
type RogueDLCBossDecayAccessor struct {
	_data []RogueDLCBossDecay
}

// LoadData retrieves the data. Must be called before RogueDLCBossDecay.GroupData
func (a *RogueDLCBossDecayAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueDLCBossDecay.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueDLCBossDecayAccessor) Raw() ([]RogueDLCBossDecay, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueDLCBossDecay{}, err
		}
	}
	return a._data, nil
}
