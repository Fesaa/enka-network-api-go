package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type BattleEventSkillConfig struct {
	AttackType           string       `json:"AttackType"`
	BPNeed               hash.Value   `json:"BPNeed"`
	CutinPath            string       `json:"CutinPath"`
	DelayRatio           hash.Value   `json:"DelayRatio"`
	ParamList            []hash.Value `json:"ParamList"`
	SPAdd                hash.Value   `json:"SPAdd"`
	SPBase               hash.Value   `json:"SPBase"`
	SPMultipleRatio      hash.Value   `json:"SPMultipleRatio"`
	SPNeed               hash.Value   `json:"SPNeed"`
	ShowStanceList       []hash.Value `json:"ShowStanceList"`
	SimpleParamList      []hash.Value `json:"SimpleParamList"`
	SimpleSkillDesc      hash.Hash    `json:"SimpleSkillDesc"`
	SkillButtonEffType   string       `json:"SkillButtonEffType"`
	SkillComboValueDelta hash.Value   `json:"SkillComboValueDelta"`
	SkillDesc            hash.Hash    `json:"SkillDesc"`
	SkillEffect          string       `json:"SkillEffect"`
	SkillID              float64      `json:"SkillID"`
	SkillIcon            string       `json:"SkillIcon"`
	SkillName            hash.Hash    `json:"SkillName"`
	SkillTag             hash.Hash    `json:"SkillTag"`
	SkillTriggerKey      string       `json:"SkillTriggerKey"`
	SkillTypeDesc        hash.Hash    `json:"SkillTypeDesc"`
	StanceDamageType     string       `json:"StanceDamageType"`
	UltraSkillIcon       string       `json:"UltraSkillIcon"`
}
type BattleEventSkillConfigAccessor struct {
	_data        []BattleEventSkillConfig
	_dataSkillID map[float64]BattleEventSkillConfig
}

// LoadData retrieves the data. Must be called before BattleEventSkillConfig.GroupData
func (a *BattleEventSkillConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/BattleEventSkillConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *BattleEventSkillConfigAccessor) Raw() ([]BattleEventSkillConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []BattleEventSkillConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with BattleEventSkillConfigAccessor.LoadData to preload everything
func (a *BattleEventSkillConfigAccessor) GroupData() {
	a._dataSkillID = map[float64]BattleEventSkillConfig{}
	for _, d := range a._data {
		a._dataSkillID[d.SkillID] = d
	}
}

// BySkillID returns the BattleEventSkillConfig uniquely identified by SkillID
//
// Error is only non-nil if the source errors out
func (a *BattleEventSkillConfigAccessor) BySkillID(identifier float64) (BattleEventSkillConfig, error) {
	if a._dataSkillID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return BattleEventSkillConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSkillID[identifier], nil
}
