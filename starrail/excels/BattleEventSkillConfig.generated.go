package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type BattleEventSkillConfig struct {
	AttackType           string                   `json:"AttackType"`
	BPNeed               map[string]json.Number   `json:"BPNeed"`
	CutinPath            string                   `json:"CutinPath"`
	DelayRatio           map[string]json.Number   `json:"DelayRatio"`
	ParamList            []map[string]json.Number `json:"ParamList"`
	SPAdd                map[string]json.Number   `json:"SPAdd"`
	SPBase               map[string]json.Number   `json:"SPBase"`
	SPMultipleRatio      map[string]json.Number   `json:"SPMultipleRatio"`
	SPNeed               map[string]json.Number   `json:"SPNeed"`
	ShowStanceList       []map[string]json.Number `json:"ShowStanceList"`
	SimpleParamList      []map[string]json.Number `json:"SimpleParamList"`
	SimpleSkillDesc      map[string]json.Number   `json:"SimpleSkillDesc"`
	SkillButtonEffType   string                   `json:"SkillButtonEffType"`
	SkillComboValueDelta map[string]json.Number   `json:"SkillComboValueDelta"`
	SkillDesc            map[string]json.Number   `json:"SkillDesc"`
	SkillEffect          string                   `json:"SkillEffect"`
	SkillID              json.Number              `json:"SkillID"`
	SkillIcon            string                   `json:"SkillIcon"`
	SkillName            map[string]json.Number   `json:"SkillName"`
	SkillTag             map[string]json.Number   `json:"SkillTag"`
	SkillTriggerKey      string                   `json:"SkillTriggerKey"`
	SkillTypeDesc        map[string]json.Number   `json:"SkillTypeDesc"`
	StanceDamageType     string                   `json:"StanceDamageType"`
	UltraSkillIcon       string                   `json:"UltraSkillIcon"`
}
type BattleEventSkillConfigAccessor struct {
	_data []BattleEventSkillConfig
}

// LoadData retrieves the data. Must be called before BattleEventSkillConfig.GroupData
func (a *BattleEventSkillConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/BattleEventSkillConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *BattleEventSkillConfigAccessor) Raw() ([]BattleEventSkillConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []BattleEventSkillConfig{}, err
		}
	}
	return a._data, nil
}
