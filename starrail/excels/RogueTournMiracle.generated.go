package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type RogueTournMiracle struct {
	HandbookMiracleID      float64 `json:"HandbookMiracleID"`
	MiracleCategory        string  `json:"MiracleCategory"`
	MiracleDisplayID       float64 `json:"MiracleDisplayID"`
	MiracleEffectDisplayID float64 `json:"MiracleEffectDisplayID"`
	MiracleID              float64 `json:"MiracleID"`
	TournMode              string  `json:"TournMode"`
}
type RogueTournMiracleAccessor struct {
	_data          []RogueTournMiracle
	_dataMiracleID map[float64]RogueTournMiracle
}

// LoadData retrieves the data. Must be called before RogueTournMiracle.GroupData
func (a *RogueTournMiracleAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueTournMiracle.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueTournMiracleAccessor) Raw() ([]RogueTournMiracle, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueTournMiracle{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueTournMiracleAccessor.LoadData to preload everything
func (a *RogueTournMiracleAccessor) GroupData() {
	for _, d := range a._data {
		a._dataMiracleID[d.MiracleID] = d
	}
}

// ByMiracleID returns the RogueTournMiracle uniquely identified by MiracleID
//
// Error is only non-nil if the source errors out
func (a *RogueTournMiracleAccessor) ByMiracleID(identifier float64) (RogueTournMiracle, error) {
	if a._dataMiracleID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueTournMiracle{}, err
			}
		}
		a.GroupData()
	}
	return a._dataMiracleID[identifier], nil
}
