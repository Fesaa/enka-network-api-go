package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type FantasticStoryBattleID struct {
	ActivityModuleID     float64       `json:"ActivityModuleID"`
	AvailableBuffSlotID  []float64     `json:"AvailableBuffSlotID"`
	BattleAreaGroupID    float64       `json:"BattleAreaGroupID"`
	BattleAreaID         float64       `json:"BattleAreaID"`
	BattleID             float64       `json:"BattleID"`
	BookContext          hash.Hash     `json:"BookContext"`
	BookContextChange    hash.Hash     `json:"BookContextChange"`
	BookTitle            hash.Hash     `json:"BookTitle"`
	DisplayMonsterList   []float64     `json:"DisplayMonsterList"`
	EnvironmentBuffID    float64       `json:"EnvironmentBuffID"`
	EventID              float64       `json:"EventID"`
	FigurePath           string        `json:"FigurePath"`
	FinishQuest          float64       `json:"FinishQuest"`
	FloorID              float64       `json:"FloorID"`
	Name                 hash.Hash     `json:"Name"`
	PlaneID              float64       `json:"PlaneID"`
	PreBattleID          float64       `json:"PreBattleID"`
	QuestList            []float64     `json:"QuestList"`
	RecommendAvatar      []float64     `json:"RecommendAvatar"`
	RecommendNature      []interface{} `json:"RecommendNature"`
	SpecialAvatarIDList  []float64     `json:"SpecialAvatarIDList"`
	TextJoinIDList       []float64     `json:"TextJoinIDList"`
	TextJoinIDListChange []float64     `json:"TextJoinIDListChange"`
	TurnLimit            float64       `json:"TurnLimit"`
	UnlockChapterID      float64       `json:"UnlockChapterID"`
}
type FantasticStoryBattleIDAccessor struct {
	_data            []FantasticStoryBattleID
	_dataFinishQuest map[float64]FantasticStoryBattleID
	_dataBattleID    map[float64]FantasticStoryBattleID
	_dataEventID     map[float64]FantasticStoryBattleID
	_dataFigurePath  map[string]FantasticStoryBattleID
}

// LoadData retrieves the data. Must be called before FantasticStoryBattleID.GroupData
func (a *FantasticStoryBattleIDAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/FantasticStoryBattleID.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *FantasticStoryBattleIDAccessor) Raw() ([]FantasticStoryBattleID, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []FantasticStoryBattleID{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with FantasticStoryBattleIDAccessor.LoadData to preload everything
func (a *FantasticStoryBattleIDAccessor) GroupData() {
	for _, d := range a._data {
		a._dataFinishQuest[d.FinishQuest] = d
		a._dataBattleID[d.BattleID] = d
		a._dataEventID[d.EventID] = d
		a._dataFigurePath[d.FigurePath] = d
	}
}

// ByFinishQuest returns the FantasticStoryBattleID uniquely identified by FinishQuest
//
// Error is only non-nil if the source errors out
func (a *FantasticStoryBattleIDAccessor) ByFinishQuest(identifier float64) (FantasticStoryBattleID, error) {
	if a._dataFinishQuest == nil {
		err := a.LoadData()
		if err != nil {
			return FantasticStoryBattleID{}, err
		}
		a.GroupData()
	}
	return a._dataFinishQuest[identifier], nil
}

// ByBattleID returns the FantasticStoryBattleID uniquely identified by BattleID
//
// Error is only non-nil if the source errors out
func (a *FantasticStoryBattleIDAccessor) ByBattleID(identifier float64) (FantasticStoryBattleID, error) {
	if a._dataBattleID == nil {
		err := a.LoadData()
		if err != nil {
			return FantasticStoryBattleID{}, err
		}
		a.GroupData()
	}
	return a._dataBattleID[identifier], nil
}

// ByEventID returns the FantasticStoryBattleID uniquely identified by EventID
//
// Error is only non-nil if the source errors out
func (a *FantasticStoryBattleIDAccessor) ByEventID(identifier float64) (FantasticStoryBattleID, error) {
	if a._dataEventID == nil {
		err := a.LoadData()
		if err != nil {
			return FantasticStoryBattleID{}, err
		}
		a.GroupData()
	}
	return a._dataEventID[identifier], nil
}

// ByFigurePath returns the FantasticStoryBattleID uniquely identified by FigurePath
//
// Error is only non-nil if the source errors out
func (a *FantasticStoryBattleIDAccessor) ByFigurePath(identifier string) (FantasticStoryBattleID, error) {
	if a._dataFigurePath == nil {
		err := a.LoadData()
		if err != nil {
			return FantasticStoryBattleID{}, err
		}
		a.GroupData()
	}
	return a._dataFigurePath[identifier], nil
}
