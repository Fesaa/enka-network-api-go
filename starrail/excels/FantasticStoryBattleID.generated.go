package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type FantasticStoryBattleID struct {
	ActivityModuleID     json.Number            `json:"ActivityModuleID"`
	AvailableBuffSlotID  []json.Number          `json:"AvailableBuffSlotID"`
	BattleAreaGroupID    json.Number            `json:"BattleAreaGroupID"`
	BattleAreaID         json.Number            `json:"BattleAreaID"`
	BattleID             json.Number            `json:"BattleID"`
	BookContext          map[string]json.Number `json:"BookContext"`
	BookContextChange    map[string]json.Number `json:"BookContextChange"`
	BookTitle            map[string]json.Number `json:"BookTitle"`
	DisplayMonsterList   []json.Number          `json:"DisplayMonsterList"`
	EnvironmentBuffID    json.Number            `json:"EnvironmentBuffID"`
	EventID              json.Number            `json:"EventID"`
	FigurePath           string                 `json:"FigurePath"`
	FinishQuest          json.Number            `json:"FinishQuest"`
	FloorID              json.Number            `json:"FloorID"`
	Name                 map[string]json.Number `json:"Name"`
	PlaneID              json.Number            `json:"PlaneID"`
	PreBattleID          json.Number            `json:"PreBattleID"`
	QuestList            []json.Number          `json:"QuestList"`
	RecommendAvatar      []json.Number          `json:"RecommendAvatar"`
	RecommendNature      []interface{}          `json:"RecommendNature"`
	SpecialAvatarIDList  []json.Number          `json:"SpecialAvatarIDList"`
	TextJoinIDList       []json.Number          `json:"TextJoinIDList"`
	TextJoinIDListChange []json.Number          `json:"TextJoinIDListChange"`
	TurnLimit            json.Number            `json:"TurnLimit"`
	UnlockChapterID      json.Number            `json:"UnlockChapterID"`
}
type FantasticStoryBattleIDAccessor struct {
	_data           []FantasticStoryBattleID
	_dataFigurePath map[string]FantasticStoryBattleID
}

// LoadData retrieves the data. Must be called before FantasticStoryBattleID.GroupData
func (a *FantasticStoryBattleIDAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/FantasticStoryBattleID.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *FantasticStoryBattleIDAccessor) Raw() ([]FantasticStoryBattleID, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []FantasticStoryBattleID{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with FantasticStoryBattleIDAccessor.LoadData to preload everything
func (a *FantasticStoryBattleIDAccessor) GroupData() {
	a._dataFigurePath = map[string]FantasticStoryBattleID{}
	for _, d := range a._data {
		a._dataFigurePath[d.FigurePath] = d
	}
}

// ByFigurePath returns the FantasticStoryBattleID uniquely identified by FigurePath
//
// Error is only non-nil if the source errors out
func (a *FantasticStoryBattleIDAccessor) ByFigurePath(identifier string) (FantasticStoryBattleID, error) {
	if a._dataFigurePath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FantasticStoryBattleID{}, err
			}
		}
		a.GroupData()
	}
	return a._dataFigurePath[identifier], nil
}
