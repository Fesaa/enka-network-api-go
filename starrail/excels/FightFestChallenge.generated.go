package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type FightFestChallenge struct {
	AvatarInfoID        float64       `json:"AvatarInfoID"`
	BattleTargetList    []float64     `json:"BattleTargetList"`
	ChallengeID         float64       `json:"ChallengeID"`
	EnvironmentBuffID   float64       `json:"EnvironmentBuffID"`
	EventID             float64       `json:"EventID"`
	FigurePath          string        `json:"FigurePath"`
	GroupID             float64       `json:"GroupID"`
	OriginalFigurePath  string        `json:"OriginalFigurePath"`
	OriginalStageName   hash.Hash     `json:"OriginalStageName"`
	QuestGroupID        float64       `json:"QuestGroupID"`
	QuestIDList         []float64     `json:"QuestIDList"`
	SpecialAvatarList   []float64     `json:"SpecialAvatarList"`
	TabIconPath         string        `json:"TabIconPath"`
	TabName             hash.Hash     `json:"TabName"`
	TutorialID          float64       `json:"TutorialID"`
	UnlockConditionList []interface{} `json:"UnlockConditionList"`
	UnlockSubMissionID  float64       `json:"UnlockSubMissionID"`
	UnlockSubMussionID  float64       `json:"UnlockSubMussionID"`
	UnlockTips          hash.Hash     `json:"UnlockTips"`
}
type FightFestChallengeAccessor struct {
	_data                   []FightFestChallenge
	_dataFigurePath         map[string]FightFestChallenge
	_dataChallengeID        map[float64]FightFestChallenge
	_dataGroupID            map[float64]FightFestChallenge
	_dataUnlockSubMussionID map[float64]FightFestChallenge
	_dataTabIconPath        map[string]FightFestChallenge
	_dataTutorialID         map[float64]FightFestChallenge
	_dataUnlockSubMissionID map[float64]FightFestChallenge
	_dataAvatarInfoID       map[float64]FightFestChallenge
	_dataEventID            map[float64]FightFestChallenge
}

// LoadData retrieves the data. Must be called before FightFestChallenge.GroupData
func (a *FightFestChallengeAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/FightFestChallenge.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *FightFestChallengeAccessor) Raw() ([]FightFestChallenge, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []FightFestChallenge{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with FightFestChallengeAccessor.LoadData to preload everything
func (a *FightFestChallengeAccessor) GroupData() {
	for _, d := range a._data {
		a._dataFigurePath[d.FigurePath] = d
		a._dataChallengeID[d.ChallengeID] = d
		a._dataGroupID[d.GroupID] = d
		a._dataUnlockSubMussionID[d.UnlockSubMussionID] = d
		a._dataTabIconPath[d.TabIconPath] = d
		a._dataTutorialID[d.TutorialID] = d
		a._dataUnlockSubMissionID[d.UnlockSubMissionID] = d
		a._dataAvatarInfoID[d.AvatarInfoID] = d
		a._dataEventID[d.EventID] = d
	}
}

// ByFigurePath returns the FightFestChallenge uniquely identified by FigurePath
//
// Error is only non-nil if the source errors out
func (a *FightFestChallengeAccessor) ByFigurePath(identifier string) (FightFestChallenge, error) {
	if a._dataFigurePath == nil {
		err := a.LoadData()
		if err != nil {
			return FightFestChallenge{}, err
		}
		a.GroupData()
	}
	return a._dataFigurePath[identifier], nil
}

// ByChallengeID returns the FightFestChallenge uniquely identified by ChallengeID
//
// Error is only non-nil if the source errors out
func (a *FightFestChallengeAccessor) ByChallengeID(identifier float64) (FightFestChallenge, error) {
	if a._dataChallengeID == nil {
		err := a.LoadData()
		if err != nil {
			return FightFestChallenge{}, err
		}
		a.GroupData()
	}
	return a._dataChallengeID[identifier], nil
}

// ByGroupID returns the FightFestChallenge uniquely identified by GroupID
//
// Error is only non-nil if the source errors out
func (a *FightFestChallengeAccessor) ByGroupID(identifier float64) (FightFestChallenge, error) {
	if a._dataGroupID == nil {
		err := a.LoadData()
		if err != nil {
			return FightFestChallenge{}, err
		}
		a.GroupData()
	}
	return a._dataGroupID[identifier], nil
}

// ByUnlockSubMussionID returns the FightFestChallenge uniquely identified by UnlockSubMussionID
//
// Error is only non-nil if the source errors out
func (a *FightFestChallengeAccessor) ByUnlockSubMussionID(identifier float64) (FightFestChallenge, error) {
	if a._dataUnlockSubMussionID == nil {
		err := a.LoadData()
		if err != nil {
			return FightFestChallenge{}, err
		}
		a.GroupData()
	}
	return a._dataUnlockSubMussionID[identifier], nil
}

// ByTabIconPath returns the FightFestChallenge uniquely identified by TabIconPath
//
// Error is only non-nil if the source errors out
func (a *FightFestChallengeAccessor) ByTabIconPath(identifier string) (FightFestChallenge, error) {
	if a._dataTabIconPath == nil {
		err := a.LoadData()
		if err != nil {
			return FightFestChallenge{}, err
		}
		a.GroupData()
	}
	return a._dataTabIconPath[identifier], nil
}

// ByTutorialID returns the FightFestChallenge uniquely identified by TutorialID
//
// Error is only non-nil if the source errors out
func (a *FightFestChallengeAccessor) ByTutorialID(identifier float64) (FightFestChallenge, error) {
	if a._dataTutorialID == nil {
		err := a.LoadData()
		if err != nil {
			return FightFestChallenge{}, err
		}
		a.GroupData()
	}
	return a._dataTutorialID[identifier], nil
}

// ByUnlockSubMissionID returns the FightFestChallenge uniquely identified by UnlockSubMissionID
//
// Error is only non-nil if the source errors out
func (a *FightFestChallengeAccessor) ByUnlockSubMissionID(identifier float64) (FightFestChallenge, error) {
	if a._dataUnlockSubMissionID == nil {
		err := a.LoadData()
		if err != nil {
			return FightFestChallenge{}, err
		}
		a.GroupData()
	}
	return a._dataUnlockSubMissionID[identifier], nil
}

// ByAvatarInfoID returns the FightFestChallenge uniquely identified by AvatarInfoID
//
// Error is only non-nil if the source errors out
func (a *FightFestChallengeAccessor) ByAvatarInfoID(identifier float64) (FightFestChallenge, error) {
	if a._dataAvatarInfoID == nil {
		err := a.LoadData()
		if err != nil {
			return FightFestChallenge{}, err
		}
		a.GroupData()
	}
	return a._dataAvatarInfoID[identifier], nil
}

// ByEventID returns the FightFestChallenge uniquely identified by EventID
//
// Error is only non-nil if the source errors out
func (a *FightFestChallengeAccessor) ByEventID(identifier float64) (FightFestChallenge, error) {
	if a._dataEventID == nil {
		err := a.LoadData()
		if err != nil {
			return FightFestChallenge{}, err
		}
		a.GroupData()
	}
	return a._dataEventID[identifier], nil
}
