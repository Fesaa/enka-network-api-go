package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type AlleyReward struct {
	Level     float64 `json:"Level"`
	NumTarget float64 `json:"NumTarget"`
	RewardID  float64 `json:"RewardID"`
}
type AlleyRewardAccessor struct {
	_data         []AlleyReward
	_dataLevel    map[float64]AlleyReward
	_dataRewardID map[float64]AlleyReward
}

// LoadData retrieves the data. Must be called before AlleyReward.GroupData
func (a *AlleyRewardAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/AlleyReward.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *AlleyRewardAccessor) Raw() ([]AlleyReward, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []AlleyReward{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with AlleyRewardAccessor.LoadData to preload everything
func (a *AlleyRewardAccessor) GroupData() {
	a._dataLevel = map[float64]AlleyReward{}
	a._dataRewardID = map[float64]AlleyReward{}
	for _, d := range a._data {
		a._dataLevel[d.Level] = d
		a._dataRewardID[d.RewardID] = d
	}
}

// ByLevel returns the AlleyReward uniquely identified by Level
//
// Error is only non-nil if the source errors out
func (a *AlleyRewardAccessor) ByLevel(identifier float64) (AlleyReward, error) {
	if a._dataLevel == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AlleyReward{}, err
			}
		}
		a.GroupData()
	}
	return a._dataLevel[identifier], nil
}

// ByRewardID returns the AlleyReward uniquely identified by RewardID
//
// Error is only non-nil if the source errors out
func (a *AlleyRewardAccessor) ByRewardID(identifier float64) (AlleyReward, error) {
	if a._dataRewardID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AlleyReward{}, err
			}
		}
		a.GroupData()
	}
	return a._dataRewardID[identifier], nil
}
