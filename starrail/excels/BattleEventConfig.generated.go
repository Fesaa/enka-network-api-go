package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type BattleEventConfig struct {
	AbilityList             []string                            `json:"AbilityList"`
	ActionBarDescrptionText map[string]json.Number              `json:"ActionBarDescrptionText"`
	AssetPackName           string                              `json:"AssetPackName"`
	BEActionBarType         json.Number                         `json:"BEActionBarType"`
	BattleEventButtonType   json.Number                         `json:"BattleEventButtonType"`
	BattleEventID           json.Number                         `json:"BattleEventID"`
	BattleEventName         string                              `json:"BattleEventName"`
	DescrptionText          string                              `json:"DescrptionText"`
	EliteGroup              bool                                `json:"EliteGroup"`
	EventSubType            string                              `json:"EventSubType"`
	HardLevel               bool                                `json:"HardLevel"`
	HeadIcon                string                              `json:"HeadIcon"`
	OverrideProperty        []BattleEventConfigOverrideProperty `json:"OverrideProperty"`
	ParamList               []map[string]json.Number            `json:"ParamList"`
	Speed                   map[string]json.Number              `json:"Speed"`
	Team                    string                              `json:"Team"`
}
type BattleEventConfigOverrideProperty struct {
	PropertyType string                 `json:"PropertyType"`
	Value        map[string]json.Number `json:"Value"`
}
type BattleEventConfigAccessor struct {
	_data []BattleEventConfig
}

// LoadData retrieves the data. Must be called before BattleEventConfig.GroupData
func (a *BattleEventConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/BattleEventConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *BattleEventConfigAccessor) Raw() ([]BattleEventConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []BattleEventConfig{}, err
		}
	}
	return a._data, nil
}
