package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type BattleEventConfig struct {
	AbilityList             []string                            `json:"AbilityList"`
	ActionBarDescrptionText hash.Hash                           `json:"ActionBarDescrptionText"`
	AssetPackName           string                              `json:"AssetPackName"`
	BEActionBarType         float64                             `json:"BEActionBarType"`
	BattleEventButtonType   float64                             `json:"BattleEventButtonType"`
	BattleEventID           float64                             `json:"BattleEventID"`
	BattleEventName         string                              `json:"BattleEventName"`
	DescrptionText          string                              `json:"DescrptionText"`
	EliteGroup              bool                                `json:"EliteGroup"`
	EventSubType            string                              `json:"EventSubType"`
	HardLevel               bool                                `json:"HardLevel"`
	HeadIcon                string                              `json:"HeadIcon"`
	OverrideProperty        []BattleEventConfigOverrideProperty `json:"OverrideProperty"`
	ParamList               []hash.IntValue                     `json:"ParamList"`
	Speed                   hash.IntValue                       `json:"Speed"`
	Team                    string                              `json:"Team"`
}
type BattleEventConfigOverrideProperty struct {
	PropertyType string        `json:"PropertyType"`
	Value        hash.IntValue `json:"Value"`
}
type BattleEventConfigAccessor struct {
	_data              []BattleEventConfig
	_dataBattleEventID map[float64]BattleEventConfig
}

// LoadData retrieves the data. Must be called before BattleEventConfig.GroupData
func (a *BattleEventConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/BattleEventConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *BattleEventConfigAccessor) Raw() ([]BattleEventConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []BattleEventConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with BattleEventConfigAccessor.LoadData to preload everything
func (a *BattleEventConfigAccessor) GroupData() {
	for _, d := range a._data {
		a._dataBattleEventID[d.BattleEventID] = d
	}
}

// ByBattleEventID returns the BattleEventConfig uniquely identified by BattleEventID
//
// Error is only non-nil if the source errors out
func (a *BattleEventConfigAccessor) ByBattleEventID(identifier float64) (BattleEventConfig, error) {
	if a._dataBattleEventID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return BattleEventConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataBattleEventID[identifier], nil
}
