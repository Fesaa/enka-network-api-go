package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type MarbleRandomBuff struct {
	ConditionList    []json.Number          `json:"ConditionList"`
	Desc             map[string]json.Number `json:"Desc"`
	EffectParam      json.Number            `json:"EffectParam"`
	EffectType       json.Number            `json:"EffectType"`
	ID               json.Number            `json:"ID"`
	IconPath         string                 `json:"IconPath"`
	IsRepeat         json.Number            `json:"IsRepeat"`
	Name             map[string]json.Number `json:"Name"`
	ParamList        []json.Number          `json:"ParamList"`
	SetInactive      json.Number            `json:"SetInactive"`
	UnlockSubMission json.Number            `json:"UnlockSubMission"`
	Weight           json.Number            `json:"Weight"`
}
type MarbleRandomBuffAccessor struct {
	_data            []MarbleRandomBuff
	_dataEffectParam map[json.Number]MarbleRandomBuff
	_dataID          map[json.Number]MarbleRandomBuff
}

// LoadData retrieves the data. Must be called before MarbleRandomBuff.GroupData
func (a *MarbleRandomBuffAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MarbleRandomBuff.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MarbleRandomBuffAccessor) Raw() ([]MarbleRandomBuff, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MarbleRandomBuff{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MarbleRandomBuffAccessor.LoadData to preload everything
func (a *MarbleRandomBuffAccessor) GroupData() {
	a._dataEffectParam = map[json.Number]MarbleRandomBuff{}
	a._dataID = map[json.Number]MarbleRandomBuff{}
	for _, d := range a._data {
		a._dataEffectParam[d.EffectParam] = d
		a._dataID[d.ID] = d
	}
}

// ByEffectParam returns the MarbleRandomBuff uniquely identified by EffectParam
//
// Error is only non-nil if the source errors out
func (a *MarbleRandomBuffAccessor) ByEffectParam(identifier json.Number) (MarbleRandomBuff, error) {
	if a._dataEffectParam == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MarbleRandomBuff{}, err
			}
		}
		a.GroupData()
	}
	return a._dataEffectParam[identifier], nil
}

// ByID returns the MarbleRandomBuff uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *MarbleRandomBuffAccessor) ByID(identifier json.Number) (MarbleRandomBuff, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MarbleRandomBuff{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}
