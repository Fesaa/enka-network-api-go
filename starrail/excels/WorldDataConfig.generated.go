package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type WorldDataConfig struct {
	CameraHeight                 json.Number            `json:"CameraHeight"`
	CameraWidth                  json.Number            `json:"CameraWidth"`
	ChapterIconBigPath           string                 `json:"ChapterIconBigPath"`
	ChronicleWorldBgPath         string                 `json:"ChronicleWorldBgPath"`
	ChronicleWorldPredictPath    string                 `json:"ChronicleWorldPredictPath"`
	ChronicleWorldProcessingPath string                 `json:"ChronicleWorldProcessingPath"`
	ChronicleWorldSubBgPath      string                 `json:"ChronicleWorldSubBgPath"`
	DynamicOptionalBlock         string                 `json:"DynamicOptionalBlock"`
	ID                           json.Number            `json:"ID"`
	IsRealWorld                  bool                   `json:"IsRealWorld"`
	IsShow                       bool                   `json:"IsShow"`
	MapSpaceTypeList             []string               `json:"MapSpaceTypeList"`
	SmallWorldIconPath           string                 `json:"SmallWorldIconPath"`
	TrainSpaceType               string                 `json:"TrainSpaceType"`
	WorldDesc                    map[string]json.Number `json:"WorldDesc"`
	WorldLanguageName            map[string]json.Number `json:"WorldLanguageName"`
	WorldName                    map[string]json.Number `json:"WorldName"`
}
type WorldDataConfigAccessor struct {
	_data   []WorldDataConfig
	_dataID map[json.Number]WorldDataConfig
}

// LoadData retrieves the data. Must be called before WorldDataConfig.GroupData
func (a *WorldDataConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/WorldDataConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *WorldDataConfigAccessor) Raw() ([]WorldDataConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []WorldDataConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with WorldDataConfigAccessor.LoadData to preload everything
func (a *WorldDataConfigAccessor) GroupData() {
	a._dataID = map[json.Number]WorldDataConfig{}
	for _, d := range a._data {
		a._dataID[d.ID] = d
	}
}

// ByID returns the WorldDataConfig uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *WorldDataConfigAccessor) ByID(identifier json.Number) (WorldDataConfig, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return WorldDataConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}
