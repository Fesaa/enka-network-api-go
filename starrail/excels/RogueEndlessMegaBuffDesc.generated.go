package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type RogueEndlessMegaBuffDesc struct {
	BuffDesc        map[string]json.Number `json:"BuffDesc"`
	BuffPreshowDesc map[string]json.Number `json:"BuffPreshowDesc"`
	BuffSimpleDesc  map[string]json.Number `json:"BuffSimpleDesc"`
	MazeBuffID      json.Number            `json:"MazeBuffID"`
}
type RogueEndlessMegaBuffDescAccessor struct {
	_data           []RogueEndlessMegaBuffDesc
	_dataMazeBuffID map[json.Number]RogueEndlessMegaBuffDesc
}

// LoadData retrieves the data. Must be called before RogueEndlessMegaBuffDesc.GroupData
func (a *RogueEndlessMegaBuffDescAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueEndlessMegaBuffDesc.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueEndlessMegaBuffDescAccessor) Raw() ([]RogueEndlessMegaBuffDesc, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueEndlessMegaBuffDesc{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueEndlessMegaBuffDescAccessor.LoadData to preload everything
func (a *RogueEndlessMegaBuffDescAccessor) GroupData() {
	a._dataMazeBuffID = map[json.Number]RogueEndlessMegaBuffDesc{}
	for _, d := range a._data {
		a._dataMazeBuffID[d.MazeBuffID] = d
	}
}

// ByMazeBuffID returns the RogueEndlessMegaBuffDesc uniquely identified by MazeBuffID
//
// Error is only non-nil if the source errors out
func (a *RogueEndlessMegaBuffDescAccessor) ByMazeBuffID(identifier json.Number) (RogueEndlessMegaBuffDesc, error) {
	if a._dataMazeBuffID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueEndlessMegaBuffDesc{}, err
			}
		}
		a.GroupData()
	}
	return a._dataMazeBuffID[identifier], nil
}
