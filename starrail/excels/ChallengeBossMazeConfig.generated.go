package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type ChallengeBossMazeConfig struct {
	ChallengeTargetID  []json.Number          `json:"ChallengeTargetID"`
	ConfigList1        []json.Number          `json:"ConfigList1"`
	ConfigList2        []json.Number          `json:"ConfigList2"`
	DamageType1        []string               `json:"DamageType1"`
	DamageType2        []string               `json:"DamageType2"`
	EventIDList1       []json.Number          `json:"EventIDList1"`
	EventIDList2       []json.Number          `json:"EventIDList2"`
	Floor              json.Number            `json:"Floor"`
	GroupID            json.Number            `json:"GroupID"`
	ID                 json.Number            `json:"ID"`
	MapEntranceID      json.Number            `json:"MapEntranceID"`
	MapEntranceID2     json.Number            `json:"MapEntranceID2"`
	MazeBuffID         json.Number            `json:"MazeBuffID"`
	MazeGroupID1       json.Number            `json:"MazeGroupID1"`
	MazeGroupID2       json.Number            `json:"MazeGroupID2"`
	MonsterID1         []interface{}          `json:"MonsterID1"`
	MonsterID2         []json.Number          `json:"MonsterID2"`
	Name               map[string]json.Number `json:"Name"`
	NpcMonsterIDList1  []json.Number          `json:"NpcMonsterIDList1"`
	NpcMonsterIDList2  []json.Number          `json:"NpcMonsterIDList2"`
	PreChallengeMazeID json.Number            `json:"PreChallengeMazeID"`
	RewardID           json.Number            `json:"RewardID"`
	StageNum           json.Number            `json:"StageNum"`
}
type ChallengeBossMazeConfigAccessor struct {
	_data   []ChallengeBossMazeConfig
	_dataID map[json.Number]ChallengeBossMazeConfig
}

// LoadData retrieves the data. Must be called before ChallengeBossMazeConfig.GroupData
func (a *ChallengeBossMazeConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ChallengeBossMazeConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ChallengeBossMazeConfigAccessor) Raw() ([]ChallengeBossMazeConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ChallengeBossMazeConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ChallengeBossMazeConfigAccessor.LoadData to preload everything
func (a *ChallengeBossMazeConfigAccessor) GroupData() {
	a._dataID = map[json.Number]ChallengeBossMazeConfig{}
	for _, d := range a._data {
		a._dataID[d.ID] = d
	}
}

// ByID returns the ChallengeBossMazeConfig uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *ChallengeBossMazeConfigAccessor) ByID(identifier json.Number) (ChallengeBossMazeConfig, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ChallengeBossMazeConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}
