package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type RogueDLCJoyHelp struct {
	AeonDimensionID float64   `json:"AeonDimensionID"`
	PlayShortDesc   hash.Hash `json:"PlayShortDesc"`
}
type RogueDLCJoyHelpAccessor struct {
	_data                []RogueDLCJoyHelp
	_dataAeonDimensionID map[float64]RogueDLCJoyHelp
}

// LoadData retrieves the data. Must be called before RogueDLCJoyHelp.GroupData
func (a *RogueDLCJoyHelpAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueDLCJoyHelp.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueDLCJoyHelpAccessor) Raw() ([]RogueDLCJoyHelp, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueDLCJoyHelp{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueDLCJoyHelpAccessor.LoadData to preload everything
func (a *RogueDLCJoyHelpAccessor) GroupData() {
	a._dataAeonDimensionID = map[float64]RogueDLCJoyHelp{}
	for _, d := range a._data {
		a._dataAeonDimensionID[d.AeonDimensionID] = d
	}
}

// ByAeonDimensionID returns the RogueDLCJoyHelp uniquely identified by AeonDimensionID
//
// Error is only non-nil if the source errors out
func (a *RogueDLCJoyHelpAccessor) ByAeonDimensionID(identifier float64) (RogueDLCJoyHelp, error) {
	if a._dataAeonDimensionID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueDLCJoyHelp{}, err
			}
		}
		a.GroupData()
	}
	return a._dataAeonDimensionID[identifier], nil
}
