package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type TalkBehavior struct {
	BehaviorType json.Number   `json:"BehaviorType"`
	CurrencyItem json.Number   `json:"CurrencyItem"`
	CustomString string        `json:"CustomString"`
	ID           json.Number   `json:"ID"`
	ParaInt      json.Number   `json:"ParaInt"`
	ParaList     []json.Number `json:"ParaList"`
	ParaType     string        `json:"ParaType"`
}
type TalkBehaviorAccessor struct {
	_data             []TalkBehavior
	_dataCustomString map[string]TalkBehavior
}

// LoadData retrieves the data. Must be called before TalkBehavior.GroupData
func (a *TalkBehaviorAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/TalkBehavior.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *TalkBehaviorAccessor) Raw() ([]TalkBehavior, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []TalkBehavior{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with TalkBehaviorAccessor.LoadData to preload everything
func (a *TalkBehaviorAccessor) GroupData() {
	a._dataCustomString = map[string]TalkBehavior{}
	for _, d := range a._data {
		a._dataCustomString[d.CustomString] = d
	}
}

// ByCustomString returns the TalkBehavior uniquely identified by CustomString
//
// Error is only non-nil if the source errors out
func (a *TalkBehaviorAccessor) ByCustomString(identifier string) (TalkBehavior, error) {
	if a._dataCustomString == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return TalkBehavior{}, err
			}
		}
		a.GroupData()
	}
	return a._dataCustomString[identifier], nil
}
