package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type EquipmentExpItemConfig struct {
	CoinCost   float64 `json:"CoinCost"`
	ExpProvide float64 `json:"ExpProvide"`
	ItemID     float64 `json:"ItemID"`
}
type EquipmentExpItemConfigAccessor struct {
	_data           []EquipmentExpItemConfig
	_dataCoinCost   map[float64]EquipmentExpItemConfig
	_dataExpProvide map[float64]EquipmentExpItemConfig
	_dataItemID     map[float64]EquipmentExpItemConfig
}

// LoadData retrieves the data. Must be called before EquipmentExpItemConfig.GroupData
func (a *EquipmentExpItemConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/EquipmentExpItemConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *EquipmentExpItemConfigAccessor) Raw() ([]EquipmentExpItemConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []EquipmentExpItemConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with EquipmentExpItemConfigAccessor.LoadData to preload everything
func (a *EquipmentExpItemConfigAccessor) GroupData() {
	for _, d := range a._data {
		a._dataCoinCost[d.CoinCost] = d
		a._dataExpProvide[d.ExpProvide] = d
		a._dataItemID[d.ItemID] = d
	}
}

// ByCoinCost returns the EquipmentExpItemConfig uniquely identified by CoinCost
//
// Error is only non-nil if the source errors out
func (a *EquipmentExpItemConfigAccessor) ByCoinCost(identifier float64) (EquipmentExpItemConfig, error) {
	if a._dataCoinCost == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return EquipmentExpItemConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataCoinCost[identifier], nil
}

// ByExpProvide returns the EquipmentExpItemConfig uniquely identified by ExpProvide
//
// Error is only non-nil if the source errors out
func (a *EquipmentExpItemConfigAccessor) ByExpProvide(identifier float64) (EquipmentExpItemConfig, error) {
	if a._dataExpProvide == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return EquipmentExpItemConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataExpProvide[identifier], nil
}

// ByItemID returns the EquipmentExpItemConfig uniquely identified by ItemID
//
// Error is only non-nil if the source errors out
func (a *EquipmentExpItemConfigAccessor) ByItemID(identifier float64) (EquipmentExpItemConfig, error) {
	if a._dataItemID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return EquipmentExpItemConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataItemID[identifier], nil
}
