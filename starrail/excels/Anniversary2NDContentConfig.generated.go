package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type Anniversary2NDContentConfig struct {
	ContentID         float64   `json:"ContentID"`
	ContentTitle      hash.Hash `json:"ContentTitle"`
	RelatedActivityID float64   `json:"RelatedActivityID"`
	RelatedGotoID     float64   `json:"RelatedGotoID"`
}
type Anniversary2NDContentConfigAccessor struct {
	_data          []Anniversary2NDContentConfig
	_dataContentID map[float64]Anniversary2NDContentConfig
}

// LoadData retrieves the data. Must be called before Anniversary2NDContentConfig.GroupData
func (a *Anniversary2NDContentConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/Anniversary2NDContentConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *Anniversary2NDContentConfigAccessor) Raw() ([]Anniversary2NDContentConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []Anniversary2NDContentConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with Anniversary2NDContentConfigAccessor.LoadData to preload everything
func (a *Anniversary2NDContentConfigAccessor) GroupData() {
	for _, d := range a._data {
		a._dataContentID[d.ContentID] = d
	}
}

// ByContentID returns the Anniversary2NDContentConfig uniquely identified by ContentID
//
// Error is only non-nil if the source errors out
func (a *Anniversary2NDContentConfigAccessor) ByContentID(identifier float64) (Anniversary2NDContentConfig, error) {
	if a._dataContentID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return Anniversary2NDContentConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataContentID[identifier], nil
}
