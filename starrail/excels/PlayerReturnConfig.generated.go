package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type PlayerReturnConfig struct {
	ActivityModuleID      json.Number              `json:"ActivityModuleID"`
	DailyDoubleTime       json.Number              `json:"DailyDoubleTime"`
	DispatchLink          string                   `json:"DispatchLink"`
	ExtraMultipleDropList []map[string]json.Number `json:"ExtraMultipleDropList"`
	FarmMultipleDropID    json.Number              `json:"FarmMultipleDropID"`
	KeyPointID            []json.Number            `json:"KeyPointID"`
	LimitTime             json.Number              `json:"LimitTime"`
	LoginReward           []json.Number            `json:"LoginReward"`
	PlayerReturnID        json.Number              `json:"PlayerReturnID"`
	QuestGroupID          []json.Number            `json:"QuestGroupID"`
	RecommendActivity     []interface{}            `json:"RecommendActivity"`
	RecommendAvatar       []interface{}            `json:"RecommendAvatar"`
	RecommendMission      []interface{}            `json:"RecommendMission"`
	ReturnRewardID        json.Number              `json:"ReturnRewardID"`
	TotalDoubleTime       json.Number              `json:"TotalDoubleTime"`
	ValidityPeriod        json.Number              `json:"ValidityPeriod"`
}
type PlayerReturnConfigAccessor struct {
	_data []PlayerReturnConfig
}

// LoadData retrieves the data. Must be called before PlayerReturnConfig.GroupData
func (a *PlayerReturnConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/PlayerReturnConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *PlayerReturnConfigAccessor) Raw() ([]PlayerReturnConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []PlayerReturnConfig{}, err
		}
	}
	return a._data, nil
}
