package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type DrinkMakerCupData struct {
	AudioEvent     string    `json:"AudioEvent"`
	Capacity       float64   `json:"Capacity"`
	CupID          float64   `json:"CupID"`
	CupName        hash.Hash `json:"CupName"`
	IceCount       []float64 `json:"IceCount"`
	IconPath       string    `json:"IconPath"`
	IncludeTagList []float64 `json:"IncludeTagList"`
	PerLayerHeight []float64 `json:"PerLayerHeight"`
	PrefabPath     string    `json:"PrefabPath"`
	Type           string    `json:"Type"`
}
type DrinkMakerCupDataAccessor struct {
	_data           []DrinkMakerCupData
	_dataAudioEvent map[string]DrinkMakerCupData
	_dataCupID      map[float64]DrinkMakerCupData
	_dataIconPath   map[string]DrinkMakerCupData
	_dataPrefabPath map[string]DrinkMakerCupData
}

// LoadData retrieves the data. Must be called before DrinkMakerCupData.GroupData
func (a *DrinkMakerCupDataAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/DrinkMakerCupData.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *DrinkMakerCupDataAccessor) Raw() ([]DrinkMakerCupData, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []DrinkMakerCupData{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with DrinkMakerCupDataAccessor.LoadData to preload everything
func (a *DrinkMakerCupDataAccessor) GroupData() {
	for _, d := range a._data {
		a._dataAudioEvent[d.AudioEvent] = d
		a._dataCupID[d.CupID] = d
		a._dataIconPath[d.IconPath] = d
		a._dataPrefabPath[d.PrefabPath] = d
	}
}

// ByAudioEvent returns the DrinkMakerCupData uniquely identified by AudioEvent
//
// Error is only non-nil if the source errors out
func (a *DrinkMakerCupDataAccessor) ByAudioEvent(identifier string) (DrinkMakerCupData, error) {
	if a._dataAudioEvent == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return DrinkMakerCupData{}, err
			}
		}
		a.GroupData()
	}
	return a._dataAudioEvent[identifier], nil
}

// ByCupID returns the DrinkMakerCupData uniquely identified by CupID
//
// Error is only non-nil if the source errors out
func (a *DrinkMakerCupDataAccessor) ByCupID(identifier float64) (DrinkMakerCupData, error) {
	if a._dataCupID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return DrinkMakerCupData{}, err
			}
		}
		a.GroupData()
	}
	return a._dataCupID[identifier], nil
}

// ByIconPath returns the DrinkMakerCupData uniquely identified by IconPath
//
// Error is only non-nil if the source errors out
func (a *DrinkMakerCupDataAccessor) ByIconPath(identifier string) (DrinkMakerCupData, error) {
	if a._dataIconPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return DrinkMakerCupData{}, err
			}
		}
		a.GroupData()
	}
	return a._dataIconPath[identifier], nil
}

// ByPrefabPath returns the DrinkMakerCupData uniquely identified by PrefabPath
//
// Error is only non-nil if the source errors out
func (a *DrinkMakerCupDataAccessor) ByPrefabPath(identifier string) (DrinkMakerCupData, error) {
	if a._dataPrefabPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return DrinkMakerCupData{}, err
			}
		}
		a.GroupData()
	}
	return a._dataPrefabPath[identifier], nil
}
