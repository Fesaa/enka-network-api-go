package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type BattleEventData struct {
	BEActionBarPrefab string    `json:"BEActionBarPrefab"`
	BasePoint         string    `json:"BasePoint"`
	BattleEventID     float64   `json:"BattleEventID"`
	Config            string    `json:"Config"`
	IsSPReserved      bool      `json:"IsSPReserved"`
	LevelAreaPrefab   string    `json:"LevelAreaPrefab"`
	Prefab            string    `json:"Prefab"`
	SkillIDList       []float64 `json:"SkillIDList"`
}
type BattleEventDataAccessor struct {
	_data              []BattleEventData
	_dataBattleEventID map[float64]BattleEventData
}

// LoadData retrieves the data. Must be called before BattleEventData.GroupData
func (a *BattleEventDataAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/BattleEventData.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *BattleEventDataAccessor) Raw() ([]BattleEventData, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []BattleEventData{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with BattleEventDataAccessor.LoadData to preload everything
func (a *BattleEventDataAccessor) GroupData() {
	a._dataBattleEventID = map[float64]BattleEventData{}
	for _, d := range a._data {
		a._dataBattleEventID[d.BattleEventID] = d
	}
}

// ByBattleEventID returns the BattleEventData uniquely identified by BattleEventID
//
// Error is only non-nil if the source errors out
func (a *BattleEventDataAccessor) ByBattleEventID(identifier float64) (BattleEventData, error) {
	if a._dataBattleEventID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return BattleEventData{}, err
			}
		}
		a.GroupData()
	}
	return a._dataBattleEventID[identifier], nil
}
