package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type MonopolyQuizConfig struct {
	Duration       json.Number            `json:"Duration"`
	QuizDesc       map[string]json.Number `json:"QuizDesc"`
	QuizID         json.Number            `json:"QuizID"`
	QuizName       map[string]json.Number `json:"QuizName"`
	QuizTaskIDList []json.Number          `json:"QuizTaskIDList"`
}
type MonopolyQuizConfigAccessor struct {
	_data       []MonopolyQuizConfig
	_dataQuizID map[json.Number]MonopolyQuizConfig
}

// LoadData retrieves the data. Must be called before MonopolyQuizConfig.GroupData
func (a *MonopolyQuizConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MonopolyQuizConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MonopolyQuizConfigAccessor) Raw() ([]MonopolyQuizConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MonopolyQuizConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MonopolyQuizConfigAccessor.LoadData to preload everything
func (a *MonopolyQuizConfigAccessor) GroupData() {
	a._dataQuizID = map[json.Number]MonopolyQuizConfig{}
	for _, d := range a._data {
		a._dataQuizID[d.QuizID] = d
	}
}

// ByQuizID returns the MonopolyQuizConfig uniquely identified by QuizID
//
// Error is only non-nil if the source errors out
func (a *MonopolyQuizConfigAccessor) ByQuizID(identifier json.Number) (MonopolyQuizConfig, error) {
	if a._dataQuizID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MonopolyQuizConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataQuizID[identifier], nil
}
