package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type RogueDLCConstValueCommon struct {
	ConstValueName string        `json:"ConstValueName"`
	Value          hash.IntValue `json:"Value"`
}
type RogueDLCConstValueCommonAccessor struct {
	_data               []RogueDLCConstValueCommon
	_dataConstValueName map[string]RogueDLCConstValueCommon
}

// LoadData retrieves the data. Must be called before RogueDLCConstValueCommon.GroupData
func (a *RogueDLCConstValueCommonAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueDLCConstValueCommon.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueDLCConstValueCommonAccessor) Raw() ([]RogueDLCConstValueCommon, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueDLCConstValueCommon{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueDLCConstValueCommonAccessor.LoadData to preload everything
func (a *RogueDLCConstValueCommonAccessor) GroupData() {
	for _, d := range a._data {
		a._dataConstValueName[d.ConstValueName] = d
	}
}

// ByConstValueName returns the RogueDLCConstValueCommon uniquely identified by ConstValueName
//
// Error is only non-nil if the source errors out
func (a *RogueDLCConstValueCommonAccessor) ByConstValueName(identifier string) (RogueDLCConstValueCommon, error) {
	if a._dataConstValueName == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueDLCConstValueCommon{}, err
			}
		}
		a.GroupData()
	}
	return a._dataConstValueName[identifier], nil
}
