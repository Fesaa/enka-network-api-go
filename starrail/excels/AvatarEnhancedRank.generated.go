package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type AvatarEnhancedRank struct {
	AvatarID       float64   `json:"AvatarID"`
	RankDescAfter  hash.Hash `json:"RankDescAfter"`
	RankDescBefore hash.Hash `json:"RankDescBefore"`
	RankID         float64   `json:"RankID"`
}
type AvatarEnhancedRankAccessor struct {
	_data       []AvatarEnhancedRank
	_dataRankID map[float64]AvatarEnhancedRank
}

// LoadData retrieves the data. Must be called before AvatarEnhancedRank.GroupData
func (a *AvatarEnhancedRankAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/AvatarEnhancedRank.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *AvatarEnhancedRankAccessor) Raw() ([]AvatarEnhancedRank, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []AvatarEnhancedRank{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with AvatarEnhancedRankAccessor.LoadData to preload everything
func (a *AvatarEnhancedRankAccessor) GroupData() {
	a._dataRankID = map[float64]AvatarEnhancedRank{}
	for _, d := range a._data {
		a._dataRankID[d.RankID] = d
	}
}

// ByRankID returns the AvatarEnhancedRank uniquely identified by RankID
//
// Error is only non-nil if the source errors out
func (a *AvatarEnhancedRankAccessor) ByRankID(identifier float64) (AvatarEnhancedRank, error) {
	if a._dataRankID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AvatarEnhancedRank{}, err
			}
		}
		a.GroupData()
	}
	return a._dataRankID[identifier], nil
}
