package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type RelicSubAffixAvatarValue struct {
	Attack            float64 `json:"Attack"`
	AvatarID          float64 `json:"AvatarID"`
	BreakDamage       float64 `json:"BreakDamage"`
	CriticalChance    float64 `json:"CriticalChance"`
	CriticalDamage    float64 `json:"CriticalDamage"`
	Defence           float64 `json:"Defence"`
	HP                float64 `json:"HP"`
	Speed             float64 `json:"Speed"`
	StatusProbability float64 `json:"StatusProbability"`
	StatusResistance  float64 `json:"StatusResistance"`
}
type RelicSubAffixAvatarValueAccessor struct {
	_data         []RelicSubAffixAvatarValue
	_dataAvatarID map[float64]RelicSubAffixAvatarValue
}

// LoadData retrieves the data. Must be called before RelicSubAffixAvatarValue.GroupData
func (a *RelicSubAffixAvatarValueAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RelicSubAffixAvatarValue.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RelicSubAffixAvatarValueAccessor) Raw() ([]RelicSubAffixAvatarValue, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RelicSubAffixAvatarValue{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RelicSubAffixAvatarValueAccessor.LoadData to preload everything
func (a *RelicSubAffixAvatarValueAccessor) GroupData() {
	for _, d := range a._data {
		a._dataAvatarID[d.AvatarID] = d
	}
}

// ByAvatarID returns the RelicSubAffixAvatarValue uniquely identified by AvatarID
//
// Error is only non-nil if the source errors out
func (a *RelicSubAffixAvatarValueAccessor) ByAvatarID(identifier float64) (RelicSubAffixAvatarValue, error) {
	if a._dataAvatarID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RelicSubAffixAvatarValue{}, err
			}
		}
		a.GroupData()
	}
	return a._dataAvatarID[identifier], nil
}
