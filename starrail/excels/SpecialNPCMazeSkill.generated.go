package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type SpecialNPCMazeSkill struct {
	MPCost             float64   `json:"MPCost"`
	MazeSkillId        float64   `json:"MazeSkillId"`
	MazeSkillName      hash.Hash `json:"MazeSkillName"`
	MazeSkilltype      float64   `json:"MazeSkilltype"`
	RelatedAvatarSkill float64   `json:"RelatedAvatarSkill"`
	SkillTriggerKey    string    `json:"SkillTriggerKey"`
}
type SpecialNPCMazeSkillAccessor struct {
	_data                   []SpecialNPCMazeSkill
	_dataRelatedAvatarSkill map[float64]SpecialNPCMazeSkill
	_dataMazeSkillId        map[float64]SpecialNPCMazeSkill
}

// LoadData retrieves the data. Must be called before SpecialNPCMazeSkill.GroupData
func (a *SpecialNPCMazeSkillAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/SpecialNPCMazeSkill.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *SpecialNPCMazeSkillAccessor) Raw() ([]SpecialNPCMazeSkill, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []SpecialNPCMazeSkill{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with SpecialNPCMazeSkillAccessor.LoadData to preload everything
func (a *SpecialNPCMazeSkillAccessor) GroupData() {
	for _, d := range a._data {
		a._dataRelatedAvatarSkill[d.RelatedAvatarSkill] = d
		a._dataMazeSkillId[d.MazeSkillId] = d
	}
}

// ByRelatedAvatarSkill returns the SpecialNPCMazeSkill uniquely identified by RelatedAvatarSkill
//
// Error is only non-nil if the source errors out
func (a *SpecialNPCMazeSkillAccessor) ByRelatedAvatarSkill(identifier float64) (SpecialNPCMazeSkill, error) {
	if a._dataRelatedAvatarSkill == nil {
		err := a.LoadData()
		if err != nil {
			return SpecialNPCMazeSkill{}, err
		}
		a.GroupData()
	}
	return a._dataRelatedAvatarSkill[identifier], nil
}

// ByMazeSkillId returns the SpecialNPCMazeSkill uniquely identified by MazeSkillId
//
// Error is only non-nil if the source errors out
func (a *SpecialNPCMazeSkillAccessor) ByMazeSkillId(identifier float64) (SpecialNPCMazeSkill, error) {
	if a._dataMazeSkillId == nil {
		err := a.LoadData()
		if err != nil {
			return SpecialNPCMazeSkill{}, err
		}
		a.GroupData()
	}
	return a._dataMazeSkillId[identifier], nil
}
