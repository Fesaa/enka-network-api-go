package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type AvatarPromotionReward struct {
	Promotion         float64 `json:"Promotion"`
	PromotionRewardId float64 `json:"PromotionRewardId"`
}
type AvatarPromotionRewardAccessor struct {
	_data          []AvatarPromotionReward
	_dataPromotion map[float64]AvatarPromotionReward
}

// LoadData retrieves the data. Must be called before AvatarPromotionReward.GroupData
func (a *AvatarPromotionRewardAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/AvatarPromotionReward.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *AvatarPromotionRewardAccessor) Raw() ([]AvatarPromotionReward, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []AvatarPromotionReward{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with AvatarPromotionRewardAccessor.LoadData to preload everything
func (a *AvatarPromotionRewardAccessor) GroupData() {
	for _, d := range a._data {
		a._dataPromotion[d.Promotion] = d
	}
}

// ByPromotion returns the AvatarPromotionReward uniquely identified by Promotion
//
// Error is only non-nil if the source errors out
func (a *AvatarPromotionRewardAccessor) ByPromotion(identifier float64) (AvatarPromotionReward, error) {
	if a._dataPromotion == nil {
		err := a.LoadData()
		if err != nil {
			return AvatarPromotionReward{}, err
		}
		a.GroupData()
	}
	return a._dataPromotion[identifier], nil
}
