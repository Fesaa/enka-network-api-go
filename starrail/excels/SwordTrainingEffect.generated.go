package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type SwordTrainingEffect struct {
	Condition         float64   `json:"Condition"`
	Count             float64   `json:"Count"`
	EffectType        string    `json:"EffectType"`
	EnhanceActionList []float64 `json:"EnhanceActionList"`
	ID                float64   `json:"ID"`
	ParamList         []float64 `json:"ParamList"`
}
type SwordTrainingEffectAccessor struct {
	_data   []SwordTrainingEffect
	_dataID map[float64]SwordTrainingEffect
}

// LoadData retrieves the data. Must be called before SwordTrainingEffect.GroupData
func (a *SwordTrainingEffectAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/SwordTrainingEffect.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *SwordTrainingEffectAccessor) Raw() ([]SwordTrainingEffect, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []SwordTrainingEffect{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with SwordTrainingEffectAccessor.LoadData to preload everything
func (a *SwordTrainingEffectAccessor) GroupData() {
	a._dataID = map[float64]SwordTrainingEffect{}
	for _, d := range a._data {
		a._dataID[d.ID] = d
	}
}

// ByID returns the SwordTrainingEffect uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *SwordTrainingEffectAccessor) ByID(identifier float64) (SwordTrainingEffect, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return SwordTrainingEffect{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}
