package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type MazePuzzleOrigamiColony struct {
	FinishQuestID   json.Number              `json:"FinishQuestID"`
	FloorID         json.Number              `json:"FloorID"`
	MaterialCost    []map[string]json.Number `json:"MaterialCost"`
	OrigamiColonyID json.Number              `json:"OrigamiColonyID"`
	TalkSentenceID  json.Number              `json:"TalkSentenceID"`
}
type MazePuzzleOrigamiColonyAccessor struct {
	_data                []MazePuzzleOrigamiColony
	_dataFinishQuestID   map[json.Number]MazePuzzleOrigamiColony
	_dataFloorID         map[json.Number]MazePuzzleOrigamiColony
	_dataOrigamiColonyID map[json.Number]MazePuzzleOrigamiColony
}

// LoadData retrieves the data. Must be called before MazePuzzleOrigamiColony.GroupData
func (a *MazePuzzleOrigamiColonyAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MazePuzzleOrigamiColony.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MazePuzzleOrigamiColonyAccessor) Raw() ([]MazePuzzleOrigamiColony, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MazePuzzleOrigamiColony{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MazePuzzleOrigamiColonyAccessor.LoadData to preload everything
func (a *MazePuzzleOrigamiColonyAccessor) GroupData() {
	a._dataFinishQuestID = map[json.Number]MazePuzzleOrigamiColony{}
	a._dataFloorID = map[json.Number]MazePuzzleOrigamiColony{}
	a._dataOrigamiColonyID = map[json.Number]MazePuzzleOrigamiColony{}
	for _, d := range a._data {
		a._dataFinishQuestID[d.FinishQuestID] = d
		a._dataFloorID[d.FloorID] = d
		a._dataOrigamiColonyID[d.OrigamiColonyID] = d
	}
}

// ByFinishQuestID returns the MazePuzzleOrigamiColony uniquely identified by FinishQuestID
//
// Error is only non-nil if the source errors out
func (a *MazePuzzleOrigamiColonyAccessor) ByFinishQuestID(identifier json.Number) (MazePuzzleOrigamiColony, error) {
	if a._dataFinishQuestID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MazePuzzleOrigamiColony{}, err
			}
		}
		a.GroupData()
	}
	return a._dataFinishQuestID[identifier], nil
}

// ByFloorID returns the MazePuzzleOrigamiColony uniquely identified by FloorID
//
// Error is only non-nil if the source errors out
func (a *MazePuzzleOrigamiColonyAccessor) ByFloorID(identifier json.Number) (MazePuzzleOrigamiColony, error) {
	if a._dataFloorID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MazePuzzleOrigamiColony{}, err
			}
		}
		a.GroupData()
	}
	return a._dataFloorID[identifier], nil
}

// ByOrigamiColonyID returns the MazePuzzleOrigamiColony uniquely identified by OrigamiColonyID
//
// Error is only non-nil if the source errors out
func (a *MazePuzzleOrigamiColonyAccessor) ByOrigamiColonyID(identifier json.Number) (MazePuzzleOrigamiColony, error) {
	if a._dataOrigamiColonyID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MazePuzzleOrigamiColony{}, err
			}
		}
		a.GroupData()
	}
	return a._dataOrigamiColonyID[identifier], nil
}
