package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type LinearQuest struct {
	LinearID  json.Number   `json:"LinearID"`
	MaxLevel  json.Number   `json:"MaxLevel"`
	MinLevel  json.Number   `json:"MinLevel"`
	QuestList []json.Number `json:"QuestList"`
}
type LinearQuestAccessor struct {
	_data         []LinearQuest
	_dataLinearID map[json.Number]LinearQuest
}

// LoadData retrieves the data. Must be called before LinearQuest.GroupData
func (a *LinearQuestAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/LinearQuest.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *LinearQuestAccessor) Raw() ([]LinearQuest, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []LinearQuest{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with LinearQuestAccessor.LoadData to preload everything
func (a *LinearQuestAccessor) GroupData() {
	a._dataLinearID = map[json.Number]LinearQuest{}
	for _, d := range a._data {
		a._dataLinearID[d.LinearID] = d
	}
}

// ByLinearID returns the LinearQuest uniquely identified by LinearID
//
// Error is only non-nil if the source errors out
func (a *LinearQuestAccessor) ByLinearID(identifier json.Number) (LinearQuest, error) {
	if a._dataLinearID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return LinearQuest{}, err
			}
		}
		a.GroupData()
	}
	return a._dataLinearID[identifier], nil
}
