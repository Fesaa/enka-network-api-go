package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type DrinkMakerLevel struct {
	Level      float64 `json:"Level"`
	LevelUpExp float64 `json:"LevelUpExp"`
}
type DrinkMakerLevelAccessor struct {
	_data      []DrinkMakerLevel
	_dataLevel map[float64]DrinkMakerLevel
}

// LoadData retrieves the data. Must be called before DrinkMakerLevel.GroupData
func (a *DrinkMakerLevelAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/DrinkMakerLevel.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *DrinkMakerLevelAccessor) Raw() ([]DrinkMakerLevel, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []DrinkMakerLevel{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with DrinkMakerLevelAccessor.LoadData to preload everything
func (a *DrinkMakerLevelAccessor) GroupData() {
	for _, d := range a._data {
		a._dataLevel[d.Level] = d
	}
}

// ByLevel returns the DrinkMakerLevel uniquely identified by Level
//
// Error is only non-nil if the source errors out
func (a *DrinkMakerLevelAccessor) ByLevel(identifier float64) (DrinkMakerLevel, error) {
	if a._dataLevel == nil {
		err := a.LoadData()
		if err != nil {
			return DrinkMakerLevel{}, err
		}
		a.GroupData()
	}
	return a._dataLevel[identifier], nil
}
