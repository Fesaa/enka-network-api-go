package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type StageTestConfig struct {
	BattleScoringGroup json.Number                      `json:"BattleScoringGroup"`
	EliteGroup         json.Number                      `json:"EliteGroup"`
	ForbidAutoBattle   bool                             `json:"ForbidAutoBattle"`
	ForbidExitBattle   bool                             `json:"ForbidExitBattle"`
	HardLevelGroup     json.Number                      `json:"HardLevelGroup"`
	Level              json.Number                      `json:"Level"`
	LevelGraphPath     string                           `json:"LevelGraphPath"`
	LevelLoseCondition []string                         `json:"LevelLoseCondition"`
	LevelWinCondition  []string                         `json:"LevelWinCondition"`
	MonsterList        []map[string]json.Number         `json:"MonsterList"`
	Release            bool                             `json:"Release"`
	StageAbilityConfig []string                         `json:"StageAbilityConfig"`
	StageConfigData    []StageTestConfigStageConfigData `json:"StageConfigData"`
	StageID            json.Number                      `json:"StageID"`
	StageName          map[string]json.Number           `json:"StageName"`
	StageType          string                           `json:"StageType"`
	SubLevelGraphs     []StageTestConfigSubLevelGraphs  `json:"SubLevelGraphs"`
	TrialAvatarList    []interface{}                    `json:"TrialAvatarList"`
}
type StageTestConfigStageConfigData struct {
	HEIKKHLKMOA string `json:"HEIKKHLKMOA"`
	MBMDOCJIMEJ string `json:"MBMDOCJIMEJ"`
}
type StageTestConfigSubLevelGraphs struct {
	HEIKKHLKMOA string `json:"HEIKKHLKMOA"`
	KDPPOPPKFAM string `json:"KDPPOPPKFAM"`
}
type StageTestConfigAccessor struct {
	_data        []StageTestConfig
	_dataStageID map[json.Number]StageTestConfig
}

// LoadData retrieves the data. Must be called before StageTestConfig.GroupData
func (a *StageTestConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/StageTestConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *StageTestConfigAccessor) Raw() ([]StageTestConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []StageTestConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with StageTestConfigAccessor.LoadData to preload everything
func (a *StageTestConfigAccessor) GroupData() {
	a._dataStageID = map[json.Number]StageTestConfig{}
	for _, d := range a._data {
		a._dataStageID[d.StageID] = d
	}
}

// ByStageID returns the StageTestConfig uniquely identified by StageID
//
// Error is only non-nil if the source errors out
func (a *StageTestConfigAccessor) ByStageID(identifier json.Number) (StageTestConfig, error) {
	if a._dataStageID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return StageTestConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataStageID[identifier], nil
}
