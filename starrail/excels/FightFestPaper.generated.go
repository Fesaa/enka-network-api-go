package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type FightFestPaper struct {
	CollectionBgPath   string    `json:"CollectionBgPath"`
	CollectionFgPath   string    `json:"CollectionFgPath"`
	GameAdFigurePath   string    `json:"GameAdFigurePath"`
	InterviewBgPath    string    `json:"InterviewBgPath"`
	InterviewFgPath    string    `json:"InterviewFgPath"`
	IssueNumber        hash.Hash `json:"IssueNumber"`
	IssueNumberText    hash.Hash `json:"IssueNumberText"`
	MainBgPathList     []string  `json:"MainBgPathList"`
	MainFgPathList     []string  `json:"MainFgPathList"`
	MainPageDesc       hash.Hash `json:"MainPageDesc"`
	MainPageTitle      hash.Hash `json:"MainPageTitle"`
	PaperID            float64   `json:"PaperID"`
	UnlockSubMissionID float64   `json:"UnlockSubMissionID"`
}
type FightFestPaperAccessor struct {
	_data                   []FightFestPaper
	_dataInterviewFgPath    map[string]FightFestPaper
	_dataCollectionBgPath   map[string]FightFestPaper
	_dataUnlockSubMissionID map[float64]FightFestPaper
	_dataCollectionFgPath   map[string]FightFestPaper
	_dataPaperID            map[float64]FightFestPaper
}

// LoadData retrieves the data. Must be called before FightFestPaper.GroupData
func (a *FightFestPaperAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/FightFestPaper.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *FightFestPaperAccessor) Raw() ([]FightFestPaper, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []FightFestPaper{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with FightFestPaperAccessor.LoadData to preload everything
func (a *FightFestPaperAccessor) GroupData() {
	for _, d := range a._data {
		a._dataInterviewFgPath[d.InterviewFgPath] = d
		a._dataCollectionBgPath[d.CollectionBgPath] = d
		a._dataUnlockSubMissionID[d.UnlockSubMissionID] = d
		a._dataCollectionFgPath[d.CollectionFgPath] = d
		a._dataPaperID[d.PaperID] = d
	}
}

// ByInterviewFgPath returns the FightFestPaper uniquely identified by InterviewFgPath
//
// Error is only non-nil if the source errors out
func (a *FightFestPaperAccessor) ByInterviewFgPath(identifier string) (FightFestPaper, error) {
	if a._dataInterviewFgPath == nil {
		err := a.LoadData()
		if err != nil {
			return FightFestPaper{}, err
		}
		a.GroupData()
	}
	return a._dataInterviewFgPath[identifier], nil
}

// ByCollectionBgPath returns the FightFestPaper uniquely identified by CollectionBgPath
//
// Error is only non-nil if the source errors out
func (a *FightFestPaperAccessor) ByCollectionBgPath(identifier string) (FightFestPaper, error) {
	if a._dataCollectionBgPath == nil {
		err := a.LoadData()
		if err != nil {
			return FightFestPaper{}, err
		}
		a.GroupData()
	}
	return a._dataCollectionBgPath[identifier], nil
}

// ByUnlockSubMissionID returns the FightFestPaper uniquely identified by UnlockSubMissionID
//
// Error is only non-nil if the source errors out
func (a *FightFestPaperAccessor) ByUnlockSubMissionID(identifier float64) (FightFestPaper, error) {
	if a._dataUnlockSubMissionID == nil {
		err := a.LoadData()
		if err != nil {
			return FightFestPaper{}, err
		}
		a.GroupData()
	}
	return a._dataUnlockSubMissionID[identifier], nil
}

// ByCollectionFgPath returns the FightFestPaper uniquely identified by CollectionFgPath
//
// Error is only non-nil if the source errors out
func (a *FightFestPaperAccessor) ByCollectionFgPath(identifier string) (FightFestPaper, error) {
	if a._dataCollectionFgPath == nil {
		err := a.LoadData()
		if err != nil {
			return FightFestPaper{}, err
		}
		a.GroupData()
	}
	return a._dataCollectionFgPath[identifier], nil
}

// ByPaperID returns the FightFestPaper uniquely identified by PaperID
//
// Error is only non-nil if the source errors out
func (a *FightFestPaperAccessor) ByPaperID(identifier float64) (FightFestPaper, error) {
	if a._dataPaperID == nil {
		err := a.LoadData()
		if err != nil {
			return FightFestPaper{}, err
		}
		a.GroupData()
	}
	return a._dataPaperID[identifier], nil
}
