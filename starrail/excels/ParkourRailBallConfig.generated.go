package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type ParkourRailBallConfig struct {
	BigResPath         string    `json:"BigResPath"`
	ID                 float64   `json:"ID"`
	Name               hash.Hash `json:"Name"`
	PrefabPath         string    `json:"PrefabPath"`
	ResPath            string    `json:"ResPath"`
	SkillChargeDisplay float64   `json:"SkillChargeDisplay"`
	SkillID            float64   `json:"SkillID"`
	SpeedDisplay       float64   `json:"SpeedDisplay"`
	StabilityDisplay   float64   `json:"StabilityDisplay"`
	UI3DPrefabPath     string    `json:"UI3DPrefabPath"`
	UpgradeBallID      float64   `json:"UpgradeBallID"`
	UpgradeSubMission  float64   `json:"UpgradeSubMission"`
}
type ParkourRailBallConfigAccessor struct {
	_data               []ParkourRailBallConfig
	_dataBigResPath     map[string]ParkourRailBallConfig
	_dataID             map[float64]ParkourRailBallConfig
	_dataPrefabPath     map[string]ParkourRailBallConfig
	_dataResPath        map[string]ParkourRailBallConfig
	_dataUI3DPrefabPath map[string]ParkourRailBallConfig
}

// LoadData retrieves the data. Must be called before ParkourRailBallConfig.GroupData
func (a *ParkourRailBallConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ParkourRailBallConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ParkourRailBallConfigAccessor) Raw() ([]ParkourRailBallConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ParkourRailBallConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ParkourRailBallConfigAccessor.LoadData to preload everything
func (a *ParkourRailBallConfigAccessor) GroupData() {
	a._dataBigResPath = map[string]ParkourRailBallConfig{}
	a._dataID = map[float64]ParkourRailBallConfig{}
	a._dataPrefabPath = map[string]ParkourRailBallConfig{}
	a._dataResPath = map[string]ParkourRailBallConfig{}
	a._dataUI3DPrefabPath = map[string]ParkourRailBallConfig{}
	for _, d := range a._data {
		a._dataBigResPath[d.BigResPath] = d
		a._dataID[d.ID] = d
		a._dataPrefabPath[d.PrefabPath] = d
		a._dataResPath[d.ResPath] = d
		a._dataUI3DPrefabPath[d.UI3DPrefabPath] = d
	}
}

// ByBigResPath returns the ParkourRailBallConfig uniquely identified by BigResPath
//
// Error is only non-nil if the source errors out
func (a *ParkourRailBallConfigAccessor) ByBigResPath(identifier string) (ParkourRailBallConfig, error) {
	if a._dataBigResPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ParkourRailBallConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataBigResPath[identifier], nil
}

// ByID returns the ParkourRailBallConfig uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *ParkourRailBallConfigAccessor) ByID(identifier float64) (ParkourRailBallConfig, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ParkourRailBallConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}

// ByPrefabPath returns the ParkourRailBallConfig uniquely identified by PrefabPath
//
// Error is only non-nil if the source errors out
func (a *ParkourRailBallConfigAccessor) ByPrefabPath(identifier string) (ParkourRailBallConfig, error) {
	if a._dataPrefabPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ParkourRailBallConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataPrefabPath[identifier], nil
}

// ByResPath returns the ParkourRailBallConfig uniquely identified by ResPath
//
// Error is only non-nil if the source errors out
func (a *ParkourRailBallConfigAccessor) ByResPath(identifier string) (ParkourRailBallConfig, error) {
	if a._dataResPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ParkourRailBallConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataResPath[identifier], nil
}

// ByUI3DPrefabPath returns the ParkourRailBallConfig uniquely identified by UI3DPrefabPath
//
// Error is only non-nil if the source errors out
func (a *ParkourRailBallConfigAccessor) ByUI3DPrefabPath(identifier string) (ParkourRailBallConfig, error) {
	if a._dataUI3DPrefabPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ParkourRailBallConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataUI3DPrefabPath[identifier], nil
}
