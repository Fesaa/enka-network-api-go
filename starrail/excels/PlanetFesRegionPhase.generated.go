package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type PlanetFesRegionPhase struct {
	BuffID        json.Number            `json:"BuffID"`
	Description   map[string]json.Number `json:"Description"`
	EffectDesc    map[string]json.Number `json:"EffectDesc"`
	Name          map[string]json.Number `json:"Name"`
	PhaseID       json.Number            `json:"PhaseID"`
	PicPath       string                 `json:"PicPath"`
	ProgressValue json.Number            `json:"ProgressValue"`
	RewardID      json.Number            `json:"RewardID"`
}
type PlanetFesRegionPhaseAccessor struct {
	_data              []PlanetFesRegionPhase
	_dataBuffID        map[json.Number]PlanetFesRegionPhase
	_dataPhaseID       map[json.Number]PlanetFesRegionPhase
	_dataPicPath       map[string]PlanetFesRegionPhase
	_dataProgressValue map[json.Number]PlanetFesRegionPhase
}

// LoadData retrieves the data. Must be called before PlanetFesRegionPhase.GroupData
func (a *PlanetFesRegionPhaseAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/PlanetFesRegionPhase.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *PlanetFesRegionPhaseAccessor) Raw() ([]PlanetFesRegionPhase, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []PlanetFesRegionPhase{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with PlanetFesRegionPhaseAccessor.LoadData to preload everything
func (a *PlanetFesRegionPhaseAccessor) GroupData() {
	a._dataBuffID = map[json.Number]PlanetFesRegionPhase{}
	a._dataPhaseID = map[json.Number]PlanetFesRegionPhase{}
	a._dataPicPath = map[string]PlanetFesRegionPhase{}
	a._dataProgressValue = map[json.Number]PlanetFesRegionPhase{}
	for _, d := range a._data {
		a._dataBuffID[d.BuffID] = d
		a._dataPhaseID[d.PhaseID] = d
		a._dataPicPath[d.PicPath] = d
		a._dataProgressValue[d.ProgressValue] = d
	}
}

// ByBuffID returns the PlanetFesRegionPhase uniquely identified by BuffID
//
// Error is only non-nil if the source errors out
func (a *PlanetFesRegionPhaseAccessor) ByBuffID(identifier json.Number) (PlanetFesRegionPhase, error) {
	if a._dataBuffID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return PlanetFesRegionPhase{}, err
			}
		}
		a.GroupData()
	}
	return a._dataBuffID[identifier], nil
}

// ByPhaseID returns the PlanetFesRegionPhase uniquely identified by PhaseID
//
// Error is only non-nil if the source errors out
func (a *PlanetFesRegionPhaseAccessor) ByPhaseID(identifier json.Number) (PlanetFesRegionPhase, error) {
	if a._dataPhaseID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return PlanetFesRegionPhase{}, err
			}
		}
		a.GroupData()
	}
	return a._dataPhaseID[identifier], nil
}

// ByPicPath returns the PlanetFesRegionPhase uniquely identified by PicPath
//
// Error is only non-nil if the source errors out
func (a *PlanetFesRegionPhaseAccessor) ByPicPath(identifier string) (PlanetFesRegionPhase, error) {
	if a._dataPicPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return PlanetFesRegionPhase{}, err
			}
		}
		a.GroupData()
	}
	return a._dataPicPath[identifier], nil
}

// ByProgressValue returns the PlanetFesRegionPhase uniquely identified by ProgressValue
//
// Error is only non-nil if the source errors out
func (a *PlanetFesRegionPhaseAccessor) ByProgressValue(identifier json.Number) (PlanetFesRegionPhase, error) {
	if a._dataProgressValue == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return PlanetFesRegionPhase{}, err
			}
		}
		a.GroupData()
	}
	return a._dataProgressValue[identifier], nil
}
