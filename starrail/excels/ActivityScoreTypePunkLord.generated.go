package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type ActivityScoreTypePunkLord struct {
	FinishID    string    `json:"FinishID"`
	FinishName  hash.Hash `json:"FinishName"`
	FinishPoint float64   `json:"FinishPoint"`
	FinishRare  string    `json:"FinishRare"`
}
type ActivityScoreTypePunkLordAccessor struct {
	_data            []ActivityScoreTypePunkLord
	_dataFinishPoint map[float64]ActivityScoreTypePunkLord
}

// LoadData retrieves the data. Must be called before ActivityScoreTypePunkLord.GroupData
func (a *ActivityScoreTypePunkLordAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ActivityScoreTypePunkLord.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ActivityScoreTypePunkLordAccessor) Raw() ([]ActivityScoreTypePunkLord, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ActivityScoreTypePunkLord{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ActivityScoreTypePunkLordAccessor.LoadData to preload everything
func (a *ActivityScoreTypePunkLordAccessor) GroupData() {
	for _, d := range a._data {
		a._dataFinishPoint[d.FinishPoint] = d
	}
}

// ByFinishPoint returns the ActivityScoreTypePunkLord uniquely identified by FinishPoint
//
// Error is only non-nil if the source errors out
func (a *ActivityScoreTypePunkLordAccessor) ByFinishPoint(identifier float64) (ActivityScoreTypePunkLord, error) {
	if a._dataFinishPoint == nil {
		err := a.LoadData()
		if err != nil {
			return ActivityScoreTypePunkLord{}, err
		}
		a.GroupData()
	}
	return a._dataFinishPoint[identifier], nil
}
