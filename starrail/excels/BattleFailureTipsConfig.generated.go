package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type BattleFailureTipsConfig struct {
	BattleFailureTipID       json.Number            `json:"BattleFailureTipID"`
	CustomStringList         []string               `json:"CustomStringList"`
	GameModeList             []string               `json:"GameModeList"`
	MainMissionFinishForce   []interface{}          `json:"MainMissionFinishForce"`
	MainMissionTakenForce    []interface{}          `json:"MainMissionTakenForce"`
	MainMissionUnfinishForce []interface{}          `json:"MainMissionUnfinishForce"`
	MazebuffIDList           []interface{}          `json:"MazebuffIDList"`
	MonsterTemplateIDList    []json.Number          `json:"MonsterTemplateIDList"`
	PlayerLevel              []json.Number          `json:"PlayerLevel"`
	Priority                 json.Number            `json:"Priority"`
	StageIDForce             []json.Number          `json:"StageIDForce"`
	StageTypeForce           []string               `json:"StageTypeForce"`
	TipContent               map[string]json.Number `json:"TipContent"`
	Type                     string                 `json:"Type"`
	WorldList                []interface{}          `json:"WorldList"`
}
type BattleFailureTipsConfigAccessor struct {
	_data []BattleFailureTipsConfig
}

// LoadData retrieves the data. Must be called before BattleFailureTipsConfig.GroupData
func (a *BattleFailureTipsConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/BattleFailureTipsConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *BattleFailureTipsConfigAccessor) Raw() ([]BattleFailureTipsConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []BattleFailureTipsConfig{}, err
		}
	}
	return a._data, nil
}
