package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type ChimeraWorkRoundOption struct {
	OptionID  json.Number   `json:"OptionID"`
	ParamList []json.Number `json:"ParamList"`
	Type      string        `json:"Type"`
}
type ChimeraWorkRoundOptionAccessor struct {
	_data         []ChimeraWorkRoundOption
	_dataOptionID map[json.Number]ChimeraWorkRoundOption
}

// LoadData retrieves the data. Must be called before ChimeraWorkRoundOption.GroupData
func (a *ChimeraWorkRoundOptionAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ChimeraWorkRoundOption.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ChimeraWorkRoundOptionAccessor) Raw() ([]ChimeraWorkRoundOption, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ChimeraWorkRoundOption{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ChimeraWorkRoundOptionAccessor.LoadData to preload everything
func (a *ChimeraWorkRoundOptionAccessor) GroupData() {
	a._dataOptionID = map[json.Number]ChimeraWorkRoundOption{}
	for _, d := range a._data {
		a._dataOptionID[d.OptionID] = d
	}
}

// ByOptionID returns the ChimeraWorkRoundOption uniquely identified by OptionID
//
// Error is only non-nil if the source errors out
func (a *ChimeraWorkRoundOptionAccessor) ByOptionID(identifier json.Number) (ChimeraWorkRoundOption, error) {
	if a._dataOptionID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ChimeraWorkRoundOption{}, err
			}
		}
		a.GroupData()
	}
	return a._dataOptionID[identifier], nil
}
