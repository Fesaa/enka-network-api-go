package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type GameModeGroup struct {
	GameModeGroupID float64  `json:"GameModeGroupID"`
	GamemodeList    []string `json:"GamemodeList"`
}
type GameModeGroupAccessor struct {
	_data                []GameModeGroup
	_dataGameModeGroupID map[float64]GameModeGroup
}

// LoadData retrieves the data. Must be called before GameModeGroup.GroupData
func (a *GameModeGroupAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/GameModeGroup.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *GameModeGroupAccessor) Raw() ([]GameModeGroup, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []GameModeGroup{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with GameModeGroupAccessor.LoadData to preload everything
func (a *GameModeGroupAccessor) GroupData() {
	a._dataGameModeGroupID = map[float64]GameModeGroup{}
	for _, d := range a._data {
		a._dataGameModeGroupID[d.GameModeGroupID] = d
	}
}

// ByGameModeGroupID returns the GameModeGroup uniquely identified by GameModeGroupID
//
// Error is only non-nil if the source errors out
func (a *GameModeGroupAccessor) ByGameModeGroupID(identifier float64) (GameModeGroup, error) {
	if a._dataGameModeGroupID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return GameModeGroup{}, err
			}
		}
		a.GroupData()
	}
	return a._dataGameModeGroupID[identifier], nil
}
