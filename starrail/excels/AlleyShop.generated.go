package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type AlleyShop struct {
	EnergyColor []float64            `json:"EnergyColor"`
	ShopBox     float64              `json:"ShopBox"`
	ShopEnergy  float64              `json:"ShopEnergy"`
	ShopGoods   []AlleyShopShopGoods `json:"ShopGoods"`
	ShopID      float64              `json:"ShopID"`
}
type AlleyShopShopGoods struct {
	GoodsID float64 `json:"GoodsID"`
	Num     float64 `json:"Num"`
}
type AlleyShopAccessor struct {
	_data       []AlleyShop
	_dataShopID map[float64]AlleyShop
}

// LoadData retrieves the data. Must be called before AlleyShop.GroupData
func (a *AlleyShopAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/AlleyShop.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *AlleyShopAccessor) Raw() ([]AlleyShop, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []AlleyShop{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with AlleyShopAccessor.LoadData to preload everything
func (a *AlleyShopAccessor) GroupData() {
	a._dataShopID = map[float64]AlleyShop{}
	for _, d := range a._data {
		a._dataShopID[d.ShopID] = d
	}
}

// ByShopID returns the AlleyShop uniquely identified by ShopID
//
// Error is only non-nil if the source errors out
func (a *AlleyShopAccessor) ByShopID(identifier float64) (AlleyShop, error) {
	if a._dataShopID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AlleyShop{}, err
			}
		}
		a.GroupData()
	}
	return a._dataShopID[identifier], nil
}
