package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type InventoryTabData struct {
	DisplayCapacityLimit json.Number                     `json:"DisplayCapacityLimit"`
	DisplayInventoryType string                          `json:"DisplayInventoryType"`
	DisplayItemSubType   []string                        `json:"DisplayItemSubType"`
	ID                   json.Number                     `json:"ID"`
	IconImagePath        string                          `json:"IconImagePath"`
	InventoryDisplayTag  json.Number                     `json:"InventoryDisplayTag"`
	ItemSortTypeList     []string                        `json:"ItemSortTypeList"`
	NotDisplayPileLimit  bool                            `json:"NotDisplayPileLimit"`
	SellType             string                          `json:"SellType"`
	TabName              map[string]json.Number          `json:"TabName"`
	TabSortWeight        json.Number                     `json:"TabSortWeight"`
	UnlockCondition      InventoryTabDataUnlockCondition `json:"UnlockCondition"`
}
type InventoryTabDataUnlockCondition struct {
	Param string `json:"Param"`
	Type  string `json:"Type"`
}
type InventoryTabDataAccessor struct {
	_data []InventoryTabData
}

// LoadData retrieves the data. Must be called before InventoryTabData.GroupData
func (a *InventoryTabDataAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/InventoryTabData.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *InventoryTabDataAccessor) Raw() ([]InventoryTabData, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []InventoryTabData{}, err
		}
	}
	return a._data, nil
}
