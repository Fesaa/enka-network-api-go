package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type FateBroadcast struct {
	CFJJLKBHJBM string    `json:"CFJJLKBHJBM"`
	DFMKHGBHABJ float64   `json:"DFMKHGBHABJ"`
	ECEGFPHLEBE string    `json:"ECEGFPHLEBE"`
	HIHMAJALMLD hash.Hash `json:"HIHMAJALMLD"`
	HNIBFFGIHCH string    `json:"HNIBFFGIHCH"`
	JJGHLDDPFCI []string  `json:"JJGHLDDPFCI"`
}
type FateBroadcastAccessor struct {
	_data            []FateBroadcast
	_dataCFJJLKBHJBM map[string]FateBroadcast
	_dataDFMKHGBHABJ map[float64]FateBroadcast
}

// LoadData retrieves the data. Must be called before FateBroadcast.GroupData
func (a *FateBroadcastAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/FateBroadcast.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *FateBroadcastAccessor) Raw() ([]FateBroadcast, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []FateBroadcast{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with FateBroadcastAccessor.LoadData to preload everything
func (a *FateBroadcastAccessor) GroupData() {
	a._dataCFJJLKBHJBM = map[string]FateBroadcast{}
	a._dataDFMKHGBHABJ = map[float64]FateBroadcast{}
	for _, d := range a._data {
		a._dataCFJJLKBHJBM[d.CFJJLKBHJBM] = d
		a._dataDFMKHGBHABJ[d.DFMKHGBHABJ] = d
	}
}

// ByCFJJLKBHJBM returns the FateBroadcast uniquely identified by CFJJLKBHJBM
//
// Error is only non-nil if the source errors out
func (a *FateBroadcastAccessor) ByCFJJLKBHJBM(identifier string) (FateBroadcast, error) {
	if a._dataCFJJLKBHJBM == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FateBroadcast{}, err
			}
		}
		a.GroupData()
	}
	return a._dataCFJJLKBHJBM[identifier], nil
}

// ByDFMKHGBHABJ returns the FateBroadcast uniquely identified by DFMKHGBHABJ
//
// Error is only non-nil if the source errors out
func (a *FateBroadcastAccessor) ByDFMKHGBHABJ(identifier float64) (FateBroadcast, error) {
	if a._dataDFMKHGBHABJ == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FateBroadcast{}, err
			}
		}
		a.GroupData()
	}
	return a._dataDFMKHGBHABJ[identifier], nil
}
