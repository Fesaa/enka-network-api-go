package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type RogueScoreReward struct {
	Reward       float64 `json:"Reward"`
	RewardPoolID float64 `json:"RewardPoolID"`
	Score        float64 `json:"Score"`
	ScoreRow     float64 `json:"ScoreRow"`
}
type RogueScoreRewardAccessor struct {
	_data       []RogueScoreReward
	_dataReward map[float64]RogueScoreReward
}

// LoadData retrieves the data. Must be called before RogueScoreReward.GroupData
func (a *RogueScoreRewardAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueScoreReward.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueScoreRewardAccessor) Raw() ([]RogueScoreReward, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueScoreReward{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueScoreRewardAccessor.LoadData to preload everything
func (a *RogueScoreRewardAccessor) GroupData() {
	a._dataReward = map[float64]RogueScoreReward{}
	for _, d := range a._data {
		a._dataReward[d.Reward] = d
	}
}

// ByReward returns the RogueScoreReward uniquely identified by Reward
//
// Error is only non-nil if the source errors out
func (a *RogueScoreRewardAccessor) ByReward(identifier float64) (RogueScoreReward, error) {
	if a._dataReward == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueScoreReward{}, err
			}
		}
		a.GroupData()
	}
	return a._dataReward[identifier], nil
}
