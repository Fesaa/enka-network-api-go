package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type ReShaRouteDisplay struct {
	AssistantImagePanelPrefab           string                 `json:"AssistantImagePanelPrefab"`
	AssistantItemID                     json.Number            `json:"AssistantItemID"`
	HiddenRouteClearFloorSavedValueKey  string                 `json:"HiddenRouteClearFloorSavedValueKey"`
	HiddenRouteUnlockFloorSavedValueKey string                 `json:"HiddenRouteUnlockFloorSavedValueKey"`
	HintText                            map[string]json.Number `json:"HintText"`
	ID                                  json.Number            `json:"ID"`
	NoClueHint                          map[string]json.Number `json:"NoClueHint"`
	RouteName                           map[string]json.Number `json:"RouteName"`
	RoutePanelPrefab                    string                 `json:"RoutePanelPrefab"`
}
type ReShaRouteDisplayAccessor struct {
	_data                                    []ReShaRouteDisplay
	_dataAssistantImagePanelPrefab           map[string]ReShaRouteDisplay
	_dataHiddenRouteClearFloorSavedValueKey  map[string]ReShaRouteDisplay
	_dataHiddenRouteUnlockFloorSavedValueKey map[string]ReShaRouteDisplay
	_dataRoutePanelPrefab                    map[string]ReShaRouteDisplay
}

// LoadData retrieves the data. Must be called before ReShaRouteDisplay.GroupData
func (a *ReShaRouteDisplayAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ReShaRouteDisplay.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ReShaRouteDisplayAccessor) Raw() ([]ReShaRouteDisplay, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ReShaRouteDisplay{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ReShaRouteDisplayAccessor.LoadData to preload everything
func (a *ReShaRouteDisplayAccessor) GroupData() {
	a._dataAssistantImagePanelPrefab = map[string]ReShaRouteDisplay{}
	a._dataHiddenRouteClearFloorSavedValueKey = map[string]ReShaRouteDisplay{}
	a._dataHiddenRouteUnlockFloorSavedValueKey = map[string]ReShaRouteDisplay{}
	a._dataRoutePanelPrefab = map[string]ReShaRouteDisplay{}
	for _, d := range a._data {
		a._dataAssistantImagePanelPrefab[d.AssistantImagePanelPrefab] = d
		a._dataHiddenRouteClearFloorSavedValueKey[d.HiddenRouteClearFloorSavedValueKey] = d
		a._dataHiddenRouteUnlockFloorSavedValueKey[d.HiddenRouteUnlockFloorSavedValueKey] = d
		a._dataRoutePanelPrefab[d.RoutePanelPrefab] = d
	}
}

// ByAssistantImagePanelPrefab returns the ReShaRouteDisplay uniquely identified by AssistantImagePanelPrefab
//
// Error is only non-nil if the source errors out
func (a *ReShaRouteDisplayAccessor) ByAssistantImagePanelPrefab(identifier string) (ReShaRouteDisplay, error) {
	if a._dataAssistantImagePanelPrefab == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ReShaRouteDisplay{}, err
			}
		}
		a.GroupData()
	}
	return a._dataAssistantImagePanelPrefab[identifier], nil
}

// ByHiddenRouteClearFloorSavedValueKey returns the ReShaRouteDisplay uniquely identified by HiddenRouteClearFloorSavedValueKey
//
// Error is only non-nil if the source errors out
func (a *ReShaRouteDisplayAccessor) ByHiddenRouteClearFloorSavedValueKey(identifier string) (ReShaRouteDisplay, error) {
	if a._dataHiddenRouteClearFloorSavedValueKey == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ReShaRouteDisplay{}, err
			}
		}
		a.GroupData()
	}
	return a._dataHiddenRouteClearFloorSavedValueKey[identifier], nil
}

// ByHiddenRouteUnlockFloorSavedValueKey returns the ReShaRouteDisplay uniquely identified by HiddenRouteUnlockFloorSavedValueKey
//
// Error is only non-nil if the source errors out
func (a *ReShaRouteDisplayAccessor) ByHiddenRouteUnlockFloorSavedValueKey(identifier string) (ReShaRouteDisplay, error) {
	if a._dataHiddenRouteUnlockFloorSavedValueKey == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ReShaRouteDisplay{}, err
			}
		}
		a.GroupData()
	}
	return a._dataHiddenRouteUnlockFloorSavedValueKey[identifier], nil
}

// ByRoutePanelPrefab returns the ReShaRouteDisplay uniquely identified by RoutePanelPrefab
//
// Error is only non-nil if the source errors out
func (a *ReShaRouteDisplayAccessor) ByRoutePanelPrefab(identifier string) (ReShaRouteDisplay, error) {
	if a._dataRoutePanelPrefab == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ReShaRouteDisplay{}, err
			}
		}
		a.GroupData()
	}
	return a._dataRoutePanelPrefab[identifier], nil
}
