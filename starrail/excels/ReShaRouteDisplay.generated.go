package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type ReShaRouteDisplay struct {
	AssistantImagePanelPrefab           string    `json:"AssistantImagePanelPrefab"`
	AssistantItemID                     float64   `json:"AssistantItemID"`
	HiddenRouteClearFloorSavedValueKey  string    `json:"HiddenRouteClearFloorSavedValueKey"`
	HiddenRouteUnlockFloorSavedValueKey string    `json:"HiddenRouteUnlockFloorSavedValueKey"`
	HintText                            hash.Hash `json:"HintText"`
	ID                                  float64   `json:"ID"`
	NoClueHint                          hash.Hash `json:"NoClueHint"`
	RouteName                           hash.Hash `json:"RouteName"`
	RoutePanelPrefab                    string    `json:"RoutePanelPrefab"`
}
type ReShaRouteDisplayAccessor struct {
	_data                                    []ReShaRouteDisplay
	_dataRoutePanelPrefab                    map[string]ReShaRouteDisplay
	_dataAssistantItemID                     map[float64]ReShaRouteDisplay
	_dataAssistantImagePanelPrefab           map[string]ReShaRouteDisplay
	_dataID                                  map[float64]ReShaRouteDisplay
	_dataHiddenRouteUnlockFloorSavedValueKey map[string]ReShaRouteDisplay
	_dataHiddenRouteClearFloorSavedValueKey  map[string]ReShaRouteDisplay
}

// LoadData retrieves the data. Must be called before ReShaRouteDisplay.GroupData
func (a *ReShaRouteDisplayAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ReShaRouteDisplay.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ReShaRouteDisplayAccessor) Raw() ([]ReShaRouteDisplay, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ReShaRouteDisplay{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ReShaRouteDisplayAccessor.LoadData to preload everything
func (a *ReShaRouteDisplayAccessor) GroupData() {
	for _, d := range a._data {
		a._dataRoutePanelPrefab[d.RoutePanelPrefab] = d
		a._dataAssistantItemID[d.AssistantItemID] = d
		a._dataAssistantImagePanelPrefab[d.AssistantImagePanelPrefab] = d
		a._dataID[d.ID] = d
		a._dataHiddenRouteUnlockFloorSavedValueKey[d.HiddenRouteUnlockFloorSavedValueKey] = d
		a._dataHiddenRouteClearFloorSavedValueKey[d.HiddenRouteClearFloorSavedValueKey] = d
	}
}

// ByRoutePanelPrefab returns the ReShaRouteDisplay uniquely identified by RoutePanelPrefab
//
// Error is only non-nil if the source errors out
func (a *ReShaRouteDisplayAccessor) ByRoutePanelPrefab(identifier string) (ReShaRouteDisplay, error) {
	if a._dataRoutePanelPrefab == nil {
		err := a.LoadData()
		if err != nil {
			return ReShaRouteDisplay{}, err
		}
		a.GroupData()
	}
	return a._dataRoutePanelPrefab[identifier], nil
}

// ByAssistantItemID returns the ReShaRouteDisplay uniquely identified by AssistantItemID
//
// Error is only non-nil if the source errors out
func (a *ReShaRouteDisplayAccessor) ByAssistantItemID(identifier float64) (ReShaRouteDisplay, error) {
	if a._dataAssistantItemID == nil {
		err := a.LoadData()
		if err != nil {
			return ReShaRouteDisplay{}, err
		}
		a.GroupData()
	}
	return a._dataAssistantItemID[identifier], nil
}

// ByAssistantImagePanelPrefab returns the ReShaRouteDisplay uniquely identified by AssistantImagePanelPrefab
//
// Error is only non-nil if the source errors out
func (a *ReShaRouteDisplayAccessor) ByAssistantImagePanelPrefab(identifier string) (ReShaRouteDisplay, error) {
	if a._dataAssistantImagePanelPrefab == nil {
		err := a.LoadData()
		if err != nil {
			return ReShaRouteDisplay{}, err
		}
		a.GroupData()
	}
	return a._dataAssistantImagePanelPrefab[identifier], nil
}

// ByID returns the ReShaRouteDisplay uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *ReShaRouteDisplayAccessor) ByID(identifier float64) (ReShaRouteDisplay, error) {
	if a._dataID == nil {
		err := a.LoadData()
		if err != nil {
			return ReShaRouteDisplay{}, err
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}

// ByHiddenRouteUnlockFloorSavedValueKey returns the ReShaRouteDisplay uniquely identified by HiddenRouteUnlockFloorSavedValueKey
//
// Error is only non-nil if the source errors out
func (a *ReShaRouteDisplayAccessor) ByHiddenRouteUnlockFloorSavedValueKey(identifier string) (ReShaRouteDisplay, error) {
	if a._dataHiddenRouteUnlockFloorSavedValueKey == nil {
		err := a.LoadData()
		if err != nil {
			return ReShaRouteDisplay{}, err
		}
		a.GroupData()
	}
	return a._dataHiddenRouteUnlockFloorSavedValueKey[identifier], nil
}

// ByHiddenRouteClearFloorSavedValueKey returns the ReShaRouteDisplay uniquely identified by HiddenRouteClearFloorSavedValueKey
//
// Error is only non-nil if the source errors out
func (a *ReShaRouteDisplayAccessor) ByHiddenRouteClearFloorSavedValueKey(identifier string) (ReShaRouteDisplay, error) {
	if a._dataHiddenRouteClearFloorSavedValueKey == nil {
		err := a.LoadData()
		if err != nil {
			return ReShaRouteDisplay{}, err
		}
		a.GroupData()
	}
	return a._dataHiddenRouteClearFloorSavedValueKey[identifier], nil
}
