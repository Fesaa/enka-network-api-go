package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type RogueNousDiceSurface struct {
	BranchLimitaion []float64       `json:"BranchLimitaion"`
	DescParam       []hash.IntValue `json:"DescParam"`
	DiceActiveStage float64         `json:"DiceActiveStage"`
	ExtraDesc       []float64       `json:"ExtraDesc"`
	Icon            string          `json:"Icon"`
	ItemID          float64         `json:"ItemID"`
	Rarity          float64         `json:"Rarity"`
	SlotList        []float64       `json:"SlotList"`
	Sort            float64         `json:"Sort"`
	SurfaceDesc     hash.Hash       `json:"SurfaceDesc"`
	SurfaceID       float64         `json:"SurfaceID"`
	SurfaceName     hash.Hash       `json:"SurfaceName"`
	TagList         []string        `json:"TagList"`
	UnlockDisplayID float64         `json:"UnlockDisplayID"`
}
type RogueNousDiceSurfaceAccessor struct {
	_data          []RogueNousDiceSurface
	_dataItemID    map[float64]RogueNousDiceSurface
	_dataSort      map[float64]RogueNousDiceSurface
	_dataSurfaceID map[float64]RogueNousDiceSurface
}

// LoadData retrieves the data. Must be called before RogueNousDiceSurface.GroupData
func (a *RogueNousDiceSurfaceAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueNousDiceSurface.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueNousDiceSurfaceAccessor) Raw() ([]RogueNousDiceSurface, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueNousDiceSurface{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueNousDiceSurfaceAccessor.LoadData to preload everything
func (a *RogueNousDiceSurfaceAccessor) GroupData() {
	for _, d := range a._data {
		a._dataItemID[d.ItemID] = d
		a._dataSort[d.Sort] = d
		a._dataSurfaceID[d.SurfaceID] = d
	}
}

// ByItemID returns the RogueNousDiceSurface uniquely identified by ItemID
//
// Error is only non-nil if the source errors out
func (a *RogueNousDiceSurfaceAccessor) ByItemID(identifier float64) (RogueNousDiceSurface, error) {
	if a._dataItemID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueNousDiceSurface{}, err
			}
		}
		a.GroupData()
	}
	return a._dataItemID[identifier], nil
}

// BySort returns the RogueNousDiceSurface uniquely identified by Sort
//
// Error is only non-nil if the source errors out
func (a *RogueNousDiceSurfaceAccessor) BySort(identifier float64) (RogueNousDiceSurface, error) {
	if a._dataSort == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueNousDiceSurface{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSort[identifier], nil
}

// BySurfaceID returns the RogueNousDiceSurface uniquely identified by SurfaceID
//
// Error is only non-nil if the source errors out
func (a *RogueNousDiceSurfaceAccessor) BySurfaceID(identifier float64) (RogueNousDiceSurface, error) {
	if a._dataSurfaceID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueNousDiceSurface{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSurfaceID[identifier], nil
}
