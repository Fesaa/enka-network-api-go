package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type RogueNousDiceSurface struct {
	BranchLimitaion []json.Number            `json:"BranchLimitaion"`
	DescParam       []map[string]json.Number `json:"DescParam"`
	DiceActiveStage json.Number              `json:"DiceActiveStage"`
	ExtraDesc       []json.Number            `json:"ExtraDesc"`
	Icon            string                   `json:"Icon"`
	ItemID          json.Number              `json:"ItemID"`
	Rarity          json.Number              `json:"Rarity"`
	SlotList        []json.Number            `json:"SlotList"`
	Sort            json.Number              `json:"Sort"`
	SurfaceDesc     map[string]json.Number   `json:"SurfaceDesc"`
	SurfaceID       json.Number              `json:"SurfaceID"`
	SurfaceName     map[string]json.Number   `json:"SurfaceName"`
	TagList         []string                 `json:"TagList"`
	UnlockDisplayID json.Number              `json:"UnlockDisplayID"`
}
type RogueNousDiceSurfaceAccessor struct {
	_data []RogueNousDiceSurface
}

// LoadData retrieves the data. Must be called before RogueNousDiceSurface.GroupData
func (a *RogueNousDiceSurfaceAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueNousDiceSurface.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueNousDiceSurfaceAccessor) Raw() ([]RogueNousDiceSurface, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueNousDiceSurface{}, err
		}
	}
	return a._data, nil
}
