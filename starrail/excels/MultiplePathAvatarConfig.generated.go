package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type MultiplePathAvatarConfig struct {
	AvatarID         float64                                    `json:"AvatarID"`
	BaseAvatarID     float64                                    `json:"BaseAvatarID"`
	ChangeConfigPath string                                     `json:"ChangeConfigPath"`
	Desc             hash.Hash                                  `json:"Desc"`
	Gender           string                                     `json:"Gender"`
	IsEarlyUnlock    bool                                       `json:"IsEarlyUnlock"`
	UnlockConditions []MultiplePathAvatarConfigUnlockConditions `json:"UnlockConditions"`
	UnlockToast      hash.Hash                                  `json:"UnlockToast"`
}
type MultiplePathAvatarConfigUnlockConditions struct {
	Param string `json:"Param"`
	Type  string `json:"Type"`
}
type MultiplePathAvatarConfigAccessor struct {
	_data                 []MultiplePathAvatarConfig
	_dataChangeConfigPath map[string]MultiplePathAvatarConfig
	_dataAvatarID         map[float64]MultiplePathAvatarConfig
}

// LoadData retrieves the data. Must be called before MultiplePathAvatarConfig.GroupData
func (a *MultiplePathAvatarConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MultiplePathAvatarConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MultiplePathAvatarConfigAccessor) Raw() ([]MultiplePathAvatarConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MultiplePathAvatarConfig{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MultiplePathAvatarConfigAccessor.LoadData to preload everything
func (a *MultiplePathAvatarConfigAccessor) GroupData() {
	for _, d := range a._data {
		a._dataChangeConfigPath[d.ChangeConfigPath] = d
		a._dataAvatarID[d.AvatarID] = d
	}
}

// ByChangeConfigPath returns the MultiplePathAvatarConfig uniquely identified by ChangeConfigPath
//
// Error is only non-nil if the source errors out
func (a *MultiplePathAvatarConfigAccessor) ByChangeConfigPath(identifier string) (MultiplePathAvatarConfig, error) {
	if a._dataChangeConfigPath == nil {
		err := a.LoadData()
		if err != nil {
			return MultiplePathAvatarConfig{}, err
		}
		a.GroupData()
	}
	return a._dataChangeConfigPath[identifier], nil
}

// ByAvatarID returns the MultiplePathAvatarConfig uniquely identified by AvatarID
//
// Error is only non-nil if the source errors out
func (a *MultiplePathAvatarConfigAccessor) ByAvatarID(identifier float64) (MultiplePathAvatarConfig, error) {
	if a._dataAvatarID == nil {
		err := a.LoadData()
		if err != nil {
			return MultiplePathAvatarConfig{}, err
		}
		a.GroupData()
	}
	return a._dataAvatarID[identifier], nil
}
