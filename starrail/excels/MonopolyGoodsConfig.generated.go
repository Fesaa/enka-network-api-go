package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type MonopolyGoodsConfig struct {
	Cost              json.Number            `json:"Cost"`
	Desc              map[string]json.Number `json:"Desc"`
	GoodsID           json.Number            `json:"GoodsID"`
	GoodsType         string                 `json:"GoodsType"`
	IconPath          string                 `json:"IconPath"`
	Name              map[string]json.Number `json:"Name"`
	TextDisplayParam1 json.Number            `json:"TextDisplayParam1"`
	TextDisplayParam2 json.Number            `json:"TextDisplayParam2"`
}
type MonopolyGoodsConfigAccessor struct {
	_data        []MonopolyGoodsConfig
	_dataGoodsID map[json.Number]MonopolyGoodsConfig
}

// LoadData retrieves the data. Must be called before MonopolyGoodsConfig.GroupData
func (a *MonopolyGoodsConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MonopolyGoodsConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MonopolyGoodsConfigAccessor) Raw() ([]MonopolyGoodsConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MonopolyGoodsConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MonopolyGoodsConfigAccessor.LoadData to preload everything
func (a *MonopolyGoodsConfigAccessor) GroupData() {
	a._dataGoodsID = map[json.Number]MonopolyGoodsConfig{}
	for _, d := range a._data {
		a._dataGoodsID[d.GoodsID] = d
	}
}

// ByGoodsID returns the MonopolyGoodsConfig uniquely identified by GoodsID
//
// Error is only non-nil if the source errors out
func (a *MonopolyGoodsConfigAccessor) ByGoodsID(identifier json.Number) (MonopolyGoodsConfig, error) {
	if a._dataGoodsID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MonopolyGoodsConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataGoodsID[identifier], nil
}
