package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type RogueNousMissionReward struct {
	MissionRewardID float64   `json:"MissionRewardID"`
	QuestList       []float64 `json:"QuestList"`
	TabTitle        hash.Hash `json:"TabTitle"`
}
type RogueNousMissionRewardAccessor struct {
	_data                []RogueNousMissionReward
	_dataMissionRewardID map[float64]RogueNousMissionReward
}

// LoadData retrieves the data. Must be called before RogueNousMissionReward.GroupData
func (a *RogueNousMissionRewardAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueNousMissionReward.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueNousMissionRewardAccessor) Raw() ([]RogueNousMissionReward, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueNousMissionReward{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueNousMissionRewardAccessor.LoadData to preload everything
func (a *RogueNousMissionRewardAccessor) GroupData() {
	for _, d := range a._data {
		a._dataMissionRewardID[d.MissionRewardID] = d
	}
}

// ByMissionRewardID returns the RogueNousMissionReward uniquely identified by MissionRewardID
//
// Error is only non-nil if the source errors out
func (a *RogueNousMissionRewardAccessor) ByMissionRewardID(identifier float64) (RogueNousMissionReward, error) {
	if a._dataMissionRewardID == nil {
		err := a.LoadData()
		if err != nil {
			return RogueNousMissionReward{}, err
		}
		a.GroupData()
	}
	return a._dataMissionRewardID[identifier], nil
}
