package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type SwordTrainingStoryLineBonus struct {
	EffectDescList []hash.Hash `json:"EffectDescList"`
	StoryLineNum   float64     `json:"StoryLineNum"`
}
type SwordTrainingStoryLineBonusAccessor struct {
	_data             []SwordTrainingStoryLineBonus
	_dataStoryLineNum map[float64]SwordTrainingStoryLineBonus
}

// LoadData retrieves the data. Must be called before SwordTrainingStoryLineBonus.GroupData
func (a *SwordTrainingStoryLineBonusAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/SwordTrainingStoryLineBonus.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *SwordTrainingStoryLineBonusAccessor) Raw() ([]SwordTrainingStoryLineBonus, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []SwordTrainingStoryLineBonus{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with SwordTrainingStoryLineBonusAccessor.LoadData to preload everything
func (a *SwordTrainingStoryLineBonusAccessor) GroupData() {
	a._dataStoryLineNum = map[float64]SwordTrainingStoryLineBonus{}
	for _, d := range a._data {
		a._dataStoryLineNum[d.StoryLineNum] = d
	}
}

// ByStoryLineNum returns the SwordTrainingStoryLineBonus uniquely identified by StoryLineNum
//
// Error is only non-nil if the source errors out
func (a *SwordTrainingStoryLineBonusAccessor) ByStoryLineNum(identifier float64) (SwordTrainingStoryLineBonus, error) {
	if a._dataStoryLineNum == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return SwordTrainingStoryLineBonus{}, err
			}
		}
		a.GroupData()
	}
	return a._dataStoryLineNum[identifier], nil
}
