package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type MessageItemRaidEntrance struct {
	ID                 float64   `json:"ID"`
	ImagePath          string    `json:"ImagePath"`
	InvalidMissionList []float64 `json:"InvalidMissionList"`
	RaidID             float64   `json:"RaidID"`
}
type MessageItemRaidEntranceAccessor struct {
	_data       []MessageItemRaidEntrance
	_dataID     map[float64]MessageItemRaidEntrance
	_dataRaidID map[float64]MessageItemRaidEntrance
}

// LoadData retrieves the data. Must be called before MessageItemRaidEntrance.GroupData
func (a *MessageItemRaidEntranceAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MessageItemRaidEntrance.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MessageItemRaidEntranceAccessor) Raw() ([]MessageItemRaidEntrance, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MessageItemRaidEntrance{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MessageItemRaidEntranceAccessor.LoadData to preload everything
func (a *MessageItemRaidEntranceAccessor) GroupData() {
	a._dataID = map[float64]MessageItemRaidEntrance{}
	a._dataRaidID = map[float64]MessageItemRaidEntrance{}
	for _, d := range a._data {
		a._dataID[d.ID] = d
		a._dataRaidID[d.RaidID] = d
	}
}

// ByID returns the MessageItemRaidEntrance uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *MessageItemRaidEntranceAccessor) ByID(identifier float64) (MessageItemRaidEntrance, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MessageItemRaidEntrance{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}

// ByRaidID returns the MessageItemRaidEntrance uniquely identified by RaidID
//
// Error is only non-nil if the source errors out
func (a *MessageItemRaidEntranceAccessor) ByRaidID(identifier float64) (MessageItemRaidEntrance, error) {
	if a._dataRaidID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MessageItemRaidEntrance{}, err
			}
		}
		a.GroupData()
	}
	return a._dataRaidID[identifier], nil
}
