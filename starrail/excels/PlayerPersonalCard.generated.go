package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type PlayerPersonalCard struct {
	CardID            json.Number `json:"CardID"`
	CardPrefabPath    string      `json:"CardPrefabPath"`
	ChatPrefabPath    string      `json:"ChatPrefabPath"`
	FriendPrefabPath  string      `json:"FriendPrefabPath"`
	ReplaceIconPath   string      `json:"ReplaceIconPath"`
	ShowParam         json.Number `json:"ShowParam"`
	ShowType          string      `json:"ShowType"`
	SupportPrefabPath string      `json:"SupportPrefabPath"`
}
type PlayerPersonalCardAccessor struct {
	_data                  []PlayerPersonalCard
	_dataCardPrefabPath    map[string]PlayerPersonalCard
	_dataChatPrefabPath    map[string]PlayerPersonalCard
	_dataFriendPrefabPath  map[string]PlayerPersonalCard
	_dataReplaceIconPath   map[string]PlayerPersonalCard
	_dataShowType          map[string]PlayerPersonalCard
	_dataSupportPrefabPath map[string]PlayerPersonalCard
}

// LoadData retrieves the data. Must be called before PlayerPersonalCard.GroupData
func (a *PlayerPersonalCardAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/PlayerPersonalCard.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *PlayerPersonalCardAccessor) Raw() ([]PlayerPersonalCard, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []PlayerPersonalCard{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with PlayerPersonalCardAccessor.LoadData to preload everything
func (a *PlayerPersonalCardAccessor) GroupData() {
	a._dataCardPrefabPath = map[string]PlayerPersonalCard{}
	a._dataChatPrefabPath = map[string]PlayerPersonalCard{}
	a._dataFriendPrefabPath = map[string]PlayerPersonalCard{}
	a._dataReplaceIconPath = map[string]PlayerPersonalCard{}
	a._dataShowType = map[string]PlayerPersonalCard{}
	a._dataSupportPrefabPath = map[string]PlayerPersonalCard{}
	for _, d := range a._data {
		a._dataCardPrefabPath[d.CardPrefabPath] = d
		a._dataChatPrefabPath[d.ChatPrefabPath] = d
		a._dataFriendPrefabPath[d.FriendPrefabPath] = d
		a._dataReplaceIconPath[d.ReplaceIconPath] = d
		a._dataShowType[d.ShowType] = d
		a._dataSupportPrefabPath[d.SupportPrefabPath] = d
	}
}

// ByCardPrefabPath returns the PlayerPersonalCard uniquely identified by CardPrefabPath
//
// Error is only non-nil if the source errors out
func (a *PlayerPersonalCardAccessor) ByCardPrefabPath(identifier string) (PlayerPersonalCard, error) {
	if a._dataCardPrefabPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return PlayerPersonalCard{}, err
			}
		}
		a.GroupData()
	}
	return a._dataCardPrefabPath[identifier], nil
}

// ByChatPrefabPath returns the PlayerPersonalCard uniquely identified by ChatPrefabPath
//
// Error is only non-nil if the source errors out
func (a *PlayerPersonalCardAccessor) ByChatPrefabPath(identifier string) (PlayerPersonalCard, error) {
	if a._dataChatPrefabPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return PlayerPersonalCard{}, err
			}
		}
		a.GroupData()
	}
	return a._dataChatPrefabPath[identifier], nil
}

// ByFriendPrefabPath returns the PlayerPersonalCard uniquely identified by FriendPrefabPath
//
// Error is only non-nil if the source errors out
func (a *PlayerPersonalCardAccessor) ByFriendPrefabPath(identifier string) (PlayerPersonalCard, error) {
	if a._dataFriendPrefabPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return PlayerPersonalCard{}, err
			}
		}
		a.GroupData()
	}
	return a._dataFriendPrefabPath[identifier], nil
}

// ByReplaceIconPath returns the PlayerPersonalCard uniquely identified by ReplaceIconPath
//
// Error is only non-nil if the source errors out
func (a *PlayerPersonalCardAccessor) ByReplaceIconPath(identifier string) (PlayerPersonalCard, error) {
	if a._dataReplaceIconPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return PlayerPersonalCard{}, err
			}
		}
		a.GroupData()
	}
	return a._dataReplaceIconPath[identifier], nil
}

// ByShowType returns the PlayerPersonalCard uniquely identified by ShowType
//
// Error is only non-nil if the source errors out
func (a *PlayerPersonalCardAccessor) ByShowType(identifier string) (PlayerPersonalCard, error) {
	if a._dataShowType == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return PlayerPersonalCard{}, err
			}
		}
		a.GroupData()
	}
	return a._dataShowType[identifier], nil
}

// BySupportPrefabPath returns the PlayerPersonalCard uniquely identified by SupportPrefabPath
//
// Error is only non-nil if the source errors out
func (a *PlayerPersonalCardAccessor) BySupportPrefabPath(identifier string) (PlayerPersonalCard, error) {
	if a._dataSupportPrefabPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return PlayerPersonalCard{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSupportPrefabPath[identifier], nil
}
