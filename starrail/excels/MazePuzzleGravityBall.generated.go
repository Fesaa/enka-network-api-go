package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type MazePuzzleGravityBall struct {
	DestructablePropList []interface{} `json:"DestructablePropList"`
	PuzzleID             json.Number   `json:"PuzzleID"`
	WallPrefab           string        `json:"WallPrefab"`
}
type MazePuzzleGravityBallAccessor struct {
	_data           []MazePuzzleGravityBall
	_dataWallPrefab map[string]MazePuzzleGravityBall
}

// LoadData retrieves the data. Must be called before MazePuzzleGravityBall.GroupData
func (a *MazePuzzleGravityBallAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MazePuzzleGravityBall.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MazePuzzleGravityBallAccessor) Raw() ([]MazePuzzleGravityBall, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MazePuzzleGravityBall{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MazePuzzleGravityBallAccessor.LoadData to preload everything
func (a *MazePuzzleGravityBallAccessor) GroupData() {
	a._dataWallPrefab = map[string]MazePuzzleGravityBall{}
	for _, d := range a._data {
		a._dataWallPrefab[d.WallPrefab] = d
	}
}

// ByWallPrefab returns the MazePuzzleGravityBall uniquely identified by WallPrefab
//
// Error is only non-nil if the source errors out
func (a *MazePuzzleGravityBallAccessor) ByWallPrefab(identifier string) (MazePuzzleGravityBall, error) {
	if a._dataWallPrefab == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MazePuzzleGravityBall{}, err
			}
		}
		a.GroupData()
	}
	return a._dataWallPrefab[identifier], nil
}
