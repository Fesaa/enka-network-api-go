package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type ActivityQuestRewardTab struct {
	QuestTabGroupID   json.Number            `json:"QuestTabGroupID"`
	QuestTabGroupName map[string]json.Number `json:"QuestTabGroupName"`
	QuestTabList      []json.Number          `json:"QuestTabList"`
}
type ActivityQuestRewardTabAccessor struct {
	_data                []ActivityQuestRewardTab
	_dataQuestTabGroupID map[json.Number]ActivityQuestRewardTab
}

// LoadData retrieves the data. Must be called before ActivityQuestRewardTab.GroupData
func (a *ActivityQuestRewardTabAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ActivityQuestRewardTab.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ActivityQuestRewardTabAccessor) Raw() ([]ActivityQuestRewardTab, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ActivityQuestRewardTab{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ActivityQuestRewardTabAccessor.LoadData to preload everything
func (a *ActivityQuestRewardTabAccessor) GroupData() {
	a._dataQuestTabGroupID = map[json.Number]ActivityQuestRewardTab{}
	for _, d := range a._data {
		a._dataQuestTabGroupID[d.QuestTabGroupID] = d
	}
}

// ByQuestTabGroupID returns the ActivityQuestRewardTab uniquely identified by QuestTabGroupID
//
// Error is only non-nil if the source errors out
func (a *ActivityQuestRewardTabAccessor) ByQuestTabGroupID(identifier json.Number) (ActivityQuestRewardTab, error) {
	if a._dataQuestTabGroupID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityQuestRewardTab{}, err
			}
		}
		a.GroupData()
	}
	return a._dataQuestTabGroupID[identifier], nil
}
