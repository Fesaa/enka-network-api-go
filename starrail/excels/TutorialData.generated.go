package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type TutorialData struct {
	CanInterrupt        bool                              `json:"CanInterrupt"`
	FinishTriggerParams []TutorialDataFinishTriggerParams `json:"FinishTriggerParams"`
	Priority            json.Number                       `json:"Priority"`
	RestoreType         string                            `json:"RestoreType"`
	TriggerParams       []TutorialDataTriggerParams       `json:"TriggerParams"`
	TutorialID          json.Number                       `json:"TutorialID"`
	TutorialJsonPath    string                            `json:"TutorialJsonPath"`
}
type TutorialDataFinishTriggerParams struct {
	TriggerParam string `json:"TriggerParam"`
	TriggerType  string `json:"TriggerType"`
}
type TutorialDataTriggerParams struct {
	TriggerParam string `json:"TriggerParam"`
	TriggerType  string `json:"TriggerType"`
}
type TutorialDataAccessor struct {
	_data []TutorialData
}

// LoadData retrieves the data. Must be called before TutorialData.GroupData
func (a *TutorialDataAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/TutorialData.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *TutorialDataAccessor) Raw() ([]TutorialData, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []TutorialData{}, err
		}
	}
	return a._data, nil
}
