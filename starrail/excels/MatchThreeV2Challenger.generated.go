package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type MatchThreeV2Challenger struct {
	ChallengerDesc   hash.Hash `json:"ChallengerDesc"`
	ChallengerID     float64   `json:"ChallengerID"`
	ChallengerImage  string    `json:"ChallengerImage"`
	ChallengerTitle  hash.Hash `json:"ChallengerTitle"`
	LevelID          float64   `json:"LevelID"`
	StarTargetList   []float64 `json:"StarTargetList"`
	UnlockBattleItem float64   `json:"UnlockBattleItem"`
}
type MatchThreeV2ChallengerAccessor struct {
	_data                []MatchThreeV2Challenger
	_dataChallengerID    map[float64]MatchThreeV2Challenger
	_dataChallengerImage map[string]MatchThreeV2Challenger
	_dataLevelID         map[float64]MatchThreeV2Challenger
}

// LoadData retrieves the data. Must be called before MatchThreeV2Challenger.GroupData
func (a *MatchThreeV2ChallengerAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MatchThreeV2Challenger.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MatchThreeV2ChallengerAccessor) Raw() ([]MatchThreeV2Challenger, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MatchThreeV2Challenger{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MatchThreeV2ChallengerAccessor.LoadData to preload everything
func (a *MatchThreeV2ChallengerAccessor) GroupData() {
	a._dataChallengerID = map[float64]MatchThreeV2Challenger{}
	a._dataChallengerImage = map[string]MatchThreeV2Challenger{}
	a._dataLevelID = map[float64]MatchThreeV2Challenger{}
	for _, d := range a._data {
		a._dataChallengerID[d.ChallengerID] = d
		a._dataChallengerImage[d.ChallengerImage] = d
		a._dataLevelID[d.LevelID] = d
	}
}

// ByChallengerID returns the MatchThreeV2Challenger uniquely identified by ChallengerID
//
// Error is only non-nil if the source errors out
func (a *MatchThreeV2ChallengerAccessor) ByChallengerID(identifier float64) (MatchThreeV2Challenger, error) {
	if a._dataChallengerID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MatchThreeV2Challenger{}, err
			}
		}
		a.GroupData()
	}
	return a._dataChallengerID[identifier], nil
}

// ByChallengerImage returns the MatchThreeV2Challenger uniquely identified by ChallengerImage
//
// Error is only non-nil if the source errors out
func (a *MatchThreeV2ChallengerAccessor) ByChallengerImage(identifier string) (MatchThreeV2Challenger, error) {
	if a._dataChallengerImage == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MatchThreeV2Challenger{}, err
			}
		}
		a.GroupData()
	}
	return a._dataChallengerImage[identifier], nil
}

// ByLevelID returns the MatchThreeV2Challenger uniquely identified by LevelID
//
// Error is only non-nil if the source errors out
func (a *MatchThreeV2ChallengerAccessor) ByLevelID(identifier float64) (MatchThreeV2Challenger, error) {
	if a._dataLevelID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MatchThreeV2Challenger{}, err
			}
		}
		a.GroupData()
	}
	return a._dataLevelID[identifier], nil
}
