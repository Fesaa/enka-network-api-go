package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type EvolveBuildTutorial struct {
	ID            float64 `json:"ID"`
	StageMergedID float64 `json:"StageMergedID"`
	TutorialID    string  `json:"TutorialID"`
	WeaponLevel   float64 `json:"WeaponLevel"`
}
type EvolveBuildTutorialAccessor struct {
	_data           []EvolveBuildTutorial
	_dataTutorialID map[string]EvolveBuildTutorial
}

// LoadData retrieves the data. Must be called before EvolveBuildTutorial.GroupData
func (a *EvolveBuildTutorialAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/EvolveBuildTutorial.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *EvolveBuildTutorialAccessor) Raw() ([]EvolveBuildTutorial, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []EvolveBuildTutorial{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with EvolveBuildTutorialAccessor.LoadData to preload everything
func (a *EvolveBuildTutorialAccessor) GroupData() {
	for _, d := range a._data {
		a._dataTutorialID[d.TutorialID] = d
	}
}

// ByTutorialID returns the EvolveBuildTutorial uniquely identified by TutorialID
//
// Error is only non-nil if the source errors out
func (a *EvolveBuildTutorialAccessor) ByTutorialID(identifier string) (EvolveBuildTutorial, error) {
	if a._dataTutorialID == nil {
		err := a.LoadData()
		if err != nil {
			return EvolveBuildTutorial{}, err
		}
		a.GroupData()
	}
	return a._dataTutorialID[identifier], nil
}
