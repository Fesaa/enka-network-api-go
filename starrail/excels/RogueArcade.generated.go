package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type RogueArcade struct {
	AdventureType string  `json:"AdventureType"`
	ArcadeID      float64 `json:"ArcadeID"`
	ArcadeRoomID  float64 `json:"ArcadeRoomID"`
	ParamGroupID  float64 `json:"ParamGroupID"`
}
type RogueArcadeAccessor struct {
	_data             []RogueArcade
	_dataArcadeRoomID map[float64]RogueArcade
}

// LoadData retrieves the data. Must be called before RogueArcade.GroupData
func (a *RogueArcadeAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueArcade.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueArcadeAccessor) Raw() ([]RogueArcade, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueArcade{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueArcadeAccessor.LoadData to preload everything
func (a *RogueArcadeAccessor) GroupData() {
	a._dataArcadeRoomID = map[float64]RogueArcade{}
	for _, d := range a._data {
		a._dataArcadeRoomID[d.ArcadeRoomID] = d
	}
}

// ByArcadeRoomID returns the RogueArcade uniquely identified by ArcadeRoomID
//
// Error is only non-nil if the source errors out
func (a *RogueArcadeAccessor) ByArcadeRoomID(identifier float64) (RogueArcade, error) {
	if a._dataArcadeRoomID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueArcade{}, err
			}
		}
		a.GroupData()
	}
	return a._dataArcadeRoomID[identifier], nil
}
