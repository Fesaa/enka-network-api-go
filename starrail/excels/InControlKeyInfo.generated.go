package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type InControlKeyInfo struct {
	IsSettingKey     bool                   `json:"isSettingKey"`
	Key              string                 `json:"key"`
	KeyString        map[string]json.Number `json:"keyString"`
	KeyStringFrance  map[string]json.Number `json:"keyStringFrance"`
	KeyStringGermany map[string]json.Number `json:"keyStringGermany"`
}
type InControlKeyInfoAccessor struct {
	_data    []InControlKeyInfo
	_dataKey map[string]InControlKeyInfo
}

// LoadData retrieves the data. Must be called before InControlKeyInfo.GroupData
func (a *InControlKeyInfoAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/InControlKeyInfo.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *InControlKeyInfoAccessor) Raw() ([]InControlKeyInfo, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []InControlKeyInfo{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with InControlKeyInfoAccessor.LoadData to preload everything
func (a *InControlKeyInfoAccessor) GroupData() {
	a._dataKey = map[string]InControlKeyInfo{}
	for _, d := range a._data {
		a._dataKey[d.Key] = d
	}
}

// Bykey returns the InControlKeyInfo uniquely identified by key
//
// Error is only non-nil if the source errors out
func (a *InControlKeyInfoAccessor) Bykey(identifier string) (InControlKeyInfo, error) {
	if a._dataKey == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return InControlKeyInfo{}, err
			}
		}
		a.GroupData()
	}
	return a._dataKey[identifier], nil
}
