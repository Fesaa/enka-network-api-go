package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type ChimeraData struct {
	Body          string  `json:"Body"`
	ChimeraID     float64 `json:"ChimeraID"`
	ChimeraIcon   string  `json:"ChimeraIcon"`
	DataJson      string  `json:"DataJson"`
	DisplayID     float64 `json:"DisplayID"`
	Eye           string  `json:"Eye"`
	Horn          string  `json:"Horn"`
	RaritySetting float64 `json:"RaritySetting"`
	Sort          float64 `json:"Sort"`
	Tail          string  `json:"Tail"`
	Type          string  `json:"Type"`
	VoiceType     string  `json:"VoiceType"`
	Wing          string  `json:"Wing"`
}
type ChimeraDataAccessor struct {
	_data            []ChimeraData
	_dataSort        map[float64]ChimeraData
	_dataChimeraIcon map[string]ChimeraData
	_dataBody        map[string]ChimeraData
	_dataDisplayID   map[float64]ChimeraData
	_dataDataJson    map[string]ChimeraData
	_dataChimeraID   map[float64]ChimeraData
}

// LoadData retrieves the data. Must be called before ChimeraData.GroupData
func (a *ChimeraDataAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ChimeraData.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ChimeraDataAccessor) Raw() ([]ChimeraData, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ChimeraData{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ChimeraDataAccessor.LoadData to preload everything
func (a *ChimeraDataAccessor) GroupData() {
	for _, d := range a._data {
		a._dataSort[d.Sort] = d
		a._dataChimeraIcon[d.ChimeraIcon] = d
		a._dataBody[d.Body] = d
		a._dataDisplayID[d.DisplayID] = d
		a._dataDataJson[d.DataJson] = d
		a._dataChimeraID[d.ChimeraID] = d
	}
}

// BySort returns the ChimeraData uniquely identified by Sort
//
// Error is only non-nil if the source errors out
func (a *ChimeraDataAccessor) BySort(identifier float64) (ChimeraData, error) {
	if a._dataSort == nil {
		err := a.LoadData()
		if err != nil {
			return ChimeraData{}, err
		}
		a.GroupData()
	}
	return a._dataSort[identifier], nil
}

// ByChimeraIcon returns the ChimeraData uniquely identified by ChimeraIcon
//
// Error is only non-nil if the source errors out
func (a *ChimeraDataAccessor) ByChimeraIcon(identifier string) (ChimeraData, error) {
	if a._dataChimeraIcon == nil {
		err := a.LoadData()
		if err != nil {
			return ChimeraData{}, err
		}
		a.GroupData()
	}
	return a._dataChimeraIcon[identifier], nil
}

// ByBody returns the ChimeraData uniquely identified by Body
//
// Error is only non-nil if the source errors out
func (a *ChimeraDataAccessor) ByBody(identifier string) (ChimeraData, error) {
	if a._dataBody == nil {
		err := a.LoadData()
		if err != nil {
			return ChimeraData{}, err
		}
		a.GroupData()
	}
	return a._dataBody[identifier], nil
}

// ByDisplayID returns the ChimeraData uniquely identified by DisplayID
//
// Error is only non-nil if the source errors out
func (a *ChimeraDataAccessor) ByDisplayID(identifier float64) (ChimeraData, error) {
	if a._dataDisplayID == nil {
		err := a.LoadData()
		if err != nil {
			return ChimeraData{}, err
		}
		a.GroupData()
	}
	return a._dataDisplayID[identifier], nil
}

// ByDataJson returns the ChimeraData uniquely identified by DataJson
//
// Error is only non-nil if the source errors out
func (a *ChimeraDataAccessor) ByDataJson(identifier string) (ChimeraData, error) {
	if a._dataDataJson == nil {
		err := a.LoadData()
		if err != nil {
			return ChimeraData{}, err
		}
		a.GroupData()
	}
	return a._dataDataJson[identifier], nil
}

// ByChimeraID returns the ChimeraData uniquely identified by ChimeraID
//
// Error is only non-nil if the source errors out
func (a *ChimeraDataAccessor) ByChimeraID(identifier float64) (ChimeraData, error) {
	if a._dataChimeraID == nil {
		err := a.LoadData()
		if err != nil {
			return ChimeraData{}, err
		}
		a.GroupData()
	}
	return a._dataChimeraID[identifier], nil
}
