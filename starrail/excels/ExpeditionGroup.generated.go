package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type ExpeditionGroup struct {
	GroupID  float64   `json:"GroupID"`
	IconPath string    `json:"IconPath"`
	Name     hash.Hash `json:"Name"`
}
type ExpeditionGroupAccessor struct {
	_data         []ExpeditionGroup
	_dataGroupID  map[float64]ExpeditionGroup
	_dataIconPath map[string]ExpeditionGroup
}

// LoadData retrieves the data. Must be called before ExpeditionGroup.GroupData
func (a *ExpeditionGroupAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ExpeditionGroup.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ExpeditionGroupAccessor) Raw() ([]ExpeditionGroup, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ExpeditionGroup{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ExpeditionGroupAccessor.LoadData to preload everything
func (a *ExpeditionGroupAccessor) GroupData() {
	a._dataGroupID = map[float64]ExpeditionGroup{}
	a._dataIconPath = map[string]ExpeditionGroup{}
	for _, d := range a._data {
		a._dataGroupID[d.GroupID] = d
		a._dataIconPath[d.IconPath] = d
	}
}

// ByGroupID returns the ExpeditionGroup uniquely identified by GroupID
//
// Error is only non-nil if the source errors out
func (a *ExpeditionGroupAccessor) ByGroupID(identifier float64) (ExpeditionGroup, error) {
	if a._dataGroupID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ExpeditionGroup{}, err
			}
		}
		a.GroupData()
	}
	return a._dataGroupID[identifier], nil
}

// ByIconPath returns the ExpeditionGroup uniquely identified by IconPath
//
// Error is only non-nil if the source errors out
func (a *ExpeditionGroupAccessor) ByIconPath(identifier string) (ExpeditionGroup, error) {
	if a._dataIconPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ExpeditionGroup{}, err
			}
		}
		a.GroupData()
	}
	return a._dataIconPath[identifier], nil
}
