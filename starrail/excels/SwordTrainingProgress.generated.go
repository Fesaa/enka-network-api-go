package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type SwordTrainingProgress struct {
	ActionIDList             []float64 `json:"ActionIDList"`
	ExamID                   float64   `json:"ExamID"`
	PartnerAbilityGroupID    float64   `json:"PartnerAbilityGroupID"`
	PartnerAbilitySelectHint hash.Hash `json:"PartnerAbilitySelectHint"`
	PartnerAbilitySelectNum  float64   `json:"PartnerAbilitySelectNum"`
	RecommendPower           float64   `json:"RecommendPower"`
	SectionHint              hash.Hash `json:"SectionHint"`
	TurnID                   float64   `json:"TurnID"`
	TurnName                 hash.Hash `json:"TurnName"`
	TurnType                 string    `json:"TurnType"`
}
type SwordTrainingProgressAccessor struct {
	_data       []SwordTrainingProgress
	_dataTurnID map[float64]SwordTrainingProgress
}

// LoadData retrieves the data. Must be called before SwordTrainingProgress.GroupData
func (a *SwordTrainingProgressAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/SwordTrainingProgress.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *SwordTrainingProgressAccessor) Raw() ([]SwordTrainingProgress, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []SwordTrainingProgress{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with SwordTrainingProgressAccessor.LoadData to preload everything
func (a *SwordTrainingProgressAccessor) GroupData() {
	for _, d := range a._data {
		a._dataTurnID[d.TurnID] = d
	}
}

// ByTurnID returns the SwordTrainingProgress uniquely identified by TurnID
//
// Error is only non-nil if the source errors out
func (a *SwordTrainingProgressAccessor) ByTurnID(identifier float64) (SwordTrainingProgress, error) {
	if a._dataTurnID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return SwordTrainingProgress{}, err
			}
		}
		a.GroupData()
	}
	return a._dataTurnID[identifier], nil
}
