package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type ChimeraDisplay struct {
	ChimeraName hash.Hash `json:"ChimeraName"`
	DisplayID   float64   `json:"DisplayID"`
}
type ChimeraDisplayAccessor struct {
	_data          []ChimeraDisplay
	_dataDisplayID map[float64]ChimeraDisplay
}

// LoadData retrieves the data. Must be called before ChimeraDisplay.GroupData
func (a *ChimeraDisplayAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ChimeraDisplay.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ChimeraDisplayAccessor) Raw() ([]ChimeraDisplay, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ChimeraDisplay{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ChimeraDisplayAccessor.LoadData to preload everything
func (a *ChimeraDisplayAccessor) GroupData() {
	a._dataDisplayID = map[float64]ChimeraDisplay{}
	for _, d := range a._data {
		a._dataDisplayID[d.DisplayID] = d
	}
}

// ByDisplayID returns the ChimeraDisplay uniquely identified by DisplayID
//
// Error is only non-nil if the source errors out
func (a *ChimeraDisplayAccessor) ByDisplayID(identifier float64) (ChimeraDisplay, error) {
	if a._dataDisplayID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ChimeraDisplay{}, err
			}
		}
		a.GroupData()
	}
	return a._dataDisplayID[identifier], nil
}
