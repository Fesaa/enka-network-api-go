package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type NPCMonsterData struct {
	BoardShowList    []json.Number          `json:"BoardShowList"`
	CharacterType    string                 `json:"CharacterType"`
	ConfigEntityPath string                 `json:"ConfigEntityPath"`
	DefaultAIPath    string                 `json:"DefaultAIPath"`
	ID               json.Number            `json:"ID"`
	IsMazeLink       bool                   `json:"IsMazeLink"`
	JsonPath         string                 `json:"JsonPath"`
	MappingInfoID    json.Number            `json:"MappingInfoID"`
	MiniMapIconType  json.Number            `json:"MiniMapIconType"`
	NPCIconPath      string                 `json:"NPCIconPath"`
	NPCName          map[string]json.Number `json:"NPCName"`
	PrototypeID      json.Number            `json:"PrototypeID"`
	Rank             string                 `json:"Rank"`
	SubType          string                 `json:"SubType"`
}
type NPCMonsterDataAccessor struct {
	_data []NPCMonsterData
}

// LoadData retrieves the data. Must be called before NPCMonsterData.GroupData
func (a *NPCMonsterDataAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/NPCMonsterData.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *NPCMonsterDataAccessor) Raw() ([]NPCMonsterData, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []NPCMonsterData{}, err
		}
	}
	return a._data, nil
}
