package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type StageInfiniteMonsterGroup struct {
	EliteGroup             json.Number   `json:"EliteGroup"`
	InfiniteMonsterGroupID json.Number   `json:"InfiniteMonsterGroupID"`
	MonsterList            []json.Number `json:"MonsterList"`
}
type StageInfiniteMonsterGroupAccessor struct {
	_data                       []StageInfiniteMonsterGroup
	_dataInfiniteMonsterGroupID map[json.Number]StageInfiniteMonsterGroup
}

// LoadData retrieves the data. Must be called before StageInfiniteMonsterGroup.GroupData
func (a *StageInfiniteMonsterGroupAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/StageInfiniteMonsterGroup.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *StageInfiniteMonsterGroupAccessor) Raw() ([]StageInfiniteMonsterGroup, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []StageInfiniteMonsterGroup{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with StageInfiniteMonsterGroupAccessor.LoadData to preload everything
func (a *StageInfiniteMonsterGroupAccessor) GroupData() {
	a._dataInfiniteMonsterGroupID = map[json.Number]StageInfiniteMonsterGroup{}
	for _, d := range a._data {
		a._dataInfiniteMonsterGroupID[d.InfiniteMonsterGroupID] = d
	}
}

// ByInfiniteMonsterGroupID returns the StageInfiniteMonsterGroup uniquely identified by InfiniteMonsterGroupID
//
// Error is only non-nil if the source errors out
func (a *StageInfiniteMonsterGroupAccessor) ByInfiniteMonsterGroupID(identifier json.Number) (StageInfiniteMonsterGroup, error) {
	if a._dataInfiniteMonsterGroupID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return StageInfiniteMonsterGroup{}, err
			}
		}
		a.GroupData()
	}
	return a._dataInfiniteMonsterGroupID[identifier], nil
}
