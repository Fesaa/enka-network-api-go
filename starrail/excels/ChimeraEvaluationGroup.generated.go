package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type ChimeraEvaluationGroup struct {
	EvaluationGroupID float64 `json:"EvaluationGroupID"`
	Sort              float64 `json:"Sort"`
}
type ChimeraEvaluationGroupAccessor struct {
	_data                  []ChimeraEvaluationGroup
	_dataEvaluationGroupID map[float64]ChimeraEvaluationGroup
	_dataSort              map[float64]ChimeraEvaluationGroup
}

// LoadData retrieves the data. Must be called before ChimeraEvaluationGroup.GroupData
func (a *ChimeraEvaluationGroupAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ChimeraEvaluationGroup.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ChimeraEvaluationGroupAccessor) Raw() ([]ChimeraEvaluationGroup, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ChimeraEvaluationGroup{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ChimeraEvaluationGroupAccessor.LoadData to preload everything
func (a *ChimeraEvaluationGroupAccessor) GroupData() {
	a._dataEvaluationGroupID = map[float64]ChimeraEvaluationGroup{}
	a._dataSort = map[float64]ChimeraEvaluationGroup{}
	for _, d := range a._data {
		a._dataEvaluationGroupID[d.EvaluationGroupID] = d
		a._dataSort[d.Sort] = d
	}
}

// ByEvaluationGroupID returns the ChimeraEvaluationGroup uniquely identified by EvaluationGroupID
//
// Error is only non-nil if the source errors out
func (a *ChimeraEvaluationGroupAccessor) ByEvaluationGroupID(identifier float64) (ChimeraEvaluationGroup, error) {
	if a._dataEvaluationGroupID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ChimeraEvaluationGroup{}, err
			}
		}
		a.GroupData()
	}
	return a._dataEvaluationGroupID[identifier], nil
}

// BySort returns the ChimeraEvaluationGroup uniquely identified by Sort
//
// Error is only non-nil if the source errors out
func (a *ChimeraEvaluationGroupAccessor) BySort(identifier float64) (ChimeraEvaluationGroup, error) {
	if a._dataSort == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ChimeraEvaluationGroup{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSort[identifier], nil
}
