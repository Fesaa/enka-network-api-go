package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type FightFestMainRace struct {
	BlueAvatarID     json.Number            `json:"BlueAvatarID"`
	EventID          json.Number            `json:"EventID"`
	FightPhaseID     json.Number            `json:"FightPhaseID"`
	MainRaceID       json.Number            `json:"MainRaceID"`
	RaceBgFigurePath string                 `json:"RaceBgFigurePath"`
	RedAvatarID      json.Number            `json:"RedAvatarID"`
	RewardID         json.Number            `json:"RewardID"`
	StageEndDesc     map[string]json.Number `json:"StageEndDesc"`
	StageName        map[string]json.Number `json:"StageName"`
	TutorialID       json.Number            `json:"TutorialID"`
}
type FightFestMainRaceAccessor struct {
	_data []FightFestMainRace
}

// LoadData retrieves the data. Must be called before FightFestMainRace.GroupData
func (a *FightFestMainRaceAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/FightFestMainRace.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *FightFestMainRaceAccessor) Raw() ([]FightFestMainRace, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []FightFestMainRace{}, err
		}
	}
	return a._data, nil
}
