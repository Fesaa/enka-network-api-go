package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type FightFestMainRace struct {
	BlueAvatarID     json.Number            `json:"BlueAvatarID"`
	EventID          json.Number            `json:"EventID"`
	FightPhaseID     json.Number            `json:"FightPhaseID"`
	MainRaceID       json.Number            `json:"MainRaceID"`
	RaceBgFigurePath string                 `json:"RaceBgFigurePath"`
	RedAvatarID      json.Number            `json:"RedAvatarID"`
	RewardID         json.Number            `json:"RewardID"`
	StageEndDesc     map[string]json.Number `json:"StageEndDesc"`
	StageName        map[string]json.Number `json:"StageName"`
	TutorialID       json.Number            `json:"TutorialID"`
}
type FightFestMainRaceAccessor struct {
	_data            []FightFestMainRace
	_dataEventID     map[json.Number]FightFestMainRace
	_dataMainRaceID  map[json.Number]FightFestMainRace
	_dataRedAvatarID map[json.Number]FightFestMainRace
	_dataRewardID    map[json.Number]FightFestMainRace
	_dataTutorialID  map[json.Number]FightFestMainRace
}

// LoadData retrieves the data. Must be called before FightFestMainRace.GroupData
func (a *FightFestMainRaceAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/FightFestMainRace.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *FightFestMainRaceAccessor) Raw() ([]FightFestMainRace, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []FightFestMainRace{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with FightFestMainRaceAccessor.LoadData to preload everything
func (a *FightFestMainRaceAccessor) GroupData() {
	a._dataEventID = map[json.Number]FightFestMainRace{}
	a._dataMainRaceID = map[json.Number]FightFestMainRace{}
	a._dataRedAvatarID = map[json.Number]FightFestMainRace{}
	a._dataRewardID = map[json.Number]FightFestMainRace{}
	a._dataTutorialID = map[json.Number]FightFestMainRace{}
	for _, d := range a._data {
		a._dataEventID[d.EventID] = d
		a._dataMainRaceID[d.MainRaceID] = d
		a._dataRedAvatarID[d.RedAvatarID] = d
		a._dataRewardID[d.RewardID] = d
		a._dataTutorialID[d.TutorialID] = d
	}
}

// ByEventID returns the FightFestMainRace uniquely identified by EventID
//
// Error is only non-nil if the source errors out
func (a *FightFestMainRaceAccessor) ByEventID(identifier json.Number) (FightFestMainRace, error) {
	if a._dataEventID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FightFestMainRace{}, err
			}
		}
		a.GroupData()
	}
	return a._dataEventID[identifier], nil
}

// ByMainRaceID returns the FightFestMainRace uniquely identified by MainRaceID
//
// Error is only non-nil if the source errors out
func (a *FightFestMainRaceAccessor) ByMainRaceID(identifier json.Number) (FightFestMainRace, error) {
	if a._dataMainRaceID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FightFestMainRace{}, err
			}
		}
		a.GroupData()
	}
	return a._dataMainRaceID[identifier], nil
}

// ByRedAvatarID returns the FightFestMainRace uniquely identified by RedAvatarID
//
// Error is only non-nil if the source errors out
func (a *FightFestMainRaceAccessor) ByRedAvatarID(identifier json.Number) (FightFestMainRace, error) {
	if a._dataRedAvatarID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FightFestMainRace{}, err
			}
		}
		a.GroupData()
	}
	return a._dataRedAvatarID[identifier], nil
}

// ByRewardID returns the FightFestMainRace uniquely identified by RewardID
//
// Error is only non-nil if the source errors out
func (a *FightFestMainRaceAccessor) ByRewardID(identifier json.Number) (FightFestMainRace, error) {
	if a._dataRewardID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FightFestMainRace{}, err
			}
		}
		a.GroupData()
	}
	return a._dataRewardID[identifier], nil
}

// ByTutorialID returns the FightFestMainRace uniquely identified by TutorialID
//
// Error is only non-nil if the source errors out
func (a *FightFestMainRaceAccessor) ByTutorialID(identifier json.Number) (FightFestMainRace, error) {
	if a._dataTutorialID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FightFestMainRace{}, err
			}
		}
		a.GroupData()
	}
	return a._dataTutorialID[identifier], nil
}
