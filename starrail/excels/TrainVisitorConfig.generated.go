package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type TrainVisitorConfig struct {
	AvatarID               float64   `json:"AvatarID"`
	LockMissionID          float64   `json:"LockMissionID"`
	MessageCome            hash.Hash `json:"MessageCome"`
	MessageLeave           hash.Hash `json:"MessageLeave"`
	MessageResident        hash.Hash `json:"MessageResident"`
	MissionID              float64   `json:"MissionID"`
	ToastFinishMainMission bool      `json:"ToastFinishMainMission"`
	VisitorID              float64   `json:"VisitorID"`
}
type TrainVisitorConfigAccessor struct {
	_data          []TrainVisitorConfig
	_dataAvatarID  map[float64]TrainVisitorConfig
	_dataVisitorID map[float64]TrainVisitorConfig
}

// LoadData retrieves the data. Must be called before TrainVisitorConfig.GroupData
func (a *TrainVisitorConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/TrainVisitorConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *TrainVisitorConfigAccessor) Raw() ([]TrainVisitorConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []TrainVisitorConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with TrainVisitorConfigAccessor.LoadData to preload everything
func (a *TrainVisitorConfigAccessor) GroupData() {
	a._dataAvatarID = map[float64]TrainVisitorConfig{}
	a._dataVisitorID = map[float64]TrainVisitorConfig{}
	for _, d := range a._data {
		a._dataAvatarID[d.AvatarID] = d
		a._dataVisitorID[d.VisitorID] = d
	}
}

// ByAvatarID returns the TrainVisitorConfig uniquely identified by AvatarID
//
// Error is only non-nil if the source errors out
func (a *TrainVisitorConfigAccessor) ByAvatarID(identifier float64) (TrainVisitorConfig, error) {
	if a._dataAvatarID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return TrainVisitorConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataAvatarID[identifier], nil
}

// ByVisitorID returns the TrainVisitorConfig uniquely identified by VisitorID
//
// Error is only non-nil if the source errors out
func (a *TrainVisitorConfigAccessor) ByVisitorID(identifier float64) (TrainVisitorConfig, error) {
	if a._dataVisitorID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return TrainVisitorConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataVisitorID[identifier], nil
}
