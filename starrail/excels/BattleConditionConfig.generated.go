package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type BattleConditionConfig struct {
	AbilityName    string    `json:"AbilityName"`
	ConditionDes   hash.Hash `json:"ConditionDes"`
	ID             float64   `json:"ID"`
	IsShowProgress float64   `json:"IsShowProgress"`
	TargetParam    float64   `json:"TargetParam"`
	WinOrLose      bool      `json:"WinOrLose"`
}
type BattleConditionConfigAccessor struct {
	_data   []BattleConditionConfig
	_dataID map[float64]BattleConditionConfig
}

// LoadData retrieves the data. Must be called before BattleConditionConfig.GroupData
func (a *BattleConditionConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/BattleConditionConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *BattleConditionConfigAccessor) Raw() ([]BattleConditionConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []BattleConditionConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with BattleConditionConfigAccessor.LoadData to preload everything
func (a *BattleConditionConfigAccessor) GroupData() {
	a._dataID = map[float64]BattleConditionConfig{}
	for _, d := range a._data {
		a._dataID[d.ID] = d
	}
}

// ByID returns the BattleConditionConfig uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *BattleConditionConfigAccessor) ByID(identifier float64) (BattleConditionConfig, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return BattleConditionConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}
