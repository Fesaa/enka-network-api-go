package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type GameplayGuideData struct {
	ID                    float64                                  `json:"ID"`
	IconPath              string                                   `json:"IconPath"`
	MapEntranceID         float64                                  `json:"MapEntranceID"`
	Name                  hash.Hash                                `json:"Name"`
	Order                 float64                                  `json:"Order"`
	OverrideShowCondition []GameplayGuideDataOverrideShowCondition `json:"OverrideShowCondition"`
	RelatedID             float64                                  `json:"RelatedID"`
	ShowItemAmount        float64                                  `json:"ShowItemAmount"`
	SubType               float64                                  `json:"SubType"`
	TabID                 float64                                  `json:"TabID"`
	TabIconPath           string                                   `json:"TabIconPath"`
	UnlockMission         []float64                                `json:"UnlockMission"`
}
type GameplayGuideDataOverrideShowCondition struct {
	Param string `json:"Param"`
	Type  string `json:"Type"`
}
type GameplayGuideDataAccessor struct {
	_data      []GameplayGuideData
	_dataID    map[float64]GameplayGuideData
	_dataOrder map[float64]GameplayGuideData
}

// LoadData retrieves the data. Must be called before GameplayGuideData.GroupData
func (a *GameplayGuideDataAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/GameplayGuideData.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *GameplayGuideDataAccessor) Raw() ([]GameplayGuideData, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []GameplayGuideData{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with GameplayGuideDataAccessor.LoadData to preload everything
func (a *GameplayGuideDataAccessor) GroupData() {
	a._dataID = map[float64]GameplayGuideData{}
	a._dataOrder = map[float64]GameplayGuideData{}
	for _, d := range a._data {
		a._dataID[d.ID] = d
		a._dataOrder[d.Order] = d
	}
}

// ByID returns the GameplayGuideData uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *GameplayGuideDataAccessor) ByID(identifier float64) (GameplayGuideData, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return GameplayGuideData{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}

// ByOrder returns the GameplayGuideData uniquely identified by Order
//
// Error is only non-nil if the source errors out
func (a *GameplayGuideDataAccessor) ByOrder(identifier float64) (GameplayGuideData, error) {
	if a._dataOrder == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return GameplayGuideData{}, err
			}
		}
		a.GroupData()
	}
	return a._dataOrder[identifier], nil
}
