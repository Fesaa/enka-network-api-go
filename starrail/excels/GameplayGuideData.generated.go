package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type GameplayGuideData struct {
	ID                    json.Number                              `json:"ID"`
	IconPath              string                                   `json:"IconPath"`
	MapEntranceID         json.Number                              `json:"MapEntranceID"`
	Name                  map[string]json.Number                   `json:"Name"`
	Order                 json.Number                              `json:"Order"`
	OverrideShowCondition []GameplayGuideDataOverrideShowCondition `json:"OverrideShowCondition"`
	RelatedID             json.Number                              `json:"RelatedID"`
	ShowItemAmount        json.Number                              `json:"ShowItemAmount"`
	SubType               json.Number                              `json:"SubType"`
	TabID                 json.Number                              `json:"TabID"`
	TabIconPath           string                                   `json:"TabIconPath"`
	UnlockMission         []json.Number                            `json:"UnlockMission"`
}
type GameplayGuideDataOverrideShowCondition struct {
	Param string `json:"Param"`
	Type  string `json:"Type"`
}
type GameplayGuideDataAccessor struct {
	_data []GameplayGuideData
}

// LoadData retrieves the data. Must be called before GameplayGuideData.GroupData
func (a *GameplayGuideDataAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/GameplayGuideData.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *GameplayGuideDataAccessor) Raw() ([]GameplayGuideData, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []GameplayGuideData{}, err
		}
	}
	return a._data, nil
}
