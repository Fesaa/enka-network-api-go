package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type EventMission struct {
	ClearGroupList       []interface{} `json:"ClearGroupList"`
	Desc                 hash.Hash     `json:"Desc"`
	FinishWayID          float64       `json:"FinishWayID"`
	ID                   float64       `json:"ID"`
	LoadGroupList        []interface{} `json:"LoadGroupList"`
	MazeFloorID          float64       `json:"MazeFloorID"`
	MazePlaneID          float64       `json:"MazePlaneID"`
	MissionJsonPath      string        `json:"MissionJsonPath"`
	NextEventMissionList []float64     `json:"NextEventMissionList"`
	RewardID             float64       `json:"RewardID"`
	TakeParamIntList     []float64     `json:"TakeParamIntList"`
	TakeType             string        `json:"TakeType"`
	Title                hash.Hash     `json:"Title"`
	Type                 string        `json:"Type"`
	UnLoadGroupList      []interface{} `json:"UnLoadGroupList"`
}
type EventMissionAccessor struct {
	_data            []EventMission
	_dataFinishWayID map[float64]EventMission
	_dataID          map[float64]EventMission
}

// LoadData retrieves the data. Must be called before EventMission.GroupData
func (a *EventMissionAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/EventMission.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *EventMissionAccessor) Raw() ([]EventMission, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []EventMission{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with EventMissionAccessor.LoadData to preload everything
func (a *EventMissionAccessor) GroupData() {
	for _, d := range a._data {
		a._dataFinishWayID[d.FinishWayID] = d
		a._dataID[d.ID] = d
	}
}

// ByFinishWayID returns the EventMission uniquely identified by FinishWayID
//
// Error is only non-nil if the source errors out
func (a *EventMissionAccessor) ByFinishWayID(identifier float64) (EventMission, error) {
	if a._dataFinishWayID == nil {
		err := a.LoadData()
		if err != nil {
			return EventMission{}, err
		}
		a.GroupData()
	}
	return a._dataFinishWayID[identifier], nil
}

// ByID returns the EventMission uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *EventMissionAccessor) ByID(identifier float64) (EventMission, error) {
	if a._dataID == nil {
		err := a.LoadData()
		if err != nil {
			return EventMission{}, err
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}
