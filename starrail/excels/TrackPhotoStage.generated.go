package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type TrackPhotoStage struct {
	ActivityModuleID   json.Number            `json:"ActivityModuleID"`
	DisLimit           json.Number            `json:"DisLimit"`
	Fov                json.Number            `json:"Fov"`
	ImagePath          string                 `json:"ImagePath"`
	JunkNumList        []json.Number          `json:"JunkNumList"`
	MainMissionID      json.Number            `json:"MainMissionID"`
	MaxScore           json.Number            `json:"MaxScore"`
	RaidID             json.Number            `json:"RaidID"`
	StageDesc          map[string]json.Number `json:"StageDesc"`
	StageID            json.Number            `json:"StageID"`
	StageLocation      map[string]json.Number `json:"StageLocation"`
	StageName          map[string]json.Number `json:"StageName"`
	StarList           []json.Number          `json:"StarList"`
	TotalTrashCanNum   json.Number            `json:"TotalTrashCanNum"`
	TrackMoveSpeed     json.Number            `json:"TrackMoveSpeed"`
	UnlockSubMissionID json.Number            `json:"UnlockSubMissionID"`
	XYRange            []json.Number          `json:"XYRange"`
}
type TrackPhotoStageAccessor struct {
	_data []TrackPhotoStage
}

// LoadData retrieves the data. Must be called before TrackPhotoStage.GroupData
func (a *TrackPhotoStageAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/TrackPhotoStage.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *TrackPhotoStageAccessor) Raw() ([]TrackPhotoStage, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []TrackPhotoStage{}, err
		}
	}
	return a._data, nil
}
