package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type TrackPhotoStage struct {
	ActivityModuleID   json.Number            `json:"ActivityModuleID"`
	DisLimit           json.Number            `json:"DisLimit"`
	Fov                json.Number            `json:"Fov"`
	ImagePath          string                 `json:"ImagePath"`
	JunkNumList        []json.Number          `json:"JunkNumList"`
	MainMissionID      json.Number            `json:"MainMissionID"`
	MaxScore           json.Number            `json:"MaxScore"`
	RaidID             json.Number            `json:"RaidID"`
	StageDesc          map[string]json.Number `json:"StageDesc"`
	StageID            json.Number            `json:"StageID"`
	StageLocation      map[string]json.Number `json:"StageLocation"`
	StageName          map[string]json.Number `json:"StageName"`
	StarList           []json.Number          `json:"StarList"`
	TotalTrashCanNum   json.Number            `json:"TotalTrashCanNum"`
	TrackMoveSpeed     json.Number            `json:"TrackMoveSpeed"`
	UnlockSubMissionID json.Number            `json:"UnlockSubMissionID"`
	XYRange            []json.Number          `json:"XYRange"`
}
type TrackPhotoStageAccessor struct {
	_data                 []TrackPhotoStage
	_dataActivityModuleID map[json.Number]TrackPhotoStage
	_dataMainMissionID    map[json.Number]TrackPhotoStage
	_dataRaidID           map[json.Number]TrackPhotoStage
	_dataStageID          map[json.Number]TrackPhotoStage
}

// LoadData retrieves the data. Must be called before TrackPhotoStage.GroupData
func (a *TrackPhotoStageAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/TrackPhotoStage.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *TrackPhotoStageAccessor) Raw() ([]TrackPhotoStage, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []TrackPhotoStage{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with TrackPhotoStageAccessor.LoadData to preload everything
func (a *TrackPhotoStageAccessor) GroupData() {
	a._dataActivityModuleID = map[json.Number]TrackPhotoStage{}
	a._dataMainMissionID = map[json.Number]TrackPhotoStage{}
	a._dataRaidID = map[json.Number]TrackPhotoStage{}
	a._dataStageID = map[json.Number]TrackPhotoStage{}
	for _, d := range a._data {
		a._dataActivityModuleID[d.ActivityModuleID] = d
		a._dataMainMissionID[d.MainMissionID] = d
		a._dataRaidID[d.RaidID] = d
		a._dataStageID[d.StageID] = d
	}
}

// ByActivityModuleID returns the TrackPhotoStage uniquely identified by ActivityModuleID
//
// Error is only non-nil if the source errors out
func (a *TrackPhotoStageAccessor) ByActivityModuleID(identifier json.Number) (TrackPhotoStage, error) {
	if a._dataActivityModuleID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return TrackPhotoStage{}, err
			}
		}
		a.GroupData()
	}
	return a._dataActivityModuleID[identifier], nil
}

// ByMainMissionID returns the TrackPhotoStage uniquely identified by MainMissionID
//
// Error is only non-nil if the source errors out
func (a *TrackPhotoStageAccessor) ByMainMissionID(identifier json.Number) (TrackPhotoStage, error) {
	if a._dataMainMissionID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return TrackPhotoStage{}, err
			}
		}
		a.GroupData()
	}
	return a._dataMainMissionID[identifier], nil
}

// ByRaidID returns the TrackPhotoStage uniquely identified by RaidID
//
// Error is only non-nil if the source errors out
func (a *TrackPhotoStageAccessor) ByRaidID(identifier json.Number) (TrackPhotoStage, error) {
	if a._dataRaidID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return TrackPhotoStage{}, err
			}
		}
		a.GroupData()
	}
	return a._dataRaidID[identifier], nil
}

// ByStageID returns the TrackPhotoStage uniquely identified by StageID
//
// Error is only non-nil if the source errors out
func (a *TrackPhotoStageAccessor) ByStageID(identifier json.Number) (TrackPhotoStage, error) {
	if a._dataStageID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return TrackPhotoStage{}, err
			}
		}
		a.GroupData()
	}
	return a._dataStageID[identifier], nil
}
