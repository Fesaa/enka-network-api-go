package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type TrackPhotoStage struct {
	ActivityModuleID   float64   `json:"ActivityModuleID"`
	DisLimit           float64   `json:"DisLimit"`
	Fov                float64   `json:"Fov"`
	ImagePath          string    `json:"ImagePath"`
	JunkNumList        []float64 `json:"JunkNumList"`
	MainMissionID      float64   `json:"MainMissionID"`
	MaxScore           float64   `json:"MaxScore"`
	RaidID             float64   `json:"RaidID"`
	StageDesc          hash.Hash `json:"StageDesc"`
	StageID            float64   `json:"StageID"`
	StageLocation      hash.Hash `json:"StageLocation"`
	StageName          hash.Hash `json:"StageName"`
	StarList           []float64 `json:"StarList"`
	TotalTrashCanNum   float64   `json:"TotalTrashCanNum"`
	TrackMoveSpeed     float64   `json:"TrackMoveSpeed"`
	UnlockSubMissionID float64   `json:"UnlockSubMissionID"`
	XYRange            []float64 `json:"XYRange"`
}
type TrackPhotoStageAccessor struct {
	_data                 []TrackPhotoStage
	_dataActivityModuleID map[float64]TrackPhotoStage
	_dataRaidID           map[float64]TrackPhotoStage
	_dataMainMissionID    map[float64]TrackPhotoStage
	_dataStageID          map[float64]TrackPhotoStage
}

// LoadData retrieves the data. Must be called before TrackPhotoStage.GroupData
func (a *TrackPhotoStageAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/TrackPhotoStage.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *TrackPhotoStageAccessor) Raw() ([]TrackPhotoStage, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []TrackPhotoStage{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with TrackPhotoStageAccessor.LoadData to preload everything
func (a *TrackPhotoStageAccessor) GroupData() {
	for _, d := range a._data {
		a._dataActivityModuleID[d.ActivityModuleID] = d
		a._dataRaidID[d.RaidID] = d
		a._dataMainMissionID[d.MainMissionID] = d
		a._dataStageID[d.StageID] = d
	}
}

// ByActivityModuleID returns the TrackPhotoStage uniquely identified by ActivityModuleID
//
// Error is only non-nil if the source errors out
func (a *TrackPhotoStageAccessor) ByActivityModuleID(identifier float64) (TrackPhotoStage, error) {
	if a._dataActivityModuleID == nil {
		err := a.LoadData()
		if err != nil {
			return TrackPhotoStage{}, err
		}
		a.GroupData()
	}
	return a._dataActivityModuleID[identifier], nil
}

// ByRaidID returns the TrackPhotoStage uniquely identified by RaidID
//
// Error is only non-nil if the source errors out
func (a *TrackPhotoStageAccessor) ByRaidID(identifier float64) (TrackPhotoStage, error) {
	if a._dataRaidID == nil {
		err := a.LoadData()
		if err != nil {
			return TrackPhotoStage{}, err
		}
		a.GroupData()
	}
	return a._dataRaidID[identifier], nil
}

// ByMainMissionID returns the TrackPhotoStage uniquely identified by MainMissionID
//
// Error is only non-nil if the source errors out
func (a *TrackPhotoStageAccessor) ByMainMissionID(identifier float64) (TrackPhotoStage, error) {
	if a._dataMainMissionID == nil {
		err := a.LoadData()
		if err != nil {
			return TrackPhotoStage{}, err
		}
		a.GroupData()
	}
	return a._dataMainMissionID[identifier], nil
}

// ByStageID returns the TrackPhotoStage uniquely identified by StageID
//
// Error is only non-nil if the source errors out
func (a *TrackPhotoStageAccessor) ByStageID(identifier float64) (TrackPhotoStage, error) {
	if a._dataStageID == nil {
		err := a.LoadData()
		if err != nil {
			return TrackPhotoStage{}, err
		}
		a.GroupData()
	}
	return a._dataStageID[identifier], nil
}
