package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type MatchThreeV2BattleItem struct {
	BattleItemID    float64   `json:"BattleItemID"`
	InputGridCount  float64   `json:"InputGridCount"`
	IsUnlock        bool      `json:"IsUnlock"`
	ItemDesc        hash.Hash `json:"ItemDesc"`
	ItemEffectJson  string    `json:"ItemEffectJson"`
	ItemHint        hash.Hash `json:"ItemHint"`
	ItemIcon        string    `json:"ItemIcon"`
	ItemLevel       float64   `json:"ItemLevel"`
	ItemLevelUpDesc hash.Hash `json:"ItemLevelUpDesc"`
	ItemName        hash.Hash `json:"ItemName"`
	ItemUseCount    float64   `json:"ItemUseCount"`
	ItemUseFailHint hash.Hash `json:"ItemUseFailHint"`
	LevelUpCost     float64   `json:"LevelUpCost"`
	Order           float64   `json:"Order"`
	PropType        string    `json:"PropType"`
}
type MatchThreeV2BattleItemAccessor struct {
	_data []MatchThreeV2BattleItem
}

// LoadData retrieves the data. Must be called before MatchThreeV2BattleItem.GroupData
func (a *MatchThreeV2BattleItemAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MatchThreeV2BattleItem.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MatchThreeV2BattleItemAccessor) Raw() ([]MatchThreeV2BattleItem, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MatchThreeV2BattleItem{}, err
		}
	}
	return a._data, nil
}
