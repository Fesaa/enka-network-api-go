package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type SubMapConfig struct {
	AreaID                      json.Number `json:"AreaID"`
	DefaultLayer                json.Number `json:"DefaultLayer"`
	ID                          json.Number `json:"ID"`
	IndoorTeleportMapIconID     json.Number `json:"IndoorTeleportMapIconID"`
	MapEntranceID               json.Number `json:"MapEntranceID"`
	NearbyTeleportMappingInfoID json.Number `json:"NearbyTeleportMappingInfoID"`
	RegionID                    json.Number `json:"RegionID"`
	Type                        string      `json:"Type"`
}
type SubMapConfigAccessor struct {
	_data   []SubMapConfig
	_dataID map[json.Number]SubMapConfig
}

// LoadData retrieves the data. Must be called before SubMapConfig.GroupData
func (a *SubMapConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/SubMapConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *SubMapConfigAccessor) Raw() ([]SubMapConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []SubMapConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with SubMapConfigAccessor.LoadData to preload everything
func (a *SubMapConfigAccessor) GroupData() {
	a._dataID = map[json.Number]SubMapConfig{}
	for _, d := range a._data {
		a._dataID[d.ID] = d
	}
}

// ByID returns the SubMapConfig uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *SubMapConfigAccessor) ByID(identifier json.Number) (SubMapConfig, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return SubMapConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}
