package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type AvatarMazeBuffLD struct {
	BuffDesc                     hash.Hash     `json:"BuffDesc"`
	BuffDescBattle               hash.Hash     `json:"BuffDescBattle"`
	BuffDescParamByAvatarSkillID float64       `json:"BuffDescParamByAvatarSkillID"`
	BuffEffect                   string        `json:"BuffEffect"`
	BuffIcon                     string        `json:"BuffIcon"`
	BuffName                     hash.Hash     `json:"BuffName"`
	BuffRarity                   float64       `json:"BuffRarity"`
	BuffSeries                   float64       `json:"BuffSeries"`
	ID                           float64       `json:"ID"`
	InBattleBindingKey           string        `json:"InBattleBindingKey"`
	InBattleBindingType          string        `json:"InBattleBindingType"`
	IsDisplay                    bool          `json:"IsDisplay"`
	Lv                           float64       `json:"Lv"`
	LvMax                        float64       `json:"LvMax"`
	MazeBuffIconType             string        `json:"MazeBuffIconType"`
	MazeBuffPool                 float64       `json:"MazeBuffPool"`
	MazeBuffType                 string        `json:"MazeBuffType"`
	ModifierName                 string        `json:"ModifierName"`
	ParamList                    []interface{} `json:"ParamList"`
	UseType                      string        `json:"UseType"`
}
type AvatarMazeBuffLDAccessor struct {
	_data             []AvatarMazeBuffLD
	_dataBuffEffect   map[string]AvatarMazeBuffLD
	_dataBuffIcon     map[string]AvatarMazeBuffLD
	_dataID           map[float64]AvatarMazeBuffLD
	_dataModifierName map[string]AvatarMazeBuffLD
}

// LoadData retrieves the data. Must be called before AvatarMazeBuffLD.GroupData
func (a *AvatarMazeBuffLDAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/AvatarMazeBuffLD.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *AvatarMazeBuffLDAccessor) Raw() ([]AvatarMazeBuffLD, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []AvatarMazeBuffLD{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with AvatarMazeBuffLDAccessor.LoadData to preload everything
func (a *AvatarMazeBuffLDAccessor) GroupData() {
	a._dataBuffEffect = map[string]AvatarMazeBuffLD{}
	a._dataBuffIcon = map[string]AvatarMazeBuffLD{}
	a._dataID = map[float64]AvatarMazeBuffLD{}
	a._dataModifierName = map[string]AvatarMazeBuffLD{}
	for _, d := range a._data {
		a._dataBuffEffect[d.BuffEffect] = d
		a._dataBuffIcon[d.BuffIcon] = d
		a._dataID[d.ID] = d
		a._dataModifierName[d.ModifierName] = d
	}
}

// ByBuffEffect returns the AvatarMazeBuffLD uniquely identified by BuffEffect
//
// Error is only non-nil if the source errors out
func (a *AvatarMazeBuffLDAccessor) ByBuffEffect(identifier string) (AvatarMazeBuffLD, error) {
	if a._dataBuffEffect == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AvatarMazeBuffLD{}, err
			}
		}
		a.GroupData()
	}
	return a._dataBuffEffect[identifier], nil
}

// ByBuffIcon returns the AvatarMazeBuffLD uniquely identified by BuffIcon
//
// Error is only non-nil if the source errors out
func (a *AvatarMazeBuffLDAccessor) ByBuffIcon(identifier string) (AvatarMazeBuffLD, error) {
	if a._dataBuffIcon == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AvatarMazeBuffLD{}, err
			}
		}
		a.GroupData()
	}
	return a._dataBuffIcon[identifier], nil
}

// ByID returns the AvatarMazeBuffLD uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *AvatarMazeBuffLDAccessor) ByID(identifier float64) (AvatarMazeBuffLD, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AvatarMazeBuffLD{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}

// ByModifierName returns the AvatarMazeBuffLD uniquely identified by ModifierName
//
// Error is only non-nil if the source errors out
func (a *AvatarMazeBuffLDAccessor) ByModifierName(identifier string) (AvatarMazeBuffLD, error) {
	if a._dataModifierName == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AvatarMazeBuffLD{}, err
			}
		}
		a.GroupData()
	}
	return a._dataModifierName[identifier], nil
}
