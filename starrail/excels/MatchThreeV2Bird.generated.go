package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type MatchThreeV2Bird struct {
	BirdID          float64   `json:"BirdID"`
	Order           float64   `json:"Order"`
	UnlockLevelList []float64 `json:"UnlockLevelList"`
}
type MatchThreeV2BirdAccessor struct {
	_data       []MatchThreeV2Bird
	_dataBirdID map[float64]MatchThreeV2Bird
	_dataOrder  map[float64]MatchThreeV2Bird
}

// LoadData retrieves the data. Must be called before MatchThreeV2Bird.GroupData
func (a *MatchThreeV2BirdAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MatchThreeV2Bird.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MatchThreeV2BirdAccessor) Raw() ([]MatchThreeV2Bird, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MatchThreeV2Bird{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MatchThreeV2BirdAccessor.LoadData to preload everything
func (a *MatchThreeV2BirdAccessor) GroupData() {
	a._dataBirdID = map[float64]MatchThreeV2Bird{}
	a._dataOrder = map[float64]MatchThreeV2Bird{}
	for _, d := range a._data {
		a._dataBirdID[d.BirdID] = d
		a._dataOrder[d.Order] = d
	}
}

// ByBirdID returns the MatchThreeV2Bird uniquely identified by BirdID
//
// Error is only non-nil if the source errors out
func (a *MatchThreeV2BirdAccessor) ByBirdID(identifier float64) (MatchThreeV2Bird, error) {
	if a._dataBirdID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MatchThreeV2Bird{}, err
			}
		}
		a.GroupData()
	}
	return a._dataBirdID[identifier], nil
}

// ByOrder returns the MatchThreeV2Bird uniquely identified by Order
//
// Error is only non-nil if the source errors out
func (a *MatchThreeV2BirdAccessor) ByOrder(identifier float64) (MatchThreeV2Bird, error) {
	if a._dataOrder == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MatchThreeV2Bird{}, err
			}
		}
		a.GroupData()
	}
	return a._dataOrder[identifier], nil
}
