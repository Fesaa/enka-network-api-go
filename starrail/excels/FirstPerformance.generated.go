package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type FirstPerformance struct {
	PerformanceID float64 `json:"PerformanceID"`
}
type FirstPerformanceAccessor struct {
	_data              []FirstPerformance
	_dataPerformanceID map[float64]FirstPerformance
}

// LoadData retrieves the data. Must be called before FirstPerformance.GroupData
func (a *FirstPerformanceAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/FirstPerformance.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *FirstPerformanceAccessor) Raw() ([]FirstPerformance, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []FirstPerformance{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with FirstPerformanceAccessor.LoadData to preload everything
func (a *FirstPerformanceAccessor) GroupData() {
	for _, d := range a._data {
		a._dataPerformanceID[d.PerformanceID] = d
	}
}

// ByPerformanceID returns the FirstPerformance uniquely identified by PerformanceID
//
// Error is only non-nil if the source errors out
func (a *FirstPerformanceAccessor) ByPerformanceID(identifier float64) (FirstPerformance, error) {
	if a._dataPerformanceID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FirstPerformance{}, err
			}
		}
		a.GroupData()
	}
	return a._dataPerformanceID[identifier], nil
}
