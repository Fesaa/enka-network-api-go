package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type RogueUpgradeAvatarSubRelic struct {
	RelicLevel            json.Number                                   `json:"RelicLevel"`
	RelicRarity           string                                        `json:"RelicRarity"`
	RelicSubValueList     []RogueUpgradeAvatarSubRelicRelicSubValueList `json:"RelicSubValueList"`
	RelicSubValueStepTime json.Number                                   `json:"RelicSubValueStepTime"`
	RelicType             string                                        `json:"RelicType"`
	SubRelicType          string                                        `json:"SubRelicType"`
}
type RogueUpgradeAvatarSubRelicRelicSubValueList struct {
	KHADHNNCFLH json.Number `json:"KHADHNNCFLH"`
	LKOEFDPJGKD string      `json:"LKOEFDPJGKD"`
}
type RogueUpgradeAvatarSubRelicAccessor struct {
	_data []RogueUpgradeAvatarSubRelic
}

// LoadData retrieves the data. Must be called before RogueUpgradeAvatarSubRelic.GroupData
func (a *RogueUpgradeAvatarSubRelicAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueUpgradeAvatarSubRelic.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueUpgradeAvatarSubRelicAccessor) Raw() ([]RogueUpgradeAvatarSubRelic, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueUpgradeAvatarSubRelic{}, err
		}
	}
	return a._data, nil
}
