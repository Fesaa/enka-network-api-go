package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type AlleyStage struct {
	StageAlleyEvent   []json.Number          `json:"StageAlleyEvent"`
	StageDesc         map[string]json.Number `json:"StageDesc"`
	StageID           json.Number            `json:"StageID"`
	StageMainMission  json.Number            `json:"StageMainMission"`
	StageSpecialOrder []json.Number          `json:"StageSpecialOrder"`
	StageTarget       json.Number            `json:"StageTarget"`
	StageTitle        map[string]json.Number `json:"StageTitle"`
	TakeMainMission   json.Number            `json:"TakeMainMission"`
}
type AlleyStageAccessor struct {
	_data                 []AlleyStage
	_dataStageID          map[json.Number]AlleyStage
	_dataStageMainMission map[json.Number]AlleyStage
	_dataStageTarget      map[json.Number]AlleyStage
	_dataTakeMainMission  map[json.Number]AlleyStage
}

// LoadData retrieves the data. Must be called before AlleyStage.GroupData
func (a *AlleyStageAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/AlleyStage.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *AlleyStageAccessor) Raw() ([]AlleyStage, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []AlleyStage{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with AlleyStageAccessor.LoadData to preload everything
func (a *AlleyStageAccessor) GroupData() {
	a._dataStageID = map[json.Number]AlleyStage{}
	a._dataStageMainMission = map[json.Number]AlleyStage{}
	a._dataStageTarget = map[json.Number]AlleyStage{}
	a._dataTakeMainMission = map[json.Number]AlleyStage{}
	for _, d := range a._data {
		a._dataStageID[d.StageID] = d
		a._dataStageMainMission[d.StageMainMission] = d
		a._dataStageTarget[d.StageTarget] = d
		a._dataTakeMainMission[d.TakeMainMission] = d
	}
}

// ByStageID returns the AlleyStage uniquely identified by StageID
//
// Error is only non-nil if the source errors out
func (a *AlleyStageAccessor) ByStageID(identifier json.Number) (AlleyStage, error) {
	if a._dataStageID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AlleyStage{}, err
			}
		}
		a.GroupData()
	}
	return a._dataStageID[identifier], nil
}

// ByStageMainMission returns the AlleyStage uniquely identified by StageMainMission
//
// Error is only non-nil if the source errors out
func (a *AlleyStageAccessor) ByStageMainMission(identifier json.Number) (AlleyStage, error) {
	if a._dataStageMainMission == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AlleyStage{}, err
			}
		}
		a.GroupData()
	}
	return a._dataStageMainMission[identifier], nil
}

// ByStageTarget returns the AlleyStage uniquely identified by StageTarget
//
// Error is only non-nil if the source errors out
func (a *AlleyStageAccessor) ByStageTarget(identifier json.Number) (AlleyStage, error) {
	if a._dataStageTarget == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AlleyStage{}, err
			}
		}
		a.GroupData()
	}
	return a._dataStageTarget[identifier], nil
}

// ByTakeMainMission returns the AlleyStage uniquely identified by TakeMainMission
//
// Error is only non-nil if the source errors out
func (a *AlleyStageAccessor) ByTakeMainMission(identifier json.Number) (AlleyStage, error) {
	if a._dataTakeMainMission == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AlleyStage{}, err
			}
		}
		a.GroupData()
	}
	return a._dataTakeMainMission[identifier], nil
}
