package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type RogueDLCAeon struct {
	AeonDiceID                  json.Number              `json:"AeonDiceID"`
	AeonID                      json.Number              `json:"AeonID"`
	BattleEventBuffGroup        json.Number              `json:"BattleEventBuffGroup"`
	BattleEventEnhanceBuffGroup json.Number              `json:"BattleEventEnhanceBuffGroup"`
	DescParam                   []map[string]json.Number `json:"DescParam"`
	EffectDesc3                 map[string]json.Number   `json:"EffectDesc3"`
	EffectParam1                []json.Number            `json:"EffectParam1"`
	EffectParam2                []json.Number            `json:"EffectParam2"`
	EffectParam3                []json.Number            `json:"EffectParam3"`
	EffectParam4                []json.Number            `json:"EffectParam4"`
	EffectType1                 string                   `json:"EffectType1"`
	EffectType3                 string                   `json:"EffectType3"`
	EntrancePrefabPath          string                   `json:"EntrancePrefabPath"`
	ExtraEffect                 []json.Number            `json:"ExtraEffect"`
	PlayShortDesc               map[string]json.Number   `json:"PlayShortDesc"`
	RogueAeonDisplayID          json.Number              `json:"RogueAeonDisplayID"`
	RogueBuffType               json.Number              `json:"RogueBuffType"`
	Sort                        json.Number              `json:"Sort"`
	UnlockID                    json.Number              `json:"UnlockID"`
}
type RogueDLCAeonAccessor struct {
	_data                   []RogueDLCAeon
	_dataEffectType3        map[string]RogueDLCAeon
	_dataEntrancePrefabPath map[string]RogueDLCAeon
}

// LoadData retrieves the data. Must be called before RogueDLCAeon.GroupData
func (a *RogueDLCAeonAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueDLCAeon.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueDLCAeonAccessor) Raw() ([]RogueDLCAeon, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueDLCAeon{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueDLCAeonAccessor.LoadData to preload everything
func (a *RogueDLCAeonAccessor) GroupData() {
	a._dataEffectType3 = map[string]RogueDLCAeon{}
	a._dataEntrancePrefabPath = map[string]RogueDLCAeon{}
	for _, d := range a._data {
		a._dataEffectType3[d.EffectType3] = d
		a._dataEntrancePrefabPath[d.EntrancePrefabPath] = d
	}
}

// ByEffectType3 returns the RogueDLCAeon uniquely identified by EffectType3
//
// Error is only non-nil if the source errors out
func (a *RogueDLCAeonAccessor) ByEffectType3(identifier string) (RogueDLCAeon, error) {
	if a._dataEffectType3 == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueDLCAeon{}, err
			}
		}
		a.GroupData()
	}
	return a._dataEffectType3[identifier], nil
}

// ByEntrancePrefabPath returns the RogueDLCAeon uniquely identified by EntrancePrefabPath
//
// Error is only non-nil if the source errors out
func (a *RogueDLCAeonAccessor) ByEntrancePrefabPath(identifier string) (RogueDLCAeon, error) {
	if a._dataEntrancePrefabPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueDLCAeon{}, err
			}
		}
		a.GroupData()
	}
	return a._dataEntrancePrefabPath[identifier], nil
}
