package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type RogueNousDiceSlot struct {
	ExtraMaxRarity   float64   `json:"ExtraMaxRarity"`
	MaxRarity        float64   `json:"MaxRarity"`
	SlotID           float64   `json:"SlotID"`
	SlotName         hash.Hash `json:"SlotName"`
	UpgradedSlotName hash.Hash `json:"UpgradedSlotName"`
}
type RogueNousDiceSlotAccessor struct {
	_data       []RogueNousDiceSlot
	_dataSlotID map[float64]RogueNousDiceSlot
}

// LoadData retrieves the data. Must be called before RogueNousDiceSlot.GroupData
func (a *RogueNousDiceSlotAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueNousDiceSlot.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueNousDiceSlotAccessor) Raw() ([]RogueNousDiceSlot, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueNousDiceSlot{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueNousDiceSlotAccessor.LoadData to preload everything
func (a *RogueNousDiceSlotAccessor) GroupData() {
	a._dataSlotID = map[float64]RogueNousDiceSlot{}
	for _, d := range a._data {
		a._dataSlotID[d.SlotID] = d
	}
}

// BySlotID returns the RogueNousDiceSlot uniquely identified by SlotID
//
// Error is only non-nil if the source errors out
func (a *RogueNousDiceSlotAccessor) BySlotID(identifier float64) (RogueNousDiceSlot, error) {
	if a._dataSlotID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueNousDiceSlot{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSlotID[identifier], nil
}
