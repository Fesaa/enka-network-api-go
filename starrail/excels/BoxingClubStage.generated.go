package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type BoxingClubStage struct {
	BubbleTalkEnemy  map[string]json.Number `json:"BubbleTalkEnemy"`
	BubbleTalkPlayer map[string]json.Number `json:"BubbleTalkPlayer"`
	BuffID           json.Number            `json:"BuffID"`
	BuffOptionalList []json.Number          `json:"BuffOptionalList"`
	EventID          json.Number            `json:"EventID"`
	MonsterWaveIndex json.Number            `json:"MonsterWaveIndex"`
	Name             map[string]json.Number `json:"Name"`
}
type BoxingClubStageAccessor struct {
	_data        []BoxingClubStage
	_dataEventID map[json.Number]BoxingClubStage
}

// LoadData retrieves the data. Must be called before BoxingClubStage.GroupData
func (a *BoxingClubStageAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/BoxingClubStage.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *BoxingClubStageAccessor) Raw() ([]BoxingClubStage, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []BoxingClubStage{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with BoxingClubStageAccessor.LoadData to preload everything
func (a *BoxingClubStageAccessor) GroupData() {
	a._dataEventID = map[json.Number]BoxingClubStage{}
	for _, d := range a._data {
		a._dataEventID[d.EventID] = d
	}
}

// ByEventID returns the BoxingClubStage uniquely identified by EventID
//
// Error is only non-nil if the source errors out
func (a *BoxingClubStageAccessor) ByEventID(identifier json.Number) (BoxingClubStage, error) {
	if a._dataEventID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return BoxingClubStage{}, err
			}
		}
		a.GroupData()
	}
	return a._dataEventID[identifier], nil
}
