package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type BackGroundMusic struct {
	BGMDesc         map[string]json.Number `json:"BGMDesc"`
	BPM             json.Number            `json:"BPM"`
	GroupID         json.Number            `json:"GroupID"`
	ID              json.Number            `json:"ID"`
	MusicName       map[string]json.Number `json:"MusicName"`
	MusicSwitchName string                 `json:"MusicSwitchName"`
	RhythmColour    string                 `json:"RhythmColour"`
	Unlock          bool                   `json:"Unlock"`
	UnlockDesc      map[string]json.Number `json:"UnlockDesc"`
}
type BackGroundMusicAccessor struct {
	_data                []BackGroundMusic
	_dataID              map[json.Number]BackGroundMusic
	_dataMusicSwitchName map[string]BackGroundMusic
}

// LoadData retrieves the data. Must be called before BackGroundMusic.GroupData
func (a *BackGroundMusicAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/BackGroundMusic.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *BackGroundMusicAccessor) Raw() ([]BackGroundMusic, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []BackGroundMusic{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with BackGroundMusicAccessor.LoadData to preload everything
func (a *BackGroundMusicAccessor) GroupData() {
	a._dataID = map[json.Number]BackGroundMusic{}
	a._dataMusicSwitchName = map[string]BackGroundMusic{}
	for _, d := range a._data {
		a._dataID[d.ID] = d
		a._dataMusicSwitchName[d.MusicSwitchName] = d
	}
}

// ByID returns the BackGroundMusic uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *BackGroundMusicAccessor) ByID(identifier json.Number) (BackGroundMusic, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return BackGroundMusic{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}

// ByMusicSwitchName returns the BackGroundMusic uniquely identified by MusicSwitchName
//
// Error is only non-nil if the source errors out
func (a *BackGroundMusicAccessor) ByMusicSwitchName(identifier string) (BackGroundMusic, error) {
	if a._dataMusicSwitchName == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return BackGroundMusic{}, err
			}
		}
		a.GroupData()
	}
	return a._dataMusicSwitchName[identifier], nil
}
