package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type LimitType struct {
	LimitType           string    `json:"LimitType"`
	LimitTypeDesc       hash.Hash `json:"LimitTypeDesc"`
	LimitTypeDetailDesc hash.Hash `json:"LimitTypeDetailDesc"`
}
type LimitTypeAccessor struct {
	_data          []LimitType
	_dataLimitType map[string]LimitType
}

// LoadData retrieves the data. Must be called before LimitType.GroupData
func (a *LimitTypeAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/LimitType.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *LimitTypeAccessor) Raw() ([]LimitType, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []LimitType{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with LimitTypeAccessor.LoadData to preload everything
func (a *LimitTypeAccessor) GroupData() {
	for _, d := range a._data {
		a._dataLimitType[d.LimitType] = d
	}
}

// ByLimitType returns the LimitType uniquely identified by LimitType
//
// Error is only non-nil if the source errors out
func (a *LimitTypeAccessor) ByLimitType(identifier string) (LimitType, error) {
	if a._dataLimitType == nil {
		err := a.LoadData()
		if err != nil {
			return LimitType{}, err
		}
		a.GroupData()
	}
	return a._dataLimitType[identifier], nil
}
