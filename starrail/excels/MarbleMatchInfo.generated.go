package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type MarbleMatchInfo struct {
	AIRank               json.Number            `json:"AIRank"`
	ANpcIds              []json.Number          `json:"ANpcIds"`
	BNpcIds              []json.Number          `json:"BNpcIds"`
	BanSealList          []json.Number          `json:"BanSealList"`
	CanGoMatchSubMission json.Number            `json:"CanGoMatchSubMission"`
	CustomID             json.Number            `json:"CustomID"`
	FirstType            json.Number            `json:"FirstType"`
	ID                   json.Number            `json:"ID"`
	LevelID              json.Number            `json:"LevelID"`
	Name                 map[string]json.Number `json:"Name"`
	PerformanceID        json.Number            `json:"PerformanceID"`
	PhaseID              string                 `json:"PhaseID"`
	PlayerID             json.Number            `json:"PlayerID"`
	Reward               json.Number            `json:"Reward"`
	Round                json.Number            `json:"Round"`
}
type MarbleMatchInfoAccessor struct {
	_data []MarbleMatchInfo
}

// LoadData retrieves the data. Must be called before MarbleMatchInfo.GroupData
func (a *MarbleMatchInfoAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MarbleMatchInfo.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MarbleMatchInfoAccessor) Raw() ([]MarbleMatchInfo, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MarbleMatchInfo{}, err
		}
	}
	return a._data, nil
}
