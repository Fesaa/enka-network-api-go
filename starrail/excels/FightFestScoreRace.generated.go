package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type FightFestScoreRace struct {
	BlueAvatarID      json.Number            `json:"BlueAvatarID"`
	DetailImgPath     string                 `json:"DetailImgPath"`
	EventID           json.Number            `json:"EventID"`
	EventIDList       []json.Number          `json:"EventIDList"`
	PhaseID           json.Number            `json:"PhaseID"`
	RaceBgFigurePath  string                 `json:"RaceBgFigurePath"`
	RaceDesc          map[string]json.Number `json:"RaceDesc"`
	RedAvatarID       json.Number            `json:"RedAvatarID"`
	ResultImgPath     string                 `json:"ResultImgPath"`
	RewardID          json.Number            `json:"RewardID"`
	RewardScore       json.Number            `json:"RewardScore"`
	ScoreRaceID       json.Number            `json:"ScoreRaceID"`
	ScoreRaceType     string                 `json:"ScoreRaceType"`
	SortWeight        json.Number            `json:"SortWeight"`
	StageName         map[string]json.Number `json:"StageName"`
	TakeMainMissionID json.Number            `json:"TakeMainMissionID"`
	TutorialID        json.Number            `json:"TutorialID"`
	TutorialImgPath   string                 `json:"TutorialImgPath"`
}
type FightFestScoreRaceAccessor struct {
	_data                []FightFestScoreRace
	_dataDetailImgPath   map[string]FightFestScoreRace
	_dataResultImgPath   map[string]FightFestScoreRace
	_dataTutorialImgPath map[string]FightFestScoreRace
}

// LoadData retrieves the data. Must be called before FightFestScoreRace.GroupData
func (a *FightFestScoreRaceAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/FightFestScoreRace.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *FightFestScoreRaceAccessor) Raw() ([]FightFestScoreRace, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []FightFestScoreRace{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with FightFestScoreRaceAccessor.LoadData to preload everything
func (a *FightFestScoreRaceAccessor) GroupData() {
	a._dataDetailImgPath = map[string]FightFestScoreRace{}
	a._dataResultImgPath = map[string]FightFestScoreRace{}
	a._dataTutorialImgPath = map[string]FightFestScoreRace{}
	for _, d := range a._data {
		a._dataDetailImgPath[d.DetailImgPath] = d
		a._dataResultImgPath[d.ResultImgPath] = d
		a._dataTutorialImgPath[d.TutorialImgPath] = d
	}
}

// ByDetailImgPath returns the FightFestScoreRace uniquely identified by DetailImgPath
//
// Error is only non-nil if the source errors out
func (a *FightFestScoreRaceAccessor) ByDetailImgPath(identifier string) (FightFestScoreRace, error) {
	if a._dataDetailImgPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FightFestScoreRace{}, err
			}
		}
		a.GroupData()
	}
	return a._dataDetailImgPath[identifier], nil
}

// ByResultImgPath returns the FightFestScoreRace uniquely identified by ResultImgPath
//
// Error is only non-nil if the source errors out
func (a *FightFestScoreRaceAccessor) ByResultImgPath(identifier string) (FightFestScoreRace, error) {
	if a._dataResultImgPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FightFestScoreRace{}, err
			}
		}
		a.GroupData()
	}
	return a._dataResultImgPath[identifier], nil
}

// ByTutorialImgPath returns the FightFestScoreRace uniquely identified by TutorialImgPath
//
// Error is only non-nil if the source errors out
func (a *FightFestScoreRaceAccessor) ByTutorialImgPath(identifier string) (FightFestScoreRace, error) {
	if a._dataTutorialImgPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FightFestScoreRace{}, err
			}
		}
		a.GroupData()
	}
	return a._dataTutorialImgPath[identifier], nil
}
