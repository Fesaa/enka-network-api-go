package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type FightFestScoreRace struct {
	BlueAvatarID      float64   `json:"BlueAvatarID"`
	DetailImgPath     string    `json:"DetailImgPath"`
	EventID           float64   `json:"EventID"`
	EventIDList       []float64 `json:"EventIDList"`
	PhaseID           float64   `json:"PhaseID"`
	RaceBgFigurePath  string    `json:"RaceBgFigurePath"`
	RaceDesc          hash.Hash `json:"RaceDesc"`
	RedAvatarID       float64   `json:"RedAvatarID"`
	ResultImgPath     string    `json:"ResultImgPath"`
	RewardID          float64   `json:"RewardID"`
	RewardScore       float64   `json:"RewardScore"`
	ScoreRaceID       float64   `json:"ScoreRaceID"`
	ScoreRaceType     string    `json:"ScoreRaceType"`
	SortWeight        float64   `json:"SortWeight"`
	StageName         hash.Hash `json:"StageName"`
	TakeMainMissionID float64   `json:"TakeMainMissionID"`
	TutorialID        float64   `json:"TutorialID"`
	TutorialImgPath   string    `json:"TutorialImgPath"`
}
type FightFestScoreRaceAccessor struct {
	_data                  []FightFestScoreRace
	_dataDetailImgPath     map[string]FightFestScoreRace
	_dataEventID           map[float64]FightFestScoreRace
	_dataRedAvatarID       map[float64]FightFestScoreRace
	_dataResultImgPath     map[string]FightFestScoreRace
	_dataRewardID          map[float64]FightFestScoreRace
	_dataScoreRaceID       map[float64]FightFestScoreRace
	_dataSortWeight        map[float64]FightFestScoreRace
	_dataTakeMainMissionID map[float64]FightFestScoreRace
	_dataTutorialID        map[float64]FightFestScoreRace
	_dataTutorialImgPath   map[string]FightFestScoreRace
}

// LoadData retrieves the data. Must be called before FightFestScoreRace.GroupData
func (a *FightFestScoreRaceAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/FightFestScoreRace.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *FightFestScoreRaceAccessor) Raw() ([]FightFestScoreRace, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []FightFestScoreRace{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with FightFestScoreRaceAccessor.LoadData to preload everything
func (a *FightFestScoreRaceAccessor) GroupData() {
	a._dataDetailImgPath = map[string]FightFestScoreRace{}
	a._dataEventID = map[float64]FightFestScoreRace{}
	a._dataRedAvatarID = map[float64]FightFestScoreRace{}
	a._dataResultImgPath = map[string]FightFestScoreRace{}
	a._dataRewardID = map[float64]FightFestScoreRace{}
	a._dataScoreRaceID = map[float64]FightFestScoreRace{}
	a._dataSortWeight = map[float64]FightFestScoreRace{}
	a._dataTakeMainMissionID = map[float64]FightFestScoreRace{}
	a._dataTutorialID = map[float64]FightFestScoreRace{}
	a._dataTutorialImgPath = map[string]FightFestScoreRace{}
	for _, d := range a._data {
		a._dataDetailImgPath[d.DetailImgPath] = d
		a._dataEventID[d.EventID] = d
		a._dataRedAvatarID[d.RedAvatarID] = d
		a._dataResultImgPath[d.ResultImgPath] = d
		a._dataRewardID[d.RewardID] = d
		a._dataScoreRaceID[d.ScoreRaceID] = d
		a._dataSortWeight[d.SortWeight] = d
		a._dataTakeMainMissionID[d.TakeMainMissionID] = d
		a._dataTutorialID[d.TutorialID] = d
		a._dataTutorialImgPath[d.TutorialImgPath] = d
	}
}

// ByDetailImgPath returns the FightFestScoreRace uniquely identified by DetailImgPath
//
// Error is only non-nil if the source errors out
func (a *FightFestScoreRaceAccessor) ByDetailImgPath(identifier string) (FightFestScoreRace, error) {
	if a._dataDetailImgPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FightFestScoreRace{}, err
			}
		}
		a.GroupData()
	}
	return a._dataDetailImgPath[identifier], nil
}

// ByEventID returns the FightFestScoreRace uniquely identified by EventID
//
// Error is only non-nil if the source errors out
func (a *FightFestScoreRaceAccessor) ByEventID(identifier float64) (FightFestScoreRace, error) {
	if a._dataEventID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FightFestScoreRace{}, err
			}
		}
		a.GroupData()
	}
	return a._dataEventID[identifier], nil
}

// ByRedAvatarID returns the FightFestScoreRace uniquely identified by RedAvatarID
//
// Error is only non-nil if the source errors out
func (a *FightFestScoreRaceAccessor) ByRedAvatarID(identifier float64) (FightFestScoreRace, error) {
	if a._dataRedAvatarID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FightFestScoreRace{}, err
			}
		}
		a.GroupData()
	}
	return a._dataRedAvatarID[identifier], nil
}

// ByResultImgPath returns the FightFestScoreRace uniquely identified by ResultImgPath
//
// Error is only non-nil if the source errors out
func (a *FightFestScoreRaceAccessor) ByResultImgPath(identifier string) (FightFestScoreRace, error) {
	if a._dataResultImgPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FightFestScoreRace{}, err
			}
		}
		a.GroupData()
	}
	return a._dataResultImgPath[identifier], nil
}

// ByRewardID returns the FightFestScoreRace uniquely identified by RewardID
//
// Error is only non-nil if the source errors out
func (a *FightFestScoreRaceAccessor) ByRewardID(identifier float64) (FightFestScoreRace, error) {
	if a._dataRewardID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FightFestScoreRace{}, err
			}
		}
		a.GroupData()
	}
	return a._dataRewardID[identifier], nil
}

// ByScoreRaceID returns the FightFestScoreRace uniquely identified by ScoreRaceID
//
// Error is only non-nil if the source errors out
func (a *FightFestScoreRaceAccessor) ByScoreRaceID(identifier float64) (FightFestScoreRace, error) {
	if a._dataScoreRaceID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FightFestScoreRace{}, err
			}
		}
		a.GroupData()
	}
	return a._dataScoreRaceID[identifier], nil
}

// BySortWeight returns the FightFestScoreRace uniquely identified by SortWeight
//
// Error is only non-nil if the source errors out
func (a *FightFestScoreRaceAccessor) BySortWeight(identifier float64) (FightFestScoreRace, error) {
	if a._dataSortWeight == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FightFestScoreRace{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSortWeight[identifier], nil
}

// ByTakeMainMissionID returns the FightFestScoreRace uniquely identified by TakeMainMissionID
//
// Error is only non-nil if the source errors out
func (a *FightFestScoreRaceAccessor) ByTakeMainMissionID(identifier float64) (FightFestScoreRace, error) {
	if a._dataTakeMainMissionID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FightFestScoreRace{}, err
			}
		}
		a.GroupData()
	}
	return a._dataTakeMainMissionID[identifier], nil
}

// ByTutorialID returns the FightFestScoreRace uniquely identified by TutorialID
//
// Error is only non-nil if the source errors out
func (a *FightFestScoreRaceAccessor) ByTutorialID(identifier float64) (FightFestScoreRace, error) {
	if a._dataTutorialID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FightFestScoreRace{}, err
			}
		}
		a.GroupData()
	}
	return a._dataTutorialID[identifier], nil
}

// ByTutorialImgPath returns the FightFestScoreRace uniquely identified by TutorialImgPath
//
// Error is only non-nil if the source errors out
func (a *FightFestScoreRaceAccessor) ByTutorialImgPath(identifier string) (FightFestScoreRace, error) {
	if a._dataTutorialImgPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FightFestScoreRace{}, err
			}
		}
		a.GroupData()
	}
	return a._dataTutorialImgPath[identifier], nil
}
