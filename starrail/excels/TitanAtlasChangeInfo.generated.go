package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type TitanAtlasChangeInfo struct {
	ChangeTitanIDList []float64 `json:"ChangeTitanIDList"`
	TitanID           float64   `json:"TitanID"`
}
type TitanAtlasChangeInfoAccessor struct {
	_data        []TitanAtlasChangeInfo
	_dataTitanID map[float64]TitanAtlasChangeInfo
}

// LoadData retrieves the data. Must be called before TitanAtlasChangeInfo.GroupData
func (a *TitanAtlasChangeInfoAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/TitanAtlasChangeInfo.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *TitanAtlasChangeInfoAccessor) Raw() ([]TitanAtlasChangeInfo, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []TitanAtlasChangeInfo{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with TitanAtlasChangeInfoAccessor.LoadData to preload everything
func (a *TitanAtlasChangeInfoAccessor) GroupData() {
	for _, d := range a._data {
		a._dataTitanID[d.TitanID] = d
	}
}

// ByTitanID returns the TitanAtlasChangeInfo uniquely identified by TitanID
//
// Error is only non-nil if the source errors out
func (a *TitanAtlasChangeInfoAccessor) ByTitanID(identifier float64) (TitanAtlasChangeInfo, error) {
	if a._dataTitanID == nil {
		err := a.LoadData()
		if err != nil {
			return TitanAtlasChangeInfo{}, err
		}
		a.GroupData()
	}
	return a._dataTitanID[identifier], nil
}
