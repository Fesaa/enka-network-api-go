package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type ActivityParkourAIConfig struct {
	AIPlayerScore       float64   `json:"AIPlayerScore"`
	ActionIntervalTime  float64   `json:"ActionIntervalTime"`
	CalcStepCnt         float64   `json:"CalcStepCnt"`
	ID                  float64   `json:"ID"`
	LocalPlayerScore    float64   `json:"LocalPlayerScore"`
	Name                hash.Hash `json:"Name"`
	NearPlayerScore     float64   `json:"NearPlayerScore"`
	ObstacleScore       float64   `json:"ObstacleScore"`
	PrefabPath          string    `json:"PrefabPath"`
	ResPath             string    `json:"ResPath"`
	SkillItemScore      float64   `json:"SkillItemScore"`
	SlowDownRegionScore float64   `json:"SlowDownRegionScore"`
	SpeedItemScore      float64   `json:"SpeedItemScore"`
	SpeedUpRegionScore  float64   `json:"SpeedUpRegionScore"`
	SwitchRoadScore     float64   `json:"SwitchRoadScore"`
}
type ActivityParkourAIConfigAccessor struct {
	_data   []ActivityParkourAIConfig
	_dataID map[float64]ActivityParkourAIConfig
}

// LoadData retrieves the data. Must be called before ActivityParkourAIConfig.GroupData
func (a *ActivityParkourAIConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ActivityParkourAIConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ActivityParkourAIConfigAccessor) Raw() ([]ActivityParkourAIConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ActivityParkourAIConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ActivityParkourAIConfigAccessor.LoadData to preload everything
func (a *ActivityParkourAIConfigAccessor) GroupData() {
	a._dataID = map[float64]ActivityParkourAIConfig{}
	for _, d := range a._data {
		a._dataID[d.ID] = d
	}
}

// ByID returns the ActivityParkourAIConfig uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *ActivityParkourAIConfigAccessor) ByID(identifier float64) (ActivityParkourAIConfig, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityParkourAIConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}
