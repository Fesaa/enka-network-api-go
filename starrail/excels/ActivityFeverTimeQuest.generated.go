package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type ActivityFeverTimeQuest struct {
	QuestGroupID float64   `json:"QuestGroupID"`
	QuestIDList  []float64 `json:"QuestIDList"`
	TabName      hash.Hash `json:"TabName"`
}
type ActivityFeverTimeQuestAccessor struct {
	_data             []ActivityFeverTimeQuest
	_dataQuestGroupID map[float64]ActivityFeverTimeQuest
}

// LoadData retrieves the data. Must be called before ActivityFeverTimeQuest.GroupData
func (a *ActivityFeverTimeQuestAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ActivityFeverTimeQuest.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ActivityFeverTimeQuestAccessor) Raw() ([]ActivityFeverTimeQuest, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ActivityFeverTimeQuest{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ActivityFeverTimeQuestAccessor.LoadData to preload everything
func (a *ActivityFeverTimeQuestAccessor) GroupData() {
	for _, d := range a._data {
		a._dataQuestGroupID[d.QuestGroupID] = d
	}
}

// ByQuestGroupID returns the ActivityFeverTimeQuest uniquely identified by QuestGroupID
//
// Error is only non-nil if the source errors out
func (a *ActivityFeverTimeQuestAccessor) ByQuestGroupID(identifier float64) (ActivityFeverTimeQuest, error) {
	if a._dataQuestGroupID == nil {
		err := a.LoadData()
		if err != nil {
			return ActivityFeverTimeQuest{}, err
		}
		a.GroupData()
	}
	return a._dataQuestGroupID[identifier], nil
}
