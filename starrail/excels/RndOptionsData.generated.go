package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type RndOptionsData struct {
	DialogShowOrder json.Number `json:"DialogShowOrder"`
	GroupID         string      `json:"GroupID"`
	ID              json.Number `json:"ID"`
	JsonPath        string      `json:"JsonPath"`
	MenuItemID      json.Number `json:"MenuItemID"`
	MenuItemType    string      `json:"MenuItemType"`
	Weight          json.Number `json:"Weight"`
}
type RndOptionsDataAccessor struct {
	_data         []RndOptionsData
	_dataJsonPath map[string]RndOptionsData
}

// LoadData retrieves the data. Must be called before RndOptionsData.GroupData
func (a *RndOptionsDataAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RndOptionsData.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RndOptionsDataAccessor) Raw() ([]RndOptionsData, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RndOptionsData{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RndOptionsDataAccessor.LoadData to preload everything
func (a *RndOptionsDataAccessor) GroupData() {
	a._dataJsonPath = map[string]RndOptionsData{}
	for _, d := range a._data {
		a._dataJsonPath[d.JsonPath] = d
	}
}

// ByJsonPath returns the RndOptionsData uniquely identified by JsonPath
//
// Error is only non-nil if the source errors out
func (a *RndOptionsDataAccessor) ByJsonPath(identifier string) (RndOptionsData, error) {
	if a._dataJsonPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RndOptionsData{}, err
			}
		}
		a.GroupData()
	}
	return a._dataJsonPath[identifier], nil
}
