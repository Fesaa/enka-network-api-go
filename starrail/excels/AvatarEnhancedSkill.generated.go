package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type AvatarEnhancedSkill struct {
	AvatarID         float64   `json:"AvatarID"`
	Comment01        hash.Hash `json:"Comment01"`
	Comment02        hash.Hash `json:"Comment02"`
	CommentIndex     float64   `json:"CommentIndex"`
	DescAfter        hash.Hash `json:"DescAfter"`
	DescBefore       hash.Hash `json:"DescBefore"`
	SimpleDescAfter  hash.Hash `json:"SimpleDescAfter"`
	SimpleDescBefore hash.Hash `json:"SimpleDescBefore"`
	SkillID          float64   `json:"SkillID"`
	SkillTreeID      float64   `json:"SkillTreeID"`
}
type AvatarEnhancedSkillAccessor struct {
	_data        []AvatarEnhancedSkill
	_dataSkillID map[float64]AvatarEnhancedSkill
}

// LoadData retrieves the data. Must be called before AvatarEnhancedSkill.GroupData
func (a *AvatarEnhancedSkillAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/AvatarEnhancedSkill.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *AvatarEnhancedSkillAccessor) Raw() ([]AvatarEnhancedSkill, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []AvatarEnhancedSkill{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with AvatarEnhancedSkillAccessor.LoadData to preload everything
func (a *AvatarEnhancedSkillAccessor) GroupData() {
	a._dataSkillID = map[float64]AvatarEnhancedSkill{}
	for _, d := range a._data {
		a._dataSkillID[d.SkillID] = d
	}
}

// BySkillID returns the AvatarEnhancedSkill uniquely identified by SkillID
//
// Error is only non-nil if the source errors out
func (a *AvatarEnhancedSkillAccessor) BySkillID(identifier float64) (AvatarEnhancedSkill, error) {
	if a._dataSkillID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AvatarEnhancedSkill{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSkillID[identifier], nil
}
