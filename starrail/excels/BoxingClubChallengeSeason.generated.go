package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type BoxingClubChallengeSeason struct {
	ActivityQuestID []json.Number `json:"ActivityQuestID"`
	ActivityTitle   string        `json:"ActivityTitle"`
	ChallengeIDList []json.Number `json:"ChallengeIDList"`
	SeasonID        json.Number   `json:"SeasonID"`
	SeasonIconPath  string        `json:"SeasonIconPath"`
	SeasonTabPath   string        `json:"SeasonTabPath"`
	SeasonType      string        `json:"SeasonType"`
}
type BoxingClubChallengeSeasonAccessor struct {
	_data               []BoxingClubChallengeSeason
	_dataActivityTitle  map[string]BoxingClubChallengeSeason
	_dataSeasonID       map[json.Number]BoxingClubChallengeSeason
	_dataSeasonIconPath map[string]BoxingClubChallengeSeason
	_dataSeasonTabPath  map[string]BoxingClubChallengeSeason
	_dataSeasonType     map[string]BoxingClubChallengeSeason
}

// LoadData retrieves the data. Must be called before BoxingClubChallengeSeason.GroupData
func (a *BoxingClubChallengeSeasonAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/BoxingClubChallengeSeason.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *BoxingClubChallengeSeasonAccessor) Raw() ([]BoxingClubChallengeSeason, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []BoxingClubChallengeSeason{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with BoxingClubChallengeSeasonAccessor.LoadData to preload everything
func (a *BoxingClubChallengeSeasonAccessor) GroupData() {
	a._dataActivityTitle = map[string]BoxingClubChallengeSeason{}
	a._dataSeasonID = map[json.Number]BoxingClubChallengeSeason{}
	a._dataSeasonIconPath = map[string]BoxingClubChallengeSeason{}
	a._dataSeasonTabPath = map[string]BoxingClubChallengeSeason{}
	a._dataSeasonType = map[string]BoxingClubChallengeSeason{}
	for _, d := range a._data {
		a._dataActivityTitle[d.ActivityTitle] = d
		a._dataSeasonID[d.SeasonID] = d
		a._dataSeasonIconPath[d.SeasonIconPath] = d
		a._dataSeasonTabPath[d.SeasonTabPath] = d
		a._dataSeasonType[d.SeasonType] = d
	}
}

// ByActivityTitle returns the BoxingClubChallengeSeason uniquely identified by ActivityTitle
//
// Error is only non-nil if the source errors out
func (a *BoxingClubChallengeSeasonAccessor) ByActivityTitle(identifier string) (BoxingClubChallengeSeason, error) {
	if a._dataActivityTitle == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return BoxingClubChallengeSeason{}, err
			}
		}
		a.GroupData()
	}
	return a._dataActivityTitle[identifier], nil
}

// BySeasonID returns the BoxingClubChallengeSeason uniquely identified by SeasonID
//
// Error is only non-nil if the source errors out
func (a *BoxingClubChallengeSeasonAccessor) BySeasonID(identifier json.Number) (BoxingClubChallengeSeason, error) {
	if a._dataSeasonID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return BoxingClubChallengeSeason{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSeasonID[identifier], nil
}

// BySeasonIconPath returns the BoxingClubChallengeSeason uniquely identified by SeasonIconPath
//
// Error is only non-nil if the source errors out
func (a *BoxingClubChallengeSeasonAccessor) BySeasonIconPath(identifier string) (BoxingClubChallengeSeason, error) {
	if a._dataSeasonIconPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return BoxingClubChallengeSeason{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSeasonIconPath[identifier], nil
}

// BySeasonTabPath returns the BoxingClubChallengeSeason uniquely identified by SeasonTabPath
//
// Error is only non-nil if the source errors out
func (a *BoxingClubChallengeSeasonAccessor) BySeasonTabPath(identifier string) (BoxingClubChallengeSeason, error) {
	if a._dataSeasonTabPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return BoxingClubChallengeSeason{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSeasonTabPath[identifier], nil
}

// BySeasonType returns the BoxingClubChallengeSeason uniquely identified by SeasonType
//
// Error is only non-nil if the source errors out
func (a *BoxingClubChallengeSeasonAccessor) BySeasonType(identifier string) (BoxingClubChallengeSeason, error) {
	if a._dataSeasonType == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return BoxingClubChallengeSeason{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSeasonType[identifier], nil
}
