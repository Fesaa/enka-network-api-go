package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type RogueTournPermanentTalent struct {
	Cost                []RogueTournPermanentTalentCost `json:"Cost"`
	EffectDesc          hash.Hash                       `json:"EffectDesc"`
	EffectDescParamList []hash.IntValue                 `json:"EffectDescParamList"`
	EffectTag           hash.Hash                       `json:"EffectTag"`
	EffectTitle         hash.Hash                       `json:"EffectTitle"`
	Icon                string                          `json:"Icon"`
	IsImportant         bool                            `json:"IsImportant"`
	NextTalentIDList    []float64                       `json:"NextTalentIDList"`
	TalentID            float64                         `json:"TalentID"`
}
type RogueTournPermanentTalentCost struct {
	ItemID  float64 `json:"ItemID"`
	ItemNum float64 `json:"ItemNum"`
}
type RogueTournPermanentTalentAccessor struct {
	_data         []RogueTournPermanentTalent
	_dataTalentID map[float64]RogueTournPermanentTalent
}

// LoadData retrieves the data. Must be called before RogueTournPermanentTalent.GroupData
func (a *RogueTournPermanentTalentAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueTournPermanentTalent.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueTournPermanentTalentAccessor) Raw() ([]RogueTournPermanentTalent, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueTournPermanentTalent{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueTournPermanentTalentAccessor.LoadData to preload everything
func (a *RogueTournPermanentTalentAccessor) GroupData() {
	a._dataTalentID = map[float64]RogueTournPermanentTalent{}
	for _, d := range a._data {
		a._dataTalentID[d.TalentID] = d
	}
}

// ByTalentID returns the RogueTournPermanentTalent uniquely identified by TalentID
//
// Error is only non-nil if the source errors out
func (a *RogueTournPermanentTalentAccessor) ByTalentID(identifier float64) (RogueTournPermanentTalent, error) {
	if a._dataTalentID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueTournPermanentTalent{}, err
			}
		}
		a.GroupData()
	}
	return a._dataTalentID[identifier], nil
}
