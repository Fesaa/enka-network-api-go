package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type RogueBuffHint struct {
	HintID      float64   `json:"HintID"`
	HintTextMap hash.Hash `json:"HintTextMap"`
}
type RogueBuffHintAccessor struct {
	_data       []RogueBuffHint
	_dataHintID map[float64]RogueBuffHint
}

// LoadData retrieves the data. Must be called before RogueBuffHint.GroupData
func (a *RogueBuffHintAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueBuffHint.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueBuffHintAccessor) Raw() ([]RogueBuffHint, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueBuffHint{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueBuffHintAccessor.LoadData to preload everything
func (a *RogueBuffHintAccessor) GroupData() {
	for _, d := range a._data {
		a._dataHintID[d.HintID] = d
	}
}

// ByHintID returns the RogueBuffHint uniquely identified by HintID
//
// Error is only non-nil if the source errors out
func (a *RogueBuffHintAccessor) ByHintID(identifier float64) (RogueBuffHint, error) {
	if a._dataHintID == nil {
		err := a.LoadData()
		if err != nil {
			return RogueBuffHint{}, err
		}
		a.GroupData()
	}
	return a._dataHintID[identifier], nil
}
