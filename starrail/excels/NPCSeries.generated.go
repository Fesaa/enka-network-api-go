package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type NPCSeries struct {
	SeriesID float64 `json:"SeriesID"`
}
type NPCSeriesAccessor struct {
	_data         []NPCSeries
	_dataSeriesID map[float64]NPCSeries
}

// LoadData retrieves the data. Must be called before NPCSeries.GroupData
func (a *NPCSeriesAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/NPCSeries.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *NPCSeriesAccessor) Raw() ([]NPCSeries, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []NPCSeries{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with NPCSeriesAccessor.LoadData to preload everything
func (a *NPCSeriesAccessor) GroupData() {
	a._dataSeriesID = map[float64]NPCSeries{}
	for _, d := range a._data {
		a._dataSeriesID[d.SeriesID] = d
	}
}

// BySeriesID returns the NPCSeries uniquely identified by SeriesID
//
// Error is only non-nil if the source errors out
func (a *NPCSeriesAccessor) BySeriesID(identifier float64) (NPCSeries, error) {
	if a._dataSeriesID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return NPCSeries{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSeriesID[identifier], nil
}
