package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type RogueDLCAeonCross struct {
	BuffGroup   float64 `json:"BuffGroup"`
	MainAeonID  float64 `json:"MainAeonID"`
	MainAeonNum float64 `json:"MainAeonNum"`
	SubAeonID   float64 `json:"SubAeonID"`
	SubAeonNum  float64 `json:"SubAeonNum"`
}
type RogueDLCAeonCrossAccessor struct {
	_data          []RogueDLCAeonCross
	_dataBuffGroup map[float64]RogueDLCAeonCross
}

// LoadData retrieves the data. Must be called before RogueDLCAeonCross.GroupData
func (a *RogueDLCAeonCrossAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueDLCAeonCross.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueDLCAeonCrossAccessor) Raw() ([]RogueDLCAeonCross, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueDLCAeonCross{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueDLCAeonCrossAccessor.LoadData to preload everything
func (a *RogueDLCAeonCrossAccessor) GroupData() {
	for _, d := range a._data {
		a._dataBuffGroup[d.BuffGroup] = d
	}
}

// ByBuffGroup returns the RogueDLCAeonCross uniquely identified by BuffGroup
//
// Error is only non-nil if the source errors out
func (a *RogueDLCAeonCrossAccessor) ByBuffGroup(identifier float64) (RogueDLCAeonCross, error) {
	if a._dataBuffGroup == nil {
		err := a.LoadData()
		if err != nil {
			return RogueDLCAeonCross{}, err
		}
		a.GroupData()
	}
	return a._dataBuffGroup[identifier], nil
}
