package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type TarotBookEnergy struct {
	IsSilence    bool      `json:"IsSilence"`
	SubmissionID float64   `json:"SubmissionID"`
	Toast        hash.Hash `json:"Toast"`
}
type TarotBookEnergyAccessor struct {
	_data             []TarotBookEnergy
	_dataSubmissionID map[float64]TarotBookEnergy
}

// LoadData retrieves the data. Must be called before TarotBookEnergy.GroupData
func (a *TarotBookEnergyAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/TarotBookEnergy.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *TarotBookEnergyAccessor) Raw() ([]TarotBookEnergy, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []TarotBookEnergy{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with TarotBookEnergyAccessor.LoadData to preload everything
func (a *TarotBookEnergyAccessor) GroupData() {
	a._dataSubmissionID = map[float64]TarotBookEnergy{}
	for _, d := range a._data {
		a._dataSubmissionID[d.SubmissionID] = d
	}
}

// BySubmissionID returns the TarotBookEnergy uniquely identified by SubmissionID
//
// Error is only non-nil if the source errors out
func (a *TarotBookEnergyAccessor) BySubmissionID(identifier float64) (TarotBookEnergy, error) {
	if a._dataSubmissionID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return TarotBookEnergy{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSubmissionID[identifier], nil
}
