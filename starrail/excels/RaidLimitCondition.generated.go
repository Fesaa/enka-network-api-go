package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type RaidLimitCondition struct {
	ID           json.Number            `json:"ID"`
	LimitDesc    map[string]json.Number `json:"LimitDesc"`
	LimitType    string                 `json:"LimitType"`
	ParamInt1    json.Number            `json:"ParamInt1"`
	ParamIntList []interface{}          `json:"ParamIntList"`
	ParamType    string                 `json:"ParamType"`
}
type RaidLimitConditionAccessor struct {
	_data          []RaidLimitCondition
	_dataID        map[json.Number]RaidLimitCondition
	_dataParamInt1 map[json.Number]RaidLimitCondition
}

// LoadData retrieves the data. Must be called before RaidLimitCondition.GroupData
func (a *RaidLimitConditionAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RaidLimitCondition.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RaidLimitConditionAccessor) Raw() ([]RaidLimitCondition, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RaidLimitCondition{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RaidLimitConditionAccessor.LoadData to preload everything
func (a *RaidLimitConditionAccessor) GroupData() {
	a._dataID = map[json.Number]RaidLimitCondition{}
	a._dataParamInt1 = map[json.Number]RaidLimitCondition{}
	for _, d := range a._data {
		a._dataID[d.ID] = d
		a._dataParamInt1[d.ParamInt1] = d
	}
}

// ByID returns the RaidLimitCondition uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *RaidLimitConditionAccessor) ByID(identifier json.Number) (RaidLimitCondition, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RaidLimitCondition{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}

// ByParamInt1 returns the RaidLimitCondition uniquely identified by ParamInt1
//
// Error is only non-nil if the source errors out
func (a *RaidLimitConditionAccessor) ByParamInt1(identifier json.Number) (RaidLimitCondition, error) {
	if a._dataParamInt1 == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RaidLimitCondition{}, err
			}
		}
		a.GroupData()
	}
	return a._dataParamInt1[identifier], nil
}
