package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type RelicDataInfo struct {
	BGStoryContent     string  `json:"BGStoryContent"`
	BGStoryTitle       string  `json:"BGStoryTitle"`
	IconPath           string  `json:"IconPath"`
	ItemBGDesc         string  `json:"ItemBGDesc"`
	ItemFigureIconPath string  `json:"ItemFigureIconPath"`
	RelicName          string  `json:"RelicName"`
	SetID              float64 `json:"SetID"`
	Type               string  `json:"Type"`
}
type RelicDataInfoAccessor struct {
	_data                   []RelicDataInfo
	_dataBGStoryContent     map[string]RelicDataInfo
	_dataBGStoryTitle       map[string]RelicDataInfo
	_dataIconPath           map[string]RelicDataInfo
	_dataItemBGDesc         map[string]RelicDataInfo
	_dataItemFigureIconPath map[string]RelicDataInfo
	_dataRelicName          map[string]RelicDataInfo
}

// LoadData retrieves the data. Must be called before RelicDataInfo.GroupData
func (a *RelicDataInfoAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RelicDataInfo.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RelicDataInfoAccessor) Raw() ([]RelicDataInfo, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RelicDataInfo{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RelicDataInfoAccessor.LoadData to preload everything
func (a *RelicDataInfoAccessor) GroupData() {
	for _, d := range a._data {
		a._dataBGStoryContent[d.BGStoryContent] = d
		a._dataBGStoryTitle[d.BGStoryTitle] = d
		a._dataIconPath[d.IconPath] = d
		a._dataItemBGDesc[d.ItemBGDesc] = d
		a._dataItemFigureIconPath[d.ItemFigureIconPath] = d
		a._dataRelicName[d.RelicName] = d
	}
}

// ByBGStoryContent returns the RelicDataInfo uniquely identified by BGStoryContent
//
// Error is only non-nil if the source errors out
func (a *RelicDataInfoAccessor) ByBGStoryContent(identifier string) (RelicDataInfo, error) {
	if a._dataBGStoryContent == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RelicDataInfo{}, err
			}
		}
		a.GroupData()
	}
	return a._dataBGStoryContent[identifier], nil
}

// ByBGStoryTitle returns the RelicDataInfo uniquely identified by BGStoryTitle
//
// Error is only non-nil if the source errors out
func (a *RelicDataInfoAccessor) ByBGStoryTitle(identifier string) (RelicDataInfo, error) {
	if a._dataBGStoryTitle == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RelicDataInfo{}, err
			}
		}
		a.GroupData()
	}
	return a._dataBGStoryTitle[identifier], nil
}

// ByIconPath returns the RelicDataInfo uniquely identified by IconPath
//
// Error is only non-nil if the source errors out
func (a *RelicDataInfoAccessor) ByIconPath(identifier string) (RelicDataInfo, error) {
	if a._dataIconPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RelicDataInfo{}, err
			}
		}
		a.GroupData()
	}
	return a._dataIconPath[identifier], nil
}

// ByItemBGDesc returns the RelicDataInfo uniquely identified by ItemBGDesc
//
// Error is only non-nil if the source errors out
func (a *RelicDataInfoAccessor) ByItemBGDesc(identifier string) (RelicDataInfo, error) {
	if a._dataItemBGDesc == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RelicDataInfo{}, err
			}
		}
		a.GroupData()
	}
	return a._dataItemBGDesc[identifier], nil
}

// ByItemFigureIconPath returns the RelicDataInfo uniquely identified by ItemFigureIconPath
//
// Error is only non-nil if the source errors out
func (a *RelicDataInfoAccessor) ByItemFigureIconPath(identifier string) (RelicDataInfo, error) {
	if a._dataItemFigureIconPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RelicDataInfo{}, err
			}
		}
		a.GroupData()
	}
	return a._dataItemFigureIconPath[identifier], nil
}

// ByRelicName returns the RelicDataInfo uniquely identified by RelicName
//
// Error is only non-nil if the source errors out
func (a *RelicDataInfoAccessor) ByRelicName(identifier string) (RelicDataInfo, error) {
	if a._dataRelicName == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RelicDataInfo{}, err
			}
		}
		a.GroupData()
	}
	return a._dataRelicName[identifier], nil
}
