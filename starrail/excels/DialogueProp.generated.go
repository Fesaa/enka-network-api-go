package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type DialogueProp struct {
	ActPath       string    `json:"ActPath"`
	ConditionIDs  []float64 `json:"ConditionIDs"`
	GroupID       float64   `json:"GroupID"`
	GroupType     string    `json:"GroupType"`
	IconType      string    `json:"IconType"`
	InteractTitle string    `json:"InteractTitle"`
	Priority      float64   `json:"Priority"`
}
type DialoguePropAccessor struct {
	_data        []DialogueProp
	_dataGroupID map[float64]DialogueProp
}

// LoadData retrieves the data. Must be called before DialogueProp.GroupData
func (a *DialoguePropAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/DialogueProp.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *DialoguePropAccessor) Raw() ([]DialogueProp, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []DialogueProp{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with DialoguePropAccessor.LoadData to preload everything
func (a *DialoguePropAccessor) GroupData() {
	for _, d := range a._data {
		a._dataGroupID[d.GroupID] = d
	}
}

// ByGroupID returns the DialogueProp uniquely identified by GroupID
//
// Error is only non-nil if the source errors out
func (a *DialoguePropAccessor) ByGroupID(identifier float64) (DialogueProp, error) {
	if a._dataGroupID == nil {
		err := a.LoadData()
		if err != nil {
			return DialogueProp{}, err
		}
		a.GroupData()
	}
	return a._dataGroupID[identifier], nil
}
