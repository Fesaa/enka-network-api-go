package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type TrainPartyStaticConfig struct {
	AreaID      json.Number   `json:"AreaID"`
	ID          json.Number   `json:"ID"`
	IconPath    string        `json:"IconPath"`
	SlotList    []json.Number `json:"SlotList"`
	Type        string        `json:"Type"`
	UseLowLight bool          `json:"UseLowLight"`
}
type TrainPartyStaticConfigAccessor struct {
	_data   []TrainPartyStaticConfig
	_dataID map[json.Number]TrainPartyStaticConfig
}

// LoadData retrieves the data. Must be called before TrainPartyStaticConfig.GroupData
func (a *TrainPartyStaticConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/TrainPartyStaticConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *TrainPartyStaticConfigAccessor) Raw() ([]TrainPartyStaticConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []TrainPartyStaticConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with TrainPartyStaticConfigAccessor.LoadData to preload everything
func (a *TrainPartyStaticConfigAccessor) GroupData() {
	a._dataID = map[json.Number]TrainPartyStaticConfig{}
	for _, d := range a._data {
		a._dataID[d.ID] = d
	}
}

// ByID returns the TrainPartyStaticConfig uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *TrainPartyStaticConfigAccessor) ByID(identifier json.Number) (TrainPartyStaticConfig, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return TrainPartyStaticConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}
