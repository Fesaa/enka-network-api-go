package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type ChallengeGroupConfig struct {
	BackGroundPath     string    `json:"BackGroundPath"`
	ChallengeGroupType string    `json:"ChallengeGroupType"`
	GlobalScheduleID   float64   `json:"GlobalScheduleID"`
	GroupID            float64   `json:"GroupID"`
	GroupName          hash.Hash `json:"GroupName"`
	MapEntranceID      float64   `json:"MapEntranceID"`
	MappingInfoID      float64   `json:"MappingInfoID"`
	MazeBuffID         float64   `json:"MazeBuffID"`
	PreMissionID       float64   `json:"PreMissionID"`
	RewardLineGroupID  float64   `json:"RewardLineGroupID"`
	ScheduleDataID     float64   `json:"ScheduleDataID"`
	TabPicPath         string    `json:"TabPicPath"`
	TabPicSelectPath   string    `json:"TabPicSelectPath"`
	ThemePicPath       string    `json:"ThemePicPath"`
	WorldID            float64   `json:"WorldID"`
}
type ChallengeGroupConfigAccessor struct {
	_data        []ChallengeGroupConfig
	_dataGroupID map[float64]ChallengeGroupConfig
}

// LoadData retrieves the data. Must be called before ChallengeGroupConfig.GroupData
func (a *ChallengeGroupConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ChallengeGroupConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ChallengeGroupConfigAccessor) Raw() ([]ChallengeGroupConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ChallengeGroupConfig{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ChallengeGroupConfigAccessor.LoadData to preload everything
func (a *ChallengeGroupConfigAccessor) GroupData() {
	for _, d := range a._data {
		a._dataGroupID[d.GroupID] = d
	}
}

// ByGroupID returns the ChallengeGroupConfig uniquely identified by GroupID
//
// Error is only non-nil if the source errors out
func (a *ChallengeGroupConfigAccessor) ByGroupID(identifier float64) (ChallengeGroupConfig, error) {
	if a._dataGroupID == nil {
		err := a.LoadData()
		if err != nil {
			return ChallengeGroupConfig{}, err
		}
		a.GroupData()
	}
	return a._dataGroupID[identifier], nil
}
