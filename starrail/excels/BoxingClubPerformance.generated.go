package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type BoxingClubPerformance struct {
	BubbleTalkEnemy   string  `json:"BubbleTalkEnemy"`
	BubbleTalkPlayer  string  `json:"BubbleTalkPlayer"`
	EnemyRank         string  `json:"EnemyRank"`
	ID                float64 `json:"ID"`
	MonsterTemplateID float64 `json:"MonsterTemplateID"`
	Name              string  `json:"Name"`
	PlayerRank        string  `json:"PlayerRank"`
}
type BoxingClubPerformanceAccessor struct {
	_data                 []BoxingClubPerformance
	_dataName             map[string]BoxingClubPerformance
	_dataBubbleTalkPlayer map[string]BoxingClubPerformance
	_dataBubbleTalkEnemy  map[string]BoxingClubPerformance
	_dataID               map[float64]BoxingClubPerformance
}

// LoadData retrieves the data. Must be called before BoxingClubPerformance.GroupData
func (a *BoxingClubPerformanceAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/BoxingClubPerformance.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *BoxingClubPerformanceAccessor) Raw() ([]BoxingClubPerformance, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []BoxingClubPerformance{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with BoxingClubPerformanceAccessor.LoadData to preload everything
func (a *BoxingClubPerformanceAccessor) GroupData() {
	for _, d := range a._data {
		a._dataName[d.Name] = d
		a._dataBubbleTalkPlayer[d.BubbleTalkPlayer] = d
		a._dataBubbleTalkEnemy[d.BubbleTalkEnemy] = d
		a._dataID[d.ID] = d
	}
}

// ByName returns the BoxingClubPerformance uniquely identified by Name
//
// Error is only non-nil if the source errors out
func (a *BoxingClubPerformanceAccessor) ByName(identifier string) (BoxingClubPerformance, error) {
	if a._dataName == nil {
		err := a.LoadData()
		if err != nil {
			return BoxingClubPerformance{}, err
		}
		a.GroupData()
	}
	return a._dataName[identifier], nil
}

// ByBubbleTalkPlayer returns the BoxingClubPerformance uniquely identified by BubbleTalkPlayer
//
// Error is only non-nil if the source errors out
func (a *BoxingClubPerformanceAccessor) ByBubbleTalkPlayer(identifier string) (BoxingClubPerformance, error) {
	if a._dataBubbleTalkPlayer == nil {
		err := a.LoadData()
		if err != nil {
			return BoxingClubPerformance{}, err
		}
		a.GroupData()
	}
	return a._dataBubbleTalkPlayer[identifier], nil
}

// ByBubbleTalkEnemy returns the BoxingClubPerformance uniquely identified by BubbleTalkEnemy
//
// Error is only non-nil if the source errors out
func (a *BoxingClubPerformanceAccessor) ByBubbleTalkEnemy(identifier string) (BoxingClubPerformance, error) {
	if a._dataBubbleTalkEnemy == nil {
		err := a.LoadData()
		if err != nil {
			return BoxingClubPerformance{}, err
		}
		a.GroupData()
	}
	return a._dataBubbleTalkEnemy[identifier], nil
}

// ByID returns the BoxingClubPerformance uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *BoxingClubPerformanceAccessor) ByID(identifier float64) (BoxingClubPerformance, error) {
	if a._dataID == nil {
		err := a.LoadData()
		if err != nil {
			return BoxingClubPerformance{}, err
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}
