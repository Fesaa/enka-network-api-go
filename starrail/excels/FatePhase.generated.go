package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type FatePhase struct {
	BMEMPFCHPGF []string     `json:"BMEMPFCHPGF"`
	DGHHNLLAIFA float64      `json:"DGHHNLLAIFA"`
	FDJDFGBFJGA []hash.Value `json:"FDJDFGBFJGA"`
	FFPOIOOMCIN float64      `json:"FFPOIOOMCIN"`
	JEJOAGIJNFD float64      `json:"JEJOAGIJNFD"`
	JGNACPEMHBA float64      `json:"JGNACPEMHBA"`
	JJPBDDOLEBE float64      `json:"JJPBDDOLEBE"`
	LLPHAEGDDMG []hash.Value `json:"LLPHAEGDDMG"`
	PLLEHEKEIIE float64      `json:"PLLEHEKEIIE"`
}
type FatePhaseAccessor struct {
	_data            []FatePhase
	_dataDGHHNLLAIFA map[float64]FatePhase
	_dataJEJOAGIJNFD map[float64]FatePhase
	_dataJGNACPEMHBA map[float64]FatePhase
	_dataJJPBDDOLEBE map[float64]FatePhase
	_dataPLLEHEKEIIE map[float64]FatePhase
}

// LoadData retrieves the data. Must be called before FatePhase.GroupData
func (a *FatePhaseAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/FatePhase.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *FatePhaseAccessor) Raw() ([]FatePhase, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []FatePhase{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with FatePhaseAccessor.LoadData to preload everything
func (a *FatePhaseAccessor) GroupData() {
	a._dataDGHHNLLAIFA = map[float64]FatePhase{}
	a._dataJEJOAGIJNFD = map[float64]FatePhase{}
	a._dataJGNACPEMHBA = map[float64]FatePhase{}
	a._dataJJPBDDOLEBE = map[float64]FatePhase{}
	a._dataPLLEHEKEIIE = map[float64]FatePhase{}
	for _, d := range a._data {
		a._dataDGHHNLLAIFA[d.DGHHNLLAIFA] = d
		a._dataJEJOAGIJNFD[d.JEJOAGIJNFD] = d
		a._dataJGNACPEMHBA[d.JGNACPEMHBA] = d
		a._dataJJPBDDOLEBE[d.JJPBDDOLEBE] = d
		a._dataPLLEHEKEIIE[d.PLLEHEKEIIE] = d
	}
}

// ByDGHHNLLAIFA returns the FatePhase uniquely identified by DGHHNLLAIFA
//
// Error is only non-nil if the source errors out
func (a *FatePhaseAccessor) ByDGHHNLLAIFA(identifier float64) (FatePhase, error) {
	if a._dataDGHHNLLAIFA == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FatePhase{}, err
			}
		}
		a.GroupData()
	}
	return a._dataDGHHNLLAIFA[identifier], nil
}

// ByJEJOAGIJNFD returns the FatePhase uniquely identified by JEJOAGIJNFD
//
// Error is only non-nil if the source errors out
func (a *FatePhaseAccessor) ByJEJOAGIJNFD(identifier float64) (FatePhase, error) {
	if a._dataJEJOAGIJNFD == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FatePhase{}, err
			}
		}
		a.GroupData()
	}
	return a._dataJEJOAGIJNFD[identifier], nil
}

// ByJGNACPEMHBA returns the FatePhase uniquely identified by JGNACPEMHBA
//
// Error is only non-nil if the source errors out
func (a *FatePhaseAccessor) ByJGNACPEMHBA(identifier float64) (FatePhase, error) {
	if a._dataJGNACPEMHBA == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FatePhase{}, err
			}
		}
		a.GroupData()
	}
	return a._dataJGNACPEMHBA[identifier], nil
}

// ByJJPBDDOLEBE returns the FatePhase uniquely identified by JJPBDDOLEBE
//
// Error is only non-nil if the source errors out
func (a *FatePhaseAccessor) ByJJPBDDOLEBE(identifier float64) (FatePhase, error) {
	if a._dataJJPBDDOLEBE == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FatePhase{}, err
			}
		}
		a.GroupData()
	}
	return a._dataJJPBDDOLEBE[identifier], nil
}

// ByPLLEHEKEIIE returns the FatePhase uniquely identified by PLLEHEKEIIE
//
// Error is only non-nil if the source errors out
func (a *FatePhaseAccessor) ByPLLEHEKEIIE(identifier float64) (FatePhase, error) {
	if a._dataPLLEHEKEIIE == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FatePhase{}, err
			}
		}
		a.GroupData()
	}
	return a._dataPLLEHEKEIIE[identifier], nil
}
