package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type ClockParkCheckPoint struct {
	CheckFailTextList []hash.Hash `json:"CheckFailTextList"`
	CheckParam1       float64     `json:"CheckParam1"`
	CheckParam2       float64     `json:"CheckParam2"`
	CheckParam3       float64     `json:"CheckParam3"`
	CheckPoint        hash.Hash   `json:"CheckPoint"`
	CheckPointID      float64     `json:"CheckPointID"`
	CheckPointType    string      `json:"CheckPointType"`
	CheckWinTextList  []hash.Hash `json:"CheckWinTextList"`
}
type ClockParkCheckPointAccessor struct {
	_data             []ClockParkCheckPoint
	_dataCheckPointID map[float64]ClockParkCheckPoint
}

// LoadData retrieves the data. Must be called before ClockParkCheckPoint.GroupData
func (a *ClockParkCheckPointAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ClockParkCheckPoint.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ClockParkCheckPointAccessor) Raw() ([]ClockParkCheckPoint, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ClockParkCheckPoint{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ClockParkCheckPointAccessor.LoadData to preload everything
func (a *ClockParkCheckPointAccessor) GroupData() {
	for _, d := range a._data {
		a._dataCheckPointID[d.CheckPointID] = d
	}
}

// ByCheckPointID returns the ClockParkCheckPoint uniquely identified by CheckPointID
//
// Error is only non-nil if the source errors out
func (a *ClockParkCheckPointAccessor) ByCheckPointID(identifier float64) (ClockParkCheckPoint, error) {
	if a._dataCheckPointID == nil {
		err := a.LoadData()
		if err != nil {
			return ClockParkCheckPoint{}, err
		}
		a.GroupData()
	}
	return a._dataCheckPointID[identifier], nil
}
