package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type TeamLimitTypeEvent struct {
	LimitDesc map[string]json.Number `json:"LimitDesc"`
	LimitType string                 `json:"LimitType"`
	ToastDesc map[string]json.Number `json:"ToastDesc"`
}
type TeamLimitTypeEventAccessor struct {
	_data          []TeamLimitTypeEvent
	_dataLimitType map[string]TeamLimitTypeEvent
}

// LoadData retrieves the data. Must be called before TeamLimitTypeEvent.GroupData
func (a *TeamLimitTypeEventAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/TeamLimitTypeEvent.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *TeamLimitTypeEventAccessor) Raw() ([]TeamLimitTypeEvent, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []TeamLimitTypeEvent{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with TeamLimitTypeEventAccessor.LoadData to preload everything
func (a *TeamLimitTypeEventAccessor) GroupData() {
	a._dataLimitType = map[string]TeamLimitTypeEvent{}
	for _, d := range a._data {
		a._dataLimitType[d.LimitType] = d
	}
}

// ByLimitType returns the TeamLimitTypeEvent uniquely identified by LimitType
//
// Error is only non-nil if the source errors out
func (a *TeamLimitTypeEventAccessor) ByLimitType(identifier string) (TeamLimitTypeEvent, error) {
	if a._dataLimitType == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return TeamLimitTypeEvent{}, err
			}
		}
		a.GroupData()
	}
	return a._dataLimitType[identifier], nil
}
