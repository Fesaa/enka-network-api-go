package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type MuseumTarget struct {
	MuseumMissionList []float64 `json:"MuseumMissionList"`
	Order             float64   `json:"Order"`
	RewardType        string    `json:"RewardType"`
	TargetID          float64   `json:"TargetID"`
	TriggerPhase      float64   `json:"TriggerPhase"`
	TriggerTurns      float64   `json:"TriggerTurns"`
	TypeParameter     float64   `json:"TypeParameter"`
}
type MuseumTargetAccessor struct {
	_data              []MuseumTarget
	_dataOrder         map[float64]MuseumTarget
	_dataTargetID      map[float64]MuseumTarget
	_dataTypeParameter map[float64]MuseumTarget
}

// LoadData retrieves the data. Must be called before MuseumTarget.GroupData
func (a *MuseumTargetAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MuseumTarget.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MuseumTargetAccessor) Raw() ([]MuseumTarget, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MuseumTarget{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MuseumTargetAccessor.LoadData to preload everything
func (a *MuseumTargetAccessor) GroupData() {
	a._dataOrder = map[float64]MuseumTarget{}
	a._dataTargetID = map[float64]MuseumTarget{}
	a._dataTypeParameter = map[float64]MuseumTarget{}
	for _, d := range a._data {
		a._dataOrder[d.Order] = d
		a._dataTargetID[d.TargetID] = d
		a._dataTypeParameter[d.TypeParameter] = d
	}
}

// ByOrder returns the MuseumTarget uniquely identified by Order
//
// Error is only non-nil if the source errors out
func (a *MuseumTargetAccessor) ByOrder(identifier float64) (MuseumTarget, error) {
	if a._dataOrder == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MuseumTarget{}, err
			}
		}
		a.GroupData()
	}
	return a._dataOrder[identifier], nil
}

// ByTargetID returns the MuseumTarget uniquely identified by TargetID
//
// Error is only non-nil if the source errors out
func (a *MuseumTargetAccessor) ByTargetID(identifier float64) (MuseumTarget, error) {
	if a._dataTargetID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MuseumTarget{}, err
			}
		}
		a.GroupData()
	}
	return a._dataTargetID[identifier], nil
}

// ByTypeParameter returns the MuseumTarget uniquely identified by TypeParameter
//
// Error is only non-nil if the source errors out
func (a *MuseumTargetAccessor) ByTypeParameter(identifier float64) (MuseumTarget, error) {
	if a._dataTypeParameter == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MuseumTarget{}, err
			}
		}
		a.GroupData()
	}
	return a._dataTypeParameter[identifier], nil
}
