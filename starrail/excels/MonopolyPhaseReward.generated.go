package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type MonopolyPhaseReward struct {
	PhaseRewardID float64 `json:"PhaseRewardID"`
	ProgressValue float64 `json:"ProgressValue"`
	RewardID      float64 `json:"RewardID"`
}
type MonopolyPhaseRewardAccessor struct {
	_data              []MonopolyPhaseReward
	_dataPhaseRewardID map[float64]MonopolyPhaseReward
	_dataProgressValue map[float64]MonopolyPhaseReward
	_dataRewardID      map[float64]MonopolyPhaseReward
}

// LoadData retrieves the data. Must be called before MonopolyPhaseReward.GroupData
func (a *MonopolyPhaseRewardAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MonopolyPhaseReward.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MonopolyPhaseRewardAccessor) Raw() ([]MonopolyPhaseReward, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MonopolyPhaseReward{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MonopolyPhaseRewardAccessor.LoadData to preload everything
func (a *MonopolyPhaseRewardAccessor) GroupData() {
	for _, d := range a._data {
		a._dataPhaseRewardID[d.PhaseRewardID] = d
		a._dataProgressValue[d.ProgressValue] = d
		a._dataRewardID[d.RewardID] = d
	}
}

// ByPhaseRewardID returns the MonopolyPhaseReward uniquely identified by PhaseRewardID
//
// Error is only non-nil if the source errors out
func (a *MonopolyPhaseRewardAccessor) ByPhaseRewardID(identifier float64) (MonopolyPhaseReward, error) {
	if a._dataPhaseRewardID == nil {
		err := a.LoadData()
		if err != nil {
			return MonopolyPhaseReward{}, err
		}
		a.GroupData()
	}
	return a._dataPhaseRewardID[identifier], nil
}

// ByProgressValue returns the MonopolyPhaseReward uniquely identified by ProgressValue
//
// Error is only non-nil if the source errors out
func (a *MonopolyPhaseRewardAccessor) ByProgressValue(identifier float64) (MonopolyPhaseReward, error) {
	if a._dataProgressValue == nil {
		err := a.LoadData()
		if err != nil {
			return MonopolyPhaseReward{}, err
		}
		a.GroupData()
	}
	return a._dataProgressValue[identifier], nil
}

// ByRewardID returns the MonopolyPhaseReward uniquely identified by RewardID
//
// Error is only non-nil if the source errors out
func (a *MonopolyPhaseRewardAccessor) ByRewardID(identifier float64) (MonopolyPhaseReward, error) {
	if a._dataRewardID == nil {
		err := a.LoadData()
		if err != nil {
			return MonopolyPhaseReward{}, err
		}
		a.GroupData()
	}
	return a._dataRewardID[identifier], nil
}
