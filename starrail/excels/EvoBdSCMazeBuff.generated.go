package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type EvoBdSCMazeBuff struct {
	BuffDesc            hash.Hash    `json:"BuffDesc"`
	BuffDescBattle      hash.Hash    `json:"BuffDescBattle"`
	BuffEffect          string       `json:"BuffEffect"`
	BuffIcon            string       `json:"BuffIcon"`
	BuffName            hash.Hash    `json:"BuffName"`
	BuffRarity          float64      `json:"BuffRarity"`
	BuffSeries          float64      `json:"BuffSeries"`
	BuffSimpleDesc      hash.Hash    `json:"BuffSimpleDesc"`
	ID                  float64      `json:"ID"`
	InBattleBindingKey  string       `json:"InBattleBindingKey"`
	InBattleBindingType string       `json:"InBattleBindingType"`
	Lv                  float64      `json:"Lv"`
	LvMax               float64      `json:"LvMax"`
	MazeBuffIconType    string       `json:"MazeBuffIconType"`
	MazeBuffType        string       `json:"MazeBuffType"`
	ModifierName        string       `json:"ModifierName"`
	ParamList           []hash.Value `json:"ParamList"`
}
type EvoBdSCMazeBuffAccessor struct {
	_data []EvoBdSCMazeBuff
}

// LoadData retrieves the data. Must be called before EvoBdSCMazeBuff.GroupData
func (a *EvoBdSCMazeBuffAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/EvoBdSCMazeBuff.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *EvoBdSCMazeBuffAccessor) Raw() ([]EvoBdSCMazeBuff, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []EvoBdSCMazeBuff{}, err
		}
	}
	return a._data, nil
}
