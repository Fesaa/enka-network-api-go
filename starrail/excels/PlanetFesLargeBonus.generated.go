package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type PlanetFesLargeBonus struct {
	ActivityRewardID float64                      `json:"ActivityRewardID"`
	BaseIncome       float64                      `json:"BaseIncome"`
	ComboIncome      float64                      `json:"ComboIncome"`
	Duration         float64                      `json:"Duration"`
	ID               float64                      `json:"ID"`
	TapCD            float64                      `json:"TapCD"`
	TapIncome        PlanetFesLargeBonusTapIncome `json:"TapIncome"`
	TimePerSecond    float64                      `json:"TimePerSecond"`
	UnlockIDList     []interface{}                `json:"UnlockIDList"`
}
type PlanetFesLargeBonusTapIncome struct {
	Lower float64 `json:"Lower"`
	Upper float64 `json:"Upper"`
}
type PlanetFesLargeBonusAccessor struct {
	_data                 []PlanetFesLargeBonus
	_dataID               map[float64]PlanetFesLargeBonus
	_dataActivityRewardID map[float64]PlanetFesLargeBonus
}

// LoadData retrieves the data. Must be called before PlanetFesLargeBonus.GroupData
func (a *PlanetFesLargeBonusAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/PlanetFesLargeBonus.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *PlanetFesLargeBonusAccessor) Raw() ([]PlanetFesLargeBonus, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []PlanetFesLargeBonus{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with PlanetFesLargeBonusAccessor.LoadData to preload everything
func (a *PlanetFesLargeBonusAccessor) GroupData() {
	for _, d := range a._data {
		a._dataID[d.ID] = d
		a._dataActivityRewardID[d.ActivityRewardID] = d
	}
}

// ByID returns the PlanetFesLargeBonus uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *PlanetFesLargeBonusAccessor) ByID(identifier float64) (PlanetFesLargeBonus, error) {
	if a._dataID == nil {
		err := a.LoadData()
		if err != nil {
			return PlanetFesLargeBonus{}, err
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}

// ByActivityRewardID returns the PlanetFesLargeBonus uniquely identified by ActivityRewardID
//
// Error is only non-nil if the source errors out
func (a *PlanetFesLargeBonusAccessor) ByActivityRewardID(identifier float64) (PlanetFesLargeBonus, error) {
	if a._dataActivityRewardID == nil {
		err := a.LoadData()
		if err != nil {
			return PlanetFesLargeBonus{}, err
		}
		a.GroupData()
	}
	return a._dataActivityRewardID[identifier], nil
}
