package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type ActivityQuestTimeLimitGroup struct {
	ActivityID            float64   `json:"ActivityID"`
	ActivityModuleID      float64   `json:"ActivityModuleID"`
	EnName                hash.Hash `json:"EnName"`
	FigurePath            string    `json:"FigurePath"`
	Name                  hash.Hash `json:"Name"`
	QuestList             []float64 `json:"QuestList"`
	QuestTimeLimitGroupID float64   `json:"QuestTimeLimitGroupID"`
	UIPanelType           string    `json:"UIPanelType"`
}
type ActivityQuestTimeLimitGroupAccessor struct {
	_data                      []ActivityQuestTimeLimitGroup
	_dataFigurePath            map[string]ActivityQuestTimeLimitGroup
	_dataQuestTimeLimitGroupID map[float64]ActivityQuestTimeLimitGroup
	_dataUIPanelType           map[string]ActivityQuestTimeLimitGroup
}

// LoadData retrieves the data. Must be called before ActivityQuestTimeLimitGroup.GroupData
func (a *ActivityQuestTimeLimitGroupAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ActivityQuestTimeLimitGroup.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ActivityQuestTimeLimitGroupAccessor) Raw() ([]ActivityQuestTimeLimitGroup, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ActivityQuestTimeLimitGroup{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ActivityQuestTimeLimitGroupAccessor.LoadData to preload everything
func (a *ActivityQuestTimeLimitGroupAccessor) GroupData() {
	for _, d := range a._data {
		a._dataFigurePath[d.FigurePath] = d
		a._dataQuestTimeLimitGroupID[d.QuestTimeLimitGroupID] = d
		a._dataUIPanelType[d.UIPanelType] = d
	}
}

// ByFigurePath returns the ActivityQuestTimeLimitGroup uniquely identified by FigurePath
//
// Error is only non-nil if the source errors out
func (a *ActivityQuestTimeLimitGroupAccessor) ByFigurePath(identifier string) (ActivityQuestTimeLimitGroup, error) {
	if a._dataFigurePath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityQuestTimeLimitGroup{}, err
			}
		}
		a.GroupData()
	}
	return a._dataFigurePath[identifier], nil
}

// ByQuestTimeLimitGroupID returns the ActivityQuestTimeLimitGroup uniquely identified by QuestTimeLimitGroupID
//
// Error is only non-nil if the source errors out
func (a *ActivityQuestTimeLimitGroupAccessor) ByQuestTimeLimitGroupID(identifier float64) (ActivityQuestTimeLimitGroup, error) {
	if a._dataQuestTimeLimitGroupID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityQuestTimeLimitGroup{}, err
			}
		}
		a.GroupData()
	}
	return a._dataQuestTimeLimitGroupID[identifier], nil
}

// ByUIPanelType returns the ActivityQuestTimeLimitGroup uniquely identified by UIPanelType
//
// Error is only non-nil if the source errors out
func (a *ActivityQuestTimeLimitGroupAccessor) ByUIPanelType(identifier string) (ActivityQuestTimeLimitGroup, error) {
	if a._dataUIPanelType == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityQuestTimeLimitGroup{}, err
			}
		}
		a.GroupData()
	}
	return a._dataUIPanelType[identifier], nil
}
