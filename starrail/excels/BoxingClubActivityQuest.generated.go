package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type BoxingClubActivityQuest struct {
	ChallengeID json.Number   `json:"ChallengeID"`
	ID          json.Number   `json:"ID"`
	Name        string        `json:"Name"`
	QuestList   []json.Number `json:"QuestList"`
}
type BoxingClubActivityQuestAccessor struct {
	_data     []BoxingClubActivityQuest
	_dataName map[string]BoxingClubActivityQuest
}

// LoadData retrieves the data. Must be called before BoxingClubActivityQuest.GroupData
func (a *BoxingClubActivityQuestAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/BoxingClubActivityQuest.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *BoxingClubActivityQuestAccessor) Raw() ([]BoxingClubActivityQuest, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []BoxingClubActivityQuest{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with BoxingClubActivityQuestAccessor.LoadData to preload everything
func (a *BoxingClubActivityQuestAccessor) GroupData() {
	a._dataName = map[string]BoxingClubActivityQuest{}
	for _, d := range a._data {
		a._dataName[d.Name] = d
	}
}

// ByName returns the BoxingClubActivityQuest uniquely identified by Name
//
// Error is only non-nil if the source errors out
func (a *BoxingClubActivityQuestAccessor) ByName(identifier string) (BoxingClubActivityQuest, error) {
	if a._dataName == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return BoxingClubActivityQuest{}, err
			}
		}
		a.GroupData()
	}
	return a._dataName[identifier], nil
}
