package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type FateHandbookMaster struct {
	ADAGFHGEKLD string    `json:"ADAGFHGEKLD"`
	BBKCBCEPIOM string    `json:"BBKCBCEPIOM"`
	DBCLBBIMBMH string    `json:"DBCLBBIMBMH"`
	DJPCAIKIONP float64   `json:"DJPCAIKIONP"`
	DOABCFJBMKF hash.Hash `json:"DOABCFJBMKF"`
	ENDKMFOBHNF string    `json:"ENDKMFOBHNF"`
	FGGIOCENNIA hash.Hash `json:"FGGIOCENNIA"`
	HLGENJMDFOC string    `json:"HLGENJMDFOC"`
	JFKAKNNMABK string    `json:"JFKAKNNMABK"`
	JJEMFAIELFN string    `json:"JJEMFAIELFN"`
	NIMEAIDLEAA hash.Hash `json:"NIMEAIDLEAA"`
}
type FateHandbookMasterAccessor struct {
	_data            []FateHandbookMaster
	_dataDJPCAIKIONP map[float64]FateHandbookMaster
	_dataJFKAKNNMABK map[string]FateHandbookMaster
}

// LoadData retrieves the data. Must be called before FateHandbookMaster.GroupData
func (a *FateHandbookMasterAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/FateHandbookMaster.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *FateHandbookMasterAccessor) Raw() ([]FateHandbookMaster, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []FateHandbookMaster{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with FateHandbookMasterAccessor.LoadData to preload everything
func (a *FateHandbookMasterAccessor) GroupData() {
	a._dataDJPCAIKIONP = map[float64]FateHandbookMaster{}
	a._dataJFKAKNNMABK = map[string]FateHandbookMaster{}
	for _, d := range a._data {
		a._dataDJPCAIKIONP[d.DJPCAIKIONP] = d
		a._dataJFKAKNNMABK[d.JFKAKNNMABK] = d
	}
}

// ByDJPCAIKIONP returns the FateHandbookMaster uniquely identified by DJPCAIKIONP
//
// Error is only non-nil if the source errors out
func (a *FateHandbookMasterAccessor) ByDJPCAIKIONP(identifier float64) (FateHandbookMaster, error) {
	if a._dataDJPCAIKIONP == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FateHandbookMaster{}, err
			}
		}
		a.GroupData()
	}
	return a._dataDJPCAIKIONP[identifier], nil
}

// ByJFKAKNNMABK returns the FateHandbookMaster uniquely identified by JFKAKNNMABK
//
// Error is only non-nil if the source errors out
func (a *FateHandbookMasterAccessor) ByJFKAKNNMABK(identifier string) (FateHandbookMaster, error) {
	if a._dataJFKAKNNMABK == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FateHandbookMaster{}, err
			}
		}
		a.GroupData()
	}
	return a._dataJFKAKNNMABK[identifier], nil
}
