package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type BookSeriesWorld struct {
	BookSeriesWorld               json.Number            `json:"BookSeriesWorld"`
	BookSeriesWorldBackgroundPath string                 `json:"BookSeriesWorldBackgroundPath"`
	BookSeriesWorldIconPath       string                 `json:"BookSeriesWorldIconPath"`
	BookSeriesWorldTextmapID      map[string]json.Number `json:"BookSeriesWorldTextmapID"`
}
type BookSeriesWorldAccessor struct {
	_data                              []BookSeriesWorld
	_dataBookSeriesWorld               map[json.Number]BookSeriesWorld
	_dataBookSeriesWorldBackgroundPath map[string]BookSeriesWorld
	_dataBookSeriesWorldIconPath       map[string]BookSeriesWorld
}

// LoadData retrieves the data. Must be called before BookSeriesWorld.GroupData
func (a *BookSeriesWorldAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/BookSeriesWorld.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *BookSeriesWorldAccessor) Raw() ([]BookSeriesWorld, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []BookSeriesWorld{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with BookSeriesWorldAccessor.LoadData to preload everything
func (a *BookSeriesWorldAccessor) GroupData() {
	a._dataBookSeriesWorld = map[json.Number]BookSeriesWorld{}
	a._dataBookSeriesWorldBackgroundPath = map[string]BookSeriesWorld{}
	a._dataBookSeriesWorldIconPath = map[string]BookSeriesWorld{}
	for _, d := range a._data {
		a._dataBookSeriesWorld[d.BookSeriesWorld] = d
		a._dataBookSeriesWorldBackgroundPath[d.BookSeriesWorldBackgroundPath] = d
		a._dataBookSeriesWorldIconPath[d.BookSeriesWorldIconPath] = d
	}
}

// ByBookSeriesWorld returns the BookSeriesWorld uniquely identified by BookSeriesWorld
//
// Error is only non-nil if the source errors out
func (a *BookSeriesWorldAccessor) ByBookSeriesWorld(identifier json.Number) (BookSeriesWorld, error) {
	if a._dataBookSeriesWorld == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return BookSeriesWorld{}, err
			}
		}
		a.GroupData()
	}
	return a._dataBookSeriesWorld[identifier], nil
}

// ByBookSeriesWorldBackgroundPath returns the BookSeriesWorld uniquely identified by BookSeriesWorldBackgroundPath
//
// Error is only non-nil if the source errors out
func (a *BookSeriesWorldAccessor) ByBookSeriesWorldBackgroundPath(identifier string) (BookSeriesWorld, error) {
	if a._dataBookSeriesWorldBackgroundPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return BookSeriesWorld{}, err
			}
		}
		a.GroupData()
	}
	return a._dataBookSeriesWorldBackgroundPath[identifier], nil
}

// ByBookSeriesWorldIconPath returns the BookSeriesWorld uniquely identified by BookSeriesWorldIconPath
//
// Error is only non-nil if the source errors out
func (a *BookSeriesWorldAccessor) ByBookSeriesWorldIconPath(identifier string) (BookSeriesWorld, error) {
	if a._dataBookSeriesWorldIconPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return BookSeriesWorld{}, err
			}
		}
		a.GroupData()
	}
	return a._dataBookSeriesWorldIconPath[identifier], nil
}
