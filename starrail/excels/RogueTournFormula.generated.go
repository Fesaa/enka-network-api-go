package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type RogueTournFormula struct {
	FormulaCategory  string      `json:"FormulaCategory"`
	FormulaDisplayID json.Number `json:"FormulaDisplayID"`
	FormulaID        json.Number `json:"FormulaID"`
	FormulaStoryJson string      `json:"FormulaStoryJson"`
	IsInHandbook     bool        `json:"IsInHandbook"`
	MainBuffNum      json.Number `json:"MainBuffNum"`
	MainBuffTypeID   json.Number `json:"MainBuffTypeID"`
	MazeBuffID       json.Number `json:"MazeBuffID"`
	SubBuffNum       json.Number `json:"SubBuffNum"`
	SubBuffTypeID    json.Number `json:"SubBuffTypeID"`
	TournMode        string      `json:"TournMode"`
}
type RogueTournFormulaAccessor struct {
	_data []RogueTournFormula
}

// LoadData retrieves the data. Must be called before RogueTournFormula.GroupData
func (a *RogueTournFormulaAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueTournFormula.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueTournFormulaAccessor) Raw() ([]RogueTournFormula, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueTournFormula{}, err
		}
	}
	return a._data, nil
}
