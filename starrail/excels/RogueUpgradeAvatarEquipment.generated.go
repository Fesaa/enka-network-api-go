package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type RogueUpgradeAvatarEquipment struct {
	AvatarBaseType string      `json:"AvatarBaseType"`
	EquipmentID    json.Number `json:"EquipmentID"`
}
type RogueUpgradeAvatarEquipmentAccessor struct {
	_data               []RogueUpgradeAvatarEquipment
	_dataAvatarBaseType map[string]RogueUpgradeAvatarEquipment
	_dataEquipmentID    map[json.Number]RogueUpgradeAvatarEquipment
}

// LoadData retrieves the data. Must be called before RogueUpgradeAvatarEquipment.GroupData
func (a *RogueUpgradeAvatarEquipmentAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueUpgradeAvatarEquipment.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueUpgradeAvatarEquipmentAccessor) Raw() ([]RogueUpgradeAvatarEquipment, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueUpgradeAvatarEquipment{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueUpgradeAvatarEquipmentAccessor.LoadData to preload everything
func (a *RogueUpgradeAvatarEquipmentAccessor) GroupData() {
	a._dataAvatarBaseType = map[string]RogueUpgradeAvatarEquipment{}
	a._dataEquipmentID = map[json.Number]RogueUpgradeAvatarEquipment{}
	for _, d := range a._data {
		a._dataAvatarBaseType[d.AvatarBaseType] = d
		a._dataEquipmentID[d.EquipmentID] = d
	}
}

// ByAvatarBaseType returns the RogueUpgradeAvatarEquipment uniquely identified by AvatarBaseType
//
// Error is only non-nil if the source errors out
func (a *RogueUpgradeAvatarEquipmentAccessor) ByAvatarBaseType(identifier string) (RogueUpgradeAvatarEquipment, error) {
	if a._dataAvatarBaseType == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueUpgradeAvatarEquipment{}, err
			}
		}
		a.GroupData()
	}
	return a._dataAvatarBaseType[identifier], nil
}

// ByEquipmentID returns the RogueUpgradeAvatarEquipment uniquely identified by EquipmentID
//
// Error is only non-nil if the source errors out
func (a *RogueUpgradeAvatarEquipmentAccessor) ByEquipmentID(identifier json.Number) (RogueUpgradeAvatarEquipment, error) {
	if a._dataEquipmentID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueUpgradeAvatarEquipment{}, err
			}
		}
		a.GroupData()
	}
	return a._dataEquipmentID[identifier], nil
}
