package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type ActivityRewardPunkLord struct {
	RewardID        json.Number            `json:"RewardID"`
	RewardLevel     json.Number            `json:"RewardLevel"`
	RewardLevelName map[string]json.Number `json:"RewardLevelName"`
	RewardPoint     json.Number            `json:"RewardPoint"`
}
type ActivityRewardPunkLordAccessor struct {
	_data            []ActivityRewardPunkLord
	_dataRewardID    map[json.Number]ActivityRewardPunkLord
	_dataRewardLevel map[json.Number]ActivityRewardPunkLord
	_dataRewardPoint map[json.Number]ActivityRewardPunkLord
}

// LoadData retrieves the data. Must be called before ActivityRewardPunkLord.GroupData
func (a *ActivityRewardPunkLordAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ActivityRewardPunkLord.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ActivityRewardPunkLordAccessor) Raw() ([]ActivityRewardPunkLord, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ActivityRewardPunkLord{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ActivityRewardPunkLordAccessor.LoadData to preload everything
func (a *ActivityRewardPunkLordAccessor) GroupData() {
	a._dataRewardID = map[json.Number]ActivityRewardPunkLord{}
	a._dataRewardLevel = map[json.Number]ActivityRewardPunkLord{}
	a._dataRewardPoint = map[json.Number]ActivityRewardPunkLord{}
	for _, d := range a._data {
		a._dataRewardID[d.RewardID] = d
		a._dataRewardLevel[d.RewardLevel] = d
		a._dataRewardPoint[d.RewardPoint] = d
	}
}

// ByRewardID returns the ActivityRewardPunkLord uniquely identified by RewardID
//
// Error is only non-nil if the source errors out
func (a *ActivityRewardPunkLordAccessor) ByRewardID(identifier json.Number) (ActivityRewardPunkLord, error) {
	if a._dataRewardID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityRewardPunkLord{}, err
			}
		}
		a.GroupData()
	}
	return a._dataRewardID[identifier], nil
}

// ByRewardLevel returns the ActivityRewardPunkLord uniquely identified by RewardLevel
//
// Error is only non-nil if the source errors out
func (a *ActivityRewardPunkLordAccessor) ByRewardLevel(identifier json.Number) (ActivityRewardPunkLord, error) {
	if a._dataRewardLevel == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityRewardPunkLord{}, err
			}
		}
		a.GroupData()
	}
	return a._dataRewardLevel[identifier], nil
}

// ByRewardPoint returns the ActivityRewardPunkLord uniquely identified by RewardPoint
//
// Error is only non-nil if the source errors out
func (a *ActivityRewardPunkLordAccessor) ByRewardPoint(identifier json.Number) (ActivityRewardPunkLord, error) {
	if a._dataRewardPoint == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityRewardPunkLord{}, err
			}
		}
		a.GroupData()
	}
	return a._dataRewardPoint[identifier], nil
}
