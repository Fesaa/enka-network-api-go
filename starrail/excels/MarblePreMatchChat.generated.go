package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type MarblePreMatchChat struct {
	MatchID    json.Number   `json:"MatchID"`
	SealID     json.Number   `json:"SealID"`
	TalkIDList []json.Number `json:"TalkIDList"`
}
type MarblePreMatchChatAccessor struct {
	_data        []MarblePreMatchChat
	_dataMatchID map[json.Number]MarblePreMatchChat
	_dataSealID  map[json.Number]MarblePreMatchChat
}

// LoadData retrieves the data. Must be called before MarblePreMatchChat.GroupData
func (a *MarblePreMatchChatAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MarblePreMatchChat.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MarblePreMatchChatAccessor) Raw() ([]MarblePreMatchChat, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MarblePreMatchChat{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MarblePreMatchChatAccessor.LoadData to preload everything
func (a *MarblePreMatchChatAccessor) GroupData() {
	a._dataMatchID = map[json.Number]MarblePreMatchChat{}
	a._dataSealID = map[json.Number]MarblePreMatchChat{}
	for _, d := range a._data {
		a._dataMatchID[d.MatchID] = d
		a._dataSealID[d.SealID] = d
	}
}

// ByMatchID returns the MarblePreMatchChat uniquely identified by MatchID
//
// Error is only non-nil if the source errors out
func (a *MarblePreMatchChatAccessor) ByMatchID(identifier json.Number) (MarblePreMatchChat, error) {
	if a._dataMatchID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MarblePreMatchChat{}, err
			}
		}
		a.GroupData()
	}
	return a._dataMatchID[identifier], nil
}

// BySealID returns the MarblePreMatchChat uniquely identified by SealID
//
// Error is only non-nil if the source errors out
func (a *MarblePreMatchChatAccessor) BySealID(identifier json.Number) (MarblePreMatchChat, error) {
	if a._dataSealID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MarblePreMatchChat{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSealID[identifier], nil
}
