package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type MonsterSkillConfig struct {
	AICD              json.Number              `json:"AI_CD"`
	AIICD             json.Number              `json:"AI_ICD"`
	AttackType        string                   `json:"AttackType"`
	DamageType        string                   `json:"DamageType"`
	DelayRatio        map[string]json.Number   `json:"DelayRatio"`
	ExtraEffectIDList []json.Number            `json:"ExtraEffectIDList"`
	IconPath          string                   `json:"IconPath"`
	IsThreat          bool                     `json:"IsThreat"`
	ModifierList      []string                 `json:"ModifierList"`
	ParamList         []map[string]json.Number `json:"ParamList"`
	PhaseList         []json.Number            `json:"PhaseList"`
	SPHitBase         map[string]json.Number   `json:"SPHitBase"`
	SkillDesc         map[string]json.Number   `json:"SkillDesc"`
	SkillID           json.Number              `json:"SkillID"`
	SkillName         map[string]json.Number   `json:"SkillName"`
	SkillTag          map[string]json.Number   `json:"SkillTag"`
	SkillTriggerKey   string                   `json:"SkillTriggerKey"`
	SkillTypeDesc     map[string]json.Number   `json:"SkillTypeDesc"`
}
type MonsterSkillConfigAccessor struct {
	_data        []MonsterSkillConfig
	_dataSkillID map[json.Number]MonsterSkillConfig
}

// LoadData retrieves the data. Must be called before MonsterSkillConfig.GroupData
func (a *MonsterSkillConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MonsterSkillConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MonsterSkillConfigAccessor) Raw() ([]MonsterSkillConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MonsterSkillConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MonsterSkillConfigAccessor.LoadData to preload everything
func (a *MonsterSkillConfigAccessor) GroupData() {
	a._dataSkillID = map[json.Number]MonsterSkillConfig{}
	for _, d := range a._data {
		a._dataSkillID[d.SkillID] = d
	}
}

// BySkillID returns the MonsterSkillConfig uniquely identified by SkillID
//
// Error is only non-nil if the source errors out
func (a *MonsterSkillConfigAccessor) BySkillID(identifier json.Number) (MonsterSkillConfig, error) {
	if a._dataSkillID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MonsterSkillConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSkillID[identifier], nil
}
