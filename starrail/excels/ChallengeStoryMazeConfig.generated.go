package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type ChallengeStoryMazeConfig struct {
	ChallengeTargetID  []float64     `json:"ChallengeTargetID"`
	ConfigList1        []float64     `json:"ConfigList1"`
	ConfigList2        []float64     `json:"ConfigList2"`
	DamageType1        []string      `json:"DamageType1"`
	DamageType2        []string      `json:"DamageType2"`
	EventIDList1       []float64     `json:"EventIDList1"`
	EventIDList2       []float64     `json:"EventIDList2"`
	Floor              float64       `json:"Floor"`
	GroupID            float64       `json:"GroupID"`
	ID                 float64       `json:"ID"`
	MapEntranceID      float64       `json:"MapEntranceID"`
	MapEntranceID2     float64       `json:"MapEntranceID2"`
	MazeBuffID         float64       `json:"MazeBuffID"`
	MazeGroupID1       float64       `json:"MazeGroupID1"`
	MazeGroupID2       float64       `json:"MazeGroupID2"`
	MonsterID1         []interface{} `json:"MonsterID1"`
	MonsterID2         []interface{} `json:"MonsterID2"`
	Name               hash.Hash     `json:"Name"`
	NpcMonsterIDList1  []float64     `json:"NpcMonsterIDList1"`
	NpcMonsterIDList2  []float64     `json:"NpcMonsterIDList2"`
	PreChallengeMazeID float64       `json:"PreChallengeMazeID"`
	RewardID           float64       `json:"RewardID"`
	StageNum           float64       `json:"StageNum"`
}
type ChallengeStoryMazeConfigAccessor struct {
	_data   []ChallengeStoryMazeConfig
	_dataID map[float64]ChallengeStoryMazeConfig
}

// LoadData retrieves the data. Must be called before ChallengeStoryMazeConfig.GroupData
func (a *ChallengeStoryMazeConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ChallengeStoryMazeConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ChallengeStoryMazeConfigAccessor) Raw() ([]ChallengeStoryMazeConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ChallengeStoryMazeConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ChallengeStoryMazeConfigAccessor.LoadData to preload everything
func (a *ChallengeStoryMazeConfigAccessor) GroupData() {
	for _, d := range a._data {
		a._dataID[d.ID] = d
	}
}

// ByID returns the ChallengeStoryMazeConfig uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *ChallengeStoryMazeConfigAccessor) ByID(identifier float64) (ChallengeStoryMazeConfig, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ChallengeStoryMazeConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}
