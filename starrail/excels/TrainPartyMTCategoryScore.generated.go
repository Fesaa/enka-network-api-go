package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type TrainPartyMTCategoryScore struct {
	CategoryID float64 `json:"CategoryID"`
	Level      float64 `json:"Level"`
	Ratio      float64 `json:"Ratio"`
}
type TrainPartyMTCategoryScoreAccessor struct {
	_data           []TrainPartyMTCategoryScore
	_dataCategoryID map[float64]TrainPartyMTCategoryScore
	_dataRatio      map[float64]TrainPartyMTCategoryScore
}

// LoadData retrieves the data. Must be called before TrainPartyMTCategoryScore.GroupData
func (a *TrainPartyMTCategoryScoreAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/TrainPartyMTCategoryScore.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *TrainPartyMTCategoryScoreAccessor) Raw() ([]TrainPartyMTCategoryScore, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []TrainPartyMTCategoryScore{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with TrainPartyMTCategoryScoreAccessor.LoadData to preload everything
func (a *TrainPartyMTCategoryScoreAccessor) GroupData() {
	a._dataCategoryID = map[float64]TrainPartyMTCategoryScore{}
	a._dataRatio = map[float64]TrainPartyMTCategoryScore{}
	for _, d := range a._data {
		a._dataCategoryID[d.CategoryID] = d
		a._dataRatio[d.Ratio] = d
	}
}

// ByCategoryID returns the TrainPartyMTCategoryScore uniquely identified by CategoryID
//
// Error is only non-nil if the source errors out
func (a *TrainPartyMTCategoryScoreAccessor) ByCategoryID(identifier float64) (TrainPartyMTCategoryScore, error) {
	if a._dataCategoryID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return TrainPartyMTCategoryScore{}, err
			}
		}
		a.GroupData()
	}
	return a._dataCategoryID[identifier], nil
}

// ByRatio returns the TrainPartyMTCategoryScore uniquely identified by Ratio
//
// Error is only non-nil if the source errors out
func (a *TrainPartyMTCategoryScoreAccessor) ByRatio(identifier float64) (TrainPartyMTCategoryScore, error) {
	if a._dataRatio == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return TrainPartyMTCategoryScore{}, err
			}
		}
		a.GroupData()
	}
	return a._dataRatio[identifier], nil
}
