package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type GameplayGuideConstValue struct {
	GameplayGuideConstValueName string `json:"GameplayGuideConstValueName"`
	Value                       string `json:"Value"`
}
type GameplayGuideConstValueAccessor struct {
	_data                            []GameplayGuideConstValue
	_dataGameplayGuideConstValueName map[string]GameplayGuideConstValue
	_dataValue                       map[string]GameplayGuideConstValue
}

// LoadData retrieves the data. Must be called before GameplayGuideConstValue.GroupData
func (a *GameplayGuideConstValueAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/GameplayGuideConstValue.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *GameplayGuideConstValueAccessor) Raw() ([]GameplayGuideConstValue, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []GameplayGuideConstValue{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with GameplayGuideConstValueAccessor.LoadData to preload everything
func (a *GameplayGuideConstValueAccessor) GroupData() {
	for _, d := range a._data {
		a._dataGameplayGuideConstValueName[d.GameplayGuideConstValueName] = d
		a._dataValue[d.Value] = d
	}
}

// ByGameplayGuideConstValueName returns the GameplayGuideConstValue uniquely identified by GameplayGuideConstValueName
//
// Error is only non-nil if the source errors out
func (a *GameplayGuideConstValueAccessor) ByGameplayGuideConstValueName(identifier string) (GameplayGuideConstValue, error) {
	if a._dataGameplayGuideConstValueName == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return GameplayGuideConstValue{}, err
			}
		}
		a.GroupData()
	}
	return a._dataGameplayGuideConstValueName[identifier], nil
}

// ByValue returns the GameplayGuideConstValue uniquely identified by Value
//
// Error is only non-nil if the source errors out
func (a *GameplayGuideConstValueAccessor) ByValue(identifier string) (GameplayGuideConstValue, error) {
	if a._dataValue == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return GameplayGuideConstValue{}, err
			}
		}
		a.GroupData()
	}
	return a._dataValue[identifier], nil
}
