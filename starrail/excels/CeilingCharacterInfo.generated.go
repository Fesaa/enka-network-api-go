package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type CeilingCharacterInfo struct {
	CeilingDesc hash.Hash `json:"CeilingDesc"`
	CharacterID float64   `json:"CharacterID"`
}
type CeilingCharacterInfoAccessor struct {
	_data            []CeilingCharacterInfo
	_dataCharacterID map[float64]CeilingCharacterInfo
}

// LoadData retrieves the data. Must be called before CeilingCharacterInfo.GroupData
func (a *CeilingCharacterInfoAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/CeilingCharacterInfo.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *CeilingCharacterInfoAccessor) Raw() ([]CeilingCharacterInfo, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []CeilingCharacterInfo{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with CeilingCharacterInfoAccessor.LoadData to preload everything
func (a *CeilingCharacterInfoAccessor) GroupData() {
	a._dataCharacterID = map[float64]CeilingCharacterInfo{}
	for _, d := range a._data {
		a._dataCharacterID[d.CharacterID] = d
	}
}

// ByCharacterID returns the CeilingCharacterInfo uniquely identified by CharacterID
//
// Error is only non-nil if the source errors out
func (a *CeilingCharacterInfoAccessor) ByCharacterID(identifier float64) (CeilingCharacterInfo, error) {
	if a._dataCharacterID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return CeilingCharacterInfo{}, err
			}
		}
		a.GroupData()
	}
	return a._dataCharacterID[identifier], nil
}
