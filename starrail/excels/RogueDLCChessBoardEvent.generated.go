package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type RogueDLCChessBoardEvent struct {
	ChessBoardEventDesc hash.Hash `json:"ChessBoardEventDesc"`
	ChessBoardEventID   float64   `json:"ChessBoardEventID"`
	ChessBoardEventName hash.Hash `json:"ChessBoardEventName"`
}
type RogueDLCChessBoardEventAccessor struct {
	_data                  []RogueDLCChessBoardEvent
	_dataChessBoardEventID map[float64]RogueDLCChessBoardEvent
}

// LoadData retrieves the data. Must be called before RogueDLCChessBoardEvent.GroupData
func (a *RogueDLCChessBoardEventAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueDLCChessBoardEvent.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueDLCChessBoardEventAccessor) Raw() ([]RogueDLCChessBoardEvent, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueDLCChessBoardEvent{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueDLCChessBoardEventAccessor.LoadData to preload everything
func (a *RogueDLCChessBoardEventAccessor) GroupData() {
	for _, d := range a._data {
		a._dataChessBoardEventID[d.ChessBoardEventID] = d
	}
}

// ByChessBoardEventID returns the RogueDLCChessBoardEvent uniquely identified by ChessBoardEventID
//
// Error is only non-nil if the source errors out
func (a *RogueDLCChessBoardEventAccessor) ByChessBoardEventID(identifier float64) (RogueDLCChessBoardEvent, error) {
	if a._dataChessBoardEventID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueDLCChessBoardEvent{}, err
			}
		}
		a.GroupData()
	}
	return a._dataChessBoardEventID[identifier], nil
}
