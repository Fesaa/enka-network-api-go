package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type ChallengeStoryTargetConfig struct {
	ChallengeTargetName   map[string]json.Number `json:"ChallengeTargetName"`
	ChallengeTargetParam1 json.Number            `json:"ChallengeTargetParam1"`
	ChallengeTargetType   string                 `json:"ChallengeTargetType"`
	ID                    json.Number            `json:"ID"`
}
type ChallengeStoryTargetConfigAccessor struct {
	_data                      []ChallengeStoryTargetConfig
	_dataChallengeTargetParam1 map[json.Number]ChallengeStoryTargetConfig
	_dataID                    map[json.Number]ChallengeStoryTargetConfig
}

// LoadData retrieves the data. Must be called before ChallengeStoryTargetConfig.GroupData
func (a *ChallengeStoryTargetConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ChallengeStoryTargetConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ChallengeStoryTargetConfigAccessor) Raw() ([]ChallengeStoryTargetConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ChallengeStoryTargetConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ChallengeStoryTargetConfigAccessor.LoadData to preload everything
func (a *ChallengeStoryTargetConfigAccessor) GroupData() {
	a._dataChallengeTargetParam1 = map[json.Number]ChallengeStoryTargetConfig{}
	a._dataID = map[json.Number]ChallengeStoryTargetConfig{}
	for _, d := range a._data {
		a._dataChallengeTargetParam1[d.ChallengeTargetParam1] = d
		a._dataID[d.ID] = d
	}
}

// ByChallengeTargetParam1 returns the ChallengeStoryTargetConfig uniquely identified by ChallengeTargetParam1
//
// Error is only non-nil if the source errors out
func (a *ChallengeStoryTargetConfigAccessor) ByChallengeTargetParam1(identifier json.Number) (ChallengeStoryTargetConfig, error) {
	if a._dataChallengeTargetParam1 == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ChallengeStoryTargetConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataChallengeTargetParam1[identifier], nil
}

// ByID returns the ChallengeStoryTargetConfig uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *ChallengeStoryTargetConfigAccessor) ByID(identifier json.Number) (ChallengeStoryTargetConfig, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ChallengeStoryTargetConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}
