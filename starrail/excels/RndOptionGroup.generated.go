package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type RndOptionGroup struct {
	ID          string  `json:"ID"`
	OptionCount float64 `json:"OptionCount"`
}
type RndOptionGroupAccessor struct {
	_data            []RndOptionGroup
	_dataOptionCount map[float64]RndOptionGroup
	_dataID          map[string]RndOptionGroup
}

// LoadData retrieves the data. Must be called before RndOptionGroup.GroupData
func (a *RndOptionGroupAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RndOptionGroup.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RndOptionGroupAccessor) Raw() ([]RndOptionGroup, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RndOptionGroup{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RndOptionGroupAccessor.LoadData to preload everything
func (a *RndOptionGroupAccessor) GroupData() {
	for _, d := range a._data {
		a._dataOptionCount[d.OptionCount] = d
		a._dataID[d.ID] = d
	}
}

// ByOptionCount returns the RndOptionGroup uniquely identified by OptionCount
//
// Error is only non-nil if the source errors out
func (a *RndOptionGroupAccessor) ByOptionCount(identifier float64) (RndOptionGroup, error) {
	if a._dataOptionCount == nil {
		err := a.LoadData()
		if err != nil {
			return RndOptionGroup{}, err
		}
		a.GroupData()
	}
	return a._dataOptionCount[identifier], nil
}

// ByID returns the RndOptionGroup uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *RndOptionGroupAccessor) ByID(identifier string) (RndOptionGroup, error) {
	if a._dataID == nil {
		err := a.LoadData()
		if err != nil {
			return RndOptionGroup{}, err
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}
