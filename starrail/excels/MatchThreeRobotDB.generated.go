package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type MatchThreeRobotDB struct {
	HeadIcon string    `json:"HeadIcon"`
	Level    float64   `json:"Level"`
	Name     hash.Hash `json:"Name"`
	RobotID  float64   `json:"RobotID"`
}
type MatchThreeRobotDBAccessor struct {
	_data        []MatchThreeRobotDB
	_dataRobotID map[float64]MatchThreeRobotDB
}

// LoadData retrieves the data. Must be called before MatchThreeRobotDB.GroupData
func (a *MatchThreeRobotDBAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MatchThreeRobotDB.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MatchThreeRobotDBAccessor) Raw() ([]MatchThreeRobotDB, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MatchThreeRobotDB{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MatchThreeRobotDBAccessor.LoadData to preload everything
func (a *MatchThreeRobotDBAccessor) GroupData() {
	a._dataRobotID = map[float64]MatchThreeRobotDB{}
	for _, d := range a._data {
		a._dataRobotID[d.RobotID] = d
	}
}

// ByRobotID returns the MatchThreeRobotDB uniquely identified by RobotID
//
// Error is only non-nil if the source errors out
func (a *MatchThreeRobotDBAccessor) ByRobotID(identifier float64) (MatchThreeRobotDB, error) {
	if a._dataRobotID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MatchThreeRobotDB{}, err
			}
		}
		a.GroupData()
	}
	return a._dataRobotID[identifier], nil
}
