package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type RogueTournTitanTalent struct {
	ActJson        string                      `json:"ActJson"`
	ActTitle       hash.Hash                   `json:"ActTitle"`
	Cost           []RogueTournTitanTalentCost `json:"Cost"`
	DescParamList  []hash.IntValue             `json:"DescParamList"`
	ID             float64                     `json:"ID"`
	Level          float64                     `json:"Level"`
	PreID          float64                     `json:"PreID"`
	TalentDesc     hash.Hash                   `json:"TalentDesc"`
	TalentIconPath string                      `json:"TalentIconPath"`
	TalentTitle    hash.Hash                   `json:"TalentTitle"`
	TitanType      string                      `json:"TitanType"`
}
type RogueTournTitanTalentCost struct {
	ItemID  float64 `json:"ItemID"`
	ItemNum float64 `json:"ItemNum"`
}
type RogueTournTitanTalentAccessor struct {
	_data        []RogueTournTitanTalent
	_dataActJson map[string]RogueTournTitanTalent
	_dataID      map[float64]RogueTournTitanTalent
}

// LoadData retrieves the data. Must be called before RogueTournTitanTalent.GroupData
func (a *RogueTournTitanTalentAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueTournTitanTalent.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueTournTitanTalentAccessor) Raw() ([]RogueTournTitanTalent, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueTournTitanTalent{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueTournTitanTalentAccessor.LoadData to preload everything
func (a *RogueTournTitanTalentAccessor) GroupData() {
	for _, d := range a._data {
		a._dataActJson[d.ActJson] = d
		a._dataID[d.ID] = d
	}
}

// ByActJson returns the RogueTournTitanTalent uniquely identified by ActJson
//
// Error is only non-nil if the source errors out
func (a *RogueTournTitanTalentAccessor) ByActJson(identifier string) (RogueTournTitanTalent, error) {
	if a._dataActJson == nil {
		err := a.LoadData()
		if err != nil {
			return RogueTournTitanTalent{}, err
		}
		a.GroupData()
	}
	return a._dataActJson[identifier], nil
}

// ByID returns the RogueTournTitanTalent uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *RogueTournTitanTalentAccessor) ByID(identifier float64) (RogueTournTitanTalent, error) {
	if a._dataID == nil {
		err := a.LoadData()
		if err != nil {
			return RogueTournTitanTalent{}, err
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}
