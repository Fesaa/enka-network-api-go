package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type RogueTournCocoonConfig struct {
	Difficulty           float64                                   `json:"Difficulty"`
	DisplayID            float64                                   `json:"DisplayID"`
	DisplayItemList      []RogueTournCocoonConfigDisplayItemList   `json:"DisplayItemList"`
	DisplayMonsterMap    []RogueTournCocoonConfigDisplayMonsterMap `json:"DisplayMonsterMap"`
	DropList             []float64                                 `json:"DropList"`
	EventID              float64                                   `json:"EventID"`
	ID                   float64                                   `json:"ID"`
	MapEntranceID        float64                                   `json:"MapEntranceID"`
	NpcMonsterID         float64                                   `json:"NpcMonsterID"`
	PicPath              string                                    `json:"PicPath"`
	RecommendDamageTypes []string                                  `json:"RecommendDamageTypes"`
	RecommendLevel       float64                                   `json:"RecommendLevel"`
	RogueKeyCost         float64                                   `json:"RogueKeyCost"`
	StaminaCost          float64                                   `json:"StaminaCost"`
	WorldLevel           float64                                   `json:"WorldLevel"`
}
type RogueTournCocoonConfigDisplayItemList struct {
	ItemID  float64 `json:"ItemID"`
	ItemNum float64 `json:"ItemNum"`
}
type RogueTournCocoonConfigDisplayMonsterMap struct {
	BFPAOANBJON float64 `json:"BFPAOANBJON"`
	GGAIJBLEGDE float64 `json:"GGAIJBLEGDE"`
}
type RogueTournCocoonConfigAccessor struct {
	_data        []RogueTournCocoonConfig
	_dataEventID map[float64]RogueTournCocoonConfig
}

// LoadData retrieves the data. Must be called before RogueTournCocoonConfig.GroupData
func (a *RogueTournCocoonConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueTournCocoonConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueTournCocoonConfigAccessor) Raw() ([]RogueTournCocoonConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueTournCocoonConfig{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueTournCocoonConfigAccessor.LoadData to preload everything
func (a *RogueTournCocoonConfigAccessor) GroupData() {
	for _, d := range a._data {
		a._dataEventID[d.EventID] = d
	}
}

// ByEventID returns the RogueTournCocoonConfig uniquely identified by EventID
//
// Error is only non-nil if the source errors out
func (a *RogueTournCocoonConfigAccessor) ByEventID(identifier float64) (RogueTournCocoonConfig, error) {
	if a._dataEventID == nil {
		err := a.LoadData()
		if err != nil {
			return RogueTournCocoonConfig{}, err
		}
		a.GroupData()
	}
	return a._dataEventID[identifier], nil
}
