package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type RogueTournCocoonConfig struct {
	Difficulty           json.Number              `json:"Difficulty"`
	DisplayID            json.Number              `json:"DisplayID"`
	DisplayItemList      []map[string]json.Number `json:"DisplayItemList"`
	DisplayMonsterMap    []map[string]json.Number `json:"DisplayMonsterMap"`
	DropList             []json.Number            `json:"DropList"`
	EventID              json.Number              `json:"EventID"`
	ID                   json.Number              `json:"ID"`
	MapEntranceID        json.Number              `json:"MapEntranceID"`
	NpcMonsterID         json.Number              `json:"NpcMonsterID"`
	PicPath              string                   `json:"PicPath"`
	RecommendDamageTypes []string                 `json:"RecommendDamageTypes"`
	RecommendLevel       json.Number              `json:"RecommendLevel"`
	RogueKeyCost         json.Number              `json:"RogueKeyCost"`
	StaminaCost          json.Number              `json:"StaminaCost"`
	WorldLevel           json.Number              `json:"WorldLevel"`
}
type RogueTournCocoonConfigAccessor struct {
	_data        []RogueTournCocoonConfig
	_dataEventID map[json.Number]RogueTournCocoonConfig
}

// LoadData retrieves the data. Must be called before RogueTournCocoonConfig.GroupData
func (a *RogueTournCocoonConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueTournCocoonConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueTournCocoonConfigAccessor) Raw() ([]RogueTournCocoonConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueTournCocoonConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueTournCocoonConfigAccessor.LoadData to preload everything
func (a *RogueTournCocoonConfigAccessor) GroupData() {
	a._dataEventID = map[json.Number]RogueTournCocoonConfig{}
	for _, d := range a._data {
		a._dataEventID[d.EventID] = d
	}
}

// ByEventID returns the RogueTournCocoonConfig uniquely identified by EventID
//
// Error is only non-nil if the source errors out
func (a *RogueTournCocoonConfigAccessor) ByEventID(identifier json.Number) (RogueTournCocoonConfig, error) {
	if a._dataEventID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueTournCocoonConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataEventID[identifier], nil
}
