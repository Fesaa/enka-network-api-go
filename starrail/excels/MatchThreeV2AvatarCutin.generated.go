package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type MatchThreeV2AvatarCutin struct {
	CutinID       float64   `json:"CutinID"`
	ImagePath     string    `json:"ImagePath"`
	MaxTriggerNum float64   `json:"MaxTriggerNum"`
	TalkText      hash.Hash `json:"TalkText"`
}
type MatchThreeV2AvatarCutinAccessor struct {
	_data        []MatchThreeV2AvatarCutin
	_dataCutinID map[float64]MatchThreeV2AvatarCutin
}

// LoadData retrieves the data. Must be called before MatchThreeV2AvatarCutin.GroupData
func (a *MatchThreeV2AvatarCutinAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MatchThreeV2AvatarCutin.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MatchThreeV2AvatarCutinAccessor) Raw() ([]MatchThreeV2AvatarCutin, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MatchThreeV2AvatarCutin{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MatchThreeV2AvatarCutinAccessor.LoadData to preload everything
func (a *MatchThreeV2AvatarCutinAccessor) GroupData() {
	a._dataCutinID = map[float64]MatchThreeV2AvatarCutin{}
	for _, d := range a._data {
		a._dataCutinID[d.CutinID] = d
	}
}

// ByCutinID returns the MatchThreeV2AvatarCutin uniquely identified by CutinID
//
// Error is only non-nil if the source errors out
func (a *MatchThreeV2AvatarCutinAccessor) ByCutinID(identifier float64) (MatchThreeV2AvatarCutin, error) {
	if a._dataCutinID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MatchThreeV2AvatarCutin{}, err
			}
		}
		a.GroupData()
	}
	return a._dataCutinID[identifier], nil
}
