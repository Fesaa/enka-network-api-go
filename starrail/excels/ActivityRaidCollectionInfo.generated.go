package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type ActivityRaidCollectionInfo struct {
	ActivityID         json.Number   `json:"ActivityID"`
	IconPath           string        `json:"IconPath"`
	RaidCollectionType string        `json:"RaidCollectionType"`
	RewardID           json.Number   `json:"RewardID"`
	TabIDList          []json.Number `json:"TabIDList"`
}
type ActivityRaidCollectionInfoAccessor struct {
	_data                   []ActivityRaidCollectionInfo
	_dataRaidCollectionType map[string]ActivityRaidCollectionInfo
}

// LoadData retrieves the data. Must be called before ActivityRaidCollectionInfo.GroupData
func (a *ActivityRaidCollectionInfoAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ActivityRaidCollectionInfo.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ActivityRaidCollectionInfoAccessor) Raw() ([]ActivityRaidCollectionInfo, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ActivityRaidCollectionInfo{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ActivityRaidCollectionInfoAccessor.LoadData to preload everything
func (a *ActivityRaidCollectionInfoAccessor) GroupData() {
	a._dataRaidCollectionType = map[string]ActivityRaidCollectionInfo{}
	for _, d := range a._data {
		a._dataRaidCollectionType[d.RaidCollectionType] = d
	}
}

// ByRaidCollectionType returns the ActivityRaidCollectionInfo uniquely identified by RaidCollectionType
//
// Error is only non-nil if the source errors out
func (a *ActivityRaidCollectionInfoAccessor) ByRaidCollectionType(identifier string) (ActivityRaidCollectionInfo, error) {
	if a._dataRaidCollectionType == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityRaidCollectionInfo{}, err
			}
		}
		a.GroupData()
	}
	return a._dataRaidCollectionType[identifier], nil
}
