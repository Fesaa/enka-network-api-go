package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type EvoBdSCShopConfig struct {
	BuffTextFormat hash.Hash                    `json:"BuffTextFormat"`
	Category       hash.Hash                    `json:"Category"`
	ID             float64                      `json:"ID"`
	ItemBackground string                       `json:"ItemBackground"`
	ItemIcon       string                       `json:"ItemIcon"`
	LvMax          float64                      `json:"LvMax"`
	MazeBuffID     float64                      `json:"MazeBuffID"`
	Name           hash.Hash                    `json:"Name"`
	ParamList      []hash.Value                 `json:"ParamList"`
	PriceList      []EvoBdSCShopConfigPriceList `json:"PriceList"`
	Season         string                       `json:"Season"`
	ShopDesc       hash.Hash                    `json:"ShopDesc"`
	ShopType       string                       `json:"ShopType"`
	TotalBuff      hash.Hash                    `json:"TotalBuff"`
}
type EvoBdSCShopConfigPriceList struct {
	BMABPMLHLIN float64 `json:"BMABPMLHLIN"`
	KHCKFBHCFPL float64 `json:"KHCKFBHCFPL"`
}
type EvoBdSCShopConfigAccessor struct {
	_data   []EvoBdSCShopConfig
	_dataID map[float64]EvoBdSCShopConfig
}

// LoadData retrieves the data. Must be called before EvoBdSCShopConfig.GroupData
func (a *EvoBdSCShopConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/EvoBdSCShopConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *EvoBdSCShopConfigAccessor) Raw() ([]EvoBdSCShopConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []EvoBdSCShopConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with EvoBdSCShopConfigAccessor.LoadData to preload everything
func (a *EvoBdSCShopConfigAccessor) GroupData() {
	a._dataID = map[float64]EvoBdSCShopConfig{}
	for _, d := range a._data {
		a._dataID[d.ID] = d
	}
}

// ByID returns the EvoBdSCShopConfig uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *EvoBdSCShopConfigAccessor) ByID(identifier float64) (EvoBdSCShopConfig, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return EvoBdSCShopConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}
