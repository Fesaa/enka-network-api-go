package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type MonopolyEventConfig struct {
	AutoTriggerEffectIDList []interface{}          `json:"AutoTriggerEffectIDList"`
	DiceNum                 json.Number            `json:"DiceNum"`
	EventContent            map[string]json.Number `json:"EventContent"`
	EventID                 json.Number            `json:"EventID"`
	EventName               map[string]json.Number `json:"EventName"`
	EventOptionIDList       []json.Number          `json:"EventOptionIDList"`
	IsDataReport            bool                   `json:"IsDataReport"`
	IsSpecial               bool                   `json:"IsSpecial"`
	PicPath                 string                 `json:"PicPath"`
	Type                    string                 `json:"Type"`
}
type MonopolyEventConfigAccessor struct {
	_data []MonopolyEventConfig
}

// LoadData retrieves the data. Must be called before MonopolyEventConfig.GroupData
func (a *MonopolyEventConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MonopolyEventConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MonopolyEventConfigAccessor) Raw() ([]MonopolyEventConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MonopolyEventConfig{}, err
		}
	}
	return a._data, nil
}
