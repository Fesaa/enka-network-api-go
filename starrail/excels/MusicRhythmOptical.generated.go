package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type MusicRhythmOptical struct {
	ActivityModuleID json.Number            `json:"ActivityModuleID"`
	GotoConfig       json.Number            `json:"GotoConfig"`
	MainMissionID    json.Number            `json:"MainMissionID"`
	Progress         map[string]json.Number `json:"Progress"`
	QuestID          json.Number            `json:"QuestID"`
	RealProgress     json.Number            `json:"RealProgress"`
	Type             json.Number            `json:"Type"`
}
type MusicRhythmOpticalAccessor struct {
	_data        []MusicRhythmOptical
	_dataQuestID map[json.Number]MusicRhythmOptical
}

// LoadData retrieves the data. Must be called before MusicRhythmOptical.GroupData
func (a *MusicRhythmOpticalAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MusicRhythmOptical.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MusicRhythmOpticalAccessor) Raw() ([]MusicRhythmOptical, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MusicRhythmOptical{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MusicRhythmOpticalAccessor.LoadData to preload everything
func (a *MusicRhythmOpticalAccessor) GroupData() {
	a._dataQuestID = map[json.Number]MusicRhythmOptical{}
	for _, d := range a._data {
		a._dataQuestID[d.QuestID] = d
	}
}

// ByQuestID returns the MusicRhythmOptical uniquely identified by QuestID
//
// Error is only non-nil if the source errors out
func (a *MusicRhythmOpticalAccessor) ByQuestID(identifier json.Number) (MusicRhythmOptical, error) {
	if a._dataQuestID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MusicRhythmOptical{}, err
			}
		}
		a.GroupData()
	}
	return a._dataQuestID[identifier], nil
}
