package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type RogueDLCSubStoryGroup struct {
	ShowGroup         json.Number            `json:"ShowGroup"`
	SubStoryGroupID   json.Number            `json:"SubStoryGroupID"`
	SubStoryGroupName map[string]json.Number `json:"SubStoryGroupName"`
	SubStoryList      []json.Number          `json:"SubStoryList"`
	UnlockID          json.Number            `json:"UnlockID"`
}
type RogueDLCSubStoryGroupAccessor struct {
	_data                []RogueDLCSubStoryGroup
	_dataSubStoryGroupID map[json.Number]RogueDLCSubStoryGroup
}

// LoadData retrieves the data. Must be called before RogueDLCSubStoryGroup.GroupData
func (a *RogueDLCSubStoryGroupAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueDLCSubStoryGroup.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueDLCSubStoryGroupAccessor) Raw() ([]RogueDLCSubStoryGroup, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueDLCSubStoryGroup{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueDLCSubStoryGroupAccessor.LoadData to preload everything
func (a *RogueDLCSubStoryGroupAccessor) GroupData() {
	a._dataSubStoryGroupID = map[json.Number]RogueDLCSubStoryGroup{}
	for _, d := range a._data {
		a._dataSubStoryGroupID[d.SubStoryGroupID] = d
	}
}

// BySubStoryGroupID returns the RogueDLCSubStoryGroup uniquely identified by SubStoryGroupID
//
// Error is only non-nil if the source errors out
func (a *RogueDLCSubStoryGroupAccessor) BySubStoryGroupID(identifier json.Number) (RogueDLCSubStoryGroup, error) {
	if a._dataSubStoryGroupID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueDLCSubStoryGroup{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSubStoryGroupID[identifier], nil
}
