package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type ActivityTheme struct {
	CornerIconPath       string    `json:"CornerIconPath"`
	IconPath             string    `json:"IconPath"`
	LittleCornerIconPath string    `json:"LittleCornerIconPath"`
	Name                 hash.Hash `json:"Name"`
	ThemeID              float64   `json:"ThemeID"`
}
type ActivityThemeAccessor struct {
	_data         []ActivityTheme
	_dataThemeID  map[float64]ActivityTheme
	_dataIconPath map[string]ActivityTheme
}

// LoadData retrieves the data. Must be called before ActivityTheme.GroupData
func (a *ActivityThemeAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ActivityTheme.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ActivityThemeAccessor) Raw() ([]ActivityTheme, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ActivityTheme{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ActivityThemeAccessor.LoadData to preload everything
func (a *ActivityThemeAccessor) GroupData() {
	for _, d := range a._data {
		a._dataThemeID[d.ThemeID] = d
		a._dataIconPath[d.IconPath] = d
	}
}

// ByThemeID returns the ActivityTheme uniquely identified by ThemeID
//
// Error is only non-nil if the source errors out
func (a *ActivityThemeAccessor) ByThemeID(identifier float64) (ActivityTheme, error) {
	if a._dataThemeID == nil {
		err := a.LoadData()
		if err != nil {
			return ActivityTheme{}, err
		}
		a.GroupData()
	}
	return a._dataThemeID[identifier], nil
}

// ByIconPath returns the ActivityTheme uniquely identified by IconPath
//
// Error is only non-nil if the source errors out
func (a *ActivityThemeAccessor) ByIconPath(identifier string) (ActivityTheme, error) {
	if a._dataIconPath == nil {
		err := a.LoadData()
		if err != nil {
			return ActivityTheme{}, err
		}
		a.GroupData()
	}
	return a._dataIconPath[identifier], nil
}
