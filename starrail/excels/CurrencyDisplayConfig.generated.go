package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type CurrencyDisplayConfig struct {
	CurrencyID float64 `json:"CurrencyID"`
	GotoID     float64 `json:"GotoID"`
	UnlockID   float64 `json:"UnlockID"`
}
type CurrencyDisplayConfigAccessor struct {
	_data           []CurrencyDisplayConfig
	_dataCurrencyID map[float64]CurrencyDisplayConfig
}

// LoadData retrieves the data. Must be called before CurrencyDisplayConfig.GroupData
func (a *CurrencyDisplayConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/CurrencyDisplayConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *CurrencyDisplayConfigAccessor) Raw() ([]CurrencyDisplayConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []CurrencyDisplayConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with CurrencyDisplayConfigAccessor.LoadData to preload everything
func (a *CurrencyDisplayConfigAccessor) GroupData() {
	a._dataCurrencyID = map[float64]CurrencyDisplayConfig{}
	for _, d := range a._data {
		a._dataCurrencyID[d.CurrencyID] = d
	}
}

// ByCurrencyID returns the CurrencyDisplayConfig uniquely identified by CurrencyID
//
// Error is only non-nil if the source errors out
func (a *CurrencyDisplayConfigAccessor) ByCurrencyID(identifier float64) (CurrencyDisplayConfig, error) {
	if a._dataCurrencyID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return CurrencyDisplayConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataCurrencyID[identifier], nil
}
