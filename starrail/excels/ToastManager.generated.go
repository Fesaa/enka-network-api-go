package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type ToastManager struct {
	Duration   float64 `json:"Duration"`
	FuncName   string  `json:"FuncName"`
	IsinBattle bool    `json:"IsinBattle"`
	Priority   float64 `json:"Priority"`
}
type ToastManagerAccessor struct {
	_data         []ToastManager
	_dataFuncName map[string]ToastManager
}

// LoadData retrieves the data. Must be called before ToastManager.GroupData
func (a *ToastManagerAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ToastManager.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ToastManagerAccessor) Raw() ([]ToastManager, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ToastManager{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ToastManagerAccessor.LoadData to preload everything
func (a *ToastManagerAccessor) GroupData() {
	a._dataFuncName = map[string]ToastManager{}
	for _, d := range a._data {
		a._dataFuncName[d.FuncName] = d
	}
}

// ByFuncName returns the ToastManager uniquely identified by FuncName
//
// Error is only non-nil if the source errors out
func (a *ToastManagerAccessor) ByFuncName(identifier string) (ToastManager, error) {
	if a._dataFuncName == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ToastManager{}, err
			}
		}
		a.GroupData()
	}
	return a._dataFuncName[identifier], nil
}
