package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type CutSceneConfig struct {
	CaptionPath          string        `json:"CaptionPath"`
	CutSceneBGMStateName string        `json:"CutSceneBGMStateName"`
	CutSceneName         string        `json:"CutSceneName"`
	CutScenePath         string        `json:"CutScenePath"`
	CutSceneSFXJsonPath  string        `json:"CutSceneSFXJsonPath"`
	HideBlockList        []string      `json:"HideBlockList"`
	IsPlayerInvolved     bool          `json:"IsPlayerInvolved"`
	MazeFloorID          json.Number   `json:"MazeFloorID"`
	MazePlaneID          json.Number   `json:"MazePlaneID"`
	PosOffSet            []json.Number `json:"PosOffSet"`
	SFXID                json.Number   `json:"SFXID"`
	VoiceID              json.Number   `json:"VoiceID"`
}
type CutSceneConfigAccessor struct {
	_data             []CutSceneConfig
	_dataCutSceneName map[string]CutSceneConfig
	_dataCutScenePath map[string]CutSceneConfig
}

// LoadData retrieves the data. Must be called before CutSceneConfig.GroupData
func (a *CutSceneConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/CutSceneConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *CutSceneConfigAccessor) Raw() ([]CutSceneConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []CutSceneConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with CutSceneConfigAccessor.LoadData to preload everything
func (a *CutSceneConfigAccessor) GroupData() {
	a._dataCutSceneName = map[string]CutSceneConfig{}
	a._dataCutScenePath = map[string]CutSceneConfig{}
	for _, d := range a._data {
		a._dataCutSceneName[d.CutSceneName] = d
		a._dataCutScenePath[d.CutScenePath] = d
	}
}

// ByCutSceneName returns the CutSceneConfig uniquely identified by CutSceneName
//
// Error is only non-nil if the source errors out
func (a *CutSceneConfigAccessor) ByCutSceneName(identifier string) (CutSceneConfig, error) {
	if a._dataCutSceneName == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return CutSceneConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataCutSceneName[identifier], nil
}

// ByCutScenePath returns the CutSceneConfig uniquely identified by CutScenePath
//
// Error is only non-nil if the source errors out
func (a *CutSceneConfigAccessor) ByCutScenePath(identifier string) (CutSceneConfig, error) {
	if a._dataCutScenePath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return CutSceneConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataCutScenePath[identifier], nil
}
