package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type RogueTournBuffType struct {
	RogueBuffType          float64   `json:"RogueBuffType"`
	RogueBuffTypeDecoName  string    `json:"RogueBuffTypeDecoName"`
	RogueBuffTypeIcon      string    `json:"RogueBuffTypeIcon"`
	RogueBuffTypeLargeIcon string    `json:"RogueBuffTypeLargeIcon"`
	RogueBuffTypeName      hash.Hash `json:"RogueBuffTypeName"`
	RogueBuffTypeSmallIcon string    `json:"RogueBuffTypeSmallIcon"`
	RogueBuffTypeSubTitle  hash.Hash `json:"RogueBuffTypeSubTitle"`
	RogueBuffTypeTitle     hash.Hash `json:"RogueBuffTypeTitle"`
}
type RogueTournBuffTypeAccessor struct {
	_data                       []RogueTournBuffType
	_dataRogueBuffTypeLargeIcon map[string]RogueTournBuffType
	_dataRogueBuffTypeDecoName  map[string]RogueTournBuffType
	_dataRogueBuffType          map[float64]RogueTournBuffType
	_dataRogueBuffTypeIcon      map[string]RogueTournBuffType
	_dataRogueBuffTypeSmallIcon map[string]RogueTournBuffType
}

// LoadData retrieves the data. Must be called before RogueTournBuffType.GroupData
func (a *RogueTournBuffTypeAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueTournBuffType.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueTournBuffTypeAccessor) Raw() ([]RogueTournBuffType, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueTournBuffType{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueTournBuffTypeAccessor.LoadData to preload everything
func (a *RogueTournBuffTypeAccessor) GroupData() {
	for _, d := range a._data {
		a._dataRogueBuffTypeLargeIcon[d.RogueBuffTypeLargeIcon] = d
		a._dataRogueBuffTypeDecoName[d.RogueBuffTypeDecoName] = d
		a._dataRogueBuffType[d.RogueBuffType] = d
		a._dataRogueBuffTypeIcon[d.RogueBuffTypeIcon] = d
		a._dataRogueBuffTypeSmallIcon[d.RogueBuffTypeSmallIcon] = d
	}
}

// ByRogueBuffTypeLargeIcon returns the RogueTournBuffType uniquely identified by RogueBuffTypeLargeIcon
//
// Error is only non-nil if the source errors out
func (a *RogueTournBuffTypeAccessor) ByRogueBuffTypeLargeIcon(identifier string) (RogueTournBuffType, error) {
	if a._dataRogueBuffTypeLargeIcon == nil {
		err := a.LoadData()
		if err != nil {
			return RogueTournBuffType{}, err
		}
		a.GroupData()
	}
	return a._dataRogueBuffTypeLargeIcon[identifier], nil
}

// ByRogueBuffTypeDecoName returns the RogueTournBuffType uniquely identified by RogueBuffTypeDecoName
//
// Error is only non-nil if the source errors out
func (a *RogueTournBuffTypeAccessor) ByRogueBuffTypeDecoName(identifier string) (RogueTournBuffType, error) {
	if a._dataRogueBuffTypeDecoName == nil {
		err := a.LoadData()
		if err != nil {
			return RogueTournBuffType{}, err
		}
		a.GroupData()
	}
	return a._dataRogueBuffTypeDecoName[identifier], nil
}

// ByRogueBuffType returns the RogueTournBuffType uniquely identified by RogueBuffType
//
// Error is only non-nil if the source errors out
func (a *RogueTournBuffTypeAccessor) ByRogueBuffType(identifier float64) (RogueTournBuffType, error) {
	if a._dataRogueBuffType == nil {
		err := a.LoadData()
		if err != nil {
			return RogueTournBuffType{}, err
		}
		a.GroupData()
	}
	return a._dataRogueBuffType[identifier], nil
}

// ByRogueBuffTypeIcon returns the RogueTournBuffType uniquely identified by RogueBuffTypeIcon
//
// Error is only non-nil if the source errors out
func (a *RogueTournBuffTypeAccessor) ByRogueBuffTypeIcon(identifier string) (RogueTournBuffType, error) {
	if a._dataRogueBuffTypeIcon == nil {
		err := a.LoadData()
		if err != nil {
			return RogueTournBuffType{}, err
		}
		a.GroupData()
	}
	return a._dataRogueBuffTypeIcon[identifier], nil
}

// ByRogueBuffTypeSmallIcon returns the RogueTournBuffType uniquely identified by RogueBuffTypeSmallIcon
//
// Error is only non-nil if the source errors out
func (a *RogueTournBuffTypeAccessor) ByRogueBuffTypeSmallIcon(identifier string) (RogueTournBuffType, error) {
	if a._dataRogueBuffTypeSmallIcon == nil {
		err := a.LoadData()
		if err != nil {
			return RogueTournBuffType{}, err
		}
		a.GroupData()
	}
	return a._dataRogueBuffTypeSmallIcon[identifier], nil
}
