package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type FateAffix struct {
	CEMMGMBGKNG []interface{} `json:"CEMMGMBGKNG"`
	DCBHNNDNHEO float64       `json:"DCBHNNDNHEO"`
	DJDFABDGOLO hash.Hash     `json:"DJDFABDGOLO"`
	EAKMLGAHOLM float64       `json:"EAKMLGAHOLM"`
	HAIHCBBNIFL []hash.Value  `json:"HAIHCBBNIFL"`
	IILPOJFMPMD hash.Hash     `json:"IILPOJFMPMD"`
	INKBBCOILNL string        `json:"INKBBCOILNL"`
	JLKMNCOIDLG string        `json:"JLKMNCOIDLG"`
	LNAHJIKBBLI hash.Hash     `json:"LNAHJIKBBLI"`
}
type FateAffixAccessor struct {
	_data            []FateAffix
	_dataEAKMLGAHOLM map[float64]FateAffix
}

// LoadData retrieves the data. Must be called before FateAffix.GroupData
func (a *FateAffixAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/FateAffix.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *FateAffixAccessor) Raw() ([]FateAffix, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []FateAffix{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with FateAffixAccessor.LoadData to preload everything
func (a *FateAffixAccessor) GroupData() {
	a._dataEAKMLGAHOLM = map[float64]FateAffix{}
	for _, d := range a._data {
		a._dataEAKMLGAHOLM[d.EAKMLGAHOLM] = d
	}
}

// ByEAKMLGAHOLM returns the FateAffix uniquely identified by EAKMLGAHOLM
//
// Error is only non-nil if the source errors out
func (a *FateAffixAccessor) ByEAKMLGAHOLM(identifier float64) (FateAffix, error) {
	if a._dataEAKMLGAHOLM == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FateAffix{}, err
			}
		}
		a.GroupData()
	}
	return a._dataEAKMLGAHOLM[identifier], nil
}
