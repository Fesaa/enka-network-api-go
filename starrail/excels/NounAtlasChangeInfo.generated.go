package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type NounAtlasChangeInfo struct {
	ChangeNounIDList []float64 `json:"ChangeNounIDList"`
	NounID           float64   `json:"NounID"`
}
type NounAtlasChangeInfoAccessor struct {
	_data       []NounAtlasChangeInfo
	_dataNounID map[float64]NounAtlasChangeInfo
}

// LoadData retrieves the data. Must be called before NounAtlasChangeInfo.GroupData
func (a *NounAtlasChangeInfoAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/NounAtlasChangeInfo.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *NounAtlasChangeInfoAccessor) Raw() ([]NounAtlasChangeInfo, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []NounAtlasChangeInfo{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with NounAtlasChangeInfoAccessor.LoadData to preload everything
func (a *NounAtlasChangeInfoAccessor) GroupData() {
	a._dataNounID = map[float64]NounAtlasChangeInfo{}
	for _, d := range a._data {
		a._dataNounID[d.NounID] = d
	}
}

// ByNounID returns the NounAtlasChangeInfo uniquely identified by NounID
//
// Error is only non-nil if the source errors out
func (a *NounAtlasChangeInfoAccessor) ByNounID(identifier float64) (NounAtlasChangeInfo, error) {
	if a._dataNounID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return NounAtlasChangeInfo{}, err
			}
		}
		a.GroupData()
	}
	return a._dataNounID[identifier], nil
}
