package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type MuseumAreaMission struct {
	AreaID         float64   `json:"AreaID"`
	CollectItemNum float64   `json:"CollectItemNum"`
	DialogDesc     hash.Hash `json:"DialogDesc"`
	MissionID      float64   `json:"MissionID"`
}
type MuseumAreaMissionAccessor struct {
	_data          []MuseumAreaMission
	_dataAreaID    map[float64]MuseumAreaMission
	_dataMissionID map[float64]MuseumAreaMission
}

// LoadData retrieves the data. Must be called before MuseumAreaMission.GroupData
func (a *MuseumAreaMissionAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MuseumAreaMission.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MuseumAreaMissionAccessor) Raw() ([]MuseumAreaMission, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MuseumAreaMission{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MuseumAreaMissionAccessor.LoadData to preload everything
func (a *MuseumAreaMissionAccessor) GroupData() {
	for _, d := range a._data {
		a._dataAreaID[d.AreaID] = d
		a._dataMissionID[d.MissionID] = d
	}
}

// ByAreaID returns the MuseumAreaMission uniquely identified by AreaID
//
// Error is only non-nil if the source errors out
func (a *MuseumAreaMissionAccessor) ByAreaID(identifier float64) (MuseumAreaMission, error) {
	if a._dataAreaID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MuseumAreaMission{}, err
			}
		}
		a.GroupData()
	}
	return a._dataAreaID[identifier], nil
}

// ByMissionID returns the MuseumAreaMission uniquely identified by MissionID
//
// Error is only non-nil if the source errors out
func (a *MuseumAreaMissionAccessor) ByMissionID(identifier float64) (MuseumAreaMission, error) {
	if a._dataMissionID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MuseumAreaMission{}, err
			}
		}
		a.GroupData()
	}
	return a._dataMissionID[identifier], nil
}
