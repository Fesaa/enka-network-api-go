package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type QuestData struct {
	FinishWayID     float64   `json:"FinishWayID"`
	GotoID          float64   `json:"GotoID"`
	ImagePath       string    `json:"ImagePath"`
	QuestDisplay    hash.Hash `json:"QuestDisplay"`
	QuestID         float64   `json:"QuestID"`
	QuestTitle      hash.Hash `json:"QuestTitle"`
	QuestType       float64   `json:"QuestType"`
	RewardID        float64   `json:"RewardID"`
	UnlockParamList []float64 `json:"UnlockParamList"`
	UnlockType      string    `json:"UnlockType"`
}
type QuestDataAccessor struct {
	_data        []QuestData
	_dataQuestID map[float64]QuestData
}

// LoadData retrieves the data. Must be called before QuestData.GroupData
func (a *QuestDataAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/QuestData.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *QuestDataAccessor) Raw() ([]QuestData, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []QuestData{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with QuestDataAccessor.LoadData to preload everything
func (a *QuestDataAccessor) GroupData() {
	for _, d := range a._data {
		a._dataQuestID[d.QuestID] = d
	}
}

// ByQuestID returns the QuestData uniquely identified by QuestID
//
// Error is only non-nil if the source errors out
func (a *QuestDataAccessor) ByQuestID(identifier float64) (QuestData, error) {
	if a._dataQuestID == nil {
		err := a.LoadData()
		if err != nil {
			return QuestData{}, err
		}
		a.GroupData()
	}
	return a._dataQuestID[identifier], nil
}
