package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type TrainPartyWorkingBuffConfig struct {
	Description   map[string]json.Number `json:"Description"`
	IconPath      string                 `json:"IconPath"`
	Name          map[string]json.Number `json:"Name"`
	WorkingBuffID json.Number            `json:"WorkingBuffID"`
}
type TrainPartyWorkingBuffConfigAccessor struct {
	_data         []TrainPartyWorkingBuffConfig
	_dataIconPath map[string]TrainPartyWorkingBuffConfig
}

// LoadData retrieves the data. Must be called before TrainPartyWorkingBuffConfig.GroupData
func (a *TrainPartyWorkingBuffConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/TrainPartyWorkingBuffConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *TrainPartyWorkingBuffConfigAccessor) Raw() ([]TrainPartyWorkingBuffConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []TrainPartyWorkingBuffConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with TrainPartyWorkingBuffConfigAccessor.LoadData to preload everything
func (a *TrainPartyWorkingBuffConfigAccessor) GroupData() {
	a._dataIconPath = map[string]TrainPartyWorkingBuffConfig{}
	for _, d := range a._data {
		a._dataIconPath[d.IconPath] = d
	}
}

// ByIconPath returns the TrainPartyWorkingBuffConfig uniquely identified by IconPath
//
// Error is only non-nil if the source errors out
func (a *TrainPartyWorkingBuffConfigAccessor) ByIconPath(identifier string) (TrainPartyWorkingBuffConfig, error) {
	if a._dataIconPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return TrainPartyWorkingBuffConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataIconPath[identifier], nil
}
