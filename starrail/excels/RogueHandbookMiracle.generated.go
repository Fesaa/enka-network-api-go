package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type RogueHandbookMiracle struct {
	MiracleDisplayID       float64   `json:"MiracleDisplayID"`
	MiracleEffectDisplayID float64   `json:"MiracleEffectDisplayID"`
	MiracleHandbookID      float64   `json:"MiracleHandbookID"`
	MiracleReward          float64   `json:"MiracleReward"`
	MiracleTypeList        []float64 `json:"MiracleTypeList"`
	Order                  float64   `json:"Order"`
}
type RogueHandbookMiracleAccessor struct {
	_data                       []RogueHandbookMiracle
	_dataMiracleDisplayID       map[float64]RogueHandbookMiracle
	_dataMiracleEffectDisplayID map[float64]RogueHandbookMiracle
	_dataOrder                  map[float64]RogueHandbookMiracle
	_dataMiracleHandbookID      map[float64]RogueHandbookMiracle
}

// LoadData retrieves the data. Must be called before RogueHandbookMiracle.GroupData
func (a *RogueHandbookMiracleAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueHandbookMiracle.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueHandbookMiracleAccessor) Raw() ([]RogueHandbookMiracle, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueHandbookMiracle{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueHandbookMiracleAccessor.LoadData to preload everything
func (a *RogueHandbookMiracleAccessor) GroupData() {
	for _, d := range a._data {
		a._dataMiracleDisplayID[d.MiracleDisplayID] = d
		a._dataMiracleEffectDisplayID[d.MiracleEffectDisplayID] = d
		a._dataOrder[d.Order] = d
		a._dataMiracleHandbookID[d.MiracleHandbookID] = d
	}
}

// ByMiracleDisplayID returns the RogueHandbookMiracle uniquely identified by MiracleDisplayID
//
// Error is only non-nil if the source errors out
func (a *RogueHandbookMiracleAccessor) ByMiracleDisplayID(identifier float64) (RogueHandbookMiracle, error) {
	if a._dataMiracleDisplayID == nil {
		err := a.LoadData()
		if err != nil {
			return RogueHandbookMiracle{}, err
		}
		a.GroupData()
	}
	return a._dataMiracleDisplayID[identifier], nil
}

// ByMiracleEffectDisplayID returns the RogueHandbookMiracle uniquely identified by MiracleEffectDisplayID
//
// Error is only non-nil if the source errors out
func (a *RogueHandbookMiracleAccessor) ByMiracleEffectDisplayID(identifier float64) (RogueHandbookMiracle, error) {
	if a._dataMiracleEffectDisplayID == nil {
		err := a.LoadData()
		if err != nil {
			return RogueHandbookMiracle{}, err
		}
		a.GroupData()
	}
	return a._dataMiracleEffectDisplayID[identifier], nil
}

// ByOrder returns the RogueHandbookMiracle uniquely identified by Order
//
// Error is only non-nil if the source errors out
func (a *RogueHandbookMiracleAccessor) ByOrder(identifier float64) (RogueHandbookMiracle, error) {
	if a._dataOrder == nil {
		err := a.LoadData()
		if err != nil {
			return RogueHandbookMiracle{}, err
		}
		a.GroupData()
	}
	return a._dataOrder[identifier], nil
}

// ByMiracleHandbookID returns the RogueHandbookMiracle uniquely identified by MiracleHandbookID
//
// Error is only non-nil if the source errors out
func (a *RogueHandbookMiracleAccessor) ByMiracleHandbookID(identifier float64) (RogueHandbookMiracle, error) {
	if a._dataMiracleHandbookID == nil {
		err := a.LoadData()
		if err != nil {
			return RogueHandbookMiracle{}, err
		}
		a.GroupData()
	}
	return a._dataMiracleHandbookID[identifier], nil
}
