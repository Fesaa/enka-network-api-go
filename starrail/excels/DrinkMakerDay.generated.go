package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type DrinkMakerDay struct {
	CanStartSubMissionID      float64   `json:"CanStartSubMissionID"`
	DayID                     float64   `json:"DayID"`
	FinishDaySubMissionIDList []float64 `json:"FinishDaySubMissionIDList"`
	GuestSequenceList         []float64 `json:"GuestSequenceList"`
}
type DrinkMakerDayAccessor struct {
	_data                     []DrinkMakerDay
	_dataCanStartSubMissionID map[float64]DrinkMakerDay
	_dataDayID                map[float64]DrinkMakerDay
}

// LoadData retrieves the data. Must be called before DrinkMakerDay.GroupData
func (a *DrinkMakerDayAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/DrinkMakerDay.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *DrinkMakerDayAccessor) Raw() ([]DrinkMakerDay, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []DrinkMakerDay{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with DrinkMakerDayAccessor.LoadData to preload everything
func (a *DrinkMakerDayAccessor) GroupData() {
	for _, d := range a._data {
		a._dataCanStartSubMissionID[d.CanStartSubMissionID] = d
		a._dataDayID[d.DayID] = d
	}
}

// ByCanStartSubMissionID returns the DrinkMakerDay uniquely identified by CanStartSubMissionID
//
// Error is only non-nil if the source errors out
func (a *DrinkMakerDayAccessor) ByCanStartSubMissionID(identifier float64) (DrinkMakerDay, error) {
	if a._dataCanStartSubMissionID == nil {
		err := a.LoadData()
		if err != nil {
			return DrinkMakerDay{}, err
		}
		a.GroupData()
	}
	return a._dataCanStartSubMissionID[identifier], nil
}

// ByDayID returns the DrinkMakerDay uniquely identified by DayID
//
// Error is only non-nil if the source errors out
func (a *DrinkMakerDayAccessor) ByDayID(identifier float64) (DrinkMakerDay, error) {
	if a._dataDayID == nil {
		err := a.LoadData()
		if err != nil {
			return DrinkMakerDay{}, err
		}
		a.GroupData()
	}
	return a._dataDayID[identifier], nil
}
