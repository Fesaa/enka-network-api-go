package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type ActivityBonusRewardPunkLord struct {
	BonusID       json.Number   `json:"BonusID"`
	BonusType     json.Number   `json:"BonusType"`
	DisplayItemID json.Number   `json:"DisplayItemID"`
	DropList      []json.Number `json:"DropList"`
}
type ActivityBonusRewardPunkLordAccessor struct {
	_data        []ActivityBonusRewardPunkLord
	_dataBonusID map[json.Number]ActivityBonusRewardPunkLord
}

// LoadData retrieves the data. Must be called before ActivityBonusRewardPunkLord.GroupData
func (a *ActivityBonusRewardPunkLordAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ActivityBonusRewardPunkLord.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ActivityBonusRewardPunkLordAccessor) Raw() ([]ActivityBonusRewardPunkLord, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ActivityBonusRewardPunkLord{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ActivityBonusRewardPunkLordAccessor.LoadData to preload everything
func (a *ActivityBonusRewardPunkLordAccessor) GroupData() {
	a._dataBonusID = map[json.Number]ActivityBonusRewardPunkLord{}
	for _, d := range a._data {
		a._dataBonusID[d.BonusID] = d
	}
}

// ByBonusID returns the ActivityBonusRewardPunkLord uniquely identified by BonusID
//
// Error is only non-nil if the source errors out
func (a *ActivityBonusRewardPunkLordAccessor) ByBonusID(identifier json.Number) (ActivityBonusRewardPunkLord, error) {
	if a._dataBonusID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityBonusRewardPunkLord{}, err
			}
		}
		a.GroupData()
	}
	return a._dataBonusID[identifier], nil
}
