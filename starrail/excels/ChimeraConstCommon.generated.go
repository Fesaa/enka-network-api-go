package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type ChimeraConstCommon struct {
	ConstValueName string                  `json:"ConstValueName"`
	Value          ChimeraConstCommonValue `json:"Value"`
}
type ChimeraConstCommonValue struct {
	ArrayValue []map[string]json.Number `json:"ArrayValue"`
	IntValue   json.Number              `json:"IntValue"`
}
type ChimeraConstCommonAccessor struct {
	_data               []ChimeraConstCommon
	_dataConstValueName map[string]ChimeraConstCommon
}

// LoadData retrieves the data. Must be called before ChimeraConstCommon.GroupData
func (a *ChimeraConstCommonAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ChimeraConstCommon.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ChimeraConstCommonAccessor) Raw() ([]ChimeraConstCommon, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ChimeraConstCommon{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ChimeraConstCommonAccessor.LoadData to preload everything
func (a *ChimeraConstCommonAccessor) GroupData() {
	a._dataConstValueName = map[string]ChimeraConstCommon{}
	for _, d := range a._data {
		a._dataConstValueName[d.ConstValueName] = d
	}
}

// ByConstValueName returns the ChimeraConstCommon uniquely identified by ConstValueName
//
// Error is only non-nil if the source errors out
func (a *ChimeraConstCommonAccessor) ByConstValueName(identifier string) (ChimeraConstCommon, error) {
	if a._dataConstValueName == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ChimeraConstCommon{}, err
			}
		}
		a.GroupData()
	}
	return a._dataConstValueName[identifier], nil
}
