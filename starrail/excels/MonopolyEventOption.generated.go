package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type MonopolyEventOption struct {
	DiceScoreRequirement json.Number            `json:"DiceScoreRequirement"`
	EffectContentText    string                 `json:"EffectContentText"`
	EffectIDList         []json.Number          `json:"EffectIDList"`
	EventOptionID        json.Number            `json:"EventOptionID"`
	IsHideEffect         bool                   `json:"IsHideEffect"`
	NextOptionList       []json.Number          `json:"NextOptionList"`
	OptionBubbleTalk     map[string]json.Number `json:"OptionBubbleTalk"`
	OptionContent        map[string]json.Number `json:"OptionContent"`
	OptionType           string                 `json:"OptionType"`
	TextDisplayParam1    json.Number            `json:"TextDisplayParam1"`
}
type MonopolyEventOptionAccessor struct {
	_data []MonopolyEventOption
}

// LoadData retrieves the data. Must be called before MonopolyEventOption.GroupData
func (a *MonopolyEventOptionAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MonopolyEventOption.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MonopolyEventOptionAccessor) Raw() ([]MonopolyEventOption, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MonopolyEventOption{}, err
		}
	}
	return a._data, nil
}
