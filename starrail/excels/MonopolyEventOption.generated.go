package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type MonopolyEventOption struct {
	DiceScoreRequirement float64   `json:"DiceScoreRequirement"`
	EffectContentText    string    `json:"EffectContentText"`
	EffectIDList         []float64 `json:"EffectIDList"`
	EventOptionID        float64   `json:"EventOptionID"`
	IsHideEffect         bool      `json:"IsHideEffect"`
	NextOptionList       []float64 `json:"NextOptionList"`
	OptionBubbleTalk     hash.Hash `json:"OptionBubbleTalk"`
	OptionContent        hash.Hash `json:"OptionContent"`
	OptionType           string    `json:"OptionType"`
	TextDisplayParam1    float64   `json:"TextDisplayParam1"`
}
type MonopolyEventOptionAccessor struct {
	_data              []MonopolyEventOption
	_dataEventOptionID map[float64]MonopolyEventOption
}

// LoadData retrieves the data. Must be called before MonopolyEventOption.GroupData
func (a *MonopolyEventOptionAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MonopolyEventOption.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MonopolyEventOptionAccessor) Raw() ([]MonopolyEventOption, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MonopolyEventOption{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MonopolyEventOptionAccessor.LoadData to preload everything
func (a *MonopolyEventOptionAccessor) GroupData() {
	for _, d := range a._data {
		a._dataEventOptionID[d.EventOptionID] = d
	}
}

// ByEventOptionID returns the MonopolyEventOption uniquely identified by EventOptionID
//
// Error is only non-nil if the source errors out
func (a *MonopolyEventOptionAccessor) ByEventOptionID(identifier float64) (MonopolyEventOption, error) {
	if a._dataEventOptionID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MonopolyEventOption{}, err
			}
		}
		a.GroupData()
	}
	return a._dataEventOptionID[identifier], nil
}
