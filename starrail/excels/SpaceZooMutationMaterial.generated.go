package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type SpaceZooMutationMaterial struct {
	ChangeChannelList    []float64 `json:"ChangeChannelList"`
	ChangeFeatureList    []float64 `json:"ChangeFeatureList"`
	ExchangeCost         float64   `json:"ExchangeCost"`
	FeatureConditionList []float64 `json:"FeatureConditionList"`
	ItemID               float64   `json:"ItemID"`
	UnlockMissionID      float64   `json:"UnlockMissionID"`
}
type SpaceZooMutationMaterialAccessor struct {
	_data       []SpaceZooMutationMaterial
	_dataItemID map[float64]SpaceZooMutationMaterial
}

// LoadData retrieves the data. Must be called before SpaceZooMutationMaterial.GroupData
func (a *SpaceZooMutationMaterialAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/SpaceZooMutationMaterial.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *SpaceZooMutationMaterialAccessor) Raw() ([]SpaceZooMutationMaterial, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []SpaceZooMutationMaterial{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with SpaceZooMutationMaterialAccessor.LoadData to preload everything
func (a *SpaceZooMutationMaterialAccessor) GroupData() {
	for _, d := range a._data {
		a._dataItemID[d.ItemID] = d
	}
}

// ByItemID returns the SpaceZooMutationMaterial uniquely identified by ItemID
//
// Error is only non-nil if the source errors out
func (a *SpaceZooMutationMaterialAccessor) ByItemID(identifier float64) (SpaceZooMutationMaterial, error) {
	if a._dataItemID == nil {
		err := a.LoadData()
		if err != nil {
			return SpaceZooMutationMaterial{}, err
		}
		a.GroupData()
	}
	return a._dataItemID[identifier], nil
}
