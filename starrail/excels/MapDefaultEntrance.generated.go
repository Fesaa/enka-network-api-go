package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type MapDefaultEntrance struct {
	EntranceID float64 `json:"EntranceID"`
	FloorID    float64 `json:"FloorID"`
}
type MapDefaultEntranceAccessor struct {
	_data           []MapDefaultEntrance
	_dataEntranceID map[float64]MapDefaultEntrance
	_dataFloorID    map[float64]MapDefaultEntrance
}

// LoadData retrieves the data. Must be called before MapDefaultEntrance.GroupData
func (a *MapDefaultEntranceAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MapDefaultEntrance.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MapDefaultEntranceAccessor) Raw() ([]MapDefaultEntrance, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MapDefaultEntrance{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MapDefaultEntranceAccessor.LoadData to preload everything
func (a *MapDefaultEntranceAccessor) GroupData() {
	a._dataEntranceID = map[float64]MapDefaultEntrance{}
	a._dataFloorID = map[float64]MapDefaultEntrance{}
	for _, d := range a._data {
		a._dataEntranceID[d.EntranceID] = d
		a._dataFloorID[d.FloorID] = d
	}
}

// ByEntranceID returns the MapDefaultEntrance uniquely identified by EntranceID
//
// Error is only non-nil if the source errors out
func (a *MapDefaultEntranceAccessor) ByEntranceID(identifier float64) (MapDefaultEntrance, error) {
	if a._dataEntranceID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MapDefaultEntrance{}, err
			}
		}
		a.GroupData()
	}
	return a._dataEntranceID[identifier], nil
}

// ByFloorID returns the MapDefaultEntrance uniquely identified by FloorID
//
// Error is only non-nil if the source errors out
func (a *MapDefaultEntranceAccessor) ByFloorID(identifier float64) (MapDefaultEntrance, error) {
	if a._dataFloorID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MapDefaultEntrance{}, err
			}
		}
		a.GroupData()
	}
	return a._dataFloorID[identifier], nil
}
