package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type TitanAtlasVoicePool struct {
	AudioEvent       string      `json:"AudioEvent"`
	TitanVoiceID     json.Number `json:"TitanVoiceID"`
	TitanVoicePoolID json.Number `json:"TitanVoicePoolID"`
	Weight           json.Number `json:"Weight"`
}
type TitanAtlasVoicePoolAccessor struct {
	_data           []TitanAtlasVoicePool
	_dataAudioEvent map[string]TitanAtlasVoicePool
}

// LoadData retrieves the data. Must be called before TitanAtlasVoicePool.GroupData
func (a *TitanAtlasVoicePoolAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/TitanAtlasVoicePool.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *TitanAtlasVoicePoolAccessor) Raw() ([]TitanAtlasVoicePool, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []TitanAtlasVoicePool{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with TitanAtlasVoicePoolAccessor.LoadData to preload everything
func (a *TitanAtlasVoicePoolAccessor) GroupData() {
	a._dataAudioEvent = map[string]TitanAtlasVoicePool{}
	for _, d := range a._data {
		a._dataAudioEvent[d.AudioEvent] = d
	}
}

// ByAudioEvent returns the TitanAtlasVoicePool uniquely identified by AudioEvent
//
// Error is only non-nil if the source errors out
func (a *TitanAtlasVoicePoolAccessor) ByAudioEvent(identifier string) (TitanAtlasVoicePool, error) {
	if a._dataAudioEvent == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return TitanAtlasVoicePool{}, err
			}
		}
		a.GroupData()
	}
	return a._dataAudioEvent[identifier], nil
}
