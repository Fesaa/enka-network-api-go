package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type RogueTournModule struct {
	ActivityModuleID float64 `json:"ActivityModuleID"`
	MainTournID      float64 `json:"MainTournID"`
	SubTournID       float64 `json:"SubTournID"`
}
type RogueTournModuleAccessor struct {
	_data                 []RogueTournModule
	_dataActivityModuleID map[float64]RogueTournModule
}

// LoadData retrieves the data. Must be called before RogueTournModule.GroupData
func (a *RogueTournModuleAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueTournModule.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueTournModuleAccessor) Raw() ([]RogueTournModule, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueTournModule{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueTournModuleAccessor.LoadData to preload everything
func (a *RogueTournModuleAccessor) GroupData() {
	for _, d := range a._data {
		a._dataActivityModuleID[d.ActivityModuleID] = d
	}
}

// ByActivityModuleID returns the RogueTournModule uniquely identified by ActivityModuleID
//
// Error is only non-nil if the source errors out
func (a *RogueTournModuleAccessor) ByActivityModuleID(identifier float64) (RogueTournModule, error) {
	if a._dataActivityModuleID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueTournModule{}, err
			}
		}
		a.GroupData()
	}
	return a._dataActivityModuleID[identifier], nil
}
