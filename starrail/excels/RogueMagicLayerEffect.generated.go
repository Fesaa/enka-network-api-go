package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type RogueMagicLayerEffect struct {
	DescParamList   []map[string]json.Number `json:"DescParamList"`
	LayerEffectDesc map[string]json.Number   `json:"LayerEffectDesc"`
	LayerEffectID   json.Number              `json:"LayerEffectID"`
	LayerEffectName map[string]json.Number   `json:"LayerEffectName"`
}
type RogueMagicLayerEffectAccessor struct {
	_data              []RogueMagicLayerEffect
	_dataLayerEffectID map[json.Number]RogueMagicLayerEffect
}

// LoadData retrieves the data. Must be called before RogueMagicLayerEffect.GroupData
func (a *RogueMagicLayerEffectAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueMagicLayerEffect.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueMagicLayerEffectAccessor) Raw() ([]RogueMagicLayerEffect, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueMagicLayerEffect{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueMagicLayerEffectAccessor.LoadData to preload everything
func (a *RogueMagicLayerEffectAccessor) GroupData() {
	a._dataLayerEffectID = map[json.Number]RogueMagicLayerEffect{}
	for _, d := range a._data {
		a._dataLayerEffectID[d.LayerEffectID] = d
	}
}

// ByLayerEffectID returns the RogueMagicLayerEffect uniquely identified by LayerEffectID
//
// Error is only non-nil if the source errors out
func (a *RogueMagicLayerEffectAccessor) ByLayerEffectID(identifier json.Number) (RogueMagicLayerEffect, error) {
	if a._dataLayerEffectID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueMagicLayerEffect{}, err
			}
		}
		a.GroupData()
	}
	return a._dataLayerEffectID[identifier], nil
}
