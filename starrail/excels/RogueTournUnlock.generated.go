package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type RogueTournUnlock struct {
	RogueUnlockDetail hash.Hash `json:"RogueUnlockDetail"`
	RogueUnlockID     float64   `json:"RogueUnlockID"`
	UnlockFinishWay   float64   `json:"UnlockFinishWay"`
}
type RogueTournUnlockAccessor struct {
	_data                []RogueTournUnlock
	_dataRogueUnlockID   map[float64]RogueTournUnlock
	_dataUnlockFinishWay map[float64]RogueTournUnlock
}

// LoadData retrieves the data. Must be called before RogueTournUnlock.GroupData
func (a *RogueTournUnlockAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueTournUnlock.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueTournUnlockAccessor) Raw() ([]RogueTournUnlock, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueTournUnlock{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueTournUnlockAccessor.LoadData to preload everything
func (a *RogueTournUnlockAccessor) GroupData() {
	for _, d := range a._data {
		a._dataRogueUnlockID[d.RogueUnlockID] = d
		a._dataUnlockFinishWay[d.UnlockFinishWay] = d
	}
}

// ByRogueUnlockID returns the RogueTournUnlock uniquely identified by RogueUnlockID
//
// Error is only non-nil if the source errors out
func (a *RogueTournUnlockAccessor) ByRogueUnlockID(identifier float64) (RogueTournUnlock, error) {
	if a._dataRogueUnlockID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueTournUnlock{}, err
			}
		}
		a.GroupData()
	}
	return a._dataRogueUnlockID[identifier], nil
}

// ByUnlockFinishWay returns the RogueTournUnlock uniquely identified by UnlockFinishWay
//
// Error is only non-nil if the source errors out
func (a *RogueTournUnlockAccessor) ByUnlockFinishWay(identifier float64) (RogueTournUnlock, error) {
	if a._dataUnlockFinishWay == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueTournUnlock{}, err
			}
		}
		a.GroupData()
	}
	return a._dataUnlockFinishWay[identifier], nil
}
