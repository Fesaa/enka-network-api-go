package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type HeliobusChallengeReward struct {
	ChallengePhaseID       json.Number            `json:"ChallengePhaseID"`
	ChallengeRewardTabID   json.Number            `json:"ChallengeRewardTabID"`
	ChallengeRewardTabName map[string]json.Number `json:"ChallengeRewardTabName"`
	QuestList              []json.Number          `json:"QuestList"`
	UnlockQuest            json.Number            `json:"UnlockQuest"`
}
type HeliobusChallengeRewardAccessor struct {
	_data                     []HeliobusChallengeReward
	_dataChallengeRewardTabID map[json.Number]HeliobusChallengeReward
	_dataUnlockQuest          map[json.Number]HeliobusChallengeReward
}

// LoadData retrieves the data. Must be called before HeliobusChallengeReward.GroupData
func (a *HeliobusChallengeRewardAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/HeliobusChallengeReward.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *HeliobusChallengeRewardAccessor) Raw() ([]HeliobusChallengeReward, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []HeliobusChallengeReward{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with HeliobusChallengeRewardAccessor.LoadData to preload everything
func (a *HeliobusChallengeRewardAccessor) GroupData() {
	a._dataChallengeRewardTabID = map[json.Number]HeliobusChallengeReward{}
	a._dataUnlockQuest = map[json.Number]HeliobusChallengeReward{}
	for _, d := range a._data {
		a._dataChallengeRewardTabID[d.ChallengeRewardTabID] = d
		a._dataUnlockQuest[d.UnlockQuest] = d
	}
}

// ByChallengeRewardTabID returns the HeliobusChallengeReward uniquely identified by ChallengeRewardTabID
//
// Error is only non-nil if the source errors out
func (a *HeliobusChallengeRewardAccessor) ByChallengeRewardTabID(identifier json.Number) (HeliobusChallengeReward, error) {
	if a._dataChallengeRewardTabID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return HeliobusChallengeReward{}, err
			}
		}
		a.GroupData()
	}
	return a._dataChallengeRewardTabID[identifier], nil
}

// ByUnlockQuest returns the HeliobusChallengeReward uniquely identified by UnlockQuest
//
// Error is only non-nil if the source errors out
func (a *HeliobusChallengeRewardAccessor) ByUnlockQuest(identifier json.Number) (HeliobusChallengeReward, error) {
	if a._dataUnlockQuest == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return HeliobusChallengeReward{}, err
			}
		}
		a.GroupData()
	}
	return a._dataUnlockQuest[identifier], nil
}
