package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type HeliobusChallengeReward struct {
	ChallengePhaseID       float64   `json:"ChallengePhaseID"`
	ChallengeRewardTabID   float64   `json:"ChallengeRewardTabID"`
	ChallengeRewardTabName hash.Hash `json:"ChallengeRewardTabName"`
	QuestList              []float64 `json:"QuestList"`
	UnlockQuest            float64   `json:"UnlockQuest"`
}
type HeliobusChallengeRewardAccessor struct {
	_data                     []HeliobusChallengeReward
	_dataUnlockQuest          map[float64]HeliobusChallengeReward
	_dataChallengeRewardTabID map[float64]HeliobusChallengeReward
}

// LoadData retrieves the data. Must be called before HeliobusChallengeReward.GroupData
func (a *HeliobusChallengeRewardAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/HeliobusChallengeReward.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *HeliobusChallengeRewardAccessor) Raw() ([]HeliobusChallengeReward, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []HeliobusChallengeReward{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with HeliobusChallengeRewardAccessor.LoadData to preload everything
func (a *HeliobusChallengeRewardAccessor) GroupData() {
	for _, d := range a._data {
		a._dataUnlockQuest[d.UnlockQuest] = d
		a._dataChallengeRewardTabID[d.ChallengeRewardTabID] = d
	}
}

// ByUnlockQuest returns the HeliobusChallengeReward uniquely identified by UnlockQuest
//
// Error is only non-nil if the source errors out
func (a *HeliobusChallengeRewardAccessor) ByUnlockQuest(identifier float64) (HeliobusChallengeReward, error) {
	if a._dataUnlockQuest == nil {
		err := a.LoadData()
		if err != nil {
			return HeliobusChallengeReward{}, err
		}
		a.GroupData()
	}
	return a._dataUnlockQuest[identifier], nil
}

// ByChallengeRewardTabID returns the HeliobusChallengeReward uniquely identified by ChallengeRewardTabID
//
// Error is only non-nil if the source errors out
func (a *HeliobusChallengeRewardAccessor) ByChallengeRewardTabID(identifier float64) (HeliobusChallengeReward, error) {
	if a._dataChallengeRewardTabID == nil {
		err := a.LoadData()
		if err != nil {
			return HeliobusChallengeReward{}, err
		}
		a.GroupData()
	}
	return a._dataChallengeRewardTabID[identifier], nil
}
