package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type FateAvatarDescription struct {
	DJPCAIKIONP float64      `json:"DJPCAIKIONP"`
	HAIHCBBNIFL []hash.Value `json:"HAIHCBBNIFL"`
	HHNNLMAPNOI hash.Hash    `json:"HHNNLMAPNOI"`
}
type FateAvatarDescriptionAccessor struct {
	_data            []FateAvatarDescription
	_dataDJPCAIKIONP map[float64]FateAvatarDescription
}

// LoadData retrieves the data. Must be called before FateAvatarDescription.GroupData
func (a *FateAvatarDescriptionAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/FateAvatarDescription.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *FateAvatarDescriptionAccessor) Raw() ([]FateAvatarDescription, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []FateAvatarDescription{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with FateAvatarDescriptionAccessor.LoadData to preload everything
func (a *FateAvatarDescriptionAccessor) GroupData() {
	a._dataDJPCAIKIONP = map[float64]FateAvatarDescription{}
	for _, d := range a._data {
		a._dataDJPCAIKIONP[d.DJPCAIKIONP] = d
	}
}

// ByDJPCAIKIONP returns the FateAvatarDescription uniquely identified by DJPCAIKIONP
//
// Error is only non-nil if the source errors out
func (a *FateAvatarDescriptionAccessor) ByDJPCAIKIONP(identifier float64) (FateAvatarDescription, error) {
	if a._dataDJPCAIKIONP == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return FateAvatarDescription{}, err
			}
		}
		a.GroupData()
	}
	return a._dataDJPCAIKIONP[identifier], nil
}
