package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type MapPropConditionConfig struct {
	ActivityModuleID json.Number                              `json:"ActivityModuleID"`
	ID               json.Number                              `json:"ID"`
	MappingInfoID    json.Number                              `json:"MappingInfoID"`
	MiniMapIconID    json.Number                              `json:"MiniMapIconID"`
	Priority         json.Number                              `json:"Priority"`
	UnloadConditions []interface{}                            `json:"UnloadConditions"`
	UnlockConditions []MapPropConditionConfigUnlockConditions `json:"UnlockConditions"`
}
type MapPropConditionConfigUnlockConditions struct {
	Param string `json:"Param"`
	Type  string `json:"Type"`
}
type MapPropConditionConfigAccessor struct {
	_data []MapPropConditionConfig
}

// LoadData retrieves the data. Must be called before MapPropConditionConfig.GroupData
func (a *MapPropConditionConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MapPropConditionConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MapPropConditionConfigAccessor) Raw() ([]MapPropConditionConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MapPropConditionConfig{}, err
		}
	}
	return a._data, nil
}
