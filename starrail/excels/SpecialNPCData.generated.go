package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type SpecialNPCData struct {
	ConfigEntityPath string    `json:"ConfigEntityPath"`
	ID               float64   `json:"ID"`
	JsonPath         string    `json:"JsonPath"`
	MazeSkillIdList  []float64 `json:"MazeSkillIdList"`
	PrefabPath       string    `json:"PrefabPath"`
}
type SpecialNPCDataAccessor struct {
	_data           []SpecialNPCData
	_dataID         map[float64]SpecialNPCData
	_dataPrefabPath map[string]SpecialNPCData
	_dataJsonPath   map[string]SpecialNPCData
}

// LoadData retrieves the data. Must be called before SpecialNPCData.GroupData
func (a *SpecialNPCDataAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/SpecialNPCData.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *SpecialNPCDataAccessor) Raw() ([]SpecialNPCData, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []SpecialNPCData{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with SpecialNPCDataAccessor.LoadData to preload everything
func (a *SpecialNPCDataAccessor) GroupData() {
	for _, d := range a._data {
		a._dataID[d.ID] = d
		a._dataPrefabPath[d.PrefabPath] = d
		a._dataJsonPath[d.JsonPath] = d
	}
}

// ByID returns the SpecialNPCData uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *SpecialNPCDataAccessor) ByID(identifier float64) (SpecialNPCData, error) {
	if a._dataID == nil {
		err := a.LoadData()
		if err != nil {
			return SpecialNPCData{}, err
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}

// ByPrefabPath returns the SpecialNPCData uniquely identified by PrefabPath
//
// Error is only non-nil if the source errors out
func (a *SpecialNPCDataAccessor) ByPrefabPath(identifier string) (SpecialNPCData, error) {
	if a._dataPrefabPath == nil {
		err := a.LoadData()
		if err != nil {
			return SpecialNPCData{}, err
		}
		a.GroupData()
	}
	return a._dataPrefabPath[identifier], nil
}

// ByJsonPath returns the SpecialNPCData uniquely identified by JsonPath
//
// Error is only non-nil if the source errors out
func (a *SpecialNPCDataAccessor) ByJsonPath(identifier string) (SpecialNPCData, error) {
	if a._dataJsonPath == nil {
		err := a.LoadData()
		if err != nil {
			return SpecialNPCData{}, err
		}
		a.GroupData()
	}
	return a._dataJsonPath[identifier], nil
}
