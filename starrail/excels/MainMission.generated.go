package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type MainMission struct {
	BeginOperation        string                  `json:"BeginOperation"`
	BeginParam            []MainMissionBeginParam `json:"BeginParam"`
	ChapterID             float64                 `json:"ChapterID"`
	DisplayPriority       float64                 `json:"DisplayPriority"`
	DisplayRewardID       float64                 `json:"DisplayRewardID"`
	IsDisplayActivityIcon bool                    `json:"IsDisplayActivityIcon"`
	IsInRaid              bool                    `json:"IsInRaid"`
	MainMissionID         float64                 `json:"MainMissionID"`
	MissionAdvance        float64                 `json:"MissionAdvance"`
	MissionPack           float64                 `json:"MissionPack"`
	MissionStoryEvent     float64                 `json:"MissionStoryEvent"`
	Name                  hash.Hash               `json:"Name"`
	NextMainMissionList   []interface{}           `json:"NextMainMissionList"`
	NextTrackMainMission  float64                 `json:"NextTrackMainMission"`
	RewardID              float64                 `json:"RewardID"`
	SubRewardList         []float64               `json:"SubRewardList"`
	SubType               string                  `json:"SubType"`
	TakeOperation         string                  `json:"TakeOperation"`
	TakeParam             []MainMissionTakeParam  `json:"TakeParam"`
	TrackWeight           float64                 `json:"TrackWeight"`
	Type                  string                  `json:"Type"`
	WorldID               float64                 `json:"WorldID"`
}
type MainMissionBeginParam struct {
	Type  string  `json:"Type"`
	Value float64 `json:"Value"`
}
type MainMissionTakeParam struct {
	Type  string  `json:"Type"`
	Value float64 `json:"Value"`
}
type MainMissionAccessor struct {
	_data                []MainMission
	_dataDisplayPriority map[float64]MainMission
	_dataMainMissionID   map[float64]MainMission
}

// LoadData retrieves the data. Must be called before MainMission.GroupData
func (a *MainMissionAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MainMission.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MainMissionAccessor) Raw() ([]MainMission, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MainMission{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MainMissionAccessor.LoadData to preload everything
func (a *MainMissionAccessor) GroupData() {
	a._dataDisplayPriority = map[float64]MainMission{}
	a._dataMainMissionID = map[float64]MainMission{}
	for _, d := range a._data {
		a._dataDisplayPriority[d.DisplayPriority] = d
		a._dataMainMissionID[d.MainMissionID] = d
	}
}

// ByDisplayPriority returns the MainMission uniquely identified by DisplayPriority
//
// Error is only non-nil if the source errors out
func (a *MainMissionAccessor) ByDisplayPriority(identifier float64) (MainMission, error) {
	if a._dataDisplayPriority == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MainMission{}, err
			}
		}
		a.GroupData()
	}
	return a._dataDisplayPriority[identifier], nil
}

// ByMainMissionID returns the MainMission uniquely identified by MainMissionID
//
// Error is only non-nil if the source errors out
func (a *MainMissionAccessor) ByMainMissionID(identifier float64) (MainMission, error) {
	if a._dataMainMissionID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MainMission{}, err
			}
		}
		a.GroupData()
	}
	return a._dataMainMissionID[identifier], nil
}
