package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type MainMission struct {
	BeginOperation        string                  `json:"BeginOperation"`
	BeginParam            []MainMissionBeginParam `json:"BeginParam"`
	ChapterID             json.Number             `json:"ChapterID"`
	DisplayPriority       json.Number             `json:"DisplayPriority"`
	DisplayRewardID       json.Number             `json:"DisplayRewardID"`
	IsDisplayActivityIcon bool                    `json:"IsDisplayActivityIcon"`
	IsInRaid              bool                    `json:"IsInRaid"`
	MainMissionID         json.Number             `json:"MainMissionID"`
	MissionAdvance        json.Number             `json:"MissionAdvance"`
	MissionPack           json.Number             `json:"MissionPack"`
	Name                  map[string]json.Number  `json:"Name"`
	NextMainMissionList   []interface{}           `json:"NextMainMissionList"`
	NextTrackMainMission  json.Number             `json:"NextTrackMainMission"`
	RewardID              json.Number             `json:"RewardID"`
	SubRewardList         []json.Number           `json:"SubRewardList"`
	SubType               string                  `json:"SubType"`
	TakeOperation         string                  `json:"TakeOperation"`
	TakeParam             []MainMissionTakeParam  `json:"TakeParam"`
	TrackWeight           json.Number             `json:"TrackWeight"`
	Type                  string                  `json:"Type"`
	WorldID               json.Number             `json:"WorldID"`
}
type MainMissionBeginParam struct {
	Type  string      `json:"Type"`
	Value json.Number `json:"Value"`
}
type MainMissionTakeParam struct {
	Type  string      `json:"Type"`
	Value json.Number `json:"Value"`
}
type MainMissionAccessor struct {
	_data []MainMission
}

// LoadData retrieves the data. Must be called before MainMission.GroupData
func (a *MainMissionAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MainMission.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MainMissionAccessor) Raw() ([]MainMission, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MainMission{}, err
		}
	}
	return a._data, nil
}
