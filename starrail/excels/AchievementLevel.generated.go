package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type AchievementLevel struct {
	Count         json.Number `json:"Count"`
	Level         json.Number `json:"Level"`
	LevelIconPath string      `json:"LevelIconPath"`
}
type AchievementLevelAccessor struct {
	_data      []AchievementLevel
	_dataCount map[json.Number]AchievementLevel
	_dataLevel map[json.Number]AchievementLevel
}

// LoadData retrieves the data. Must be called before AchievementLevel.GroupData
func (a *AchievementLevelAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/AchievementLevel.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *AchievementLevelAccessor) Raw() ([]AchievementLevel, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []AchievementLevel{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with AchievementLevelAccessor.LoadData to preload everything
func (a *AchievementLevelAccessor) GroupData() {
	a._dataCount = map[json.Number]AchievementLevel{}
	a._dataLevel = map[json.Number]AchievementLevel{}
	for _, d := range a._data {
		a._dataCount[d.Count] = d
		a._dataLevel[d.Level] = d
	}
}

// ByCount returns the AchievementLevel uniquely identified by Count
//
// Error is only non-nil if the source errors out
func (a *AchievementLevelAccessor) ByCount(identifier json.Number) (AchievementLevel, error) {
	if a._dataCount == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AchievementLevel{}, err
			}
		}
		a.GroupData()
	}
	return a._dataCount[identifier], nil
}

// ByLevel returns the AchievementLevel uniquely identified by Level
//
// Error is only non-nil if the source errors out
func (a *AchievementLevelAccessor) ByLevel(identifier json.Number) (AchievementLevel, error) {
	if a._dataLevel == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AchievementLevel{}, err
			}
		}
		a.GroupData()
	}
	return a._dataLevel[identifier], nil
}
