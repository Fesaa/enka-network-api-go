package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type ChallengeBossGroupConfig struct {
	BackGroundPath     string                 `json:"BackGroundPath"`
	ChallengeGroupType string                 `json:"ChallengeGroupType"`
	GroupID            json.Number            `json:"GroupID"`
	GroupName          map[string]json.Number `json:"GroupName"`
	MazeBuffID         json.Number            `json:"MazeBuffID"`
	PreMissionID       json.Number            `json:"PreMissionID"`
	RewardLineGroupID  json.Number            `json:"RewardLineGroupID"`
	ScheduleDataID     json.Number            `json:"ScheduleDataID"`
	TabPicPath         string                 `json:"TabPicPath"`
	TabPicSelectPath   string                 `json:"TabPicSelectPath"`
	ThemePicPath       string                 `json:"ThemePicPath"`
}
type ChallengeBossGroupConfigAccessor struct {
	_data               []ChallengeBossGroupConfig
	_dataGroupID        map[json.Number]ChallengeBossGroupConfig
	_dataScheduleDataID map[json.Number]ChallengeBossGroupConfig
}

// LoadData retrieves the data. Must be called before ChallengeBossGroupConfig.GroupData
func (a *ChallengeBossGroupConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ChallengeBossGroupConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ChallengeBossGroupConfigAccessor) Raw() ([]ChallengeBossGroupConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ChallengeBossGroupConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ChallengeBossGroupConfigAccessor.LoadData to preload everything
func (a *ChallengeBossGroupConfigAccessor) GroupData() {
	a._dataGroupID = map[json.Number]ChallengeBossGroupConfig{}
	a._dataScheduleDataID = map[json.Number]ChallengeBossGroupConfig{}
	for _, d := range a._data {
		a._dataGroupID[d.GroupID] = d
		a._dataScheduleDataID[d.ScheduleDataID] = d
	}
}

// ByGroupID returns the ChallengeBossGroupConfig uniquely identified by GroupID
//
// Error is only non-nil if the source errors out
func (a *ChallengeBossGroupConfigAccessor) ByGroupID(identifier json.Number) (ChallengeBossGroupConfig, error) {
	if a._dataGroupID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ChallengeBossGroupConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataGroupID[identifier], nil
}

// ByScheduleDataID returns the ChallengeBossGroupConfig uniquely identified by ScheduleDataID
//
// Error is only non-nil if the source errors out
func (a *ChallengeBossGroupConfigAccessor) ByScheduleDataID(identifier json.Number) (ChallengeBossGroupConfig, error) {
	if a._dataScheduleDataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ChallengeBossGroupConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataScheduleDataID[identifier], nil
}
