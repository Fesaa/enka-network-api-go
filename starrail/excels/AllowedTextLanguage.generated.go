package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type AllowedTextLanguage struct {
	CondensedFont              string    `json:"CondensedFont"`
	CondensedFontName          string    `json:"CondensedFontName"`
	Ellipsis                   string    `json:"Ellipsis"`
	Font                       string    `json:"Font"`
	FontName                   string    `json:"FontName"`
	LanguageCultureCode        string    `json:"LanguageCultureCode"`
	LanguageType               float64   `json:"LanguageType"`
	LogoImgPath                string    `json:"LogoImgPath"`
	NoLeading                  string    `json:"NoLeading"`
	NoWrap                     bool      `json:"NoWrap"`
	PSFont                     string    `json:"PSFont"`
	PSFontName                 string    `json:"PSFontName"`
	ReplaceSpaceWithNBSPInRuby bool      `json:"ReplaceSpaceWithNBSPInRuby"`
	RubyStrRatio               float64   `json:"RubyStrRatio"`
	SDKkey                     string    `json:"SDKkey"`
	ShowString                 hash.Hash `json:"ShowString"`
	TextLanguageKey            string    `json:"TextLanguageKey"`
	TextureScale               float64   `json:"TextureScale"`
}
type AllowedTextLanguageAccessor struct {
	_data                    []AllowedTextLanguage
	_dataLanguageCultureCode map[string]AllowedTextLanguage
	_dataLanguageType        map[float64]AllowedTextLanguage
	_dataSDKkey              map[string]AllowedTextLanguage
	_dataTextLanguageKey     map[string]AllowedTextLanguage
}

// LoadData retrieves the data. Must be called before AllowedTextLanguage.GroupData
func (a *AllowedTextLanguageAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/AllowedTextLanguage.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *AllowedTextLanguageAccessor) Raw() ([]AllowedTextLanguage, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []AllowedTextLanguage{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with AllowedTextLanguageAccessor.LoadData to preload everything
func (a *AllowedTextLanguageAccessor) GroupData() {
	a._dataLanguageCultureCode = map[string]AllowedTextLanguage{}
	a._dataLanguageType = map[float64]AllowedTextLanguage{}
	a._dataSDKkey = map[string]AllowedTextLanguage{}
	a._dataTextLanguageKey = map[string]AllowedTextLanguage{}
	for _, d := range a._data {
		a._dataLanguageCultureCode[d.LanguageCultureCode] = d
		a._dataLanguageType[d.LanguageType] = d
		a._dataSDKkey[d.SDKkey] = d
		a._dataTextLanguageKey[d.TextLanguageKey] = d
	}
}

// ByLanguageCultureCode returns the AllowedTextLanguage uniquely identified by LanguageCultureCode
//
// Error is only non-nil if the source errors out
func (a *AllowedTextLanguageAccessor) ByLanguageCultureCode(identifier string) (AllowedTextLanguage, error) {
	if a._dataLanguageCultureCode == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AllowedTextLanguage{}, err
			}
		}
		a.GroupData()
	}
	return a._dataLanguageCultureCode[identifier], nil
}

// ByLanguageType returns the AllowedTextLanguage uniquely identified by LanguageType
//
// Error is only non-nil if the source errors out
func (a *AllowedTextLanguageAccessor) ByLanguageType(identifier float64) (AllowedTextLanguage, error) {
	if a._dataLanguageType == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AllowedTextLanguage{}, err
			}
		}
		a.GroupData()
	}
	return a._dataLanguageType[identifier], nil
}

// BySDKkey returns the AllowedTextLanguage uniquely identified by SDKkey
//
// Error is only non-nil if the source errors out
func (a *AllowedTextLanguageAccessor) BySDKkey(identifier string) (AllowedTextLanguage, error) {
	if a._dataSDKkey == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AllowedTextLanguage{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSDKkey[identifier], nil
}

// ByTextLanguageKey returns the AllowedTextLanguage uniquely identified by TextLanguageKey
//
// Error is only non-nil if the source errors out
func (a *AllowedTextLanguageAccessor) ByTextLanguageKey(identifier string) (AllowedTextLanguage, error) {
	if a._dataTextLanguageKey == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AllowedTextLanguage{}, err
			}
		}
		a.GroupData()
	}
	return a._dataTextLanguageKey[identifier], nil
}
