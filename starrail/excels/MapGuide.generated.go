package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type MapGuide struct {
	ID               float64   `json:"ID"`
	MapGuideIconPath string    `json:"MapGuideIconPath"`
	MapGuideName     hash.Hash `json:"MapGuideName"`
	SheetID          float64   `json:"SheetID"`
	SheetType        float64   `json:"SheetType"`
	WorldID          float64   `json:"WorldID"`
}
type MapGuideAccessor struct {
	_data          []MapGuide
	_dataID        map[float64]MapGuide
	_dataSheetID   map[float64]MapGuide
	_dataSheetType map[float64]MapGuide
}

// LoadData retrieves the data. Must be called before MapGuide.GroupData
func (a *MapGuideAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MapGuide.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MapGuideAccessor) Raw() ([]MapGuide, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MapGuide{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MapGuideAccessor.LoadData to preload everything
func (a *MapGuideAccessor) GroupData() {
	for _, d := range a._data {
		a._dataID[d.ID] = d
		a._dataSheetID[d.SheetID] = d
		a._dataSheetType[d.SheetType] = d
	}
}

// ByID returns the MapGuide uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *MapGuideAccessor) ByID(identifier float64) (MapGuide, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MapGuide{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}

// BySheetID returns the MapGuide uniquely identified by SheetID
//
// Error is only non-nil if the source errors out
func (a *MapGuideAccessor) BySheetID(identifier float64) (MapGuide, error) {
	if a._dataSheetID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MapGuide{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSheetID[identifier], nil
}

// BySheetType returns the MapGuide uniquely identified by SheetType
//
// Error is only non-nil if the source errors out
func (a *MapGuideAccessor) BySheetType(identifier float64) (MapGuide, error) {
	if a._dataSheetType == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MapGuide{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSheetType[identifier], nil
}
