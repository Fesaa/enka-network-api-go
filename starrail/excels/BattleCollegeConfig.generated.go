package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type BattleCollegeConfig struct {
	AimList              []json.Number          `json:"AimList"`
	BattleAreaGroupID    json.Number            `json:"BattleAreaGroupID"`
	BattleAreaID         json.Number            `json:"BattleAreaID"`
	FloorID              json.Number            `json:"FloorID"`
	ID                   json.Number            `json:"ID"`
	PlaneID              json.Number            `json:"PlaneID"`
	RewardID             json.Number            `json:"RewardID"`
	SortID               json.Number            `json:"SortID"`
	StageID              json.Number            `json:"StageID"`
	StageIntroDescIDList json.Number            `json:"StageIntroDescIDList"`
	StageIntroTitle      map[string]json.Number `json:"StageIntroTitle"`
	TrialAvatarList      []json.Number          `json:"TrialAvatarList"`
	TutorialID           json.Number            `json:"TutorialID"`
	TutorialTypeGroupID  json.Number            `json:"TutorialTypeGroupID"`
	VideoAssetID         json.Number            `json:"VideoAssetID"`
	VideoCoverPath       string                 `json:"VideoCoverPath"`
}
type BattleCollegeConfigAccessor struct {
	_data               []BattleCollegeConfig
	_dataVideoCoverPath map[string]BattleCollegeConfig
}

// LoadData retrieves the data. Must be called before BattleCollegeConfig.GroupData
func (a *BattleCollegeConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/BattleCollegeConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *BattleCollegeConfigAccessor) Raw() ([]BattleCollegeConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []BattleCollegeConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with BattleCollegeConfigAccessor.LoadData to preload everything
func (a *BattleCollegeConfigAccessor) GroupData() {
	a._dataVideoCoverPath = map[string]BattleCollegeConfig{}
	for _, d := range a._data {
		a._dataVideoCoverPath[d.VideoCoverPath] = d
	}
}

// ByVideoCoverPath returns the BattleCollegeConfig uniquely identified by VideoCoverPath
//
// Error is only non-nil if the source errors out
func (a *BattleCollegeConfigAccessor) ByVideoCoverPath(identifier string) (BattleCollegeConfig, error) {
	if a._dataVideoCoverPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return BattleCollegeConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataVideoCoverPath[identifier], nil
}
