package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type BattleCollegeConfig struct {
	AimList              []float64 `json:"AimList"`
	BattleAreaGroupID    float64   `json:"BattleAreaGroupID"`
	BattleAreaID         float64   `json:"BattleAreaID"`
	FloorID              float64   `json:"FloorID"`
	ID                   float64   `json:"ID"`
	PlaneID              float64   `json:"PlaneID"`
	RewardID             float64   `json:"RewardID"`
	SortID               float64   `json:"SortID"`
	StageID              float64   `json:"StageID"`
	StageIntroDescIDList float64   `json:"StageIntroDescIDList"`
	StageIntroTitle      hash.Hash `json:"StageIntroTitle"`
	TrialAvatarList      []float64 `json:"TrialAvatarList"`
	TutorialID           float64   `json:"TutorialID"`
	TutorialTypeGroupID  float64   `json:"TutorialTypeGroupID"`
	VideoAssetID         float64   `json:"VideoAssetID"`
	VideoCoverPath       string    `json:"VideoCoverPath"`
}
type BattleCollegeConfigAccessor struct {
	_data               []BattleCollegeConfig
	_dataID             map[float64]BattleCollegeConfig
	_dataRewardID       map[float64]BattleCollegeConfig
	_dataStageID        map[float64]BattleCollegeConfig
	_dataTutorialID     map[float64]BattleCollegeConfig
	_dataVideoAssetID   map[float64]BattleCollegeConfig
	_dataVideoCoverPath map[string]BattleCollegeConfig
}

// LoadData retrieves the data. Must be called before BattleCollegeConfig.GroupData
func (a *BattleCollegeConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/BattleCollegeConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *BattleCollegeConfigAccessor) Raw() ([]BattleCollegeConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []BattleCollegeConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with BattleCollegeConfigAccessor.LoadData to preload everything
func (a *BattleCollegeConfigAccessor) GroupData() {
	for _, d := range a._data {
		a._dataID[d.ID] = d
		a._dataRewardID[d.RewardID] = d
		a._dataStageID[d.StageID] = d
		a._dataTutorialID[d.TutorialID] = d
		a._dataVideoAssetID[d.VideoAssetID] = d
		a._dataVideoCoverPath[d.VideoCoverPath] = d
	}
}

// ByID returns the BattleCollegeConfig uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *BattleCollegeConfigAccessor) ByID(identifier float64) (BattleCollegeConfig, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return BattleCollegeConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}

// ByRewardID returns the BattleCollegeConfig uniquely identified by RewardID
//
// Error is only non-nil if the source errors out
func (a *BattleCollegeConfigAccessor) ByRewardID(identifier float64) (BattleCollegeConfig, error) {
	if a._dataRewardID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return BattleCollegeConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataRewardID[identifier], nil
}

// ByStageID returns the BattleCollegeConfig uniquely identified by StageID
//
// Error is only non-nil if the source errors out
func (a *BattleCollegeConfigAccessor) ByStageID(identifier float64) (BattleCollegeConfig, error) {
	if a._dataStageID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return BattleCollegeConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataStageID[identifier], nil
}

// ByTutorialID returns the BattleCollegeConfig uniquely identified by TutorialID
//
// Error is only non-nil if the source errors out
func (a *BattleCollegeConfigAccessor) ByTutorialID(identifier float64) (BattleCollegeConfig, error) {
	if a._dataTutorialID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return BattleCollegeConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataTutorialID[identifier], nil
}

// ByVideoAssetID returns the BattleCollegeConfig uniquely identified by VideoAssetID
//
// Error is only non-nil if the source errors out
func (a *BattleCollegeConfigAccessor) ByVideoAssetID(identifier float64) (BattleCollegeConfig, error) {
	if a._dataVideoAssetID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return BattleCollegeConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataVideoAssetID[identifier], nil
}

// ByVideoCoverPath returns the BattleCollegeConfig uniquely identified by VideoCoverPath
//
// Error is only non-nil if the source errors out
func (a *BattleCollegeConfigAccessor) ByVideoCoverPath(identifier string) (BattleCollegeConfig, error) {
	if a._dataVideoCoverPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return BattleCollegeConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataVideoCoverPath[identifier], nil
}
