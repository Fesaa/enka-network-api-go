package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type TextSpriteConfig struct {
	SpriteName string `json:"SpriteName"`
	SpritePath string `json:"SpritePath"`
}
type TextSpriteConfigAccessor struct {
	_data           []TextSpriteConfig
	_dataSpriteName map[string]TextSpriteConfig
	_dataSpritePath map[string]TextSpriteConfig
}

// LoadData retrieves the data. Must be called before TextSpriteConfig.GroupData
func (a *TextSpriteConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/TextSpriteConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *TextSpriteConfigAccessor) Raw() ([]TextSpriteConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []TextSpriteConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with TextSpriteConfigAccessor.LoadData to preload everything
func (a *TextSpriteConfigAccessor) GroupData() {
	for _, d := range a._data {
		a._dataSpriteName[d.SpriteName] = d
		a._dataSpritePath[d.SpritePath] = d
	}
}

// BySpriteName returns the TextSpriteConfig uniquely identified by SpriteName
//
// Error is only non-nil if the source errors out
func (a *TextSpriteConfigAccessor) BySpriteName(identifier string) (TextSpriteConfig, error) {
	if a._dataSpriteName == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return TextSpriteConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSpriteName[identifier], nil
}

// BySpritePath returns the TextSpriteConfig uniquely identified by SpritePath
//
// Error is only non-nil if the source errors out
func (a *TextSpriteConfigAccessor) BySpritePath(identifier string) (TextSpriteConfig, error) {
	if a._dataSpritePath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return TextSpriteConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSpritePath[identifier], nil
}
