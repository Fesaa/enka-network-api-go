package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type RogueImmerseLevel struct {
	Level    float64 `json:"Level"`
	UnlockID float64 `json:"UnlockID"`
}
type RogueImmerseLevelAccessor struct {
	_data         []RogueImmerseLevel
	_dataLevel    map[float64]RogueImmerseLevel
	_dataUnlockID map[float64]RogueImmerseLevel
}

// LoadData retrieves the data. Must be called before RogueImmerseLevel.GroupData
func (a *RogueImmerseLevelAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueImmerseLevel.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueImmerseLevelAccessor) Raw() ([]RogueImmerseLevel, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueImmerseLevel{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueImmerseLevelAccessor.LoadData to preload everything
func (a *RogueImmerseLevelAccessor) GroupData() {
	for _, d := range a._data {
		a._dataLevel[d.Level] = d
		a._dataUnlockID[d.UnlockID] = d
	}
}

// ByLevel returns the RogueImmerseLevel uniquely identified by Level
//
// Error is only non-nil if the source errors out
func (a *RogueImmerseLevelAccessor) ByLevel(identifier float64) (RogueImmerseLevel, error) {
	if a._dataLevel == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueImmerseLevel{}, err
			}
		}
		a.GroupData()
	}
	return a._dataLevel[identifier], nil
}

// ByUnlockID returns the RogueImmerseLevel uniquely identified by UnlockID
//
// Error is only non-nil if the source errors out
func (a *RogueImmerseLevelAccessor) ByUnlockID(identifier float64) (RogueImmerseLevel, error) {
	if a._dataUnlockID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueImmerseLevel{}, err
			}
		}
		a.GroupData()
	}
	return a._dataUnlockID[identifier], nil
}
