package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type ExpeditionData struct {
	AssignDesc          hash.Hash                       `json:"AssignDesc"`
	AssignerIDList      []float64                       `json:"AssignerIDList"`
	AvatarNumMax        float64                         `json:"AvatarNumMax"`
	AvatarNumMin        float64                         `json:"AvatarNumMin"`
	BonusBaseTypeList   []string                        `json:"BonusBaseTypeList"`
	BonusDamageTypeList []string                        `json:"BonusDamageTypeList"`
	DisplayItemList     []ExpeditionDataDisplayItemList `json:"DisplayItemList"`
	ExpeditionID        float64                         `json:"ExpeditionID"`
	GroupID             float64                         `json:"GroupID"`
	Name                hash.Hash                       `json:"Name"`
	UnlockMission       float64                         `json:"UnlockMission"`
}
type ExpeditionDataDisplayItemList struct {
	ItemID float64 `json:"ItemID"`
}
type ExpeditionDataAccessor struct {
	_data             []ExpeditionData
	_dataExpeditionID map[float64]ExpeditionData
}

// LoadData retrieves the data. Must be called before ExpeditionData.GroupData
func (a *ExpeditionDataAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ExpeditionData.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ExpeditionDataAccessor) Raw() ([]ExpeditionData, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ExpeditionData{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ExpeditionDataAccessor.LoadData to preload everything
func (a *ExpeditionDataAccessor) GroupData() {
	a._dataExpeditionID = map[float64]ExpeditionData{}
	for _, d := range a._data {
		a._dataExpeditionID[d.ExpeditionID] = d
	}
}

// ByExpeditionID returns the ExpeditionData uniquely identified by ExpeditionID
//
// Error is only non-nil if the source errors out
func (a *ExpeditionDataAccessor) ByExpeditionID(identifier float64) (ExpeditionData, error) {
	if a._dataExpeditionID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ExpeditionData{}, err
			}
		}
		a.GroupData()
	}
	return a._dataExpeditionID[identifier], nil
}
