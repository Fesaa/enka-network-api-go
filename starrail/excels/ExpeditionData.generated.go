package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type ExpeditionData struct {
	AssignDesc          map[string]json.Number   `json:"AssignDesc"`
	AssignerIDList      []json.Number            `json:"AssignerIDList"`
	AvatarNumMax        json.Number              `json:"AvatarNumMax"`
	AvatarNumMin        json.Number              `json:"AvatarNumMin"`
	BonusBaseTypeList   []string                 `json:"BonusBaseTypeList"`
	BonusDamageTypeList []string                 `json:"BonusDamageTypeList"`
	DisplayItemList     []map[string]json.Number `json:"DisplayItemList"`
	ExpeditionID        json.Number              `json:"ExpeditionID"`
	GroupID             json.Number              `json:"GroupID"`
	Name                map[string]json.Number   `json:"Name"`
	UnlockMission       json.Number              `json:"UnlockMission"`
}
type ExpeditionDataAccessor struct {
	_data []ExpeditionData
}

// LoadData retrieves the data. Must be called before ExpeditionData.GroupData
func (a *ExpeditionDataAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ExpeditionData.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ExpeditionDataAccessor) Raw() ([]ExpeditionData, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ExpeditionData{}, err
		}
	}
	return a._data, nil
}
