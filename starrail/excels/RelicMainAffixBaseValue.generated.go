package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type RelicMainAffixBaseValue struct {
	BaseValue      float64 `json:"BaseValue"`
	RelicMainAffix string  `json:"RelicMainAffix"`
	Type           string  `json:"Type"`
	ValuePerLevel  float64 `json:"ValuePerLevel"`
}
type RelicMainAffixBaseValueAccessor struct {
	_data               []RelicMainAffixBaseValue
	_dataRelicMainAffix map[string]RelicMainAffixBaseValue
}

// LoadData retrieves the data. Must be called before RelicMainAffixBaseValue.GroupData
func (a *RelicMainAffixBaseValueAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RelicMainAffixBaseValue.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RelicMainAffixBaseValueAccessor) Raw() ([]RelicMainAffixBaseValue, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RelicMainAffixBaseValue{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RelicMainAffixBaseValueAccessor.LoadData to preload everything
func (a *RelicMainAffixBaseValueAccessor) GroupData() {
	for _, d := range a._data {
		a._dataRelicMainAffix[d.RelicMainAffix] = d
	}
}

// ByRelicMainAffix returns the RelicMainAffixBaseValue uniquely identified by RelicMainAffix
//
// Error is only non-nil if the source errors out
func (a *RelicMainAffixBaseValueAccessor) ByRelicMainAffix(identifier string) (RelicMainAffixBaseValue, error) {
	if a._dataRelicMainAffix == nil {
		err := a.LoadData()
		if err != nil {
			return RelicMainAffixBaseValue{}, err
		}
		a.GroupData()
	}
	return a._dataRelicMainAffix[identifier], nil
}
