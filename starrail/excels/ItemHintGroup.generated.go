package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type ItemHintGroup struct {
	FOCPMMIAFBN string `json:"FOCPMMIAFBN"`
	HOEMANMFHCH string `json:"HOEMANMFHCH"`
}
type ItemHintGroupAccessor struct {
	_data            []ItemHintGroup
	_dataHOEMANMFHCH map[string]ItemHintGroup
}

// LoadData retrieves the data. Must be called before ItemHintGroup.GroupData
func (a *ItemHintGroupAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ItemHintGroup.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ItemHintGroupAccessor) Raw() ([]ItemHintGroup, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ItemHintGroup{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ItemHintGroupAccessor.LoadData to preload everything
func (a *ItemHintGroupAccessor) GroupData() {
	a._dataHOEMANMFHCH = map[string]ItemHintGroup{}
	for _, d := range a._data {
		a._dataHOEMANMFHCH[d.HOEMANMFHCH] = d
	}
}

// ByHOEMANMFHCH returns the ItemHintGroup uniquely identified by HOEMANMFHCH
//
// Error is only non-nil if the source errors out
func (a *ItemHintGroupAccessor) ByHOEMANMFHCH(identifier string) (ItemHintGroup, error) {
	if a._dataHOEMANMFHCH == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ItemHintGroup{}, err
			}
		}
		a.GroupData()
	}
	return a._dataHOEMANMFHCH[identifier], nil
}
