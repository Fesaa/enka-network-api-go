package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type BattleEventConfigLD struct {
	AbilityList           []string                              `json:"AbilityList"`
	AssetPackName         string                                `json:"AssetPackName"`
	BattleEventButtonType float64                               `json:"BattleEventButtonType"`
	BattleEventID         float64                               `json:"BattleEventID"`
	BattleEventName       string                                `json:"BattleEventName"`
	DescrptionText        string                                `json:"DescrptionText"`
	EliteGroup            bool                                  `json:"EliteGroup"`
	EventSubType          string                                `json:"EventSubType"`
	HardLevel             bool                                  `json:"HardLevel"`
	HeadIcon              string                                `json:"HeadIcon"`
	OverrideProperty      []BattleEventConfigLDOverrideProperty `json:"OverrideProperty"`
	ParamList             []interface{}                         `json:"ParamList"`
	Speed                 hash.Value                            `json:"Speed"`
	Team                  string                                `json:"Team"`
}
type BattleEventConfigLDOverrideProperty struct {
	PropertyType string     `json:"PropertyType"`
	Value        hash.Value `json:"Value"`
}
type BattleEventConfigLDAccessor struct {
	_data                []BattleEventConfigLD
	_dataBattleEventID   map[float64]BattleEventConfigLD
	_dataBattleEventName map[string]BattleEventConfigLD
}

// LoadData retrieves the data. Must be called before BattleEventConfigLD.GroupData
func (a *BattleEventConfigLDAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/BattleEventConfigLD.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *BattleEventConfigLDAccessor) Raw() ([]BattleEventConfigLD, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []BattleEventConfigLD{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with BattleEventConfigLDAccessor.LoadData to preload everything
func (a *BattleEventConfigLDAccessor) GroupData() {
	a._dataBattleEventID = map[float64]BattleEventConfigLD{}
	a._dataBattleEventName = map[string]BattleEventConfigLD{}
	for _, d := range a._data {
		a._dataBattleEventID[d.BattleEventID] = d
		a._dataBattleEventName[d.BattleEventName] = d
	}
}

// ByBattleEventID returns the BattleEventConfigLD uniquely identified by BattleEventID
//
// Error is only non-nil if the source errors out
func (a *BattleEventConfigLDAccessor) ByBattleEventID(identifier float64) (BattleEventConfigLD, error) {
	if a._dataBattleEventID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return BattleEventConfigLD{}, err
			}
		}
		a.GroupData()
	}
	return a._dataBattleEventID[identifier], nil
}

// ByBattleEventName returns the BattleEventConfigLD uniquely identified by BattleEventName
//
// Error is only non-nil if the source errors out
func (a *BattleEventConfigLDAccessor) ByBattleEventName(identifier string) (BattleEventConfigLD, error) {
	if a._dataBattleEventName == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return BattleEventConfigLD{}, err
			}
		}
		a.GroupData()
	}
	return a._dataBattleEventName[identifier], nil
}
