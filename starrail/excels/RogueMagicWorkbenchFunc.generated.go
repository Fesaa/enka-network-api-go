package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type RogueMagicWorkbenchFunc struct {
	FuncDesc map[string]json.Number `json:"FuncDesc"`
	FuncID   json.Number            `json:"FuncID"`
	FuncIcon string                 `json:"FuncIcon"`
	FuncName map[string]json.Number `json:"FuncName"`
	FuncType string                 `json:"FuncType"`
}
type RogueMagicWorkbenchFuncAccessor struct {
	_data         []RogueMagicWorkbenchFunc
	_dataFuncID   map[json.Number]RogueMagicWorkbenchFunc
	_dataFuncType map[string]RogueMagicWorkbenchFunc
}

// LoadData retrieves the data. Must be called before RogueMagicWorkbenchFunc.GroupData
func (a *RogueMagicWorkbenchFuncAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueMagicWorkbenchFunc.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueMagicWorkbenchFuncAccessor) Raw() ([]RogueMagicWorkbenchFunc, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueMagicWorkbenchFunc{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueMagicWorkbenchFuncAccessor.LoadData to preload everything
func (a *RogueMagicWorkbenchFuncAccessor) GroupData() {
	a._dataFuncID = map[json.Number]RogueMagicWorkbenchFunc{}
	a._dataFuncType = map[string]RogueMagicWorkbenchFunc{}
	for _, d := range a._data {
		a._dataFuncID[d.FuncID] = d
		a._dataFuncType[d.FuncType] = d
	}
}

// ByFuncID returns the RogueMagicWorkbenchFunc uniquely identified by FuncID
//
// Error is only non-nil if the source errors out
func (a *RogueMagicWorkbenchFuncAccessor) ByFuncID(identifier json.Number) (RogueMagicWorkbenchFunc, error) {
	if a._dataFuncID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueMagicWorkbenchFunc{}, err
			}
		}
		a.GroupData()
	}
	return a._dataFuncID[identifier], nil
}

// ByFuncType returns the RogueMagicWorkbenchFunc uniquely identified by FuncType
//
// Error is only non-nil if the source errors out
func (a *RogueMagicWorkbenchFuncAccessor) ByFuncType(identifier string) (RogueMagicWorkbenchFunc, error) {
	if a._dataFuncType == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueMagicWorkbenchFunc{}, err
			}
		}
		a.GroupData()
	}
	return a._dataFuncType[identifier], nil
}
