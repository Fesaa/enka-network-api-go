package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type RogueTournWeeklyChallenge struct {
	ChallengeID               json.Number            `json:"ChallengeID"`
	DisplayFinalMonsterGroups map[string]json.Number `json:"DisplayFinalMonsterGroups"`
	DisplayMonsterGroups1     map[string]json.Number `json:"DisplayMonsterGroups1"`
	DisplayMonsterGroups2     map[string]json.Number `json:"DisplayMonsterGroups2"`
	DisplayMonsterGroups3     map[string]json.Number `json:"DisplayMonsterGroups3"`
	RewardID                  json.Number            `json:"RewardID"`
	WeeklyContentDetailList   []json.Number          `json:"WeeklyContentDetailList"`
	WeeklyContentList         []json.Number          `json:"WeeklyContentList"`
	WeeklyName                map[string]json.Number `json:"WeeklyName"`
}
type RogueTournWeeklyChallengeAccessor struct {
	_data            []RogueTournWeeklyChallenge
	_dataChallengeID map[json.Number]RogueTournWeeklyChallenge
}

// LoadData retrieves the data. Must be called before RogueTournWeeklyChallenge.GroupData
func (a *RogueTournWeeklyChallengeAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueTournWeeklyChallenge.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueTournWeeklyChallengeAccessor) Raw() ([]RogueTournWeeklyChallenge, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueTournWeeklyChallenge{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueTournWeeklyChallengeAccessor.LoadData to preload everything
func (a *RogueTournWeeklyChallengeAccessor) GroupData() {
	a._dataChallengeID = map[json.Number]RogueTournWeeklyChallenge{}
	for _, d := range a._data {
		a._dataChallengeID[d.ChallengeID] = d
	}
}

// ByChallengeID returns the RogueTournWeeklyChallenge uniquely identified by ChallengeID
//
// Error is only non-nil if the source errors out
func (a *RogueTournWeeklyChallengeAccessor) ByChallengeID(identifier json.Number) (RogueTournWeeklyChallenge, error) {
	if a._dataChallengeID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueTournWeeklyChallenge{}, err
			}
		}
		a.GroupData()
	}
	return a._dataChallengeID[identifier], nil
}
