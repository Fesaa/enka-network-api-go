package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type RogueTournWeeklyChallenge struct {
	ChallengeID               json.Number            `json:"ChallengeID"`
	DisplayFinalMonsterGroups map[string]json.Number `json:"DisplayFinalMonsterGroups"`
	DisplayMonsterGroups1     map[string]json.Number `json:"DisplayMonsterGroups1"`
	DisplayMonsterGroups2     map[string]json.Number `json:"DisplayMonsterGroups2"`
	DisplayMonsterGroups3     map[string]json.Number `json:"DisplayMonsterGroups3"`
	RewardID                  json.Number            `json:"RewardID"`
	WeeklyContentDetailList   []json.Number          `json:"WeeklyContentDetailList"`
	WeeklyContentList         []json.Number          `json:"WeeklyContentList"`
	WeeklyName                map[string]json.Number `json:"WeeklyName"`
}
type RogueTournWeeklyChallengeAccessor struct {
	_data []RogueTournWeeklyChallenge
}

// LoadData retrieves the data. Must be called before RogueTournWeeklyChallenge.GroupData
func (a *RogueTournWeeklyChallengeAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueTournWeeklyChallenge.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueTournWeeklyChallengeAccessor) Raw() ([]RogueTournWeeklyChallenge, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueTournWeeklyChallenge{}, err
		}
	}
	return a._data, nil
}
