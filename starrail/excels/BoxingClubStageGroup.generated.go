package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type BoxingClubStageGroup struct {
	DisplayEventIDList []float64 `json:"DisplayEventIDList"`
	DisplayIndexList   []float64 `json:"DisplayIndexList"`
	EventIDList        []float64 `json:"EventIDList"`
	MonsterIDList      []float64 `json:"MonsterIDList"`
	StageGroupID       float64   `json:"StageGroupID"`
	Weight             float64   `json:"Weight"`
}
type BoxingClubStageGroupAccessor struct {
	_data             []BoxingClubStageGroup
	_dataStageGroupID map[float64]BoxingClubStageGroup
}

// LoadData retrieves the data. Must be called before BoxingClubStageGroup.GroupData
func (a *BoxingClubStageGroupAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/BoxingClubStageGroup.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *BoxingClubStageGroupAccessor) Raw() ([]BoxingClubStageGroup, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []BoxingClubStageGroup{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with BoxingClubStageGroupAccessor.LoadData to preload everything
func (a *BoxingClubStageGroupAccessor) GroupData() {
	for _, d := range a._data {
		a._dataStageGroupID[d.StageGroupID] = d
	}
}

// ByStageGroupID returns the BoxingClubStageGroup uniquely identified by StageGroupID
//
// Error is only non-nil if the source errors out
func (a *BoxingClubStageGroupAccessor) ByStageGroupID(identifier float64) (BoxingClubStageGroup, error) {
	if a._dataStageGroupID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return BoxingClubStageGroup{}, err
			}
		}
		a.GroupData()
	}
	return a._dataStageGroupID[identifier], nil
}
