package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type RogueDLCEntrance struct {
	ButtonPath          string    `json:"ButtonPath"`
	ID                  float64   `json:"ID"`
	PatternBgPath       string    `json:"PatternBgPath"`
	RewardList          []float64 `json:"RewardList"`
	SubType             string    `json:"SubType"`
	SubTypeTitle        hash.Hash `json:"SubTypeTitle"`
	SwitchBannerImgPath string    `json:"SwitchBannerImgPath"`
}
type RogueDLCEntranceAccessor struct {
	_data                    []RogueDLCEntrance
	_dataSwitchBannerImgPath map[string]RogueDLCEntrance
	_dataID                  map[float64]RogueDLCEntrance
	_dataSubType             map[string]RogueDLCEntrance
	_dataButtonPath          map[string]RogueDLCEntrance
	_dataPatternBgPath       map[string]RogueDLCEntrance
}

// LoadData retrieves the data. Must be called before RogueDLCEntrance.GroupData
func (a *RogueDLCEntranceAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueDLCEntrance.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueDLCEntranceAccessor) Raw() ([]RogueDLCEntrance, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueDLCEntrance{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueDLCEntranceAccessor.LoadData to preload everything
func (a *RogueDLCEntranceAccessor) GroupData() {
	for _, d := range a._data {
		a._dataSwitchBannerImgPath[d.SwitchBannerImgPath] = d
		a._dataID[d.ID] = d
		a._dataSubType[d.SubType] = d
		a._dataButtonPath[d.ButtonPath] = d
		a._dataPatternBgPath[d.PatternBgPath] = d
	}
}

// BySwitchBannerImgPath returns the RogueDLCEntrance uniquely identified by SwitchBannerImgPath
//
// Error is only non-nil if the source errors out
func (a *RogueDLCEntranceAccessor) BySwitchBannerImgPath(identifier string) (RogueDLCEntrance, error) {
	if a._dataSwitchBannerImgPath == nil {
		err := a.LoadData()
		if err != nil {
			return RogueDLCEntrance{}, err
		}
		a.GroupData()
	}
	return a._dataSwitchBannerImgPath[identifier], nil
}

// ByID returns the RogueDLCEntrance uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *RogueDLCEntranceAccessor) ByID(identifier float64) (RogueDLCEntrance, error) {
	if a._dataID == nil {
		err := a.LoadData()
		if err != nil {
			return RogueDLCEntrance{}, err
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}

// BySubType returns the RogueDLCEntrance uniquely identified by SubType
//
// Error is only non-nil if the source errors out
func (a *RogueDLCEntranceAccessor) BySubType(identifier string) (RogueDLCEntrance, error) {
	if a._dataSubType == nil {
		err := a.LoadData()
		if err != nil {
			return RogueDLCEntrance{}, err
		}
		a.GroupData()
	}
	return a._dataSubType[identifier], nil
}

// ByButtonPath returns the RogueDLCEntrance uniquely identified by ButtonPath
//
// Error is only non-nil if the source errors out
func (a *RogueDLCEntranceAccessor) ByButtonPath(identifier string) (RogueDLCEntrance, error) {
	if a._dataButtonPath == nil {
		err := a.LoadData()
		if err != nil {
			return RogueDLCEntrance{}, err
		}
		a.GroupData()
	}
	return a._dataButtonPath[identifier], nil
}

// ByPatternBgPath returns the RogueDLCEntrance uniquely identified by PatternBgPath
//
// Error is only non-nil if the source errors out
func (a *RogueDLCEntranceAccessor) ByPatternBgPath(identifier string) (RogueDLCEntrance, error) {
	if a._dataPatternBgPath == nil {
		err := a.LoadData()
		if err != nil {
			return RogueDLCEntrance{}, err
		}
		a.GroupData()
	}
	return a._dataPatternBgPath[identifier], nil
}
