package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type SwordTrainingStory struct {
	EffectDesc          hash.Hash `json:"EffectDesc"`
	EffectIDList        []float64 `json:"EffectIDList"`
	MissionID           float64   `json:"MissionID"`
	PartnerID           float64   `json:"PartnerID"`
	PerformanceID       float64   `json:"PerformanceID"`
	RepeatPerformanceID float64   `json:"RepeatPerformanceID"`
	StoryDesc           hash.Hash `json:"StoryDesc"`
	StoryHint           hash.Hash `json:"StoryHint"`
	StoryID             float64   `json:"StoryID"`
	StoryImage          string    `json:"StoryImage"`
	StoryTitle          hash.Hash `json:"StoryTitle"`
	StoryType           string    `json:"StoryType"`
}
type SwordTrainingStoryAccessor struct {
	_data        []SwordTrainingStory
	_dataStoryID map[float64]SwordTrainingStory
}

// LoadData retrieves the data. Must be called before SwordTrainingStory.GroupData
func (a *SwordTrainingStoryAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/SwordTrainingStory.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *SwordTrainingStoryAccessor) Raw() ([]SwordTrainingStory, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []SwordTrainingStory{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with SwordTrainingStoryAccessor.LoadData to preload everything
func (a *SwordTrainingStoryAccessor) GroupData() {
	for _, d := range a._data {
		a._dataStoryID[d.StoryID] = d
	}
}

// ByStoryID returns the SwordTrainingStory uniquely identified by StoryID
//
// Error is only non-nil if the source errors out
func (a *SwordTrainingStoryAccessor) ByStoryID(identifier float64) (SwordTrainingStory, error) {
	if a._dataStoryID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return SwordTrainingStory{}, err
			}
		}
		a.GroupData()
	}
	return a._dataStoryID[identifier], nil
}
