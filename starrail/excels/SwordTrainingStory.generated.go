package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type SwordTrainingStory struct {
	EffectDesc          map[string]json.Number `json:"EffectDesc"`
	EffectIDList        []json.Number          `json:"EffectIDList"`
	MissionID           json.Number            `json:"MissionID"`
	PartnerID           json.Number            `json:"PartnerID"`
	PerformanceID       json.Number            `json:"PerformanceID"`
	RepeatPerformanceID json.Number            `json:"RepeatPerformanceID"`
	StoryDesc           map[string]json.Number `json:"StoryDesc"`
	StoryHint           map[string]json.Number `json:"StoryHint"`
	StoryID             json.Number            `json:"StoryID"`
	StoryImage          string                 `json:"StoryImage"`
	StoryTitle          map[string]json.Number `json:"StoryTitle"`
	StoryType           string                 `json:"StoryType"`
}
type SwordTrainingStoryAccessor struct {
	_data []SwordTrainingStory
}

// LoadData retrieves the data. Must be called before SwordTrainingStory.GroupData
func (a *SwordTrainingStoryAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/SwordTrainingStory.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *SwordTrainingStoryAccessor) Raw() ([]SwordTrainingStory, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []SwordTrainingStory{}, err
		}
	}
	return a._data, nil
}
