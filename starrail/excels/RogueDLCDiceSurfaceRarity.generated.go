package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type RogueDLCDiceSurfaceRarity struct {
	DiceSurfaceRarityImage string  `json:"DiceSurfaceRarityImage"`
	NameColor              string  `json:"NameColor"`
	Rarity                 float64 `json:"Rarity"`
}
type RogueDLCDiceSurfaceRarityAccessor struct {
	_data                       []RogueDLCDiceSurfaceRarity
	_dataDiceSurfaceRarityImage map[string]RogueDLCDiceSurfaceRarity
	_dataNameColor              map[string]RogueDLCDiceSurfaceRarity
	_dataRarity                 map[float64]RogueDLCDiceSurfaceRarity
}

// LoadData retrieves the data. Must be called before RogueDLCDiceSurfaceRarity.GroupData
func (a *RogueDLCDiceSurfaceRarityAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueDLCDiceSurfaceRarity.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueDLCDiceSurfaceRarityAccessor) Raw() ([]RogueDLCDiceSurfaceRarity, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueDLCDiceSurfaceRarity{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueDLCDiceSurfaceRarityAccessor.LoadData to preload everything
func (a *RogueDLCDiceSurfaceRarityAccessor) GroupData() {
	a._dataDiceSurfaceRarityImage = map[string]RogueDLCDiceSurfaceRarity{}
	a._dataNameColor = map[string]RogueDLCDiceSurfaceRarity{}
	a._dataRarity = map[float64]RogueDLCDiceSurfaceRarity{}
	for _, d := range a._data {
		a._dataDiceSurfaceRarityImage[d.DiceSurfaceRarityImage] = d
		a._dataNameColor[d.NameColor] = d
		a._dataRarity[d.Rarity] = d
	}
}

// ByDiceSurfaceRarityImage returns the RogueDLCDiceSurfaceRarity uniquely identified by DiceSurfaceRarityImage
//
// Error is only non-nil if the source errors out
func (a *RogueDLCDiceSurfaceRarityAccessor) ByDiceSurfaceRarityImage(identifier string) (RogueDLCDiceSurfaceRarity, error) {
	if a._dataDiceSurfaceRarityImage == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueDLCDiceSurfaceRarity{}, err
			}
		}
		a.GroupData()
	}
	return a._dataDiceSurfaceRarityImage[identifier], nil
}

// ByNameColor returns the RogueDLCDiceSurfaceRarity uniquely identified by NameColor
//
// Error is only non-nil if the source errors out
func (a *RogueDLCDiceSurfaceRarityAccessor) ByNameColor(identifier string) (RogueDLCDiceSurfaceRarity, error) {
	if a._dataNameColor == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueDLCDiceSurfaceRarity{}, err
			}
		}
		a.GroupData()
	}
	return a._dataNameColor[identifier], nil
}

// ByRarity returns the RogueDLCDiceSurfaceRarity uniquely identified by Rarity
//
// Error is only non-nil if the source errors out
func (a *RogueDLCDiceSurfaceRarityAccessor) ByRarity(identifier float64) (RogueDLCDiceSurfaceRarity, error) {
	if a._dataRarity == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueDLCDiceSurfaceRarity{}, err
			}
		}
		a.GroupData()
	}
	return a._dataRarity[identifier], nil
}
