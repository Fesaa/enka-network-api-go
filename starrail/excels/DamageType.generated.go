package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type DamageType struct {
	Color                       string                 `json:"Color"`
	CriticalDamage              string                 `json:"CriticalDamage"`
	DamageTypeIconPath          string                 `json:"DamageTypeIconPath"`
	DamageTypeIntro             map[string]json.Number `json:"DamageTypeIntro"`
	DamageTypeName              map[string]json.Number `json:"DamageTypeName"`
	ID                          string                 `json:"ID"`
	IconNatureColor             string                 `json:"IconNatureColor"`
	IconNatureColorSimple       string                 `json:"IconNatureColorSimple"`
	IconNatureForWeakActive     string                 `json:"IconNatureForWeakActive"`
	IconNatureForWeakUnactive   string                 `json:"IconNatureForWeakUnactive"`
	IconNatureWhite             string                 `json:"IconNatureWhite"`
	Light1Color                 string                 `json:"Light1Color"`
	LightColor                  string                 `json:"LightColor"`
	MazeEnterBattleWeakIconPath string                 `json:"MazeEnterBattleWeakIconPath"`
	NormalDamage                string                 `json:"NormalDamage"`
	SPInfoEffFront              string                 `json:"SPInfoEffFront"`
	SPInfoEffFrontDouble        string                 `json:"SPInfoEffFrontDouble"`
	SPMazeInfoEffFront          string                 `json:"SPMazeInfoEffFront"`
	ShaderColor                 string                 `json:"ShaderColor"`
	SkillBtnEff                 string                 `json:"SkillBtnEff"`
	SkillTreeDecoColor          string                 `json:"SkillTreeDecoColor"`
	SkillTreeLeftPanelColor     string                 `json:"SkillTreeLeftPanelColor"`
	SkillTreeLightColor         string                 `json:"SkillTreeLightColor"`
	SkillTreePanelPath          string                 `json:"SkillTreePanelPath"`
	UnfullColor                 string                 `json:"UnfullColor"`
}
type DamageTypeAccessor struct {
	_data                            []DamageType
	_dataColor                       map[string]DamageType
	_dataCriticalDamage              map[string]DamageType
	_dataDamageTypeIconPath          map[string]DamageType
	_dataID                          map[string]DamageType
	_dataIconNatureColor             map[string]DamageType
	_dataIconNatureColorSimple       map[string]DamageType
	_dataIconNatureForWeakActive     map[string]DamageType
	_dataIconNatureForWeakUnactive   map[string]DamageType
	_dataIconNatureWhite             map[string]DamageType
	_dataLight1Color                 map[string]DamageType
	_dataLightColor                  map[string]DamageType
	_dataMazeEnterBattleWeakIconPath map[string]DamageType
	_dataNormalDamage                map[string]DamageType
	_dataSPInfoEffFront              map[string]DamageType
	_dataSPInfoEffFrontDouble        map[string]DamageType
	_dataSPMazeInfoEffFront          map[string]DamageType
	_dataShaderColor                 map[string]DamageType
	_dataSkillBtnEff                 map[string]DamageType
	_dataSkillTreeDecoColor          map[string]DamageType
	_dataSkillTreeLeftPanelColor     map[string]DamageType
	_dataSkillTreeLightColor         map[string]DamageType
	_dataSkillTreePanelPath          map[string]DamageType
	_dataUnfullColor                 map[string]DamageType
}

// LoadData retrieves the data. Must be called before DamageType.GroupData
func (a *DamageTypeAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/DamageType.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *DamageTypeAccessor) Raw() ([]DamageType, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []DamageType{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with DamageTypeAccessor.LoadData to preload everything
func (a *DamageTypeAccessor) GroupData() {
	a._dataColor = map[string]DamageType{}
	a._dataCriticalDamage = map[string]DamageType{}
	a._dataDamageTypeIconPath = map[string]DamageType{}
	a._dataID = map[string]DamageType{}
	a._dataIconNatureColor = map[string]DamageType{}
	a._dataIconNatureColorSimple = map[string]DamageType{}
	a._dataIconNatureForWeakActive = map[string]DamageType{}
	a._dataIconNatureForWeakUnactive = map[string]DamageType{}
	a._dataIconNatureWhite = map[string]DamageType{}
	a._dataLight1Color = map[string]DamageType{}
	a._dataLightColor = map[string]DamageType{}
	a._dataMazeEnterBattleWeakIconPath = map[string]DamageType{}
	a._dataNormalDamage = map[string]DamageType{}
	a._dataSPInfoEffFront = map[string]DamageType{}
	a._dataSPInfoEffFrontDouble = map[string]DamageType{}
	a._dataSPMazeInfoEffFront = map[string]DamageType{}
	a._dataShaderColor = map[string]DamageType{}
	a._dataSkillBtnEff = map[string]DamageType{}
	a._dataSkillTreeDecoColor = map[string]DamageType{}
	a._dataSkillTreeLeftPanelColor = map[string]DamageType{}
	a._dataSkillTreeLightColor = map[string]DamageType{}
	a._dataSkillTreePanelPath = map[string]DamageType{}
	a._dataUnfullColor = map[string]DamageType{}
	for _, d := range a._data {
		a._dataColor[d.Color] = d
		a._dataCriticalDamage[d.CriticalDamage] = d
		a._dataDamageTypeIconPath[d.DamageTypeIconPath] = d
		a._dataID[d.ID] = d
		a._dataIconNatureColor[d.IconNatureColor] = d
		a._dataIconNatureColorSimple[d.IconNatureColorSimple] = d
		a._dataIconNatureForWeakActive[d.IconNatureForWeakActive] = d
		a._dataIconNatureForWeakUnactive[d.IconNatureForWeakUnactive] = d
		a._dataIconNatureWhite[d.IconNatureWhite] = d
		a._dataLight1Color[d.Light1Color] = d
		a._dataLightColor[d.LightColor] = d
		a._dataMazeEnterBattleWeakIconPath[d.MazeEnterBattleWeakIconPath] = d
		a._dataNormalDamage[d.NormalDamage] = d
		a._dataSPInfoEffFront[d.SPInfoEffFront] = d
		a._dataSPInfoEffFrontDouble[d.SPInfoEffFrontDouble] = d
		a._dataSPMazeInfoEffFront[d.SPMazeInfoEffFront] = d
		a._dataShaderColor[d.ShaderColor] = d
		a._dataSkillBtnEff[d.SkillBtnEff] = d
		a._dataSkillTreeDecoColor[d.SkillTreeDecoColor] = d
		a._dataSkillTreeLeftPanelColor[d.SkillTreeLeftPanelColor] = d
		a._dataSkillTreeLightColor[d.SkillTreeLightColor] = d
		a._dataSkillTreePanelPath[d.SkillTreePanelPath] = d
		a._dataUnfullColor[d.UnfullColor] = d
	}
}

// ByColor returns the DamageType uniquely identified by Color
//
// Error is only non-nil if the source errors out
func (a *DamageTypeAccessor) ByColor(identifier string) (DamageType, error) {
	if a._dataColor == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return DamageType{}, err
			}
		}
		a.GroupData()
	}
	return a._dataColor[identifier], nil
}

// ByCriticalDamage returns the DamageType uniquely identified by CriticalDamage
//
// Error is only non-nil if the source errors out
func (a *DamageTypeAccessor) ByCriticalDamage(identifier string) (DamageType, error) {
	if a._dataCriticalDamage == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return DamageType{}, err
			}
		}
		a.GroupData()
	}
	return a._dataCriticalDamage[identifier], nil
}

// ByDamageTypeIconPath returns the DamageType uniquely identified by DamageTypeIconPath
//
// Error is only non-nil if the source errors out
func (a *DamageTypeAccessor) ByDamageTypeIconPath(identifier string) (DamageType, error) {
	if a._dataDamageTypeIconPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return DamageType{}, err
			}
		}
		a.GroupData()
	}
	return a._dataDamageTypeIconPath[identifier], nil
}

// ByID returns the DamageType uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *DamageTypeAccessor) ByID(identifier string) (DamageType, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return DamageType{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}

// ByIconNatureColor returns the DamageType uniquely identified by IconNatureColor
//
// Error is only non-nil if the source errors out
func (a *DamageTypeAccessor) ByIconNatureColor(identifier string) (DamageType, error) {
	if a._dataIconNatureColor == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return DamageType{}, err
			}
		}
		a.GroupData()
	}
	return a._dataIconNatureColor[identifier], nil
}

// ByIconNatureColorSimple returns the DamageType uniquely identified by IconNatureColorSimple
//
// Error is only non-nil if the source errors out
func (a *DamageTypeAccessor) ByIconNatureColorSimple(identifier string) (DamageType, error) {
	if a._dataIconNatureColorSimple == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return DamageType{}, err
			}
		}
		a.GroupData()
	}
	return a._dataIconNatureColorSimple[identifier], nil
}

// ByIconNatureForWeakActive returns the DamageType uniquely identified by IconNatureForWeakActive
//
// Error is only non-nil if the source errors out
func (a *DamageTypeAccessor) ByIconNatureForWeakActive(identifier string) (DamageType, error) {
	if a._dataIconNatureForWeakActive == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return DamageType{}, err
			}
		}
		a.GroupData()
	}
	return a._dataIconNatureForWeakActive[identifier], nil
}

// ByIconNatureForWeakUnactive returns the DamageType uniquely identified by IconNatureForWeakUnactive
//
// Error is only non-nil if the source errors out
func (a *DamageTypeAccessor) ByIconNatureForWeakUnactive(identifier string) (DamageType, error) {
	if a._dataIconNatureForWeakUnactive == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return DamageType{}, err
			}
		}
		a.GroupData()
	}
	return a._dataIconNatureForWeakUnactive[identifier], nil
}

// ByIconNatureWhite returns the DamageType uniquely identified by IconNatureWhite
//
// Error is only non-nil if the source errors out
func (a *DamageTypeAccessor) ByIconNatureWhite(identifier string) (DamageType, error) {
	if a._dataIconNatureWhite == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return DamageType{}, err
			}
		}
		a.GroupData()
	}
	return a._dataIconNatureWhite[identifier], nil
}

// ByLight1Color returns the DamageType uniquely identified by Light1Color
//
// Error is only non-nil if the source errors out
func (a *DamageTypeAccessor) ByLight1Color(identifier string) (DamageType, error) {
	if a._dataLight1Color == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return DamageType{}, err
			}
		}
		a.GroupData()
	}
	return a._dataLight1Color[identifier], nil
}

// ByLightColor returns the DamageType uniquely identified by LightColor
//
// Error is only non-nil if the source errors out
func (a *DamageTypeAccessor) ByLightColor(identifier string) (DamageType, error) {
	if a._dataLightColor == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return DamageType{}, err
			}
		}
		a.GroupData()
	}
	return a._dataLightColor[identifier], nil
}

// ByMazeEnterBattleWeakIconPath returns the DamageType uniquely identified by MazeEnterBattleWeakIconPath
//
// Error is only non-nil if the source errors out
func (a *DamageTypeAccessor) ByMazeEnterBattleWeakIconPath(identifier string) (DamageType, error) {
	if a._dataMazeEnterBattleWeakIconPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return DamageType{}, err
			}
		}
		a.GroupData()
	}
	return a._dataMazeEnterBattleWeakIconPath[identifier], nil
}

// ByNormalDamage returns the DamageType uniquely identified by NormalDamage
//
// Error is only non-nil if the source errors out
func (a *DamageTypeAccessor) ByNormalDamage(identifier string) (DamageType, error) {
	if a._dataNormalDamage == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return DamageType{}, err
			}
		}
		a.GroupData()
	}
	return a._dataNormalDamage[identifier], nil
}

// BySPInfoEffFront returns the DamageType uniquely identified by SPInfoEffFront
//
// Error is only non-nil if the source errors out
func (a *DamageTypeAccessor) BySPInfoEffFront(identifier string) (DamageType, error) {
	if a._dataSPInfoEffFront == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return DamageType{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSPInfoEffFront[identifier], nil
}

// BySPInfoEffFrontDouble returns the DamageType uniquely identified by SPInfoEffFrontDouble
//
// Error is only non-nil if the source errors out
func (a *DamageTypeAccessor) BySPInfoEffFrontDouble(identifier string) (DamageType, error) {
	if a._dataSPInfoEffFrontDouble == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return DamageType{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSPInfoEffFrontDouble[identifier], nil
}

// BySPMazeInfoEffFront returns the DamageType uniquely identified by SPMazeInfoEffFront
//
// Error is only non-nil if the source errors out
func (a *DamageTypeAccessor) BySPMazeInfoEffFront(identifier string) (DamageType, error) {
	if a._dataSPMazeInfoEffFront == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return DamageType{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSPMazeInfoEffFront[identifier], nil
}

// ByShaderColor returns the DamageType uniquely identified by ShaderColor
//
// Error is only non-nil if the source errors out
func (a *DamageTypeAccessor) ByShaderColor(identifier string) (DamageType, error) {
	if a._dataShaderColor == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return DamageType{}, err
			}
		}
		a.GroupData()
	}
	return a._dataShaderColor[identifier], nil
}

// BySkillBtnEff returns the DamageType uniquely identified by SkillBtnEff
//
// Error is only non-nil if the source errors out
func (a *DamageTypeAccessor) BySkillBtnEff(identifier string) (DamageType, error) {
	if a._dataSkillBtnEff == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return DamageType{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSkillBtnEff[identifier], nil
}

// BySkillTreeDecoColor returns the DamageType uniquely identified by SkillTreeDecoColor
//
// Error is only non-nil if the source errors out
func (a *DamageTypeAccessor) BySkillTreeDecoColor(identifier string) (DamageType, error) {
	if a._dataSkillTreeDecoColor == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return DamageType{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSkillTreeDecoColor[identifier], nil
}

// BySkillTreeLeftPanelColor returns the DamageType uniquely identified by SkillTreeLeftPanelColor
//
// Error is only non-nil if the source errors out
func (a *DamageTypeAccessor) BySkillTreeLeftPanelColor(identifier string) (DamageType, error) {
	if a._dataSkillTreeLeftPanelColor == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return DamageType{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSkillTreeLeftPanelColor[identifier], nil
}

// BySkillTreeLightColor returns the DamageType uniquely identified by SkillTreeLightColor
//
// Error is only non-nil if the source errors out
func (a *DamageTypeAccessor) BySkillTreeLightColor(identifier string) (DamageType, error) {
	if a._dataSkillTreeLightColor == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return DamageType{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSkillTreeLightColor[identifier], nil
}

// BySkillTreePanelPath returns the DamageType uniquely identified by SkillTreePanelPath
//
// Error is only non-nil if the source errors out
func (a *DamageTypeAccessor) BySkillTreePanelPath(identifier string) (DamageType, error) {
	if a._dataSkillTreePanelPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return DamageType{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSkillTreePanelPath[identifier], nil
}

// ByUnfullColor returns the DamageType uniquely identified by UnfullColor
//
// Error is only non-nil if the source errors out
func (a *DamageTypeAccessor) ByUnfullColor(identifier string) (DamageType, error) {
	if a._dataUnfullColor == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return DamageType{}, err
			}
		}
		a.GroupData()
	}
	return a._dataUnfullColor[identifier], nil
}
