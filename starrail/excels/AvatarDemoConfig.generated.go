package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type AvatarDemoConfig struct {
	AvatarDemoGuide                    map[string]json.Number `json:"AvatarDemoGuide"`
	AvatarID                           json.Number            `json:"AvatarID"`
	ConfigList1                        []json.Number          `json:"ConfigList1"`
	EnableMazeSkillEffect              bool                   `json:"EnableMazeSkillEffect"`
	EnableSwitchAvatar                 bool                   `json:"EnableSwitchAvatar"`
	EventIDList1                       []json.Number          `json:"EventIDList1"`
	GuideGroupID                       json.Number            `json:"GuideGroupID"`
	MapEntranceID                      json.Number            `json:"MapEntranceID"`
	MazeGroupID1                       json.Number            `json:"MazeGroupID1"`
	NormalWaveNotShowDetail            bool                   `json:"NormalWaveNotShowDetail"`
	NpcMonsterIDList1                  []json.Number          `json:"NpcMonsterIDList1"`
	OperationRecordPath                string                 `json:"OperationRecordPath"`
	OverrideDisplaySkillTriggerKeyList []interface{}          `json:"OverrideDisplaySkillTriggerKeyList"`
	RaidID                             json.Number            `json:"RaidID"`
	RandomSeed                         json.Number            `json:"RandomSeed"`
	RewardID                           json.Number            `json:"RewardID"`
	ScoringGroupID                     json.Number            `json:"ScoringGroupID"`
	StageID                            json.Number            `json:"StageID"`
	TrialAvatarList                    []json.Number          `json:"TrialAvatarList"`
}
type AvatarDemoConfigAccessor struct {
	_data []AvatarDemoConfig
}

// LoadData retrieves the data. Must be called before AvatarDemoConfig.GroupData
func (a *AvatarDemoConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/AvatarDemoConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *AvatarDemoConfigAccessor) Raw() ([]AvatarDemoConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []AvatarDemoConfig{}, err
		}
	}
	return a._data, nil
}
