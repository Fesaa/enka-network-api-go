package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type AvatarDemoConfig struct {
	AvatarDemoGuide                    hash.Hash     `json:"AvatarDemoGuide"`
	AvatarID                           float64       `json:"AvatarID"`
	ConfigList1                        []float64     `json:"ConfigList1"`
	EnableMazeSkillEffect              bool          `json:"EnableMazeSkillEffect"`
	EnableSwitchAvatar                 bool          `json:"EnableSwitchAvatar"`
	EventIDList1                       []float64     `json:"EventIDList1"`
	GuideGroupID                       float64       `json:"GuideGroupID"`
	MapEntranceID                      float64       `json:"MapEntranceID"`
	MazeGroupID1                       float64       `json:"MazeGroupID1"`
	NormalWaveNotShowDetail            bool          `json:"NormalWaveNotShowDetail"`
	NpcMonsterIDList1                  []float64     `json:"NpcMonsterIDList1"`
	OperationRecordPath                string        `json:"OperationRecordPath"`
	OverrideDisplaySkillTriggerKeyList []interface{} `json:"OverrideDisplaySkillTriggerKeyList"`
	RaidID                             float64       `json:"RaidID"`
	RandomSeed                         float64       `json:"RandomSeed"`
	RewardID                           float64       `json:"RewardID"`
	ScoringGroupID                     float64       `json:"ScoringGroupID"`
	StageID                            float64       `json:"StageID"`
	TrialAvatarList                    []float64     `json:"TrialAvatarList"`
}
type AvatarDemoConfigAccessor struct {
	_data        []AvatarDemoConfig
	_dataStageID map[float64]AvatarDemoConfig
}

// LoadData retrieves the data. Must be called before AvatarDemoConfig.GroupData
func (a *AvatarDemoConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/AvatarDemoConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *AvatarDemoConfigAccessor) Raw() ([]AvatarDemoConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []AvatarDemoConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with AvatarDemoConfigAccessor.LoadData to preload everything
func (a *AvatarDemoConfigAccessor) GroupData() {
	for _, d := range a._data {
		a._dataStageID[d.StageID] = d
	}
}

// ByStageID returns the AvatarDemoConfig uniquely identified by StageID
//
// Error is only non-nil if the source errors out
func (a *AvatarDemoConfigAccessor) ByStageID(identifier float64) (AvatarDemoConfig, error) {
	if a._dataStageID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AvatarDemoConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataStageID[identifier], nil
}
