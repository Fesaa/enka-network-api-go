package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type ActivityTelevisionLevel struct {
	AllMonsterList         []json.Number            `json:"AllMonsterList"`
	AvailableBuffList      []json.Number            `json:"AvailableBuffList"`
	BuffCount              json.Number              `json:"BuffCount"`
	BuffDesc               map[string]json.Number   `json:"BuffDesc"`
	BuffShortDesc          map[string]json.Number   `json:"BuffShortDesc"`
	BuffShowLevelList      []json.Number            `json:"BuffShowLevelList"`
	BuffTips               map[string]json.Number   `json:"BuffTips"`
	EventID                json.Number              `json:"EventID"`
	ExtraEffectID          json.Number              `json:"ExtraEffectID"`
	ExtraInfoMonsterIDList []json.Number            `json:"ExtraInfoMonsterIDList"`
	ExtraInfoMonsterWave   json.Number              `json:"ExtraInfoMonsterWave"`
	FirstMonsterWave       json.Number              `json:"FirstMonsterWave"`
	MazeBuffID             json.Number              `json:"MazeBuffID"`
	MazeBuffMulList        []json.Number            `json:"MazeBuffMulList"`
	MonsterBuffDesc        map[string]json.Number   `json:"MonsterBuffDesc"`
	MonsterBuffShortDesc   map[string]json.Number   `json:"MonsterBuffShortDesc"`
	MonsterBuffTips        map[string]json.Number   `json:"MonsterBuffTips"`
	MonsterList            []json.Number            `json:"MonsterList"`
	MonsterParmList        []json.Number            `json:"MonsterParmList"`
	MonsterPic             string                   `json:"MonsterPic"`
	ParmList               []json.Number            `json:"ParmList"`
	PreTelevisionList      []json.Number            `json:"PreTelevisionList"`
	RecommadNature         []string                 `json:"RecommadNature"`
	SpecialAvatarList      []json.Number            `json:"SpecialAvatarList"`
	TargetTextList         []map[string]json.Number `json:"TargetTextList"`
	TelevisionID           json.Number              `json:"TelevisionID"`
	UIEnterBattleAreaID    json.Number              `json:"UIEnterBattleAreaID"`
}
type ActivityTelevisionLevelAccessor struct {
	_data             []ActivityTelevisionLevel
	_dataEventID      map[json.Number]ActivityTelevisionLevel
	_dataMazeBuffID   map[json.Number]ActivityTelevisionLevel
	_dataMonsterPic   map[string]ActivityTelevisionLevel
	_dataTelevisionID map[json.Number]ActivityTelevisionLevel
}

// LoadData retrieves the data. Must be called before ActivityTelevisionLevel.GroupData
func (a *ActivityTelevisionLevelAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ActivityTelevisionLevel.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ActivityTelevisionLevelAccessor) Raw() ([]ActivityTelevisionLevel, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ActivityTelevisionLevel{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ActivityTelevisionLevelAccessor.LoadData to preload everything
func (a *ActivityTelevisionLevelAccessor) GroupData() {
	a._dataEventID = map[json.Number]ActivityTelevisionLevel{}
	a._dataMazeBuffID = map[json.Number]ActivityTelevisionLevel{}
	a._dataMonsterPic = map[string]ActivityTelevisionLevel{}
	a._dataTelevisionID = map[json.Number]ActivityTelevisionLevel{}
	for _, d := range a._data {
		a._dataEventID[d.EventID] = d
		a._dataMazeBuffID[d.MazeBuffID] = d
		a._dataMonsterPic[d.MonsterPic] = d
		a._dataTelevisionID[d.TelevisionID] = d
	}
}

// ByEventID returns the ActivityTelevisionLevel uniquely identified by EventID
//
// Error is only non-nil if the source errors out
func (a *ActivityTelevisionLevelAccessor) ByEventID(identifier json.Number) (ActivityTelevisionLevel, error) {
	if a._dataEventID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityTelevisionLevel{}, err
			}
		}
		a.GroupData()
	}
	return a._dataEventID[identifier], nil
}

// ByMazeBuffID returns the ActivityTelevisionLevel uniquely identified by MazeBuffID
//
// Error is only non-nil if the source errors out
func (a *ActivityTelevisionLevelAccessor) ByMazeBuffID(identifier json.Number) (ActivityTelevisionLevel, error) {
	if a._dataMazeBuffID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityTelevisionLevel{}, err
			}
		}
		a.GroupData()
	}
	return a._dataMazeBuffID[identifier], nil
}

// ByMonsterPic returns the ActivityTelevisionLevel uniquely identified by MonsterPic
//
// Error is only non-nil if the source errors out
func (a *ActivityTelevisionLevelAccessor) ByMonsterPic(identifier string) (ActivityTelevisionLevel, error) {
	if a._dataMonsterPic == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityTelevisionLevel{}, err
			}
		}
		a.GroupData()
	}
	return a._dataMonsterPic[identifier], nil
}

// ByTelevisionID returns the ActivityTelevisionLevel uniquely identified by TelevisionID
//
// Error is only non-nil if the source errors out
func (a *ActivityTelevisionLevelAccessor) ByTelevisionID(identifier json.Number) (ActivityTelevisionLevel, error) {
	if a._dataTelevisionID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityTelevisionLevel{}, err
			}
		}
		a.GroupData()
	}
	return a._dataTelevisionID[identifier], nil
}
