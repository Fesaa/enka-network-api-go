package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type ActivityTelevisionLevel struct {
	AllMonsterList         []float64   `json:"AllMonsterList"`
	AvailableBuffList      []float64   `json:"AvailableBuffList"`
	BuffCount              float64     `json:"BuffCount"`
	BuffDesc               hash.Hash   `json:"BuffDesc"`
	BuffShortDesc          hash.Hash   `json:"BuffShortDesc"`
	BuffShowLevelList      []float64   `json:"BuffShowLevelList"`
	BuffTips               hash.Hash   `json:"BuffTips"`
	EventID                float64     `json:"EventID"`
	ExtraEffectID          float64     `json:"ExtraEffectID"`
	ExtraInfoMonsterIDList []float64   `json:"ExtraInfoMonsterIDList"`
	ExtraInfoMonsterWave   float64     `json:"ExtraInfoMonsterWave"`
	FirstMonsterWave       float64     `json:"FirstMonsterWave"`
	MazeBuffID             float64     `json:"MazeBuffID"`
	MazeBuffMulList        []float64   `json:"MazeBuffMulList"`
	MonsterBuffDesc        hash.Hash   `json:"MonsterBuffDesc"`
	MonsterBuffShortDesc   hash.Hash   `json:"MonsterBuffShortDesc"`
	MonsterBuffTips        hash.Hash   `json:"MonsterBuffTips"`
	MonsterList            []float64   `json:"MonsterList"`
	MonsterParmList        []float64   `json:"MonsterParmList"`
	MonsterPic             string      `json:"MonsterPic"`
	ParmList               []float64   `json:"ParmList"`
	PreTelevisionList      []float64   `json:"PreTelevisionList"`
	RecommadNature         []string    `json:"RecommadNature"`
	SpecialAvatarList      []float64   `json:"SpecialAvatarList"`
	TargetTextList         []hash.Hash `json:"TargetTextList"`
	TelevisionID           float64     `json:"TelevisionID"`
	UIEnterBattleAreaID    float64     `json:"UIEnterBattleAreaID"`
}
type ActivityTelevisionLevelAccessor struct {
	_data             []ActivityTelevisionLevel
	_dataEventID      map[float64]ActivityTelevisionLevel
	_dataMazeBuffID   map[float64]ActivityTelevisionLevel
	_dataMonsterPic   map[string]ActivityTelevisionLevel
	_dataTelevisionID map[float64]ActivityTelevisionLevel
}

// LoadData retrieves the data. Must be called before ActivityTelevisionLevel.GroupData
func (a *ActivityTelevisionLevelAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ActivityTelevisionLevel.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ActivityTelevisionLevelAccessor) Raw() ([]ActivityTelevisionLevel, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ActivityTelevisionLevel{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ActivityTelevisionLevelAccessor.LoadData to preload everything
func (a *ActivityTelevisionLevelAccessor) GroupData() {
	for _, d := range a._data {
		a._dataEventID[d.EventID] = d
		a._dataMazeBuffID[d.MazeBuffID] = d
		a._dataMonsterPic[d.MonsterPic] = d
		a._dataTelevisionID[d.TelevisionID] = d
	}
}

// ByEventID returns the ActivityTelevisionLevel uniquely identified by EventID
//
// Error is only non-nil if the source errors out
func (a *ActivityTelevisionLevelAccessor) ByEventID(identifier float64) (ActivityTelevisionLevel, error) {
	if a._dataEventID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityTelevisionLevel{}, err
			}
		}
		a.GroupData()
	}
	return a._dataEventID[identifier], nil
}

// ByMazeBuffID returns the ActivityTelevisionLevel uniquely identified by MazeBuffID
//
// Error is only non-nil if the source errors out
func (a *ActivityTelevisionLevelAccessor) ByMazeBuffID(identifier float64) (ActivityTelevisionLevel, error) {
	if a._dataMazeBuffID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityTelevisionLevel{}, err
			}
		}
		a.GroupData()
	}
	return a._dataMazeBuffID[identifier], nil
}

// ByMonsterPic returns the ActivityTelevisionLevel uniquely identified by MonsterPic
//
// Error is only non-nil if the source errors out
func (a *ActivityTelevisionLevelAccessor) ByMonsterPic(identifier string) (ActivityTelevisionLevel, error) {
	if a._dataMonsterPic == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityTelevisionLevel{}, err
			}
		}
		a.GroupData()
	}
	return a._dataMonsterPic[identifier], nil
}

// ByTelevisionID returns the ActivityTelevisionLevel uniquely identified by TelevisionID
//
// Error is only non-nil if the source errors out
func (a *ActivityTelevisionLevelAccessor) ByTelevisionID(identifier float64) (ActivityTelevisionLevel, error) {
	if a._dataTelevisionID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityTelevisionLevel{}, err
			}
		}
		a.GroupData()
	}
	return a._dataTelevisionID[identifier], nil
}
