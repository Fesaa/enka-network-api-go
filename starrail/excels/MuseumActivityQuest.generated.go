package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type MuseumActivityQuest struct {
	ID            float64   `json:"ID"`
	Name          string    `json:"Name"`
	QuestIconPath string    `json:"QuestIconPath"`
	QuestList     []float64 `json:"QuestList"`
}
type MuseumActivityQuestAccessor struct {
	_data     []MuseumActivityQuest
	_dataID   map[float64]MuseumActivityQuest
	_dataName map[string]MuseumActivityQuest
}

// LoadData retrieves the data. Must be called before MuseumActivityQuest.GroupData
func (a *MuseumActivityQuestAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MuseumActivityQuest.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MuseumActivityQuestAccessor) Raw() ([]MuseumActivityQuest, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MuseumActivityQuest{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MuseumActivityQuestAccessor.LoadData to preload everything
func (a *MuseumActivityQuestAccessor) GroupData() {
	for _, d := range a._data {
		a._dataID[d.ID] = d
		a._dataName[d.Name] = d
	}
}

// ByID returns the MuseumActivityQuest uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *MuseumActivityQuestAccessor) ByID(identifier float64) (MuseumActivityQuest, error) {
	if a._dataID == nil {
		err := a.LoadData()
		if err != nil {
			return MuseumActivityQuest{}, err
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}

// ByName returns the MuseumActivityQuest uniquely identified by Name
//
// Error is only non-nil if the source errors out
func (a *MuseumActivityQuestAccessor) ByName(identifier string) (MuseumActivityQuest, error) {
	if a._dataName == nil {
		err := a.LoadData()
		if err != nil {
			return MuseumActivityQuest{}, err
		}
		a.GroupData()
	}
	return a._dataName[identifier], nil
}
