package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type RogueTournCollection struct {
	CollectionDesc       hash.Hash `json:"CollectionDesc"`
	CollectionEffectDesc hash.Hash `json:"CollectionEffectDesc"`
	CollectionID         float64   `json:"CollectionID"`
	CollectionName       hash.Hash `json:"CollectionName"`
	IconPath             string    `json:"IconPath"`
	ParamList            []float64 `json:"ParamList"`
	PrefabPath           string    `json:"PrefabPath"`
	UnlockID             float64   `json:"UnlockID"`
}
type RogueTournCollectionAccessor struct {
	_data             []RogueTournCollection
	_dataIconPath     map[string]RogueTournCollection
	_dataPrefabPath   map[string]RogueTournCollection
	_dataCollectionID map[float64]RogueTournCollection
	_dataUnlockID     map[float64]RogueTournCollection
}

// LoadData retrieves the data. Must be called before RogueTournCollection.GroupData
func (a *RogueTournCollectionAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueTournCollection.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueTournCollectionAccessor) Raw() ([]RogueTournCollection, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueTournCollection{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueTournCollectionAccessor.LoadData to preload everything
func (a *RogueTournCollectionAccessor) GroupData() {
	for _, d := range a._data {
		a._dataIconPath[d.IconPath] = d
		a._dataPrefabPath[d.PrefabPath] = d
		a._dataCollectionID[d.CollectionID] = d
		a._dataUnlockID[d.UnlockID] = d
	}
}

// ByIconPath returns the RogueTournCollection uniquely identified by IconPath
//
// Error is only non-nil if the source errors out
func (a *RogueTournCollectionAccessor) ByIconPath(identifier string) (RogueTournCollection, error) {
	if a._dataIconPath == nil {
		err := a.LoadData()
		if err != nil {
			return RogueTournCollection{}, err
		}
		a.GroupData()
	}
	return a._dataIconPath[identifier], nil
}

// ByPrefabPath returns the RogueTournCollection uniquely identified by PrefabPath
//
// Error is only non-nil if the source errors out
func (a *RogueTournCollectionAccessor) ByPrefabPath(identifier string) (RogueTournCollection, error) {
	if a._dataPrefabPath == nil {
		err := a.LoadData()
		if err != nil {
			return RogueTournCollection{}, err
		}
		a.GroupData()
	}
	return a._dataPrefabPath[identifier], nil
}

// ByCollectionID returns the RogueTournCollection uniquely identified by CollectionID
//
// Error is only non-nil if the source errors out
func (a *RogueTournCollectionAccessor) ByCollectionID(identifier float64) (RogueTournCollection, error) {
	if a._dataCollectionID == nil {
		err := a.LoadData()
		if err != nil {
			return RogueTournCollection{}, err
		}
		a.GroupData()
	}
	return a._dataCollectionID[identifier], nil
}

// ByUnlockID returns the RogueTournCollection uniquely identified by UnlockID
//
// Error is only non-nil if the source errors out
func (a *RogueTournCollectionAccessor) ByUnlockID(identifier float64) (RogueTournCollection, error) {
	if a._dataUnlockID == nil {
		err := a.LoadData()
		if err != nil {
			return RogueTournCollection{}, err
		}
		a.GroupData()
	}
	return a._dataUnlockID[identifier], nil
}
