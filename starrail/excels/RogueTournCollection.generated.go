package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type RogueTournCollection struct {
	CollectionDesc       map[string]json.Number `json:"CollectionDesc"`
	CollectionEffectDesc map[string]json.Number `json:"CollectionEffectDesc"`
	CollectionID         json.Number            `json:"CollectionID"`
	CollectionName       map[string]json.Number `json:"CollectionName"`
	IconPath             string                 `json:"IconPath"`
	ParamList            []json.Number          `json:"ParamList"`
	PrefabPath           string                 `json:"PrefabPath"`
	UnlockID             json.Number            `json:"UnlockID"`
}
type RogueTournCollectionAccessor struct {
	_data           []RogueTournCollection
	_dataIconPath   map[string]RogueTournCollection
	_dataPrefabPath map[string]RogueTournCollection
}

// LoadData retrieves the data. Must be called before RogueTournCollection.GroupData
func (a *RogueTournCollectionAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueTournCollection.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueTournCollectionAccessor) Raw() ([]RogueTournCollection, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueTournCollection{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueTournCollectionAccessor.LoadData to preload everything
func (a *RogueTournCollectionAccessor) GroupData() {
	a._dataIconPath = map[string]RogueTournCollection{}
	a._dataPrefabPath = map[string]RogueTournCollection{}
	for _, d := range a._data {
		a._dataIconPath[d.IconPath] = d
		a._dataPrefabPath[d.PrefabPath] = d
	}
}

// ByIconPath returns the RogueTournCollection uniquely identified by IconPath
//
// Error is only non-nil if the source errors out
func (a *RogueTournCollectionAccessor) ByIconPath(identifier string) (RogueTournCollection, error) {
	if a._dataIconPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueTournCollection{}, err
			}
		}
		a.GroupData()
	}
	return a._dataIconPath[identifier], nil
}

// ByPrefabPath returns the RogueTournCollection uniquely identified by PrefabPath
//
// Error is only non-nil if the source errors out
func (a *RogueTournCollectionAccessor) ByPrefabPath(identifier string) (RogueTournCollection, error) {
	if a._dataPrefabPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueTournCollection{}, err
			}
		}
		a.GroupData()
	}
	return a._dataPrefabPath[identifier], nil
}
