package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type ItemConfigRelic struct {
	CustomDataList       []interface{}                     `json:"CustomDataList"`
	ID                   float64                           `json:"ID"`
	InventoryDisplayTag  float64                           `json:"InventoryDisplayTag"`
	ItemAvatarIconPath   string                            `json:"ItemAvatarIconPath"`
	ItemBGDesc           hash.Hash                         `json:"ItemBGDesc"`
	ItemCurrencyIconPath string                            `json:"ItemCurrencyIconPath"`
	ItemFigureIconPath   string                            `json:"ItemFigureIconPath"`
	ItemIconPath         string                            `json:"ItemIconPath"`
	ItemMainType         string                            `json:"ItemMainType"`
	ItemName             hash.Hash                         `json:"ItemName"`
	ItemSubType          string                            `json:"ItemSubType"`
	PileLimit            float64                           `json:"PileLimit"`
	Rarity               string                            `json:"Rarity"`
	ReturnItemIDList     []ItemConfigRelicReturnItemIDList `json:"ReturnItemIDList"`
	SellType             string                            `json:"SellType"`
	IsVisible            bool                              `json:"isVisible"`
}
type ItemConfigRelicReturnItemIDList struct {
	ItemID  float64 `json:"ItemID"`
	ItemNum float64 `json:"ItemNum"`
}
type ItemConfigRelicAccessor struct {
	_data   []ItemConfigRelic
	_dataID map[float64]ItemConfigRelic
}

// LoadData retrieves the data. Must be called before ItemConfigRelic.GroupData
func (a *ItemConfigRelicAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ItemConfigRelic.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ItemConfigRelicAccessor) Raw() ([]ItemConfigRelic, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ItemConfigRelic{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ItemConfigRelicAccessor.LoadData to preload everything
func (a *ItemConfigRelicAccessor) GroupData() {
	for _, d := range a._data {
		a._dataID[d.ID] = d
	}
}

// ByID returns the ItemConfigRelic uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *ItemConfigRelicAccessor) ByID(identifier float64) (ItemConfigRelic, error) {
	if a._dataID == nil {
		err := a.LoadData()
		if err != nil {
			return ItemConfigRelic{}, err
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}
