package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type ItemConfigRelic struct {
	CustomDataList       []interface{}            `json:"CustomDataList"`
	ID                   json.Number              `json:"ID"`
	InventoryDisplayTag  json.Number              `json:"InventoryDisplayTag"`
	ItemAvatarIconPath   string                   `json:"ItemAvatarIconPath"`
	ItemBGDesc           map[string]json.Number   `json:"ItemBGDesc"`
	ItemCurrencyIconPath string                   `json:"ItemCurrencyIconPath"`
	ItemFigureIconPath   string                   `json:"ItemFigureIconPath"`
	ItemIconPath         string                   `json:"ItemIconPath"`
	ItemMainType         string                   `json:"ItemMainType"`
	ItemName             map[string]json.Number   `json:"ItemName"`
	ItemSubType          string                   `json:"ItemSubType"`
	PileLimit            json.Number              `json:"PileLimit"`
	Rarity               string                   `json:"Rarity"`
	ReturnItemIDList     []map[string]json.Number `json:"ReturnItemIDList"`
	SellType             string                   `json:"SellType"`
	IsVisible            bool                     `json:"isVisible"`
}
type ItemConfigRelicAccessor struct {
	_data []ItemConfigRelic
}

// LoadData retrieves the data. Must be called before ItemConfigRelic.GroupData
func (a *ItemConfigRelicAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ItemConfigRelic.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ItemConfigRelicAccessor) Raw() ([]ItemConfigRelic, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ItemConfigRelic{}, err
		}
	}
	return a._data, nil
}
