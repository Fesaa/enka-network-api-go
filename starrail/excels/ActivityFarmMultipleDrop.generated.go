package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type ActivityFarmMultipleDrop struct {
	ActivityModuleID        json.Number            `json:"ActivityModuleID"`
	ActivityPanelBannerText map[string]json.Number `json:"ActivityPanelBannerText"`
	ActivityThemeID         json.Number            `json:"ActivityThemeID"`
	BannerText              map[string]json.Number `json:"BannerText"`
	CountRefreshType        string                 `json:"CountRefreshType"`
	CountValue              json.Number            `json:"CountValue"`
	DropMultiple            json.Number            `json:"DropMultiple"`
	HintText                map[string]json.Number `json:"HintText"`
	ID                      json.Number            `json:"ID"`
	LabelText               map[string]json.Number `json:"LabelText"`
	MappingInfoBannerText   map[string]json.Number `json:"MappingInfoBannerText"`
	MultipleDropTypeList    []string               `json:"MultipleDropTypeList"`
	NameText                map[string]json.Number `json:"NameText"`
	Priority                json.Number            `json:"Priority"`
	Type                    string                 `json:"Type"`
}
type ActivityFarmMultipleDropAccessor struct {
	_data   []ActivityFarmMultipleDrop
	_dataID map[json.Number]ActivityFarmMultipleDrop
}

// LoadData retrieves the data. Must be called before ActivityFarmMultipleDrop.GroupData
func (a *ActivityFarmMultipleDropAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ActivityFarmMultipleDrop.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ActivityFarmMultipleDropAccessor) Raw() ([]ActivityFarmMultipleDrop, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ActivityFarmMultipleDrop{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ActivityFarmMultipleDropAccessor.LoadData to preload everything
func (a *ActivityFarmMultipleDropAccessor) GroupData() {
	a._dataID = map[json.Number]ActivityFarmMultipleDrop{}
	for _, d := range a._data {
		a._dataID[d.ID] = d
	}
}

// ByID returns the ActivityFarmMultipleDrop uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *ActivityFarmMultipleDropAccessor) ByID(identifier json.Number) (ActivityFarmMultipleDrop, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityFarmMultipleDrop{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}
