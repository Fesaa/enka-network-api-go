package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type StageBattleEventConfig struct {
	AbilityNameList      []interface{}   `json:"AbilityNameList"`
	EventID              float64         `json:"EventID"`
	EventType            string          `json:"EventType"`
	IconPath             string          `json:"IconPath"`
	IncludeAvatar        bool            `json:"IncludeAvatar"`
	IncludeMonster       bool            `json:"IncludeMonster"`
	ModifierNameList     []string        `json:"ModifierNameList"`
	ParamList            []hash.IntValue `json:"ParamList"`
	SelfModifierNameList []interface{}   `json:"SelfModifierNameList"`
}
type StageBattleEventConfigAccessor struct {
	_data        []StageBattleEventConfig
	_dataEventID map[float64]StageBattleEventConfig
}

// LoadData retrieves the data. Must be called before StageBattleEventConfig.GroupData
func (a *StageBattleEventConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/StageBattleEventConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *StageBattleEventConfigAccessor) Raw() ([]StageBattleEventConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []StageBattleEventConfig{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with StageBattleEventConfigAccessor.LoadData to preload everything
func (a *StageBattleEventConfigAccessor) GroupData() {
	for _, d := range a._data {
		a._dataEventID[d.EventID] = d
	}
}

// ByEventID returns the StageBattleEventConfig uniquely identified by EventID
//
// Error is only non-nil if the source errors out
func (a *StageBattleEventConfigAccessor) ByEventID(identifier float64) (StageBattleEventConfig, error) {
	if a._dataEventID == nil {
		err := a.LoadData()
		if err != nil {
			return StageBattleEventConfig{}, err
		}
		a.GroupData()
	}
	return a._dataEventID[identifier], nil
}
