package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type ItemConsumeType struct {
	FilterName   map[string]json.Number `json:"FilterName"`
	TypeID       json.Number            `json:"TypeID"`
	TypeIconPath string                 `json:"TypeIconPath"`
}
type ItemConsumeTypeAccessor struct {
	_data             []ItemConsumeType
	_dataTypeID       map[json.Number]ItemConsumeType
	_dataTypeIconPath map[string]ItemConsumeType
}

// LoadData retrieves the data. Must be called before ItemConsumeType.GroupData
func (a *ItemConsumeTypeAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ItemConsumeType.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ItemConsumeTypeAccessor) Raw() ([]ItemConsumeType, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ItemConsumeType{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ItemConsumeTypeAccessor.LoadData to preload everything
func (a *ItemConsumeTypeAccessor) GroupData() {
	a._dataTypeID = map[json.Number]ItemConsumeType{}
	a._dataTypeIconPath = map[string]ItemConsumeType{}
	for _, d := range a._data {
		a._dataTypeID[d.TypeID] = d
		a._dataTypeIconPath[d.TypeIconPath] = d
	}
}

// ByTypeID returns the ItemConsumeType uniquely identified by TypeID
//
// Error is only non-nil if the source errors out
func (a *ItemConsumeTypeAccessor) ByTypeID(identifier json.Number) (ItemConsumeType, error) {
	if a._dataTypeID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ItemConsumeType{}, err
			}
		}
		a.GroupData()
	}
	return a._dataTypeID[identifier], nil
}

// ByTypeIconPath returns the ItemConsumeType uniquely identified by TypeIconPath
//
// Error is only non-nil if the source errors out
func (a *ItemConsumeTypeAccessor) ByTypeIconPath(identifier string) (ItemConsumeType, error) {
	if a._dataTypeIconPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ItemConsumeType{}, err
			}
		}
		a.GroupData()
	}
	return a._dataTypeIconPath[identifier], nil
}
