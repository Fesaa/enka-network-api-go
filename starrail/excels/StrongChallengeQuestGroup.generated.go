package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type StrongChallengeQuestGroup struct {
	Name         hash.Hash `json:"Name"`
	QuestGroupID float64   `json:"QuestGroupID"`
}
type StrongChallengeQuestGroupAccessor struct {
	_data             []StrongChallengeQuestGroup
	_dataQuestGroupID map[float64]StrongChallengeQuestGroup
}

// LoadData retrieves the data. Must be called before StrongChallengeQuestGroup.GroupData
func (a *StrongChallengeQuestGroupAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/StrongChallengeQuestGroup.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *StrongChallengeQuestGroupAccessor) Raw() ([]StrongChallengeQuestGroup, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []StrongChallengeQuestGroup{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with StrongChallengeQuestGroupAccessor.LoadData to preload everything
func (a *StrongChallengeQuestGroupAccessor) GroupData() {
	a._dataQuestGroupID = map[float64]StrongChallengeQuestGroup{}
	for _, d := range a._data {
		a._dataQuestGroupID[d.QuestGroupID] = d
	}
}

// ByQuestGroupID returns the StrongChallengeQuestGroup uniquely identified by QuestGroupID
//
// Error is only non-nil if the source errors out
func (a *StrongChallengeQuestGroupAccessor) ByQuestGroupID(identifier float64) (StrongChallengeQuestGroup, error) {
	if a._dataQuestGroupID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return StrongChallengeQuestGroup{}, err
			}
		}
		a.GroupData()
	}
	return a._dataQuestGroupID[identifier], nil
}
