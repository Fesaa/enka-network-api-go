package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type RogueNousDifficultyLevel struct {
	DifficultyDesc map[string]json.Number   `json:"DifficultyDesc"`
	DifficultyID   json.Number              `json:"DifficultyID"`
	DifficultyType string                   `json:"DifficultyType"`
	ParamList      []map[string]json.Number `json:"ParamList"`
	Sort           json.Number              `json:"Sort"`
	Tag            json.Number              `json:"Tag"`
}
type RogueNousDifficultyLevelAccessor struct {
	_data             []RogueNousDifficultyLevel
	_dataDifficultyID map[json.Number]RogueNousDifficultyLevel
}

// LoadData retrieves the data. Must be called before RogueNousDifficultyLevel.GroupData
func (a *RogueNousDifficultyLevelAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueNousDifficultyLevel.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueNousDifficultyLevelAccessor) Raw() ([]RogueNousDifficultyLevel, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueNousDifficultyLevel{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueNousDifficultyLevelAccessor.LoadData to preload everything
func (a *RogueNousDifficultyLevelAccessor) GroupData() {
	a._dataDifficultyID = map[json.Number]RogueNousDifficultyLevel{}
	for _, d := range a._data {
		a._dataDifficultyID[d.DifficultyID] = d
	}
}

// ByDifficultyID returns the RogueNousDifficultyLevel uniquely identified by DifficultyID
//
// Error is only non-nil if the source errors out
func (a *RogueNousDifficultyLevelAccessor) ByDifficultyID(identifier json.Number) (RogueNousDifficultyLevel, error) {
	if a._dataDifficultyID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueNousDifficultyLevel{}, err
			}
		}
		a.GroupData()
	}
	return a._dataDifficultyID[identifier], nil
}
