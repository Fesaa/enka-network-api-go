package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type RogueArcadeType struct {
	ArcadeID     json.Number            `json:"ArcadeID"`
	BriefName    map[string]json.Number `json:"BriefName"`
	Desc         map[string]json.Number `json:"Desc"`
	DetailedName map[string]json.Number `json:"DetailedName"`
	ExitDesc     map[string]json.Number `json:"ExitDesc"`
	PicPathList  []string               `json:"PicPathList"`
}
type RogueArcadeTypeAccessor struct {
	_data         []RogueArcadeType
	_dataArcadeID map[json.Number]RogueArcadeType
}

// LoadData retrieves the data. Must be called before RogueArcadeType.GroupData
func (a *RogueArcadeTypeAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueArcadeType.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueArcadeTypeAccessor) Raw() ([]RogueArcadeType, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueArcadeType{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueArcadeTypeAccessor.LoadData to preload everything
func (a *RogueArcadeTypeAccessor) GroupData() {
	a._dataArcadeID = map[json.Number]RogueArcadeType{}
	for _, d := range a._data {
		a._dataArcadeID[d.ArcadeID] = d
	}
}

// ByArcadeID returns the RogueArcadeType uniquely identified by ArcadeID
//
// Error is only non-nil if the source errors out
func (a *RogueArcadeTypeAccessor) ByArcadeID(identifier json.Number) (RogueArcadeType, error) {
	if a._dataArcadeID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueArcadeType{}, err
			}
		}
		a.GroupData()
	}
	return a._dataArcadeID[identifier], nil
}
