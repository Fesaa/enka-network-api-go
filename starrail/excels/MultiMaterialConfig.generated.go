package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type MultiMaterialConfig struct {
	ExchangeRare2 float64 `json:"ExchangeRare2"`
	ExchangeRare3 float64 `json:"ExchangeRare3"`
	ExchangeRare4 float64 `json:"ExchangeRare4"`
	ItemID        float64 `json:"ItemID"`
	PurposeID     float64 `json:"PurposeID"`
}
type MultiMaterialConfigAccessor struct {
	_data          []MultiMaterialConfig
	_dataItemID    map[float64]MultiMaterialConfig
	_dataPurposeID map[float64]MultiMaterialConfig
}

// LoadData retrieves the data. Must be called before MultiMaterialConfig.GroupData
func (a *MultiMaterialConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MultiMaterialConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MultiMaterialConfigAccessor) Raw() ([]MultiMaterialConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MultiMaterialConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MultiMaterialConfigAccessor.LoadData to preload everything
func (a *MultiMaterialConfigAccessor) GroupData() {
	a._dataItemID = map[float64]MultiMaterialConfig{}
	a._dataPurposeID = map[float64]MultiMaterialConfig{}
	for _, d := range a._data {
		a._dataItemID[d.ItemID] = d
		a._dataPurposeID[d.PurposeID] = d
	}
}

// ByItemID returns the MultiMaterialConfig uniquely identified by ItemID
//
// Error is only non-nil if the source errors out
func (a *MultiMaterialConfigAccessor) ByItemID(identifier float64) (MultiMaterialConfig, error) {
	if a._dataItemID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MultiMaterialConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataItemID[identifier], nil
}

// ByPurposeID returns the MultiMaterialConfig uniquely identified by PurposeID
//
// Error is only non-nil if the source errors out
func (a *MultiMaterialConfigAccessor) ByPurposeID(identifier float64) (MultiMaterialConfig, error) {
	if a._dataPurposeID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MultiMaterialConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataPurposeID[identifier], nil
}
