package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type MapSpaceTypeConfig struct {
	Icon         string    `json:"Icon"`
	MapSpaceType string    `json:"MapSpaceType"`
	Name         hash.Hash `json:"Name"`
}
type MapSpaceTypeConfigAccessor struct {
	_data     []MapSpaceTypeConfig
	_dataIcon map[string]MapSpaceTypeConfig
}

// LoadData retrieves the data. Must be called before MapSpaceTypeConfig.GroupData
func (a *MapSpaceTypeConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MapSpaceTypeConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MapSpaceTypeConfigAccessor) Raw() ([]MapSpaceTypeConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MapSpaceTypeConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MapSpaceTypeConfigAccessor.LoadData to preload everything
func (a *MapSpaceTypeConfigAccessor) GroupData() {
	a._dataIcon = map[string]MapSpaceTypeConfig{}
	for _, d := range a._data {
		a._dataIcon[d.Icon] = d
	}
}

// ByIcon returns the MapSpaceTypeConfig uniquely identified by Icon
//
// Error is only non-nil if the source errors out
func (a *MapSpaceTypeConfigAccessor) ByIcon(identifier string) (MapSpaceTypeConfig, error) {
	if a._dataIcon == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MapSpaceTypeConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataIcon[identifier], nil
}
