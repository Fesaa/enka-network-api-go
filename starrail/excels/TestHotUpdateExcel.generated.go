package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type TestHotUpdateExcel struct {
	AvatarID   json.Number `json:"AvatarID"`
	AvatarName string      `json:"AvatarName"`
}
type TestHotUpdateExcelAccessor struct {
	_data           []TestHotUpdateExcel
	_dataAvatarName map[string]TestHotUpdateExcel
}

// LoadData retrieves the data. Must be called before TestHotUpdateExcel.GroupData
func (a *TestHotUpdateExcelAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/TestHotUpdateExcel.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *TestHotUpdateExcelAccessor) Raw() ([]TestHotUpdateExcel, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []TestHotUpdateExcel{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with TestHotUpdateExcelAccessor.LoadData to preload everything
func (a *TestHotUpdateExcelAccessor) GroupData() {
	a._dataAvatarName = map[string]TestHotUpdateExcel{}
	for _, d := range a._data {
		a._dataAvatarName[d.AvatarName] = d
	}
}

// ByAvatarName returns the TestHotUpdateExcel uniquely identified by AvatarName
//
// Error is only non-nil if the source errors out
func (a *TestHotUpdateExcelAccessor) ByAvatarName(identifier string) (TestHotUpdateExcel, error) {
	if a._dataAvatarName == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return TestHotUpdateExcel{}, err
			}
		}
		a.GroupData()
	}
	return a._dataAvatarName[identifier], nil
}
