package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type RogueTournBuffGroup struct {
	RogueBuffDrop    []json.Number `json:"RogueBuffDrop"`
	RogueBuffGroupID json.Number   `json:"RogueBuffGroupID"`
	TournMode        string        `json:"TournMode"`
}
type RogueTournBuffGroupAccessor struct {
	_data                 []RogueTournBuffGroup
	_dataRogueBuffGroupID map[json.Number]RogueTournBuffGroup
}

// LoadData retrieves the data. Must be called before RogueTournBuffGroup.GroupData
func (a *RogueTournBuffGroupAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueTournBuffGroup.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueTournBuffGroupAccessor) Raw() ([]RogueTournBuffGroup, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueTournBuffGroup{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueTournBuffGroupAccessor.LoadData to preload everything
func (a *RogueTournBuffGroupAccessor) GroupData() {
	a._dataRogueBuffGroupID = map[json.Number]RogueTournBuffGroup{}
	for _, d := range a._data {
		a._dataRogueBuffGroupID[d.RogueBuffGroupID] = d
	}
}

// ByRogueBuffGroupID returns the RogueTournBuffGroup uniquely identified by RogueBuffGroupID
//
// Error is only non-nil if the source errors out
func (a *RogueTournBuffGroupAccessor) ByRogueBuffGroupID(identifier json.Number) (RogueTournBuffGroup, error) {
	if a._dataRogueBuffGroupID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueTournBuffGroup{}, err
			}
		}
		a.GroupData()
	}
	return a._dataRogueBuffGroupID[identifier], nil
}
