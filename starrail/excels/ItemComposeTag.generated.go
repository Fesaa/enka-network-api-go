package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type ItemComposeTag struct {
	BelongTypeID     json.Number `json:"BelongTypeID"`
	ItemComposeTagID json.Number `json:"ItemComposeTagID"`
	TagTextmapID     string      `json:"TagTextmapID"`
}
type ItemComposeTagAccessor struct {
	_data             []ItemComposeTag
	_dataTagTextmapID map[string]ItemComposeTag
}

// LoadData retrieves the data. Must be called before ItemComposeTag.GroupData
func (a *ItemComposeTagAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ItemComposeTag.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ItemComposeTagAccessor) Raw() ([]ItemComposeTag, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ItemComposeTag{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ItemComposeTagAccessor.LoadData to preload everything
func (a *ItemComposeTagAccessor) GroupData() {
	a._dataTagTextmapID = map[string]ItemComposeTag{}
	for _, d := range a._data {
		a._dataTagTextmapID[d.TagTextmapID] = d
	}
}

// ByTagTextmapID returns the ItemComposeTag uniquely identified by TagTextmapID
//
// Error is only non-nil if the source errors out
func (a *ItemComposeTagAccessor) ByTagTextmapID(identifier string) (ItemComposeTag, error) {
	if a._dataTagTextmapID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ItemComposeTag{}, err
			}
		}
		a.GroupData()
	}
	return a._dataTagTextmapID[identifier], nil
}
