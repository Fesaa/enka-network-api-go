package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type StageConfig struct {
	BattleScoringGroup  float64                      `json:"BattleScoringGroup"`
	EliteGroup          float64                      `json:"EliteGroup"`
	ForbidAutoBattle    bool                         `json:"ForbidAutoBattle"`
	ForbidExitBattle    bool                         `json:"ForbidExitBattle"`
	ForbidViewMode      bool                         `json:"ForbidViewMode"`
	HardLevelGroup      float64                      `json:"HardLevelGroup"`
	Level               float64                      `json:"Level"`
	LevelGraphPath      string                       `json:"LevelGraphPath"`
	LevelLoseCondition  []string                     `json:"LevelLoseCondition"`
	LevelWinCondition   []string                     `json:"LevelWinCondition"`
	MonsterList         []StageConfigMonsterList     `json:"MonsterList"`
	MonsterWarningRatio float64                      `json:"MonsterWarningRatio"`
	Release             bool                         `json:"Release"`
	ResetBattleSpeed    bool                         `json:"ResetBattleSpeed"`
	StageAbilityConfig  []string                     `json:"StageAbilityConfig"`
	StageConfigData     []StageConfigStageConfigData `json:"StageConfigData"`
	StageID             float64                      `json:"StageID"`
	StageName           hash.Hash                    `json:"StageName"`
	StageType           string                       `json:"StageType"`
	SubLevelGraphs      []StageConfigSubLevelGraphs  `json:"SubLevelGraphs"`
	TrialAvatarList     []float64                    `json:"TrialAvatarList"`
}
type StageConfigMonsterList struct {
	Monster0 float64 `json:"Monster0"`
	Monster1 float64 `json:"Monster1"`
	Monster2 float64 `json:"Monster2"`
	Monster3 float64 `json:"Monster3"`
	Monster4 float64 `json:"Monster4"`
}
type StageConfigStageConfigData struct {
	HEIKKHLKMOA string `json:"HEIKKHLKMOA"`
	MBMDOCJIMEJ string `json:"MBMDOCJIMEJ"`
}
type StageConfigSubLevelGraphs struct {
	DMNAIOFLJNC string `json:"DMNAIOFLJNC"`
	HEIKKHLKMOA string `json:"HEIKKHLKMOA"`
	KDPPOPPKFAM string `json:"KDPPOPPKFAM"`
	PEMNGOFOKLJ string `json:"PEMNGOFOKLJ"`
}
type StageConfigAccessor struct {
	_data        []StageConfig
	_dataStageID map[float64]StageConfig
}

// LoadData retrieves the data. Must be called before StageConfig.GroupData
func (a *StageConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/StageConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *StageConfigAccessor) Raw() ([]StageConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []StageConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with StageConfigAccessor.LoadData to preload everything
func (a *StageConfigAccessor) GroupData() {
	a._dataStageID = map[float64]StageConfig{}
	for _, d := range a._data {
		a._dataStageID[d.StageID] = d
	}
}

// ByStageID returns the StageConfig uniquely identified by StageID
//
// Error is only non-nil if the source errors out
func (a *StageConfigAccessor) ByStageID(identifier float64) (StageConfig, error) {
	if a._dataStageID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return StageConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataStageID[identifier], nil
}
