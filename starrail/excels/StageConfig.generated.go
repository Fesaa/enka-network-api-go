package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type StageConfig struct {
	BattleScoringGroup  json.Number                  `json:"BattleScoringGroup"`
	EliteGroup          json.Number                  `json:"EliteGroup"`
	ForbidAutoBattle    bool                         `json:"ForbidAutoBattle"`
	ForbidExitBattle    bool                         `json:"ForbidExitBattle"`
	ForbidViewMode      bool                         `json:"ForbidViewMode"`
	HardLevelGroup      json.Number                  `json:"HardLevelGroup"`
	Level               json.Number                  `json:"Level"`
	LevelGraphPath      string                       `json:"LevelGraphPath"`
	LevelLoseCondition  []string                     `json:"LevelLoseCondition"`
	LevelWinCondition   []string                     `json:"LevelWinCondition"`
	MonsterList         []map[string]json.Number     `json:"MonsterList"`
	MonsterWarningRatio json.Number                  `json:"MonsterWarningRatio"`
	Release             bool                         `json:"Release"`
	ResetBattleSpeed    bool                         `json:"ResetBattleSpeed"`
	StageAbilityConfig  []string                     `json:"StageAbilityConfig"`
	StageConfigData     []StageConfigStageConfigData `json:"StageConfigData"`
	StageID             json.Number                  `json:"StageID"`
	StageName           map[string]json.Number       `json:"StageName"`
	StageType           string                       `json:"StageType"`
	SubLevelGraphs      []StageConfigSubLevelGraphs  `json:"SubLevelGraphs"`
	TrialAvatarList     []json.Number                `json:"TrialAvatarList"`
}
type StageConfigStageConfigData struct {
	HEIKKHLKMOA string `json:"HEIKKHLKMOA"`
	MBMDOCJIMEJ string `json:"MBMDOCJIMEJ"`
}
type StageConfigSubLevelGraphs struct {
	DMNAIOFLJNC string `json:"DMNAIOFLJNC"`
	HEIKKHLKMOA string `json:"HEIKKHLKMOA"`
	KDPPOPPKFAM string `json:"KDPPOPPKFAM"`
	PEMNGOFOKLJ string `json:"PEMNGOFOKLJ"`
}
type StageConfigAccessor struct {
	_data []StageConfig
}

// LoadData retrieves the data. Must be called before StageConfig.GroupData
func (a *StageConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/StageConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *StageConfigAccessor) Raw() ([]StageConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []StageConfig{}, err
		}
	}
	return a._data, nil
}
