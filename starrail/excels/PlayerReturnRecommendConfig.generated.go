package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type PlayerReturnRecommendConfig struct {
	Condition   []PlayerReturnRecommendConfigCondition `json:"Condition"`
	GachaID     float64                                `json:"GachaID"`
	GotoID      float64                                `json:"GotoID"`
	ImagePath   string                                 `json:"ImagePath"`
	PanelID     float64                                `json:"PanelID"`
	RecommendID float64                                `json:"RecommendID"`
	Title       hash.Hash                              `json:"Title"`
	Type        string                                 `json:"Type"`
	Weight      float64                                `json:"Weight"`
}
type PlayerReturnRecommendConfigCondition struct {
	Param string `json:"Param"`
	Type  string `json:"Type"`
}
type PlayerReturnRecommendConfigAccessor struct {
	_data            []PlayerReturnRecommendConfig
	_dataRecommendID map[float64]PlayerReturnRecommendConfig
	_dataWeight      map[float64]PlayerReturnRecommendConfig
}

// LoadData retrieves the data. Must be called before PlayerReturnRecommendConfig.GroupData
func (a *PlayerReturnRecommendConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/PlayerReturnRecommendConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *PlayerReturnRecommendConfigAccessor) Raw() ([]PlayerReturnRecommendConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []PlayerReturnRecommendConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with PlayerReturnRecommendConfigAccessor.LoadData to preload everything
func (a *PlayerReturnRecommendConfigAccessor) GroupData() {
	a._dataRecommendID = map[float64]PlayerReturnRecommendConfig{}
	a._dataWeight = map[float64]PlayerReturnRecommendConfig{}
	for _, d := range a._data {
		a._dataRecommendID[d.RecommendID] = d
		a._dataWeight[d.Weight] = d
	}
}

// ByRecommendID returns the PlayerReturnRecommendConfig uniquely identified by RecommendID
//
// Error is only non-nil if the source errors out
func (a *PlayerReturnRecommendConfigAccessor) ByRecommendID(identifier float64) (PlayerReturnRecommendConfig, error) {
	if a._dataRecommendID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return PlayerReturnRecommendConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataRecommendID[identifier], nil
}

// ByWeight returns the PlayerReturnRecommendConfig uniquely identified by Weight
//
// Error is only non-nil if the source errors out
func (a *PlayerReturnRecommendConfigAccessor) ByWeight(identifier float64) (PlayerReturnRecommendConfig, error) {
	if a._dataWeight == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return PlayerReturnRecommendConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataWeight[identifier], nil
}
