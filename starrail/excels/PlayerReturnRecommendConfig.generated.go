package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type PlayerReturnRecommendConfig struct {
	Condition   []PlayerReturnRecommendConfigCondition `json:"Condition"`
	GachaID     json.Number                            `json:"GachaID"`
	GotoID      json.Number                            `json:"GotoID"`
	ImagePath   string                                 `json:"ImagePath"`
	PanelID     json.Number                            `json:"PanelID"`
	RecommendID json.Number                            `json:"RecommendID"`
	Title       map[string]json.Number                 `json:"Title"`
	Type        string                                 `json:"Type"`
	Weight      json.Number                            `json:"Weight"`
}
type PlayerReturnRecommendConfigCondition struct {
	Param string `json:"Param"`
	Type  string `json:"Type"`
}
type PlayerReturnRecommendConfigAccessor struct {
	_data []PlayerReturnRecommendConfig
}

// LoadData retrieves the data. Must be called before PlayerReturnRecommendConfig.GroupData
func (a *PlayerReturnRecommendConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/PlayerReturnRecommendConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *PlayerReturnRecommendConfigAccessor) Raw() ([]PlayerReturnRecommendConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []PlayerReturnRecommendConfig{}, err
		}
	}
	return a._data, nil
}
