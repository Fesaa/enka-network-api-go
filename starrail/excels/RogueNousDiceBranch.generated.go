package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type RogueNousDiceBranch struct {
	BranchCorePrefab         string                   `json:"BranchCorePrefab"`
	BranchEditCorePrefab     string                   `json:"BranchEditCorePrefab"`
	BranchID                 json.Number              `json:"BranchID"`
	BranchIcon               string                   `json:"BranchIcon"`
	BranchIntroduction       map[string]json.Number   `json:"BranchIntroduction"`
	BranchName               map[string]json.Number   `json:"BranchName"`
	BranchPrefab             string                   `json:"BranchPrefab"`
	BranchTag                json.Number              `json:"BranchTag"`
	DefaultCommonSurfaceList []json.Number            `json:"DefaultCommonSurfaceList"`
	DefaultUltraSurface      json.Number              `json:"DefaultUltraSurface"`
	DiceIcon                 string                   `json:"DiceIcon"`
	DiceLightColor           string                   `json:"DiceLightColor"`
	EffectDesc               map[string]json.Number   `json:"EffectDesc"`
	EffectDescParam1         map[string]json.Number   `json:"EffectDescParam1"`
	EffectDescParam2         map[string]json.Number   `json:"EffectDescParam2"`
	EffectDescParam3         map[string]json.Number   `json:"EffectDescParam3"`
	EffectExtraDesc          []json.Number            `json:"EffectExtraDesc"`
	ExtraDesc                []json.Number            `json:"ExtraDesc"`
	ParamValue1              []map[string]json.Number `json:"ParamValue1"`
	ParamValue2              []map[string]json.Number `json:"ParamValue2"`
	ParamValue3              []map[string]json.Number `json:"ParamValue3"`
	PassiveEffectDesc        map[string]json.Number   `json:"PassiveEffectDesc"`
	PassiveEffectExtraDesc   []json.Number            `json:"PassiveEffectExtraDesc"`
	RecommendSurfaceList     []json.Number            `json:"RecommendSurfaceList"`
	SoundReRoll              string                   `json:"SoundReRoll"`
	SoundRoll                string                   `json:"SoundRoll"`
	SoundSuspensionStart     string                   `json:"SoundSuspensionStart"`
	SoundSuspensionStop      string                   `json:"SoundSuspensionStop"`
	StartingEffectDescToast  map[string]json.Number   `json:"StartingEffectDescToast"`
	SuggestiveSurfaceList    []json.Number            `json:"SuggestiveSurfaceList"`
	UnlockID                 json.Number              `json:"UnlockID"`
}
type RogueNousDiceBranchAccessor struct {
	_data                     []RogueNousDiceBranch
	_dataBranchCorePrefab     map[string]RogueNousDiceBranch
	_dataBranchEditCorePrefab map[string]RogueNousDiceBranch
	_dataBranchID             map[json.Number]RogueNousDiceBranch
	_dataDiceIcon             map[string]RogueNousDiceBranch
	_dataDiceLightColor       map[string]RogueNousDiceBranch
}

// LoadData retrieves the data. Must be called before RogueNousDiceBranch.GroupData
func (a *RogueNousDiceBranchAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueNousDiceBranch.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueNousDiceBranchAccessor) Raw() ([]RogueNousDiceBranch, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueNousDiceBranch{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueNousDiceBranchAccessor.LoadData to preload everything
func (a *RogueNousDiceBranchAccessor) GroupData() {
	a._dataBranchCorePrefab = map[string]RogueNousDiceBranch{}
	a._dataBranchEditCorePrefab = map[string]RogueNousDiceBranch{}
	a._dataBranchID = map[json.Number]RogueNousDiceBranch{}
	a._dataDiceIcon = map[string]RogueNousDiceBranch{}
	a._dataDiceLightColor = map[string]RogueNousDiceBranch{}
	for _, d := range a._data {
		a._dataBranchCorePrefab[d.BranchCorePrefab] = d
		a._dataBranchEditCorePrefab[d.BranchEditCorePrefab] = d
		a._dataBranchID[d.BranchID] = d
		a._dataDiceIcon[d.DiceIcon] = d
		a._dataDiceLightColor[d.DiceLightColor] = d
	}
}

// ByBranchCorePrefab returns the RogueNousDiceBranch uniquely identified by BranchCorePrefab
//
// Error is only non-nil if the source errors out
func (a *RogueNousDiceBranchAccessor) ByBranchCorePrefab(identifier string) (RogueNousDiceBranch, error) {
	if a._dataBranchCorePrefab == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueNousDiceBranch{}, err
			}
		}
		a.GroupData()
	}
	return a._dataBranchCorePrefab[identifier], nil
}

// ByBranchEditCorePrefab returns the RogueNousDiceBranch uniquely identified by BranchEditCorePrefab
//
// Error is only non-nil if the source errors out
func (a *RogueNousDiceBranchAccessor) ByBranchEditCorePrefab(identifier string) (RogueNousDiceBranch, error) {
	if a._dataBranchEditCorePrefab == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueNousDiceBranch{}, err
			}
		}
		a.GroupData()
	}
	return a._dataBranchEditCorePrefab[identifier], nil
}

// ByBranchID returns the RogueNousDiceBranch uniquely identified by BranchID
//
// Error is only non-nil if the source errors out
func (a *RogueNousDiceBranchAccessor) ByBranchID(identifier json.Number) (RogueNousDiceBranch, error) {
	if a._dataBranchID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueNousDiceBranch{}, err
			}
		}
		a.GroupData()
	}
	return a._dataBranchID[identifier], nil
}

// ByDiceIcon returns the RogueNousDiceBranch uniquely identified by DiceIcon
//
// Error is only non-nil if the source errors out
func (a *RogueNousDiceBranchAccessor) ByDiceIcon(identifier string) (RogueNousDiceBranch, error) {
	if a._dataDiceIcon == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueNousDiceBranch{}, err
			}
		}
		a.GroupData()
	}
	return a._dataDiceIcon[identifier], nil
}

// ByDiceLightColor returns the RogueNousDiceBranch uniquely identified by DiceLightColor
//
// Error is only non-nil if the source errors out
func (a *RogueNousDiceBranchAccessor) ByDiceLightColor(identifier string) (RogueNousDiceBranch, error) {
	if a._dataDiceLightColor == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueNousDiceBranch{}, err
			}
		}
		a.GroupData()
	}
	return a._dataDiceLightColor[identifier], nil
}
