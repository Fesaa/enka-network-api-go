package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type PlanetFesRecommendTeam struct {
	Business   []PlanetFesRecommendTeamBusiness   `json:"Business"`
	Exhibition []PlanetFesRecommendTeamExhibition `json:"Exhibition"`
	FesLevel   float64                            `json:"FesLevel"`
	Game       []PlanetFesRecommendTeamGame       `json:"Game"`
	ID         float64                            `json:"ID"`
}
type PlanetFesRecommendTeamBusiness struct {
	DJPCAIKIONP float64 `json:"DJPCAIKIONP"`
	HOHJHMBFCME float64 `json:"HOHJHMBFCME"`
}
type PlanetFesRecommendTeamExhibition struct {
	DJPCAIKIONP float64 `json:"DJPCAIKIONP"`
	HOHJHMBFCME float64 `json:"HOHJHMBFCME"`
}
type PlanetFesRecommendTeamGame struct {
	DJPCAIKIONP float64 `json:"DJPCAIKIONP"`
	HOHJHMBFCME float64 `json:"HOHJHMBFCME"`
}
type PlanetFesRecommendTeamAccessor struct {
	_data []PlanetFesRecommendTeam
}

// LoadData retrieves the data. Must be called before PlanetFesRecommendTeam.GroupData
func (a *PlanetFesRecommendTeamAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/PlanetFesRecommendTeam.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *PlanetFesRecommendTeamAccessor) Raw() ([]PlanetFesRecommendTeam, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []PlanetFesRecommendTeam{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}
