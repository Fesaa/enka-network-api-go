package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type MazeProp struct {
	BoardShowList        []json.Number               `json:"BoardShowList"`
	ConfigEntityPath     string                      `json:"ConfigEntityPath"`
	DamageTypeList       []string                    `json:"DamageTypeList"`
	HasRendererComponent bool                        `json:"HasRendererComponent"`
	ID                   json.Number                 `json:"ID"`
	IsMapContent         bool                        `json:"IsMapContent"`
	JsonPath             string                      `json:"JsonPath"`
	LodPriority          json.Number                 `json:"LodPriority"`
	MiniMapIconType      json.Number                 `json:"MiniMapIconType"`
	MiniMapStateIcons    []MazePropMiniMapStateIcons `json:"MiniMapStateIcons"`
	PerformanceType      string                      `json:"PerformanceType"`
	PropIconPath         string                      `json:"PropIconPath"`
	PropName             map[string]json.Number      `json:"PropName"`
	PropStateList        []string                    `json:"PropStateList"`
	PropType             string                      `json:"PropType"`
}
type MazePropMiniMapStateIcons struct {
	Color  string      `json:"Color"`
	IconID json.Number `json:"IconID"`
	State  string      `json:"State"`
}
type MazePropAccessor struct {
	_data []MazeProp
}

// LoadData retrieves the data. Must be called before MazeProp.GroupData
func (a *MazePropAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MazeProp.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MazePropAccessor) Raw() ([]MazeProp, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MazeProp{}, err
		}
	}
	return a._data, nil
}
