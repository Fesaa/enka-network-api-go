package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type MazeProp struct {
	BoardShowList        []float64                   `json:"BoardShowList"`
	ConfigEntityPath     string                      `json:"ConfigEntityPath"`
	DamageTypeList       []string                    `json:"DamageTypeList"`
	HasRendererComponent bool                        `json:"HasRendererComponent"`
	ID                   float64                     `json:"ID"`
	IsMapContent         bool                        `json:"IsMapContent"`
	JsonPath             string                      `json:"JsonPath"`
	LodPriority          float64                     `json:"LodPriority"`
	MiniMapIconType      float64                     `json:"MiniMapIconType"`
	MiniMapStateIcons    []MazePropMiniMapStateIcons `json:"MiniMapStateIcons"`
	PerformanceType      string                      `json:"PerformanceType"`
	PropIconPath         string                      `json:"PropIconPath"`
	PropName             hash.Hash                   `json:"PropName"`
	PropStateList        []string                    `json:"PropStateList"`
	PropType             string                      `json:"PropType"`
}
type MazePropMiniMapStateIcons struct {
	Color  string  `json:"Color"`
	IconID float64 `json:"IconID"`
	State  string  `json:"State"`
}
type MazePropAccessor struct {
	_data   []MazeProp
	_dataID map[float64]MazeProp
}

// LoadData retrieves the data. Must be called before MazeProp.GroupData
func (a *MazePropAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MazeProp.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MazePropAccessor) Raw() ([]MazeProp, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MazeProp{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MazePropAccessor.LoadData to preload everything
func (a *MazePropAccessor) GroupData() {
	for _, d := range a._data {
		a._dataID[d.ID] = d
	}
}

// ByID returns the MazeProp uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *MazePropAccessor) ByID(identifier float64) (MazeProp, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MazeProp{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}
