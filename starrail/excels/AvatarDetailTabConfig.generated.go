package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type AvatarDetailTabConfig struct {
	ID       float64 `json:"ID"`
	IconPath string  `json:"IconPath"`
	TabName  string  `json:"TabName"`
}
type AvatarDetailTabConfigAccessor struct {
	_data         []AvatarDetailTabConfig
	_dataID       map[float64]AvatarDetailTabConfig
	_dataIconPath map[string]AvatarDetailTabConfig
	_dataTabName  map[string]AvatarDetailTabConfig
}

// LoadData retrieves the data. Must be called before AvatarDetailTabConfig.GroupData
func (a *AvatarDetailTabConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/AvatarDetailTabConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *AvatarDetailTabConfigAccessor) Raw() ([]AvatarDetailTabConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []AvatarDetailTabConfig{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with AvatarDetailTabConfigAccessor.LoadData to preload everything
func (a *AvatarDetailTabConfigAccessor) GroupData() {
	for _, d := range a._data {
		a._dataID[d.ID] = d
		a._dataIconPath[d.IconPath] = d
		a._dataTabName[d.TabName] = d
	}
}

// ByID returns the AvatarDetailTabConfig uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *AvatarDetailTabConfigAccessor) ByID(identifier float64) (AvatarDetailTabConfig, error) {
	if a._dataID == nil {
		err := a.LoadData()
		if err != nil {
			return AvatarDetailTabConfig{}, err
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}

// ByIconPath returns the AvatarDetailTabConfig uniquely identified by IconPath
//
// Error is only non-nil if the source errors out
func (a *AvatarDetailTabConfigAccessor) ByIconPath(identifier string) (AvatarDetailTabConfig, error) {
	if a._dataIconPath == nil {
		err := a.LoadData()
		if err != nil {
			return AvatarDetailTabConfig{}, err
		}
		a.GroupData()
	}
	return a._dataIconPath[identifier], nil
}

// ByTabName returns the AvatarDetailTabConfig uniquely identified by TabName
//
// Error is only non-nil if the source errors out
func (a *AvatarDetailTabConfigAccessor) ByTabName(identifier string) (AvatarDetailTabConfig, error) {
	if a._dataTabName == nil {
		err := a.LoadData()
		if err != nil {
			return AvatarDetailTabConfig{}, err
		}
		a.GroupData()
	}
	return a._dataTabName[identifier], nil
}
