package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type ActivityNewbiePromote struct {
	Desc        hash.Hash `json:"Desc"`
	DisplayItem float64   `json:"DisplayItem"`
	FinishQuest float64   `json:"FinishQuest"`
	ID          float64   `json:"ID"`
	SortID      float64   `json:"SortID"`
}
type ActivityNewbiePromoteAccessor struct {
	_data            []ActivityNewbiePromote
	_dataDisplayItem map[float64]ActivityNewbiePromote
	_dataFinishQuest map[float64]ActivityNewbiePromote
	_dataID          map[float64]ActivityNewbiePromote
	_dataSortID      map[float64]ActivityNewbiePromote
}

// LoadData retrieves the data. Must be called before ActivityNewbiePromote.GroupData
func (a *ActivityNewbiePromoteAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ActivityNewbiePromote.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ActivityNewbiePromoteAccessor) Raw() ([]ActivityNewbiePromote, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ActivityNewbiePromote{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ActivityNewbiePromoteAccessor.LoadData to preload everything
func (a *ActivityNewbiePromoteAccessor) GroupData() {
	for _, d := range a._data {
		a._dataDisplayItem[d.DisplayItem] = d
		a._dataFinishQuest[d.FinishQuest] = d
		a._dataID[d.ID] = d
		a._dataSortID[d.SortID] = d
	}
}

// ByDisplayItem returns the ActivityNewbiePromote uniquely identified by DisplayItem
//
// Error is only non-nil if the source errors out
func (a *ActivityNewbiePromoteAccessor) ByDisplayItem(identifier float64) (ActivityNewbiePromote, error) {
	if a._dataDisplayItem == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityNewbiePromote{}, err
			}
		}
		a.GroupData()
	}
	return a._dataDisplayItem[identifier], nil
}

// ByFinishQuest returns the ActivityNewbiePromote uniquely identified by FinishQuest
//
// Error is only non-nil if the source errors out
func (a *ActivityNewbiePromoteAccessor) ByFinishQuest(identifier float64) (ActivityNewbiePromote, error) {
	if a._dataFinishQuest == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityNewbiePromote{}, err
			}
		}
		a.GroupData()
	}
	return a._dataFinishQuest[identifier], nil
}

// ByID returns the ActivityNewbiePromote uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *ActivityNewbiePromoteAccessor) ByID(identifier float64) (ActivityNewbiePromote, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityNewbiePromote{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}

// BySortID returns the ActivityNewbiePromote uniquely identified by SortID
//
// Error is only non-nil if the source errors out
func (a *ActivityNewbiePromoteAccessor) BySortID(identifier float64) (ActivityNewbiePromote, error) {
	if a._dataSortID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityNewbiePromote{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSortID[identifier], nil
}
