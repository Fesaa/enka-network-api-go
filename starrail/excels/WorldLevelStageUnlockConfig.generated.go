package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type WorldLevelStageUnlockConfig struct {
	RaidID            float64 `json:"RaidID"`
	UIEntranceBgPath  string  `json:"UIEntranceBgPath"`
	UIEntranceParam   float64 `json:"UIEntranceParam"`
	UIEnviromentParam float64 `json:"UIEnviromentParam"`
}
type WorldLevelStageUnlockConfigAccessor struct {
	_data                  []WorldLevelStageUnlockConfig
	_dataRaidID            map[float64]WorldLevelStageUnlockConfig
	_dataUIEntranceBgPath  map[string]WorldLevelStageUnlockConfig
	_dataUIEnviromentParam map[float64]WorldLevelStageUnlockConfig
}

// LoadData retrieves the data. Must be called before WorldLevelStageUnlockConfig.GroupData
func (a *WorldLevelStageUnlockConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/WorldLevelStageUnlockConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *WorldLevelStageUnlockConfigAccessor) Raw() ([]WorldLevelStageUnlockConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []WorldLevelStageUnlockConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with WorldLevelStageUnlockConfigAccessor.LoadData to preload everything
func (a *WorldLevelStageUnlockConfigAccessor) GroupData() {
	a._dataRaidID = map[float64]WorldLevelStageUnlockConfig{}
	a._dataUIEntranceBgPath = map[string]WorldLevelStageUnlockConfig{}
	a._dataUIEnviromentParam = map[float64]WorldLevelStageUnlockConfig{}
	for _, d := range a._data {
		a._dataRaidID[d.RaidID] = d
		a._dataUIEntranceBgPath[d.UIEntranceBgPath] = d
		a._dataUIEnviromentParam[d.UIEnviromentParam] = d
	}
}

// ByRaidID returns the WorldLevelStageUnlockConfig uniquely identified by RaidID
//
// Error is only non-nil if the source errors out
func (a *WorldLevelStageUnlockConfigAccessor) ByRaidID(identifier float64) (WorldLevelStageUnlockConfig, error) {
	if a._dataRaidID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return WorldLevelStageUnlockConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataRaidID[identifier], nil
}

// ByUIEntranceBgPath returns the WorldLevelStageUnlockConfig uniquely identified by UIEntranceBgPath
//
// Error is only non-nil if the source errors out
func (a *WorldLevelStageUnlockConfigAccessor) ByUIEntranceBgPath(identifier string) (WorldLevelStageUnlockConfig, error) {
	if a._dataUIEntranceBgPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return WorldLevelStageUnlockConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataUIEntranceBgPath[identifier], nil
}

// ByUIEnviromentParam returns the WorldLevelStageUnlockConfig uniquely identified by UIEnviromentParam
//
// Error is only non-nil if the source errors out
func (a *WorldLevelStageUnlockConfigAccessor) ByUIEnviromentParam(identifier float64) (WorldLevelStageUnlockConfig, error) {
	if a._dataUIEnviromentParam == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return WorldLevelStageUnlockConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataUIEnviromentParam[identifier], nil
}
