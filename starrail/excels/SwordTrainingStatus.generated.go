package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type SwordTrainingStatus struct {
	InitialValue      json.Number            `json:"InitialValue"`
	MaximumValue      json.Number            `json:"MaximumValue"`
	StatusID          json.Number            `json:"StatusID"`
	StatusIcon        string                 `json:"StatusIcon"`
	StatusName        map[string]json.Number `json:"StatusName"`
	StatusOutLineIcon string                 `json:"StatusOutLineIcon"`
}
type SwordTrainingStatusAccessor struct {
	_data                  []SwordTrainingStatus
	_dataStatusIcon        map[string]SwordTrainingStatus
	_dataStatusOutLineIcon map[string]SwordTrainingStatus
}

// LoadData retrieves the data. Must be called before SwordTrainingStatus.GroupData
func (a *SwordTrainingStatusAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/SwordTrainingStatus.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *SwordTrainingStatusAccessor) Raw() ([]SwordTrainingStatus, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []SwordTrainingStatus{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with SwordTrainingStatusAccessor.LoadData to preload everything
func (a *SwordTrainingStatusAccessor) GroupData() {
	a._dataStatusIcon = map[string]SwordTrainingStatus{}
	a._dataStatusOutLineIcon = map[string]SwordTrainingStatus{}
	for _, d := range a._data {
		a._dataStatusIcon[d.StatusIcon] = d
		a._dataStatusOutLineIcon[d.StatusOutLineIcon] = d
	}
}

// ByStatusIcon returns the SwordTrainingStatus uniquely identified by StatusIcon
//
// Error is only non-nil if the source errors out
func (a *SwordTrainingStatusAccessor) ByStatusIcon(identifier string) (SwordTrainingStatus, error) {
	if a._dataStatusIcon == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return SwordTrainingStatus{}, err
			}
		}
		a.GroupData()
	}
	return a._dataStatusIcon[identifier], nil
}

// ByStatusOutLineIcon returns the SwordTrainingStatus uniquely identified by StatusOutLineIcon
//
// Error is only non-nil if the source errors out
func (a *SwordTrainingStatusAccessor) ByStatusOutLineIcon(identifier string) (SwordTrainingStatus, error) {
	if a._dataStatusOutLineIcon == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return SwordTrainingStatus{}, err
			}
		}
		a.GroupData()
	}
	return a._dataStatusOutLineIcon[identifier], nil
}
