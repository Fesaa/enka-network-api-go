package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type TalkVerificationDistance struct {
	Distance float64 `json:"Distance"`
	ID       float64 `json:"ID"`
}
type TalkVerificationDistanceAccessor struct {
	_data         []TalkVerificationDistance
	_dataDistance map[float64]TalkVerificationDistance
	_dataID       map[float64]TalkVerificationDistance
}

// LoadData retrieves the data. Must be called before TalkVerificationDistance.GroupData
func (a *TalkVerificationDistanceAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/TalkVerificationDistance.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *TalkVerificationDistanceAccessor) Raw() ([]TalkVerificationDistance, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []TalkVerificationDistance{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with TalkVerificationDistanceAccessor.LoadData to preload everything
func (a *TalkVerificationDistanceAccessor) GroupData() {
	for _, d := range a._data {
		a._dataDistance[d.Distance] = d
		a._dataID[d.ID] = d
	}
}

// ByDistance returns the TalkVerificationDistance uniquely identified by Distance
//
// Error is only non-nil if the source errors out
func (a *TalkVerificationDistanceAccessor) ByDistance(identifier float64) (TalkVerificationDistance, error) {
	if a._dataDistance == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return TalkVerificationDistance{}, err
			}
		}
		a.GroupData()
	}
	return a._dataDistance[identifier], nil
}

// ByID returns the TalkVerificationDistance uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *TalkVerificationDistanceAccessor) ByID(identifier float64) (TalkVerificationDistance, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return TalkVerificationDistance{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}
