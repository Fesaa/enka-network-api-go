package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type RogueMazeBuff struct {
	BuffDesc                     hash.Hash       `json:"BuffDesc"`
	BuffDescBattle               hash.Hash       `json:"BuffDescBattle"`
	BuffDescParamByAvatarSkillID float64         `json:"BuffDescParamByAvatarSkillID"`
	BuffEffect                   string          `json:"BuffEffect"`
	BuffIcon                     string          `json:"BuffIcon"`
	BuffName                     hash.Hash       `json:"BuffName"`
	BuffRarity                   float64         `json:"BuffRarity"`
	BuffSeries                   float64         `json:"BuffSeries"`
	BuffSimpleDesc               hash.Hash       `json:"BuffSimpleDesc"`
	ID                           float64         `json:"ID"`
	InBattleBindingKey           string          `json:"InBattleBindingKey"`
	InBattleBindingType          string          `json:"InBattleBindingType"`
	Lv                           float64         `json:"Lv"`
	LvMax                        float64         `json:"LvMax"`
	MazeBuffType                 string          `json:"MazeBuffType"`
	ModifierName                 string          `json:"ModifierName"`
	ParamList                    []hash.IntValue `json:"ParamList"`
}
type RogueMazeBuffAccessor struct {
	_data []RogueMazeBuff
}

// LoadData retrieves the data. Must be called before RogueMazeBuff.GroupData
func (a *RogueMazeBuffAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueMazeBuff.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueMazeBuffAccessor) Raw() ([]RogueMazeBuff, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueMazeBuff{}, err
		}
	}
	return a._data, nil
}
