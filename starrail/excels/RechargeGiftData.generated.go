package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type RechargeGiftData struct {
	Days        float64 `json:"Days"`
	GiftID      float64 `json:"GiftID"`
	McoinFree   float64 `json:"McoinFree"`
	McoinPay    float64 `json:"McoinPay"`
	RewardsFree float64 `json:"RewardsFree"`
	RewardsPay  float64 `json:"RewardsPay"`
}
type RechargeGiftDataAccessor struct {
	_data       []RechargeGiftData
	_dataGiftID map[float64]RechargeGiftData
}

// LoadData retrieves the data. Must be called before RechargeGiftData.GroupData
func (a *RechargeGiftDataAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RechargeGiftData.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RechargeGiftDataAccessor) Raw() ([]RechargeGiftData, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RechargeGiftData{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RechargeGiftDataAccessor.LoadData to preload everything
func (a *RechargeGiftDataAccessor) GroupData() {
	a._dataGiftID = map[float64]RechargeGiftData{}
	for _, d := range a._data {
		a._dataGiftID[d.GiftID] = d
	}
}

// ByGiftID returns the RechargeGiftData uniquely identified by GiftID
//
// Error is only non-nil if the source errors out
func (a *RechargeGiftDataAccessor) ByGiftID(identifier float64) (RechargeGiftData, error) {
	if a._dataGiftID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RechargeGiftData{}, err
			}
		}
		a.GroupData()
	}
	return a._dataGiftID[identifier], nil
}
