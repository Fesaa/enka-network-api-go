package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type RogueWolfGunMiracleTarget struct {
	Basement    float64 `json:"Basement"`
	GameMode    string  `json:"GameMode"`
	LayerMiddle float64 `json:"LayerMiddle"`
	MiracleID   float64 `json:"MiracleID"`
	MiraclePic  string  `json:"MiraclePic"`
}
type RogueWolfGunMiracleTargetAccessor struct {
	_data          []RogueWolfGunMiracleTarget
	_dataMiracleID map[float64]RogueWolfGunMiracleTarget
}

// LoadData retrieves the data. Must be called before RogueWolfGunMiracleTarget.GroupData
func (a *RogueWolfGunMiracleTargetAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueWolfGunMiracleTarget.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueWolfGunMiracleTargetAccessor) Raw() ([]RogueWolfGunMiracleTarget, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueWolfGunMiracleTarget{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueWolfGunMiracleTargetAccessor.LoadData to preload everything
func (a *RogueWolfGunMiracleTargetAccessor) GroupData() {
	for _, d := range a._data {
		a._dataMiracleID[d.MiracleID] = d
	}
}

// ByMiracleID returns the RogueWolfGunMiracleTarget uniquely identified by MiracleID
//
// Error is only non-nil if the source errors out
func (a *RogueWolfGunMiracleTargetAccessor) ByMiracleID(identifier float64) (RogueWolfGunMiracleTarget, error) {
	if a._dataMiracleID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueWolfGunMiracleTarget{}, err
			}
		}
		a.GroupData()
	}
	return a._dataMiracleID[identifier], nil
}
