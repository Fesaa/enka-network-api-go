package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type TrainPartyEventConfig struct {
	EffectJsonPath string      `json:"EffectJsonPath"`
	EventActPath   string      `json:"EventActPath"`
	EventID        json.Number `json:"EventID"`
}
type TrainPartyEventConfigAccessor struct {
	_data        []TrainPartyEventConfig
	_dataEventID map[json.Number]TrainPartyEventConfig
}

// LoadData retrieves the data. Must be called before TrainPartyEventConfig.GroupData
func (a *TrainPartyEventConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/TrainPartyEventConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *TrainPartyEventConfigAccessor) Raw() ([]TrainPartyEventConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []TrainPartyEventConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with TrainPartyEventConfigAccessor.LoadData to preload everything
func (a *TrainPartyEventConfigAccessor) GroupData() {
	a._dataEventID = map[json.Number]TrainPartyEventConfig{}
	for _, d := range a._data {
		a._dataEventID[d.EventID] = d
	}
}

// ByEventID returns the TrainPartyEventConfig uniquely identified by EventID
//
// Error is only non-nil if the source errors out
func (a *TrainPartyEventConfigAccessor) ByEventID(identifier json.Number) (TrainPartyEventConfig, error) {
	if a._dataEventID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return TrainPartyEventConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataEventID[identifier], nil
}
