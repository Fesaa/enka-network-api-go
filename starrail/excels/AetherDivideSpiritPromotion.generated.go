package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type AetherDivideSpiritPromotion struct {
	AttackBase       map[string]json.Number `json:"AttackBase"`
	AvatarID         json.Number            `json:"AvatarID"`
	BaseAggro        map[string]json.Number `json:"BaseAggro"`
	Exp              json.Number            `json:"Exp"`
	HPBase           map[string]json.Number `json:"HPBase"`
	Promotion        json.Number            `json:"Promotion"`
	Slot             json.Number            `json:"Slot"`
	SpecialSkillList []interface{}          `json:"SpecialSkillList"`
	SpeedBase        map[string]json.Number `json:"SpeedBase"`
}
type AetherDivideSpiritPromotionAccessor struct {
	_data []AetherDivideSpiritPromotion
}

// LoadData retrieves the data. Must be called before AetherDivideSpiritPromotion.GroupData
func (a *AetherDivideSpiritPromotionAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/AetherDivideSpiritPromotion.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *AetherDivideSpiritPromotionAccessor) Raw() ([]AetherDivideSpiritPromotion, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []AetherDivideSpiritPromotion{}, err
		}
	}
	return a._data, nil
}
