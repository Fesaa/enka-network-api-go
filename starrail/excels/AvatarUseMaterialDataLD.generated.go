package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type AvatarUseMaterialDataLD struct {
	AvatarID            float64 `json:"AvatarID"`
	BossMaterial        float64 `json:"BossMaterial"`
	PromotionMaterial   float64 `json:"PromotionMaterial"`
	SkillMaterialLarge  float64 `json:"SkillMaterialLarge"`
	SkillMaterialMedium float64 `json:"SkillMaterialMedium"`
	SkillMaterialSmall  float64 `json:"SkillMaterialSmall"`
	WorldMaterialLarge  float64 `json:"WorldMaterialLarge"`
	WorldMaterialMedium float64 `json:"WorldMaterialMedium"`
	WorldMaterialSmall  float64 `json:"WorldMaterialSmall"`
}
type AvatarUseMaterialDataLDAccessor struct {
	_data                    []AvatarUseMaterialDataLD
	_dataAvatarID            map[float64]AvatarUseMaterialDataLD
	_dataBossMaterial        map[float64]AvatarUseMaterialDataLD
	_dataPromotionMaterial   map[float64]AvatarUseMaterialDataLD
	_dataSkillMaterialLarge  map[float64]AvatarUseMaterialDataLD
	_dataSkillMaterialMedium map[float64]AvatarUseMaterialDataLD
	_dataSkillMaterialSmall  map[float64]AvatarUseMaterialDataLD
	_dataWorldMaterialLarge  map[float64]AvatarUseMaterialDataLD
	_dataWorldMaterialMedium map[float64]AvatarUseMaterialDataLD
	_dataWorldMaterialSmall  map[float64]AvatarUseMaterialDataLD
}

// LoadData retrieves the data. Must be called before AvatarUseMaterialDataLD.GroupData
func (a *AvatarUseMaterialDataLDAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/AvatarUseMaterialDataLD.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *AvatarUseMaterialDataLDAccessor) Raw() ([]AvatarUseMaterialDataLD, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []AvatarUseMaterialDataLD{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with AvatarUseMaterialDataLDAccessor.LoadData to preload everything
func (a *AvatarUseMaterialDataLDAccessor) GroupData() {
	a._dataAvatarID = map[float64]AvatarUseMaterialDataLD{}
	a._dataBossMaterial = map[float64]AvatarUseMaterialDataLD{}
	a._dataPromotionMaterial = map[float64]AvatarUseMaterialDataLD{}
	a._dataSkillMaterialLarge = map[float64]AvatarUseMaterialDataLD{}
	a._dataSkillMaterialMedium = map[float64]AvatarUseMaterialDataLD{}
	a._dataSkillMaterialSmall = map[float64]AvatarUseMaterialDataLD{}
	a._dataWorldMaterialLarge = map[float64]AvatarUseMaterialDataLD{}
	a._dataWorldMaterialMedium = map[float64]AvatarUseMaterialDataLD{}
	a._dataWorldMaterialSmall = map[float64]AvatarUseMaterialDataLD{}
	for _, d := range a._data {
		a._dataAvatarID[d.AvatarID] = d
		a._dataBossMaterial[d.BossMaterial] = d
		a._dataPromotionMaterial[d.PromotionMaterial] = d
		a._dataSkillMaterialLarge[d.SkillMaterialLarge] = d
		a._dataSkillMaterialMedium[d.SkillMaterialMedium] = d
		a._dataSkillMaterialSmall[d.SkillMaterialSmall] = d
		a._dataWorldMaterialLarge[d.WorldMaterialLarge] = d
		a._dataWorldMaterialMedium[d.WorldMaterialMedium] = d
		a._dataWorldMaterialSmall[d.WorldMaterialSmall] = d
	}
}

// ByAvatarID returns the AvatarUseMaterialDataLD uniquely identified by AvatarID
//
// Error is only non-nil if the source errors out
func (a *AvatarUseMaterialDataLDAccessor) ByAvatarID(identifier float64) (AvatarUseMaterialDataLD, error) {
	if a._dataAvatarID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AvatarUseMaterialDataLD{}, err
			}
		}
		a.GroupData()
	}
	return a._dataAvatarID[identifier], nil
}

// ByBossMaterial returns the AvatarUseMaterialDataLD uniquely identified by BossMaterial
//
// Error is only non-nil if the source errors out
func (a *AvatarUseMaterialDataLDAccessor) ByBossMaterial(identifier float64) (AvatarUseMaterialDataLD, error) {
	if a._dataBossMaterial == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AvatarUseMaterialDataLD{}, err
			}
		}
		a.GroupData()
	}
	return a._dataBossMaterial[identifier], nil
}

// ByPromotionMaterial returns the AvatarUseMaterialDataLD uniquely identified by PromotionMaterial
//
// Error is only non-nil if the source errors out
func (a *AvatarUseMaterialDataLDAccessor) ByPromotionMaterial(identifier float64) (AvatarUseMaterialDataLD, error) {
	if a._dataPromotionMaterial == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AvatarUseMaterialDataLD{}, err
			}
		}
		a.GroupData()
	}
	return a._dataPromotionMaterial[identifier], nil
}

// BySkillMaterialLarge returns the AvatarUseMaterialDataLD uniquely identified by SkillMaterialLarge
//
// Error is only non-nil if the source errors out
func (a *AvatarUseMaterialDataLDAccessor) BySkillMaterialLarge(identifier float64) (AvatarUseMaterialDataLD, error) {
	if a._dataSkillMaterialLarge == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AvatarUseMaterialDataLD{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSkillMaterialLarge[identifier], nil
}

// BySkillMaterialMedium returns the AvatarUseMaterialDataLD uniquely identified by SkillMaterialMedium
//
// Error is only non-nil if the source errors out
func (a *AvatarUseMaterialDataLDAccessor) BySkillMaterialMedium(identifier float64) (AvatarUseMaterialDataLD, error) {
	if a._dataSkillMaterialMedium == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AvatarUseMaterialDataLD{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSkillMaterialMedium[identifier], nil
}

// BySkillMaterialSmall returns the AvatarUseMaterialDataLD uniquely identified by SkillMaterialSmall
//
// Error is only non-nil if the source errors out
func (a *AvatarUseMaterialDataLDAccessor) BySkillMaterialSmall(identifier float64) (AvatarUseMaterialDataLD, error) {
	if a._dataSkillMaterialSmall == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AvatarUseMaterialDataLD{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSkillMaterialSmall[identifier], nil
}

// ByWorldMaterialLarge returns the AvatarUseMaterialDataLD uniquely identified by WorldMaterialLarge
//
// Error is only non-nil if the source errors out
func (a *AvatarUseMaterialDataLDAccessor) ByWorldMaterialLarge(identifier float64) (AvatarUseMaterialDataLD, error) {
	if a._dataWorldMaterialLarge == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AvatarUseMaterialDataLD{}, err
			}
		}
		a.GroupData()
	}
	return a._dataWorldMaterialLarge[identifier], nil
}

// ByWorldMaterialMedium returns the AvatarUseMaterialDataLD uniquely identified by WorldMaterialMedium
//
// Error is only non-nil if the source errors out
func (a *AvatarUseMaterialDataLDAccessor) ByWorldMaterialMedium(identifier float64) (AvatarUseMaterialDataLD, error) {
	if a._dataWorldMaterialMedium == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AvatarUseMaterialDataLD{}, err
			}
		}
		a.GroupData()
	}
	return a._dataWorldMaterialMedium[identifier], nil
}

// ByWorldMaterialSmall returns the AvatarUseMaterialDataLD uniquely identified by WorldMaterialSmall
//
// Error is only non-nil if the source errors out
func (a *AvatarUseMaterialDataLDAccessor) ByWorldMaterialSmall(identifier float64) (AvatarUseMaterialDataLD, error) {
	if a._dataWorldMaterialSmall == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AvatarUseMaterialDataLD{}, err
			}
		}
		a.GroupData()
	}
	return a._dataWorldMaterialSmall[identifier], nil
}
