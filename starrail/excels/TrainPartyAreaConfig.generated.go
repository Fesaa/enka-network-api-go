package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type TrainPartyAreaConfig struct {
	FirstStep         float64                                 `json:"FirstStep"`
	HiddenBlockList   []interface{}                           `json:"HiddenBlockList"`
	ID                float64                                 `json:"ID"`
	IconPath          string                                  `json:"IconPath"`
	Name              hash.Hash                               `json:"Name"`
	ProgressBonusList []TrainPartyAreaConfigProgressBonusList `json:"ProgressBonusList"`
	RequireAreaID     float64                                 `json:"RequireAreaID"`
	ShowBlockList     []string                                `json:"ShowBlockList"`
	Sort              float64                                 `json:"Sort"`
}
type TrainPartyAreaConfigProgressBonusList struct {
	AddStar  float64 `json:"AddStar"`
	Progress float64 `json:"Progress"`
}
type TrainPartyAreaConfigAccessor struct {
	_data          []TrainPartyAreaConfig
	_dataID        map[float64]TrainPartyAreaConfig
	_dataIconPath  map[string]TrainPartyAreaConfig
	_dataSort      map[float64]TrainPartyAreaConfig
	_dataFirstStep map[float64]TrainPartyAreaConfig
}

// LoadData retrieves the data. Must be called before TrainPartyAreaConfig.GroupData
func (a *TrainPartyAreaConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/TrainPartyAreaConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *TrainPartyAreaConfigAccessor) Raw() ([]TrainPartyAreaConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []TrainPartyAreaConfig{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with TrainPartyAreaConfigAccessor.LoadData to preload everything
func (a *TrainPartyAreaConfigAccessor) GroupData() {
	for _, d := range a._data {
		a._dataID[d.ID] = d
		a._dataIconPath[d.IconPath] = d
		a._dataSort[d.Sort] = d
		a._dataFirstStep[d.FirstStep] = d
	}
}

// ByID returns the TrainPartyAreaConfig uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *TrainPartyAreaConfigAccessor) ByID(identifier float64) (TrainPartyAreaConfig, error) {
	if a._dataID == nil {
		err := a.LoadData()
		if err != nil {
			return TrainPartyAreaConfig{}, err
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}

// ByIconPath returns the TrainPartyAreaConfig uniquely identified by IconPath
//
// Error is only non-nil if the source errors out
func (a *TrainPartyAreaConfigAccessor) ByIconPath(identifier string) (TrainPartyAreaConfig, error) {
	if a._dataIconPath == nil {
		err := a.LoadData()
		if err != nil {
			return TrainPartyAreaConfig{}, err
		}
		a.GroupData()
	}
	return a._dataIconPath[identifier], nil
}

// BySort returns the TrainPartyAreaConfig uniquely identified by Sort
//
// Error is only non-nil if the source errors out
func (a *TrainPartyAreaConfigAccessor) BySort(identifier float64) (TrainPartyAreaConfig, error) {
	if a._dataSort == nil {
		err := a.LoadData()
		if err != nil {
			return TrainPartyAreaConfig{}, err
		}
		a.GroupData()
	}
	return a._dataSort[identifier], nil
}

// ByFirstStep returns the TrainPartyAreaConfig uniquely identified by FirstStep
//
// Error is only non-nil if the source errors out
func (a *TrainPartyAreaConfigAccessor) ByFirstStep(identifier float64) (TrainPartyAreaConfig, error) {
	if a._dataFirstStep == nil {
		err := a.LoadData()
		if err != nil {
			return TrainPartyAreaConfig{}, err
		}
		a.GroupData()
	}
	return a._dataFirstStep[identifier], nil
}
