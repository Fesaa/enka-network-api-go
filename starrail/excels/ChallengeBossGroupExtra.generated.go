package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type ChallengeBossGroupExtra struct {
	BossPatternPrefabPath       string        `json:"BossPatternPrefabPath"`
	BossPositionPrefabPath1     string        `json:"BossPositionPrefabPath1"`
	BossPositionPrefabPath2     string        `json:"BossPositionPrefabPath2"`
	BuffList1                   []json.Number `json:"BuffList1"`
	BuffList2                   []json.Number `json:"BuffList2"`
	GroupID                     json.Number   `json:"GroupID"`
	ThemeIconPicPath            string        `json:"ThemeIconPicPath"`
	ThemePosterBgPicPath        string        `json:"ThemePosterBgPicPath"`
	ThemePosterEffectPrefabPath string        `json:"ThemePosterEffectPrefabPath"`
	ThemePosterTabPicPath       string        `json:"ThemePosterTabPicPath"`
	ThemeToastPicPath           string        `json:"ThemeToastPicPath"`
}
type ChallengeBossGroupExtraAccessor struct {
	_data []ChallengeBossGroupExtra
}

// LoadData retrieves the data. Must be called before ChallengeBossGroupExtra.GroupData
func (a *ChallengeBossGroupExtraAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ChallengeBossGroupExtra.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ChallengeBossGroupExtraAccessor) Raw() ([]ChallengeBossGroupExtra, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ChallengeBossGroupExtra{}, err
		}
	}
	return a._data, nil
}
