package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type GameplayGuideSubTypeData struct {
	ItemListForType []float64 `json:"ItemListForType"`
	Name            hash.Hash `json:"Name"`
	SubTypeID       float64   `json:"SubTypeID"`
	TabIconPath     string    `json:"TabIconPath"`
}
type GameplayGuideSubTypeDataAccessor struct {
	_data            []GameplayGuideSubTypeData
	_dataSubTypeID   map[float64]GameplayGuideSubTypeData
	_dataTabIconPath map[string]GameplayGuideSubTypeData
}

// LoadData retrieves the data. Must be called before GameplayGuideSubTypeData.GroupData
func (a *GameplayGuideSubTypeDataAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/GameplayGuideSubTypeData.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *GameplayGuideSubTypeDataAccessor) Raw() ([]GameplayGuideSubTypeData, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []GameplayGuideSubTypeData{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with GameplayGuideSubTypeDataAccessor.LoadData to preload everything
func (a *GameplayGuideSubTypeDataAccessor) GroupData() {
	a._dataSubTypeID = map[float64]GameplayGuideSubTypeData{}
	a._dataTabIconPath = map[string]GameplayGuideSubTypeData{}
	for _, d := range a._data {
		a._dataSubTypeID[d.SubTypeID] = d
		a._dataTabIconPath[d.TabIconPath] = d
	}
}

// BySubTypeID returns the GameplayGuideSubTypeData uniquely identified by SubTypeID
//
// Error is only non-nil if the source errors out
func (a *GameplayGuideSubTypeDataAccessor) BySubTypeID(identifier float64) (GameplayGuideSubTypeData, error) {
	if a._dataSubTypeID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return GameplayGuideSubTypeData{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSubTypeID[identifier], nil
}

// ByTabIconPath returns the GameplayGuideSubTypeData uniquely identified by TabIconPath
//
// Error is only non-nil if the source errors out
func (a *GameplayGuideSubTypeDataAccessor) ByTabIconPath(identifier string) (GameplayGuideSubTypeData, error) {
	if a._dataTabIconPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return GameplayGuideSubTypeData{}, err
			}
		}
		a.GroupData()
	}
	return a._dataTabIconPath[identifier], nil
}
