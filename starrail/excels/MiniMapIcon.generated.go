package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type MiniMapIcon struct {
	BillboardIcon         json.Number `json:"BillboardIcon"`
	CircleRange           json.Number `json:"CircleRange"`
	ConnectID             json.Number `json:"ConnectID"`
	ID                    json.Number `json:"ID"`
	IconName              string      `json:"IconName"`
	IconOrientetionSwitch string      `json:"IconOrientetionSwitch"`
	IconPath              string      `json:"IconPath"`
	IsCrossLayer          bool        `json:"IsCrossLayer"`
	IsFollowMapScale      bool        `json:"IsFollowMapScale"`
	IsFollowPropScale     bool        `json:"IsFollowPropScale"`
	IsShowCornerArrow     bool        `json:"IsShowCornerArrow"`
	IsShowInBillboard     bool        `json:"IsShowInBillboard"`
	MissionIconPath       string      `json:"MissionIconPath"`
	ModelIcon             json.Number `json:"ModelIcon"`
	Priority              json.Number `json:"Priority"`
	IsShowinMap           bool        `json:"isShowinMap"`
}
type MiniMapIconAccessor struct {
	_data   []MiniMapIcon
	_dataID map[json.Number]MiniMapIcon
}

// LoadData retrieves the data. Must be called before MiniMapIcon.GroupData
func (a *MiniMapIconAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MiniMapIcon.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MiniMapIconAccessor) Raw() ([]MiniMapIcon, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MiniMapIcon{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MiniMapIconAccessor.LoadData to preload everything
func (a *MiniMapIconAccessor) GroupData() {
	a._dataID = map[json.Number]MiniMapIcon{}
	for _, d := range a._data {
		a._dataID[d.ID] = d
	}
}

// ByID returns the MiniMapIcon uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *MiniMapIconAccessor) ByID(identifier json.Number) (MiniMapIcon, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MiniMapIcon{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}
