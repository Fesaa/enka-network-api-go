package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type LoadingFuncConfig struct {
	LoadingFuncID        float64                             `json:"LoadingFuncID"`
	LoadingFuncType      string                              `json:"LoadingFuncType"`
	LoadingFuncTypeParam []float64                           `json:"LoadingFuncTypeParam"`
	LoadingRandomParam   LoadingFuncConfigLoadingRandomParam `json:"LoadingRandomParam"`
	RandomNumber         float64                             `json:"RandomNumber"`
}
type LoadingFuncConfigLoadingRandomParam struct {
	NormalIP   float64 `json:"NormalIP"`
	NormalRule float64 `json:"NormalRule"`
	StoryLine  float64 `json:"StoryLine"`
	World100   float64 `json:"World100"`
	World101   float64 `json:"World101"`
	World201   float64 `json:"World201"`
	World301   float64 `json:"World301"`
	World401   float64 `json:"World401"`
	World501   float64 `json:"World501"`
}
type LoadingFuncConfigAccessor struct {
	_data              []LoadingFuncConfig
	_dataLoadingFuncID map[float64]LoadingFuncConfig
}

// LoadData retrieves the data. Must be called before LoadingFuncConfig.GroupData
func (a *LoadingFuncConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/LoadingFuncConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *LoadingFuncConfigAccessor) Raw() ([]LoadingFuncConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []LoadingFuncConfig{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with LoadingFuncConfigAccessor.LoadData to preload everything
func (a *LoadingFuncConfigAccessor) GroupData() {
	for _, d := range a._data {
		a._dataLoadingFuncID[d.LoadingFuncID] = d
	}
}

// ByLoadingFuncID returns the LoadingFuncConfig uniquely identified by LoadingFuncID
//
// Error is only non-nil if the source errors out
func (a *LoadingFuncConfigAccessor) ByLoadingFuncID(identifier float64) (LoadingFuncConfig, error) {
	if a._dataLoadingFuncID == nil {
		err := a.LoadData()
		if err != nil {
			return LoadingFuncConfig{}, err
		}
		a.GroupData()
	}
	return a._dataLoadingFuncID[identifier], nil
}
