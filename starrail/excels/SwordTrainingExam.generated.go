package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type SwordTrainingExam struct {
	BattleAreaID         json.Number            `json:"BattleAreaID"`
	EnemyImage           string                 `json:"EnemyImage"`
	EnemyName            map[string]json.Number `json:"EnemyName"`
	EnemyPower           json.Number            `json:"EnemyPower"`
	ExamID               json.Number            `json:"ExamID"`
	ExcellentCommentList []json.Number          `json:"ExcellentCommentList"`
	FailPerformID        json.Number            `json:"FailPerformID"`
	IsLastExam           bool                   `json:"IsLastExam"`
	NormalCommentList    []json.Number          `json:"NormalCommentList"`
	PrePerformID         json.Number            `json:"PrePerformID"`
	StageID              json.Number            `json:"StageID"`
	SuccessPerformID     []json.Number          `json:"SuccessPerformID"`
}
type SwordTrainingExamAccessor struct {
	_data []SwordTrainingExam
}

// LoadData retrieves the data. Must be called before SwordTrainingExam.GroupData
func (a *SwordTrainingExamAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/SwordTrainingExam.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *SwordTrainingExamAccessor) Raw() ([]SwordTrainingExam, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []SwordTrainingExam{}, err
		}
	}
	return a._data, nil
}
