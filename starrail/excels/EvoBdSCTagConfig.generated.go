package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type EvoBdSCTagConfig struct {
	ExtraEffectID float64   `json:"ExtraEffectID"`
	ID            float64   `json:"ID"`
	IconPath      string    `json:"IconPath"`
	Name          hash.Hash `json:"Name"`
	Season        string    `json:"Season"`
	ShopSkillID   float64   `json:"ShopSkillID"`
}
type EvoBdSCTagConfigAccessor struct {
	_data              []EvoBdSCTagConfig
	_dataExtraEffectID map[float64]EvoBdSCTagConfig
	_dataID            map[float64]EvoBdSCTagConfig
	_dataIconPath      map[string]EvoBdSCTagConfig
	_dataShopSkillID   map[float64]EvoBdSCTagConfig
}

// LoadData retrieves the data. Must be called before EvoBdSCTagConfig.GroupData
func (a *EvoBdSCTagConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/EvoBdSCTagConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *EvoBdSCTagConfigAccessor) Raw() ([]EvoBdSCTagConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []EvoBdSCTagConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with EvoBdSCTagConfigAccessor.LoadData to preload everything
func (a *EvoBdSCTagConfigAccessor) GroupData() {
	a._dataExtraEffectID = map[float64]EvoBdSCTagConfig{}
	a._dataID = map[float64]EvoBdSCTagConfig{}
	a._dataIconPath = map[string]EvoBdSCTagConfig{}
	a._dataShopSkillID = map[float64]EvoBdSCTagConfig{}
	for _, d := range a._data {
		a._dataExtraEffectID[d.ExtraEffectID] = d
		a._dataID[d.ID] = d
		a._dataIconPath[d.IconPath] = d
		a._dataShopSkillID[d.ShopSkillID] = d
	}
}

// ByExtraEffectID returns the EvoBdSCTagConfig uniquely identified by ExtraEffectID
//
// Error is only non-nil if the source errors out
func (a *EvoBdSCTagConfigAccessor) ByExtraEffectID(identifier float64) (EvoBdSCTagConfig, error) {
	if a._dataExtraEffectID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return EvoBdSCTagConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataExtraEffectID[identifier], nil
}

// ByID returns the EvoBdSCTagConfig uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *EvoBdSCTagConfigAccessor) ByID(identifier float64) (EvoBdSCTagConfig, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return EvoBdSCTagConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}

// ByIconPath returns the EvoBdSCTagConfig uniquely identified by IconPath
//
// Error is only non-nil if the source errors out
func (a *EvoBdSCTagConfigAccessor) ByIconPath(identifier string) (EvoBdSCTagConfig, error) {
	if a._dataIconPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return EvoBdSCTagConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataIconPath[identifier], nil
}

// ByShopSkillID returns the EvoBdSCTagConfig uniquely identified by ShopSkillID
//
// Error is only non-nil if the source errors out
func (a *EvoBdSCTagConfigAccessor) ByShopSkillID(identifier float64) (EvoBdSCTagConfig, error) {
	if a._dataShopSkillID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return EvoBdSCTagConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataShopSkillID[identifier], nil
}
