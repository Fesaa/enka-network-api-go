package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type MarbleMatchPlayer struct {
	Desc                  map[string]json.Number `json:"Desc"`
	HighNegativeEmojiList []json.Number          `json:"HighNegativeEmojiList"`
	HighPositiveEmojiList []json.Number          `json:"HighPositiveEmojiList"`
	ID                    json.Number            `json:"ID"`
	IconPath              string                 `json:"IconPath"`
	ImagePath             string                 `json:"ImagePath"`
	LowNegativeEmojiList  []json.Number          `json:"LowNegativeEmojiList"`
	LowPositiveEmojiList  []json.Number          `json:"LowPositiveEmojiList"`
	Name                  map[string]json.Number `json:"Name"`
	PlayerActionEmojiList []json.Number          `json:"PlayerActionEmojiList"`
	PrefabPath            string                 `json:"PrefabPath"`
	SealGroupID           json.Number            `json:"SealGroupID"`
}
type MarbleMatchPlayerAccessor struct {
	_data []MarbleMatchPlayer
}

// LoadData retrieves the data. Must be called before MarbleMatchPlayer.GroupData
func (a *MarbleMatchPlayerAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MarbleMatchPlayer.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MarbleMatchPlayerAccessor) Raw() ([]MarbleMatchPlayer, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MarbleMatchPlayer{}, err
		}
	}
	return a._data, nil
}
