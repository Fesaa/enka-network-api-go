package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type MarbleMatchPlayer struct {
	Desc                  hash.Hash `json:"Desc"`
	HighNegativeEmojiList []float64 `json:"HighNegativeEmojiList"`
	HighPositiveEmojiList []float64 `json:"HighPositiveEmojiList"`
	ID                    float64   `json:"ID"`
	IconPath              string    `json:"IconPath"`
	ImagePath             string    `json:"ImagePath"`
	LowNegativeEmojiList  []float64 `json:"LowNegativeEmojiList"`
	LowPositiveEmojiList  []float64 `json:"LowPositiveEmojiList"`
	Name                  hash.Hash `json:"Name"`
	PlayerActionEmojiList []float64 `json:"PlayerActionEmojiList"`
	PrefabPath            string    `json:"PrefabPath"`
	SealGroupID           float64   `json:"SealGroupID"`
}
type MarbleMatchPlayerAccessor struct {
	_data   []MarbleMatchPlayer
	_dataID map[float64]MarbleMatchPlayer
}

// LoadData retrieves the data. Must be called before MarbleMatchPlayer.GroupData
func (a *MarbleMatchPlayerAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MarbleMatchPlayer.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MarbleMatchPlayerAccessor) Raw() ([]MarbleMatchPlayer, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MarbleMatchPlayer{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MarbleMatchPlayerAccessor.LoadData to preload everything
func (a *MarbleMatchPlayerAccessor) GroupData() {
	for _, d := range a._data {
		a._dataID[d.ID] = d
	}
}

// ByID returns the MarbleMatchPlayer uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *MarbleMatchPlayerAccessor) ByID(identifier float64) (MarbleMatchPlayer, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MarbleMatchPlayer{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}
