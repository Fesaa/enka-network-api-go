package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type ChimeraAbilityDisplay struct {
	AbilityDesc map[string]json.Number `json:"AbilityDesc"`
	AbilityName map[string]json.Number `json:"AbilityName"`
	DisplayID   json.Number            `json:"DisplayID"`
}
type ChimeraAbilityDisplayAccessor struct {
	_data          []ChimeraAbilityDisplay
	_dataDisplayID map[json.Number]ChimeraAbilityDisplay
}

// LoadData retrieves the data. Must be called before ChimeraAbilityDisplay.GroupData
func (a *ChimeraAbilityDisplayAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ChimeraAbilityDisplay.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ChimeraAbilityDisplayAccessor) Raw() ([]ChimeraAbilityDisplay, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ChimeraAbilityDisplay{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ChimeraAbilityDisplayAccessor.LoadData to preload everything
func (a *ChimeraAbilityDisplayAccessor) GroupData() {
	a._dataDisplayID = map[json.Number]ChimeraAbilityDisplay{}
	for _, d := range a._data {
		a._dataDisplayID[d.DisplayID] = d
	}
}

// ByDisplayID returns the ChimeraAbilityDisplay uniquely identified by DisplayID
//
// Error is only non-nil if the source errors out
func (a *ChimeraAbilityDisplayAccessor) ByDisplayID(identifier json.Number) (ChimeraAbilityDisplay, error) {
	if a._dataDisplayID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ChimeraAbilityDisplay{}, err
			}
		}
		a.GroupData()
	}
	return a._dataDisplayID[identifier], nil
}
