package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type TreasureDungeonMap struct {
	MapID   json.Number   `json:"MapID"`
	MapInfo []json.Number `json:"MapInfo"`
}
type TreasureDungeonMapAccessor struct {
	_data      []TreasureDungeonMap
	_dataMapID map[json.Number]TreasureDungeonMap
}

// LoadData retrieves the data. Must be called before TreasureDungeonMap.GroupData
func (a *TreasureDungeonMapAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/TreasureDungeonMap.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *TreasureDungeonMapAccessor) Raw() ([]TreasureDungeonMap, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []TreasureDungeonMap{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with TreasureDungeonMapAccessor.LoadData to preload everything
func (a *TreasureDungeonMapAccessor) GroupData() {
	a._dataMapID = map[json.Number]TreasureDungeonMap{}
	for _, d := range a._data {
		a._dataMapID[d.MapID] = d
	}
}

// ByMapID returns the TreasureDungeonMap uniquely identified by MapID
//
// Error is only non-nil if the source errors out
func (a *TreasureDungeonMapAccessor) ByMapID(identifier json.Number) (TreasureDungeonMap, error) {
	if a._dataMapID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return TreasureDungeonMap{}, err
			}
		}
		a.GroupData()
	}
	return a._dataMapID[identifier], nil
}
