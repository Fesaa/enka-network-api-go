package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type HeliobusTemplate struct {
	HeliobusTemplateContent map[string]json.Number `json:"HeliobusTemplateContent"`
	HeliobusTemplateID      json.Number            `json:"HeliobusTemplateID"`
	HeliobusTemplateTitle   map[string]json.Number `json:"HeliobusTemplateTitle"`
	PostImgID               json.Number            `json:"PostImgID"`
	PrefabPathNormal        string                 `json:"PrefabPathNormal"`
	PrefabPathSmall         string                 `json:"PrefabPathSmall"`
	TemplateTendency        string                 `json:"TemplateTendency"`
	TemplateType            string                 `json:"TemplateType"`
}
type HeliobusTemplateAccessor struct {
	_data                 []HeliobusTemplate
	_dataPrefabPathNormal map[string]HeliobusTemplate
}

// LoadData retrieves the data. Must be called before HeliobusTemplate.GroupData
func (a *HeliobusTemplateAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/HeliobusTemplate.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *HeliobusTemplateAccessor) Raw() ([]HeliobusTemplate, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []HeliobusTemplate{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with HeliobusTemplateAccessor.LoadData to preload everything
func (a *HeliobusTemplateAccessor) GroupData() {
	a._dataPrefabPathNormal = map[string]HeliobusTemplate{}
	for _, d := range a._data {
		a._dataPrefabPathNormal[d.PrefabPathNormal] = d
	}
}

// ByPrefabPathNormal returns the HeliobusTemplate uniquely identified by PrefabPathNormal
//
// Error is only non-nil if the source errors out
func (a *HeliobusTemplateAccessor) ByPrefabPathNormal(identifier string) (HeliobusTemplate, error) {
	if a._dataPrefabPathNormal == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return HeliobusTemplate{}, err
			}
		}
		a.GroupData()
	}
	return a._dataPrefabPathNormal[identifier], nil
}
