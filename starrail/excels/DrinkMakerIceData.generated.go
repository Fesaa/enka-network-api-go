package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type DrinkMakerIceData struct {
	AudioEvent     string    `json:"AudioEvent"`
	CupAnchoPath   string    `json:"CupAnchoPath"`
	ID             float64   `json:"ID"`
	IceName        hash.Hash `json:"IceName"`
	IconPath       string    `json:"IconPath"`
	IncludeTagList []float64 `json:"IncludeTagList"`
	PrefabPath     string    `json:"PrefabPath"`
}
type DrinkMakerIceDataAccessor struct {
	_data           []DrinkMakerIceData
	_dataAudioEvent map[string]DrinkMakerIceData
	_dataIconPath   map[string]DrinkMakerIceData
}

// LoadData retrieves the data. Must be called before DrinkMakerIceData.GroupData
func (a *DrinkMakerIceDataAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/DrinkMakerIceData.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *DrinkMakerIceDataAccessor) Raw() ([]DrinkMakerIceData, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []DrinkMakerIceData{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with DrinkMakerIceDataAccessor.LoadData to preload everything
func (a *DrinkMakerIceDataAccessor) GroupData() {
	for _, d := range a._data {
		a._dataAudioEvent[d.AudioEvent] = d
		a._dataIconPath[d.IconPath] = d
	}
}

// ByAudioEvent returns the DrinkMakerIceData uniquely identified by AudioEvent
//
// Error is only non-nil if the source errors out
func (a *DrinkMakerIceDataAccessor) ByAudioEvent(identifier string) (DrinkMakerIceData, error) {
	if a._dataAudioEvent == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return DrinkMakerIceData{}, err
			}
		}
		a.GroupData()
	}
	return a._dataAudioEvent[identifier], nil
}

// ByIconPath returns the DrinkMakerIceData uniquely identified by IconPath
//
// Error is only non-nil if the source errors out
func (a *DrinkMakerIceDataAccessor) ByIconPath(identifier string) (DrinkMakerIceData, error) {
	if a._dataIconPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return DrinkMakerIceData{}, err
			}
		}
		a.GroupData()
	}
	return a._dataIconPath[identifier], nil
}
