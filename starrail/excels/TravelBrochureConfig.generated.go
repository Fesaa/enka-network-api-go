package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type TravelBrochureConfig struct {
	BackgroundPrefab     string                           `json:"BackgroundPrefab"`
	Conditions           []TravelBrochureConfigConditions `json:"Conditions"`
	DiaryGroupID         json.Number                      `json:"DiaryGroupID"`
	DirectoryName        map[string]json.Number           `json:"DirectoryName"`
	FinishQuestID        json.Number                      `json:"FinishQuestID"`
	FrontPrefab          string                           `json:"FrontPrefab"`
	ID                   json.Number                      `json:"ID"`
	PasterAchievementPic string                           `json:"PasterAchievementPic"`
	PicPath              string                           `json:"PicPath"`
	ShowInDirectory      bool                             `json:"ShowInDirectory"`
	ShowUnlockToast      bool                             `json:"ShowUnlockToast"`
	Sort                 json.Number                      `json:"Sort"`
	Type                 string                           `json:"Type"`
}
type TravelBrochureConfigConditions struct {
	Param string `json:"Param"`
	Type  string `json:"Type"`
}
type TravelBrochureConfigAccessor struct {
	_data             []TravelBrochureConfig
	_dataDiaryGroupID map[json.Number]TravelBrochureConfig
	_dataID           map[json.Number]TravelBrochureConfig
	_dataSort         map[json.Number]TravelBrochureConfig
}

// LoadData retrieves the data. Must be called before TravelBrochureConfig.GroupData
func (a *TravelBrochureConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/TravelBrochureConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *TravelBrochureConfigAccessor) Raw() ([]TravelBrochureConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []TravelBrochureConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with TravelBrochureConfigAccessor.LoadData to preload everything
func (a *TravelBrochureConfigAccessor) GroupData() {
	a._dataDiaryGroupID = map[json.Number]TravelBrochureConfig{}
	a._dataID = map[json.Number]TravelBrochureConfig{}
	a._dataSort = map[json.Number]TravelBrochureConfig{}
	for _, d := range a._data {
		a._dataDiaryGroupID[d.DiaryGroupID] = d
		a._dataID[d.ID] = d
		a._dataSort[d.Sort] = d
	}
}

// ByDiaryGroupID returns the TravelBrochureConfig uniquely identified by DiaryGroupID
//
// Error is only non-nil if the source errors out
func (a *TravelBrochureConfigAccessor) ByDiaryGroupID(identifier json.Number) (TravelBrochureConfig, error) {
	if a._dataDiaryGroupID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return TravelBrochureConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataDiaryGroupID[identifier], nil
}

// ByID returns the TravelBrochureConfig uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *TravelBrochureConfigAccessor) ByID(identifier json.Number) (TravelBrochureConfig, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return TravelBrochureConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}

// BySort returns the TravelBrochureConfig uniquely identified by Sort
//
// Error is only non-nil if the source errors out
func (a *TravelBrochureConfigAccessor) BySort(identifier json.Number) (TravelBrochureConfig, error) {
	if a._dataSort == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return TravelBrochureConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSort[identifier], nil
}
