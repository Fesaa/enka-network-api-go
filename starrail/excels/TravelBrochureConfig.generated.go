package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type TravelBrochureConfig struct {
	BackgroundPrefab     string                           `json:"BackgroundPrefab"`
	Conditions           []TravelBrochureConfigConditions `json:"Conditions"`
	DiaryGroupID         json.Number                      `json:"DiaryGroupID"`
	DirectoryName        map[string]json.Number           `json:"DirectoryName"`
	FinishQuestID        json.Number                      `json:"FinishQuestID"`
	FrontPrefab          string                           `json:"FrontPrefab"`
	ID                   json.Number                      `json:"ID"`
	PasterAchievementPic string                           `json:"PasterAchievementPic"`
	PicPath              string                           `json:"PicPath"`
	ShowInDirectory      bool                             `json:"ShowInDirectory"`
	ShowUnlockToast      bool                             `json:"ShowUnlockToast"`
	Sort                 json.Number                      `json:"Sort"`
	Type                 string                           `json:"Type"`
}
type TravelBrochureConfigConditions struct {
	Param string `json:"Param"`
	Type  string `json:"Type"`
}
type TravelBrochureConfigAccessor struct {
	_data []TravelBrochureConfig
}

// LoadData retrieves the data. Must be called before TravelBrochureConfig.GroupData
func (a *TravelBrochureConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/TravelBrochureConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *TravelBrochureConfigAccessor) Raw() ([]TravelBrochureConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []TravelBrochureConfig{}, err
		}
	}
	return a._data, nil
}
