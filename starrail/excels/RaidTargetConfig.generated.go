package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type RaidTargetConfig struct {
	AbilityName      string                   `json:"AbilityName"`
	HintStep         []json.Number            `json:"HintStep"`
	ID               json.Number              `json:"ID"`
	IsInBattle       bool                     `json:"IsInBattle"`
	IsShowProgress   json.Number              `json:"IsShowProgress"`
	ParamList        []map[string]json.Number `json:"ParamList"`
	ParamType        string                   `json:"ParamType"`
	RewardID         json.Number              `json:"RewardID"`
	TargetName       map[string]json.Number   `json:"TargetName"`
	TargetNameSimple map[string]json.Number   `json:"TargetNameSimple"`
	TargetParam1     json.Number              `json:"TargetParam1"`
	TargetType       string                   `json:"TargetType"`
}
type RaidTargetConfigAccessor struct {
	_data []RaidTargetConfig
}

// LoadData retrieves the data. Must be called before RaidTargetConfig.GroupData
func (a *RaidTargetConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RaidTargetConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RaidTargetConfigAccessor) Raw() ([]RaidTargetConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RaidTargetConfig{}, err
		}
	}
	return a._data, nil
}
