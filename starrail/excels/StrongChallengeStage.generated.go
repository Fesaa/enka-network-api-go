package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type StrongChallengeStage struct {
	ActivityModuleID       float64   `json:"ActivityModuleID"`
	AvailableBuffList      []float64 `json:"AvailableBuffList"`
	BattleAreaGroupID      float64   `json:"BattleAreaGroupID"`
	BattleAreaID           float64   `json:"BattleAreaID"`
	BattleType             string    `json:"BattleType"`
	BossDetailList         []float64 `json:"BossDetailList"`
	ClearScoreLine         float64   `json:"ClearScoreLine"`
	CostLimit              float64   `json:"CostLimit"`
	EventID                float64   `json:"EventID"`
	FloorID                float64   `json:"FloorID"`
	MonsterBgFigurePath    string    `json:"MonsterBgFigurePath"`
	MonsterFigurePath      string    `json:"MonsterFigurePath"`
	MonsterGrayFigurePath  string    `json:"MonsterGrayFigurePath"`
	Name                   hash.Hash `json:"Name"`
	PlaneID                float64   `json:"PlaneID"`
	PreStageID             float64   `json:"PreStageID"`
	QuestGroupID           float64   `json:"QuestGroupID"`
	QuestList              []float64 `json:"QuestList"`
	RecommendAvatar        []float64 `json:"RecommendAvatar"`
	RecommendNature        []string  `json:"RecommendNature"`
	ScoreInterval          []float64 `json:"ScoreInterval"`
	SpecialAvatarIDList    []float64 `json:"SpecialAvatarIDList"`
	StrongChallengeStageID float64   `json:"StrongChallengeStageID"`
}
type StrongChallengeStageAccessor struct {
	_data                       []StrongChallengeStage
	_dataStrongChallengeStageID map[float64]StrongChallengeStage
	_dataEventID                map[float64]StrongChallengeStage
}

// LoadData retrieves the data. Must be called before StrongChallengeStage.GroupData
func (a *StrongChallengeStageAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/StrongChallengeStage.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *StrongChallengeStageAccessor) Raw() ([]StrongChallengeStage, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []StrongChallengeStage{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with StrongChallengeStageAccessor.LoadData to preload everything
func (a *StrongChallengeStageAccessor) GroupData() {
	for _, d := range a._data {
		a._dataStrongChallengeStageID[d.StrongChallengeStageID] = d
		a._dataEventID[d.EventID] = d
	}
}

// ByStrongChallengeStageID returns the StrongChallengeStage uniquely identified by StrongChallengeStageID
//
// Error is only non-nil if the source errors out
func (a *StrongChallengeStageAccessor) ByStrongChallengeStageID(identifier float64) (StrongChallengeStage, error) {
	if a._dataStrongChallengeStageID == nil {
		err := a.LoadData()
		if err != nil {
			return StrongChallengeStage{}, err
		}
		a.GroupData()
	}
	return a._dataStrongChallengeStageID[identifier], nil
}

// ByEventID returns the StrongChallengeStage uniquely identified by EventID
//
// Error is only non-nil if the source errors out
func (a *StrongChallengeStageAccessor) ByEventID(identifier float64) (StrongChallengeStage, error) {
	if a._dataEventID == nil {
		err := a.LoadData()
		if err != nil {
			return StrongChallengeStage{}, err
		}
		a.GroupData()
	}
	return a._dataEventID[identifier], nil
}
