package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type StrongChallengeStage struct {
	ActivityModuleID       json.Number            `json:"ActivityModuleID"`
	AvailableBuffList      []json.Number          `json:"AvailableBuffList"`
	BattleAreaGroupID      json.Number            `json:"BattleAreaGroupID"`
	BattleAreaID           json.Number            `json:"BattleAreaID"`
	BattleType             string                 `json:"BattleType"`
	BossDetailList         []json.Number          `json:"BossDetailList"`
	ClearScoreLine         json.Number            `json:"ClearScoreLine"`
	CostLimit              json.Number            `json:"CostLimit"`
	EventID                json.Number            `json:"EventID"`
	FloorID                json.Number            `json:"FloorID"`
	MonsterBgFigurePath    string                 `json:"MonsterBgFigurePath"`
	MonsterFigurePath      string                 `json:"MonsterFigurePath"`
	MonsterGrayFigurePath  string                 `json:"MonsterGrayFigurePath"`
	Name                   map[string]json.Number `json:"Name"`
	PlaneID                json.Number            `json:"PlaneID"`
	PreStageID             json.Number            `json:"PreStageID"`
	QuestGroupID           json.Number            `json:"QuestGroupID"`
	QuestList              []json.Number          `json:"QuestList"`
	RecommendAvatar        []json.Number          `json:"RecommendAvatar"`
	RecommendNature        []string               `json:"RecommendNature"`
	ScoreInterval          []json.Number          `json:"ScoreInterval"`
	SpecialAvatarIDList    []json.Number          `json:"SpecialAvatarIDList"`
	StrongChallengeStageID json.Number            `json:"StrongChallengeStageID"`
}
type StrongChallengeStageAccessor struct {
	_data                       []StrongChallengeStage
	_dataEventID                map[json.Number]StrongChallengeStage
	_dataStrongChallengeStageID map[json.Number]StrongChallengeStage
}

// LoadData retrieves the data. Must be called before StrongChallengeStage.GroupData
func (a *StrongChallengeStageAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/StrongChallengeStage.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *StrongChallengeStageAccessor) Raw() ([]StrongChallengeStage, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []StrongChallengeStage{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with StrongChallengeStageAccessor.LoadData to preload everything
func (a *StrongChallengeStageAccessor) GroupData() {
	a._dataEventID = map[json.Number]StrongChallengeStage{}
	a._dataStrongChallengeStageID = map[json.Number]StrongChallengeStage{}
	for _, d := range a._data {
		a._dataEventID[d.EventID] = d
		a._dataStrongChallengeStageID[d.StrongChallengeStageID] = d
	}
}

// ByEventID returns the StrongChallengeStage uniquely identified by EventID
//
// Error is only non-nil if the source errors out
func (a *StrongChallengeStageAccessor) ByEventID(identifier json.Number) (StrongChallengeStage, error) {
	if a._dataEventID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return StrongChallengeStage{}, err
			}
		}
		a.GroupData()
	}
	return a._dataEventID[identifier], nil
}

// ByStrongChallengeStageID returns the StrongChallengeStage uniquely identified by StrongChallengeStageID
//
// Error is only non-nil if the source errors out
func (a *StrongChallengeStageAccessor) ByStrongChallengeStageID(identifier json.Number) (StrongChallengeStage, error) {
	if a._dataStrongChallengeStageID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return StrongChallengeStage{}, err
			}
		}
		a.GroupData()
	}
	return a._dataStrongChallengeStageID[identifier], nil
}
