package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type SwordTrainingSkillType struct {
	SkillTypeID   float64   `json:"SkillTypeID"`
	SkillTypeIcon string    `json:"SkillTypeIcon"`
	SkillTypeName hash.Hash `json:"SkillTypeName"`
	StatusID      float64   `json:"StatusID"`
}
type SwordTrainingSkillTypeAccessor struct {
	_data              []SwordTrainingSkillType
	_dataSkillTypeID   map[float64]SwordTrainingSkillType
	_dataSkillTypeIcon map[string]SwordTrainingSkillType
	_dataStatusID      map[float64]SwordTrainingSkillType
}

// LoadData retrieves the data. Must be called before SwordTrainingSkillType.GroupData
func (a *SwordTrainingSkillTypeAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/SwordTrainingSkillType.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *SwordTrainingSkillTypeAccessor) Raw() ([]SwordTrainingSkillType, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []SwordTrainingSkillType{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with SwordTrainingSkillTypeAccessor.LoadData to preload everything
func (a *SwordTrainingSkillTypeAccessor) GroupData() {
	a._dataSkillTypeID = map[float64]SwordTrainingSkillType{}
	a._dataSkillTypeIcon = map[string]SwordTrainingSkillType{}
	a._dataStatusID = map[float64]SwordTrainingSkillType{}
	for _, d := range a._data {
		a._dataSkillTypeID[d.SkillTypeID] = d
		a._dataSkillTypeIcon[d.SkillTypeIcon] = d
		a._dataStatusID[d.StatusID] = d
	}
}

// BySkillTypeID returns the SwordTrainingSkillType uniquely identified by SkillTypeID
//
// Error is only non-nil if the source errors out
func (a *SwordTrainingSkillTypeAccessor) BySkillTypeID(identifier float64) (SwordTrainingSkillType, error) {
	if a._dataSkillTypeID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return SwordTrainingSkillType{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSkillTypeID[identifier], nil
}

// BySkillTypeIcon returns the SwordTrainingSkillType uniquely identified by SkillTypeIcon
//
// Error is only non-nil if the source errors out
func (a *SwordTrainingSkillTypeAccessor) BySkillTypeIcon(identifier string) (SwordTrainingSkillType, error) {
	if a._dataSkillTypeIcon == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return SwordTrainingSkillType{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSkillTypeIcon[identifier], nil
}

// ByStatusID returns the SwordTrainingSkillType uniquely identified by StatusID
//
// Error is only non-nil if the source errors out
func (a *SwordTrainingSkillTypeAccessor) ByStatusID(identifier float64) (SwordTrainingSkillType, error) {
	if a._dataStatusID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return SwordTrainingSkillType{}, err
			}
		}
		a.GroupData()
	}
	return a._dataStatusID[identifier], nil
}
