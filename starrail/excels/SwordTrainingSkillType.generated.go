package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type SwordTrainingSkillType struct {
	SkillTypeID   json.Number            `json:"SkillTypeID"`
	SkillTypeIcon string                 `json:"SkillTypeIcon"`
	SkillTypeName map[string]json.Number `json:"SkillTypeName"`
	StatusID      json.Number            `json:"StatusID"`
}
type SwordTrainingSkillTypeAccessor struct {
	_data              []SwordTrainingSkillType
	_dataSkillTypeIcon map[string]SwordTrainingSkillType
}

// LoadData retrieves the data. Must be called before SwordTrainingSkillType.GroupData
func (a *SwordTrainingSkillTypeAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/SwordTrainingSkillType.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *SwordTrainingSkillTypeAccessor) Raw() ([]SwordTrainingSkillType, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []SwordTrainingSkillType{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with SwordTrainingSkillTypeAccessor.LoadData to preload everything
func (a *SwordTrainingSkillTypeAccessor) GroupData() {
	a._dataSkillTypeIcon = map[string]SwordTrainingSkillType{}
	for _, d := range a._data {
		a._dataSkillTypeIcon[d.SkillTypeIcon] = d
	}
}

// BySkillTypeIcon returns the SwordTrainingSkillType uniquely identified by SkillTypeIcon
//
// Error is only non-nil if the source errors out
func (a *SwordTrainingSkillTypeAccessor) BySkillTypeIcon(identifier string) (SwordTrainingSkillType, error) {
	if a._dataSkillTypeIcon == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return SwordTrainingSkillType{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSkillTypeIcon[identifier], nil
}
