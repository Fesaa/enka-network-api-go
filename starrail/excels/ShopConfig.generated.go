package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type ShopConfig struct {
	ActivityModuleID   json.Number            `json:"ActivityModuleID"`
	HideRemainTime     bool                   `json:"HideRemainTime"`
	IsOpen             bool                   `json:"IsOpen"`
	LimitType1         string                 `json:"LimitType1"`
	LimitValue1List    []json.Number          `json:"LimitValue1List"`
	LimitValue2List    []interface{}          `json:"LimitValue2List"`
	ScheduleDataID     json.Number            `json:"ScheduleDataID"`
	ServerVerification bool                   `json:"ServerVerification"`
	ShopBar            string                 `json:"ShopBar"`
	ShopDesc           map[string]json.Number `json:"ShopDesc"`
	ShopGroupID        json.Number            `json:"ShopGroupID"`
	ShopID             json.Number            `json:"ShopID"`
	ShopIconPath       string                 `json:"ShopIconPath"`
	ShopMainType       string                 `json:"ShopMainType"`
	ShopName           map[string]json.Number `json:"ShopName"`
	ShopSortID         json.Number            `json:"ShopSortID"`
	ShopType           json.Number            `json:"ShopType"`
}
type ShopConfigAccessor struct {
	_data []ShopConfig
}

// LoadData retrieves the data. Must be called before ShopConfig.GroupData
func (a *ShopConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ShopConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ShopConfigAccessor) Raw() ([]ShopConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ShopConfig{}, err
		}
	}
	return a._data, nil
}
