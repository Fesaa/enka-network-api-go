package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type ShopConfig struct {
	ActivityModuleID   float64       `json:"ActivityModuleID"`
	HideRemainTime     bool          `json:"HideRemainTime"`
	IsOpen             bool          `json:"IsOpen"`
	LimitType1         string        `json:"LimitType1"`
	LimitValue1List    []float64     `json:"LimitValue1List"`
	LimitValue2List    []interface{} `json:"LimitValue2List"`
	ScheduleDataID     float64       `json:"ScheduleDataID"`
	ServerVerification bool          `json:"ServerVerification"`
	ShopBar            string        `json:"ShopBar"`
	ShopDesc           hash.Hash     `json:"ShopDesc"`
	ShopGroupID        float64       `json:"ShopGroupID"`
	ShopID             float64       `json:"ShopID"`
	ShopIconPath       string        `json:"ShopIconPath"`
	ShopMainType       string        `json:"ShopMainType"`
	ShopName           hash.Hash     `json:"ShopName"`
	ShopSortID         float64       `json:"ShopSortID"`
	ShopType           float64       `json:"ShopType"`
}
type ShopConfigAccessor struct {
	_data       []ShopConfig
	_dataShopID map[float64]ShopConfig
}

// LoadData retrieves the data. Must be called before ShopConfig.GroupData
func (a *ShopConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ShopConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ShopConfigAccessor) Raw() ([]ShopConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ShopConfig{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ShopConfigAccessor.LoadData to preload everything
func (a *ShopConfigAccessor) GroupData() {
	for _, d := range a._data {
		a._dataShopID[d.ShopID] = d
	}
}

// ByShopID returns the ShopConfig uniquely identified by ShopID
//
// Error is only non-nil if the source errors out
func (a *ShopConfigAccessor) ByShopID(identifier float64) (ShopConfig, error) {
	if a._dataShopID == nil {
		err := a.LoadData()
		if err != nil {
			return ShopConfig{}, err
		}
		a.GroupData()
	}
	return a._dataShopID[identifier], nil
}
