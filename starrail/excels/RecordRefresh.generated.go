package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type RecordRefresh struct {
	RefreshID   json.Number   `json:"RefreshID"`
	RefreshTime []json.Number `json:"RefreshTime"`
	RefreshType string        `json:"RefreshType"`
}
type RecordRefreshAccessor struct {
	_data          []RecordRefresh
	_dataRefreshID map[json.Number]RecordRefresh
}

// LoadData retrieves the data. Must be called before RecordRefresh.GroupData
func (a *RecordRefreshAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RecordRefresh.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RecordRefreshAccessor) Raw() ([]RecordRefresh, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RecordRefresh{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RecordRefreshAccessor.LoadData to preload everything
func (a *RecordRefreshAccessor) GroupData() {
	a._dataRefreshID = map[json.Number]RecordRefresh{}
	for _, d := range a._data {
		a._dataRefreshID[d.RefreshID] = d
	}
}

// ByRefreshID returns the RecordRefresh uniquely identified by RefreshID
//
// Error is only non-nil if the source errors out
func (a *RecordRefreshAccessor) ByRefreshID(identifier json.Number) (RecordRefresh, error) {
	if a._dataRefreshID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RecordRefresh{}, err
			}
		}
		a.GroupData()
	}
	return a._dataRefreshID[identifier], nil
}
