package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type AvatarBaseType struct {
	BaseTypeDesc          map[string]json.Number `json:"BaseTypeDesc"`
	BaseTypeIcon          string                 `json:"BaseTypeIcon"`
	BaseTypeIconMiddle    string                 `json:"BaseTypeIconMiddle"`
	BaseTypeIconPathTalk  string                 `json:"BaseTypeIconPathTalk"`
	BaseTypeIconSmall     string                 `json:"BaseTypeIconSmall"`
	BaseTypeText          map[string]json.Number `json:"BaseTypeText"`
	BgPath                string                 `json:"BgPath"`
	Equipment3DTgaPath    string                 `json:"Equipment3DTgaPath"`
	EquipmentLightMatPath string                 `json:"EquipmentLightMatPath"`
	FirstWordText         string                 `json:"FirstWordText"`
	ID                    string                 `json:"ID"`
}
type AvatarBaseTypeAccessor struct {
	_data                   []AvatarBaseType
	_dataBaseTypeIconMiddle map[string]AvatarBaseType
	_dataFirstWordText      map[string]AvatarBaseType
}

// LoadData retrieves the data. Must be called before AvatarBaseType.GroupData
func (a *AvatarBaseTypeAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/AvatarBaseType.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *AvatarBaseTypeAccessor) Raw() ([]AvatarBaseType, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []AvatarBaseType{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with AvatarBaseTypeAccessor.LoadData to preload everything
func (a *AvatarBaseTypeAccessor) GroupData() {
	a._dataBaseTypeIconMiddle = map[string]AvatarBaseType{}
	a._dataFirstWordText = map[string]AvatarBaseType{}
	for _, d := range a._data {
		a._dataBaseTypeIconMiddle[d.BaseTypeIconMiddle] = d
		a._dataFirstWordText[d.FirstWordText] = d
	}
}

// ByBaseTypeIconMiddle returns the AvatarBaseType uniquely identified by BaseTypeIconMiddle
//
// Error is only non-nil if the source errors out
func (a *AvatarBaseTypeAccessor) ByBaseTypeIconMiddle(identifier string) (AvatarBaseType, error) {
	if a._dataBaseTypeIconMiddle == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AvatarBaseType{}, err
			}
		}
		a.GroupData()
	}
	return a._dataBaseTypeIconMiddle[identifier], nil
}

// ByFirstWordText returns the AvatarBaseType uniquely identified by FirstWordText
//
// Error is only non-nil if the source errors out
func (a *AvatarBaseTypeAccessor) ByFirstWordText(identifier string) (AvatarBaseType, error) {
	if a._dataFirstWordText == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AvatarBaseType{}, err
			}
		}
		a.GroupData()
	}
	return a._dataFirstWordText[identifier], nil
}
