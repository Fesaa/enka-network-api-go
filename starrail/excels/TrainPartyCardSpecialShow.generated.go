package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type TrainPartyCardSpecialShow struct {
	CardID           json.Number            `json:"CardID"`
	OverWriteTips    map[string]json.Number `json:"OverWriteTips"`
	PreShowGridNum   json.Number            `json:"PreShowGridNum"`
	SpecialShowDesc  map[string]json.Number `json:"SpecialShowDesc"`
	SpecialShowTitle map[string]json.Number `json:"SpecialShowTitle"`
}
type TrainPartyCardSpecialShowAccessor struct {
	_data       []TrainPartyCardSpecialShow
	_dataCardID map[json.Number]TrainPartyCardSpecialShow
}

// LoadData retrieves the data. Must be called before TrainPartyCardSpecialShow.GroupData
func (a *TrainPartyCardSpecialShowAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/TrainPartyCardSpecialShow.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *TrainPartyCardSpecialShowAccessor) Raw() ([]TrainPartyCardSpecialShow, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []TrainPartyCardSpecialShow{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with TrainPartyCardSpecialShowAccessor.LoadData to preload everything
func (a *TrainPartyCardSpecialShowAccessor) GroupData() {
	a._dataCardID = map[json.Number]TrainPartyCardSpecialShow{}
	for _, d := range a._data {
		a._dataCardID[d.CardID] = d
	}
}

// ByCardID returns the TrainPartyCardSpecialShow uniquely identified by CardID
//
// Error is only non-nil if the source errors out
func (a *TrainPartyCardSpecialShowAccessor) ByCardID(identifier json.Number) (TrainPartyCardSpecialShow, error) {
	if a._dataCardID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return TrainPartyCardSpecialShow{}, err
			}
		}
		a.GroupData()
	}
	return a._dataCardID[identifier], nil
}
