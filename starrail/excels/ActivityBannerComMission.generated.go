package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type ActivityBannerComMission struct {
	ActivityModuleID  float64   `json:"ActivityModuleID"`
	AvatarIDList      []float64 `json:"AvatarIDList"`
	BannerID          float64   `json:"BannerID"`
	MainImagePath     string    `json:"MainImagePath"`
	MainMissionIDList []float64 `json:"MainMissionIDList"`
	ShortDesc         hash.Hash `json:"ShortDesc"`
	SortID            float64   `json:"SortID"`
	SubImagePath      string    `json:"SubImagePath"`
	SubTitle          hash.Hash `json:"SubTitle"`
	Title             hash.Hash `json:"Title"`
	UnlockMissionList []float64 `json:"UnlockMissionList"`
}
type ActivityBannerComMissionAccessor struct {
	_data              []ActivityBannerComMission
	_dataBannerID      map[float64]ActivityBannerComMission
	_dataMainImagePath map[string]ActivityBannerComMission
}

// LoadData retrieves the data. Must be called before ActivityBannerComMission.GroupData
func (a *ActivityBannerComMissionAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ActivityBannerComMission.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ActivityBannerComMissionAccessor) Raw() ([]ActivityBannerComMission, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ActivityBannerComMission{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ActivityBannerComMissionAccessor.LoadData to preload everything
func (a *ActivityBannerComMissionAccessor) GroupData() {
	a._dataBannerID = map[float64]ActivityBannerComMission{}
	a._dataMainImagePath = map[string]ActivityBannerComMission{}
	for _, d := range a._data {
		a._dataBannerID[d.BannerID] = d
		a._dataMainImagePath[d.MainImagePath] = d
	}
}

// ByBannerID returns the ActivityBannerComMission uniquely identified by BannerID
//
// Error is only non-nil if the source errors out
func (a *ActivityBannerComMissionAccessor) ByBannerID(identifier float64) (ActivityBannerComMission, error) {
	if a._dataBannerID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityBannerComMission{}, err
			}
		}
		a.GroupData()
	}
	return a._dataBannerID[identifier], nil
}

// ByMainImagePath returns the ActivityBannerComMission uniquely identified by MainImagePath
//
// Error is only non-nil if the source errors out
func (a *ActivityBannerComMissionAccessor) ByMainImagePath(identifier string) (ActivityBannerComMission, error) {
	if a._dataMainImagePath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityBannerComMission{}, err
			}
		}
		a.GroupData()
	}
	return a._dataMainImagePath[identifier], nil
}
