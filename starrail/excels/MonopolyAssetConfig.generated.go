package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type MonopolyAssetConfig struct {
	AssetDesc  hash.Hash `json:"AssetDesc"`
	AssetID    float64   `json:"AssetID"`
	AssetName  hash.Hash `json:"AssetName"`
	BonusValue float64   `json:"BonusValue"`
	FigurePath string    `json:"FigurePath"`
	Level      float64   `json:"Level"`
	Price      float64   `json:"Price"`
	TaxValue   float64   `json:"TaxValue"`
}
type MonopolyAssetConfigAccessor struct {
	_data           []MonopolyAssetConfig
	_dataAssetID    map[float64]MonopolyAssetConfig
	_dataFigurePath map[string]MonopolyAssetConfig
}

// LoadData retrieves the data. Must be called before MonopolyAssetConfig.GroupData
func (a *MonopolyAssetConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MonopolyAssetConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MonopolyAssetConfigAccessor) Raw() ([]MonopolyAssetConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MonopolyAssetConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MonopolyAssetConfigAccessor.LoadData to preload everything
func (a *MonopolyAssetConfigAccessor) GroupData() {
	a._dataAssetID = map[float64]MonopolyAssetConfig{}
	a._dataFigurePath = map[string]MonopolyAssetConfig{}
	for _, d := range a._data {
		a._dataAssetID[d.AssetID] = d
		a._dataFigurePath[d.FigurePath] = d
	}
}

// ByAssetID returns the MonopolyAssetConfig uniquely identified by AssetID
//
// Error is only non-nil if the source errors out
func (a *MonopolyAssetConfigAccessor) ByAssetID(identifier float64) (MonopolyAssetConfig, error) {
	if a._dataAssetID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MonopolyAssetConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataAssetID[identifier], nil
}

// ByFigurePath returns the MonopolyAssetConfig uniquely identified by FigurePath
//
// Error is only non-nil if the source errors out
func (a *MonopolyAssetConfigAccessor) ByFigurePath(identifier string) (MonopolyAssetConfig, error) {
	if a._dataFigurePath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MonopolyAssetConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataFigurePath[identifier], nil
}
