package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type SubNavMapName struct {
	FloorID  float64   `json:"FloorID"`
	Name     hash.Hash `json:"Name"`
	SubMapID float64   `json:"SubMapID"`
}
type SubNavMapNameAccessor struct {
	_data         []SubNavMapName
	_dataFloorID  map[float64]SubNavMapName
	_dataSubMapID map[float64]SubNavMapName
}

// LoadData retrieves the data. Must be called before SubNavMapName.GroupData
func (a *SubNavMapNameAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/SubNavMapName.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *SubNavMapNameAccessor) Raw() ([]SubNavMapName, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []SubNavMapName{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with SubNavMapNameAccessor.LoadData to preload everything
func (a *SubNavMapNameAccessor) GroupData() {
	for _, d := range a._data {
		a._dataFloorID[d.FloorID] = d
		a._dataSubMapID[d.SubMapID] = d
	}
}

// ByFloorID returns the SubNavMapName uniquely identified by FloorID
//
// Error is only non-nil if the source errors out
func (a *SubNavMapNameAccessor) ByFloorID(identifier float64) (SubNavMapName, error) {
	if a._dataFloorID == nil {
		err := a.LoadData()
		if err != nil {
			return SubNavMapName{}, err
		}
		a.GroupData()
	}
	return a._dataFloorID[identifier], nil
}

// BySubMapID returns the SubNavMapName uniquely identified by SubMapID
//
// Error is only non-nil if the source errors out
func (a *SubNavMapNameAccessor) BySubMapID(identifier float64) (SubNavMapName, error) {
	if a._dataSubMapID == nil {
		err := a.LoadData()
		if err != nil {
			return SubNavMapName{}, err
		}
		a.GroupData()
	}
	return a._dataSubMapID[identifier], nil
}
