package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type PropInteractWhiteList struct {
	PropID float64 `json:"PropID"`
}
type PropInteractWhiteListAccessor struct {
	_data       []PropInteractWhiteList
	_dataPropID map[float64]PropInteractWhiteList
}

// LoadData retrieves the data. Must be called before PropInteractWhiteList.GroupData
func (a *PropInteractWhiteListAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/PropInteractWhiteList.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *PropInteractWhiteListAccessor) Raw() ([]PropInteractWhiteList, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []PropInteractWhiteList{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with PropInteractWhiteListAccessor.LoadData to preload everything
func (a *PropInteractWhiteListAccessor) GroupData() {
	for _, d := range a._data {
		a._dataPropID[d.PropID] = d
	}
}

// ByPropID returns the PropInteractWhiteList uniquely identified by PropID
//
// Error is only non-nil if the source errors out
func (a *PropInteractWhiteListAccessor) ByPropID(identifier float64) (PropInteractWhiteList, error) {
	if a._dataPropID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return PropInteractWhiteList{}, err
			}
		}
		a.GroupData()
	}
	return a._dataPropID[identifier], nil
}
