package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type ClockParkCard struct {
	CardActionList      []json.Number          `json:"CardActionList"`
	CardConflictTagList []json.Number          `json:"CardConflictTagList"`
	CardDesc            map[string]json.Number `json:"CardDesc"`
	CardDiceNum         json.Number            `json:"CardDiceNum"`
	CardID              json.Number            `json:"CardID"`
	CardTips            string                 `json:"CardTips"`
	CardTipsParam       json.Number            `json:"CardTipsParam"`
	CardType            string                 `json:"CardType"`
	ForeImgPath         string                 `json:"ForeImgPath"`
	ImgPath             string                 `json:"ImgPath"`
	Priority            json.Number            `json:"Priority"`
}
type ClockParkCardAccessor struct {
	_data       []ClockParkCard
	_dataCardID map[json.Number]ClockParkCard
}

// LoadData retrieves the data. Must be called before ClockParkCard.GroupData
func (a *ClockParkCardAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ClockParkCard.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ClockParkCardAccessor) Raw() ([]ClockParkCard, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ClockParkCard{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ClockParkCardAccessor.LoadData to preload everything
func (a *ClockParkCardAccessor) GroupData() {
	a._dataCardID = map[json.Number]ClockParkCard{}
	for _, d := range a._data {
		a._dataCardID[d.CardID] = d
	}
}

// ByCardID returns the ClockParkCard uniquely identified by CardID
//
// Error is only non-nil if the source errors out
func (a *ClockParkCardAccessor) ByCardID(identifier json.Number) (ClockParkCard, error) {
	if a._dataCardID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ClockParkCard{}, err
			}
		}
		a.GroupData()
	}
	return a._dataCardID[identifier], nil
}
