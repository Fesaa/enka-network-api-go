package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type RogueNousEndGameReward struct {
	EndGameRewardID json.Number            `json:"EndGameRewardID"`
	QuestID         json.Number            `json:"QuestID"`
	QuestList       []json.Number          `json:"QuestList"`
	TabTitle        map[string]json.Number `json:"TabTitle"`
	UnlockID        json.Number            `json:"UnlockID"`
}
type RogueNousEndGameRewardAccessor struct {
	_data                []RogueNousEndGameReward
	_dataEndGameRewardID map[json.Number]RogueNousEndGameReward
	_dataQuestID         map[json.Number]RogueNousEndGameReward
	_dataUnlockID        map[json.Number]RogueNousEndGameReward
}

// LoadData retrieves the data. Must be called before RogueNousEndGameReward.GroupData
func (a *RogueNousEndGameRewardAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueNousEndGameReward.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueNousEndGameRewardAccessor) Raw() ([]RogueNousEndGameReward, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueNousEndGameReward{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueNousEndGameRewardAccessor.LoadData to preload everything
func (a *RogueNousEndGameRewardAccessor) GroupData() {
	a._dataEndGameRewardID = map[json.Number]RogueNousEndGameReward{}
	a._dataQuestID = map[json.Number]RogueNousEndGameReward{}
	a._dataUnlockID = map[json.Number]RogueNousEndGameReward{}
	for _, d := range a._data {
		a._dataEndGameRewardID[d.EndGameRewardID] = d
		a._dataQuestID[d.QuestID] = d
		a._dataUnlockID[d.UnlockID] = d
	}
}

// ByEndGameRewardID returns the RogueNousEndGameReward uniquely identified by EndGameRewardID
//
// Error is only non-nil if the source errors out
func (a *RogueNousEndGameRewardAccessor) ByEndGameRewardID(identifier json.Number) (RogueNousEndGameReward, error) {
	if a._dataEndGameRewardID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueNousEndGameReward{}, err
			}
		}
		a.GroupData()
	}
	return a._dataEndGameRewardID[identifier], nil
}

// ByQuestID returns the RogueNousEndGameReward uniquely identified by QuestID
//
// Error is only non-nil if the source errors out
func (a *RogueNousEndGameRewardAccessor) ByQuestID(identifier json.Number) (RogueNousEndGameReward, error) {
	if a._dataQuestID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueNousEndGameReward{}, err
			}
		}
		a.GroupData()
	}
	return a._dataQuestID[identifier], nil
}

// ByUnlockID returns the RogueNousEndGameReward uniquely identified by UnlockID
//
// Error is only non-nil if the source errors out
func (a *RogueNousEndGameRewardAccessor) ByUnlockID(identifier json.Number) (RogueNousEndGameReward, error) {
	if a._dataUnlockID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueNousEndGameReward{}, err
			}
		}
		a.GroupData()
	}
	return a._dataUnlockID[identifier], nil
}
