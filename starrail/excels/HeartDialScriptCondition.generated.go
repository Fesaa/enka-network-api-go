package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type HeartDialScriptCondition struct {
	ControlConditionID float64 `json:"ControlConditionID"`
	FullConditionID    float64 `json:"FullConditionID"`
	LockConditionID    float64 `json:"LockConditionID"`
	MissingConditionID float64 `json:"MissingConditionID"`
	ScriptID           float64 `json:"ScriptID"`
	UnLockConditionID  float64 `json:"UnLockConditionID"`
}
type HeartDialScriptConditionAccessor struct {
	_data         []HeartDialScriptCondition
	_dataScriptID map[float64]HeartDialScriptCondition
}

// LoadData retrieves the data. Must be called before HeartDialScriptCondition.GroupData
func (a *HeartDialScriptConditionAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/HeartDialScriptCondition.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *HeartDialScriptConditionAccessor) Raw() ([]HeartDialScriptCondition, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []HeartDialScriptCondition{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with HeartDialScriptConditionAccessor.LoadData to preload everything
func (a *HeartDialScriptConditionAccessor) GroupData() {
	for _, d := range a._data {
		a._dataScriptID[d.ScriptID] = d
	}
}

// ByScriptID returns the HeartDialScriptCondition uniquely identified by ScriptID
//
// Error is only non-nil if the source errors out
func (a *HeartDialScriptConditionAccessor) ByScriptID(identifier float64) (HeartDialScriptCondition, error) {
	if a._dataScriptID == nil {
		err := a.LoadData()
		if err != nil {
			return HeartDialScriptCondition{}, err
		}
		a.GroupData()
	}
	return a._dataScriptID[identifier], nil
}
