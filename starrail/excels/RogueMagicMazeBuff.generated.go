package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type RogueMagicMazeBuff struct {
	BuffDesc            map[string]json.Number   `json:"BuffDesc"`
	BuffEffect          string                   `json:"BuffEffect"`
	BuffIcon            string                   `json:"BuffIcon"`
	BuffName            map[string]json.Number   `json:"BuffName"`
	BuffRarity          json.Number              `json:"BuffRarity"`
	BuffSeries          json.Number              `json:"BuffSeries"`
	ID                  json.Number              `json:"ID"`
	InBattleBindingKey  string                   `json:"InBattleBindingKey"`
	InBattleBindingType string                   `json:"InBattleBindingType"`
	Lv                  json.Number              `json:"Lv"`
	LvMax               json.Number              `json:"LvMax"`
	MazeBuffType        string                   `json:"MazeBuffType"`
	ModifierName        string                   `json:"ModifierName"`
	ParamList           []map[string]json.Number `json:"ParamList"`
}
type RogueMagicMazeBuffAccessor struct {
	_data []RogueMagicMazeBuff
}

// LoadData retrieves the data. Must be called before RogueMagicMazeBuff.GroupData
func (a *RogueMagicMazeBuffAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueMagicMazeBuff.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueMagicMazeBuffAccessor) Raw() ([]RogueMagicMazeBuff, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueMagicMazeBuff{}, err
		}
	}
	return a._data, nil
}
