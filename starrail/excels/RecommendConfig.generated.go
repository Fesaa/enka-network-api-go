package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type RecommendConfig struct {
	GoodsID        []interface{} `json:"GoodsID"`
	ID             float64       `json:"ID"`
	ImagePath      string        `json:"ImagePath"`
	NameText       string        `json:"NameText"`
	Order          float64       `json:"Order"`
	OrderAfterSell float64       `json:"OrderAfterSell"`
	Type           float64       `json:"Type"`
}
type RecommendConfigAccessor struct {
	_data          []RecommendConfig
	_dataID        map[float64]RecommendConfig
	_dataImagePath map[string]RecommendConfig
	_dataNameText  map[string]RecommendConfig
	_dataOrder     map[float64]RecommendConfig
	_dataType      map[float64]RecommendConfig
}

// LoadData retrieves the data. Must be called before RecommendConfig.GroupData
func (a *RecommendConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RecommendConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RecommendConfigAccessor) Raw() ([]RecommendConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RecommendConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RecommendConfigAccessor.LoadData to preload everything
func (a *RecommendConfigAccessor) GroupData() {
	a._dataID = map[float64]RecommendConfig{}
	a._dataImagePath = map[string]RecommendConfig{}
	a._dataNameText = map[string]RecommendConfig{}
	a._dataOrder = map[float64]RecommendConfig{}
	a._dataType = map[float64]RecommendConfig{}
	for _, d := range a._data {
		a._dataID[d.ID] = d
		a._dataImagePath[d.ImagePath] = d
		a._dataNameText[d.NameText] = d
		a._dataOrder[d.Order] = d
		a._dataType[d.Type] = d
	}
}

// ByID returns the RecommendConfig uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *RecommendConfigAccessor) ByID(identifier float64) (RecommendConfig, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RecommendConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}

// ByImagePath returns the RecommendConfig uniquely identified by ImagePath
//
// Error is only non-nil if the source errors out
func (a *RecommendConfigAccessor) ByImagePath(identifier string) (RecommendConfig, error) {
	if a._dataImagePath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RecommendConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataImagePath[identifier], nil
}

// ByNameText returns the RecommendConfig uniquely identified by NameText
//
// Error is only non-nil if the source errors out
func (a *RecommendConfigAccessor) ByNameText(identifier string) (RecommendConfig, error) {
	if a._dataNameText == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RecommendConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataNameText[identifier], nil
}

// ByOrder returns the RecommendConfig uniquely identified by Order
//
// Error is only non-nil if the source errors out
func (a *RecommendConfigAccessor) ByOrder(identifier float64) (RecommendConfig, error) {
	if a._dataOrder == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RecommendConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataOrder[identifier], nil
}

// ByType returns the RecommendConfig uniquely identified by Type
//
// Error is only non-nil if the source errors out
func (a *RecommendConfigAccessor) ByType(identifier float64) (RecommendConfig, error) {
	if a._dataType == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RecommendConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataType[identifier], nil
}
