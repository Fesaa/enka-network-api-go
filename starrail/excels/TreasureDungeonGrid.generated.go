package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type TreasureDungeonGrid struct {
	EffectType            string                 `json:"EffectType"`
	GridID                json.Number            `json:"GridID"`
	GridSubType           json.Number            `json:"GridSubType"`
	GridType              string                 `json:"GridType"`
	IconPath              string                 `json:"IconPath"`
	IconPath2D            string                 `json:"IconPath2D"`
	Name                  map[string]json.Number `json:"Name"`
	OpenBuff              json.Number            `json:"OpenBuff"`
	ParamInt              json.Number            `json:"ParamInt"`
	ReplaceGridID         json.Number            `json:"ReplaceGridID"`
	TutorialTriggerString string                 `json:"TutorialTriggerString"`
	TutorialTriggerType   json.Number            `json:"TutorialTriggerType"`
	TypeParam             []json.Number          `json:"TypeParam"`
}
type TreasureDungeonGridAccessor struct {
	_data []TreasureDungeonGrid
}

// LoadData retrieves the data. Must be called before TreasureDungeonGrid.GroupData
func (a *TreasureDungeonGridAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/TreasureDungeonGrid.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *TreasureDungeonGridAccessor) Raw() ([]TreasureDungeonGrid, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []TreasureDungeonGrid{}, err
		}
	}
	return a._data, nil
}
