package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type AvatarBreakDamage struct {
	BreakBaseDamage map[string]json.Number `json:"BreakBaseDamage"`
	Level           json.Number            `json:"Level"`
}
type AvatarBreakDamageAccessor struct {
	_data      []AvatarBreakDamage
	_dataLevel map[json.Number]AvatarBreakDamage
}

// LoadData retrieves the data. Must be called before AvatarBreakDamage.GroupData
func (a *AvatarBreakDamageAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/AvatarBreakDamage.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *AvatarBreakDamageAccessor) Raw() ([]AvatarBreakDamage, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []AvatarBreakDamage{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with AvatarBreakDamageAccessor.LoadData to preload everything
func (a *AvatarBreakDamageAccessor) GroupData() {
	a._dataLevel = map[json.Number]AvatarBreakDamage{}
	for _, d := range a._data {
		a._dataLevel[d.Level] = d
	}
}

// ByLevel returns the AvatarBreakDamage uniquely identified by Level
//
// Error is only non-nil if the source errors out
func (a *AvatarBreakDamageAccessor) ByLevel(identifier json.Number) (AvatarBreakDamage, error) {
	if a._dataLevel == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AvatarBreakDamage{}, err
			}
		}
		a.GroupData()
	}
	return a._dataLevel[identifier], nil
}
