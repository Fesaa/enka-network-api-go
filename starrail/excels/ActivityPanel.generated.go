package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type ActivityPanel struct {
	ActivityThemeID       json.Number              `json:"ActivityThemeID"`
	DailyHint             bool                     `json:"DailyHint"`
	DisplayItemList       []map[string]json.Number `json:"DisplayItemList"`
	DisplayItemManualSort bool                     `json:"DisplayItemManualSort"`
	FinishConditions      string                   `json:"FinishConditions"`
	FinishType            string                   `json:"FinishType"`
	IntroDesc             map[string]json.Number   `json:"IntroDesc"`
	IsSkipSwitchStoryLine bool                     `json:"IsSkipSwitchStoryLine"`
	PanelDesc             map[string]json.Number   `json:"PanelDesc"`
	PanelID               json.Number              `json:"PanelID"`
	SortWeight            json.Number              `json:"SortWeight"`
	TabIcon               string                   `json:"TabIcon"`
	TabName               map[string]json.Number   `json:"TabName"`
	TagDesc               map[string]json.Number   `json:"TagDesc"`
	TitleName             map[string]json.Number   `json:"TitleName"`
	UIPrefab              string                   `json:"UIPrefab"`
	UnlockConditions      string                   `json:"UnlockConditions"`
}
type ActivityPanelAccessor struct {
	_data        []ActivityPanel
	_dataPanelID map[json.Number]ActivityPanel
}

// LoadData retrieves the data. Must be called before ActivityPanel.GroupData
func (a *ActivityPanelAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ActivityPanel.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ActivityPanelAccessor) Raw() ([]ActivityPanel, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ActivityPanel{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ActivityPanelAccessor.LoadData to preload everything
func (a *ActivityPanelAccessor) GroupData() {
	a._dataPanelID = map[json.Number]ActivityPanel{}
	for _, d := range a._data {
		a._dataPanelID[d.PanelID] = d
	}
}

// ByPanelID returns the ActivityPanel uniquely identified by PanelID
//
// Error is only non-nil if the source errors out
func (a *ActivityPanelAccessor) ByPanelID(identifier json.Number) (ActivityPanel, error) {
	if a._dataPanelID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityPanel{}, err
			}
		}
		a.GroupData()
	}
	return a._dataPanelID[identifier], nil
}
