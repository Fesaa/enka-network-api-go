package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type SpaceZooSpecialCat struct {
	ColorBar              []string               `json:"ColorBar"`
	ImagePath             string                 `json:"ImagePath"`
	IsHide                bool                   `json:"IsHide"`
	LargeImagePath        string                 `json:"LargeImagePath"`
	MatPath               string                 `json:"MatPath"`
	MatchedChannelFeature []json.Number          `json:"MatchedChannelFeature"`
	Name                  map[string]json.Number `json:"Name"`
	PhotoSubmissionID     json.Number            `json:"PhotoSubmissionID"`
	ResearchPointSSR      json.Number            `json:"ResearchPointSSR"`
	SpecialCatID          json.Number            `json:"SpecialCatID"`
	SpecialItem           json.Number            `json:"SpecialItem"`
	TipsCustomizedCat     []json.Number          `json:"TipsCustomizedCat"`
	TipsMissionID         json.Number            `json:"TipsMissionID"`
}
type SpaceZooSpecialCatAccessor struct {
	_data               []SpaceZooSpecialCat
	_dataImagePath      map[string]SpaceZooSpecialCat
	_dataLargeImagePath map[string]SpaceZooSpecialCat
	_dataMatPath        map[string]SpaceZooSpecialCat
}

// LoadData retrieves the data. Must be called before SpaceZooSpecialCat.GroupData
func (a *SpaceZooSpecialCatAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/SpaceZooSpecialCat.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *SpaceZooSpecialCatAccessor) Raw() ([]SpaceZooSpecialCat, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []SpaceZooSpecialCat{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with SpaceZooSpecialCatAccessor.LoadData to preload everything
func (a *SpaceZooSpecialCatAccessor) GroupData() {
	a._dataImagePath = map[string]SpaceZooSpecialCat{}
	a._dataLargeImagePath = map[string]SpaceZooSpecialCat{}
	a._dataMatPath = map[string]SpaceZooSpecialCat{}
	for _, d := range a._data {
		a._dataImagePath[d.ImagePath] = d
		a._dataLargeImagePath[d.LargeImagePath] = d
		a._dataMatPath[d.MatPath] = d
	}
}

// ByImagePath returns the SpaceZooSpecialCat uniquely identified by ImagePath
//
// Error is only non-nil if the source errors out
func (a *SpaceZooSpecialCatAccessor) ByImagePath(identifier string) (SpaceZooSpecialCat, error) {
	if a._dataImagePath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return SpaceZooSpecialCat{}, err
			}
		}
		a.GroupData()
	}
	return a._dataImagePath[identifier], nil
}

// ByLargeImagePath returns the SpaceZooSpecialCat uniquely identified by LargeImagePath
//
// Error is only non-nil if the source errors out
func (a *SpaceZooSpecialCatAccessor) ByLargeImagePath(identifier string) (SpaceZooSpecialCat, error) {
	if a._dataLargeImagePath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return SpaceZooSpecialCat{}, err
			}
		}
		a.GroupData()
	}
	return a._dataLargeImagePath[identifier], nil
}

// ByMatPath returns the SpaceZooSpecialCat uniquely identified by MatPath
//
// Error is only non-nil if the source errors out
func (a *SpaceZooSpecialCatAccessor) ByMatPath(identifier string) (SpaceZooSpecialCat, error) {
	if a._dataMatPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return SpaceZooSpecialCat{}, err
			}
		}
		a.GroupData()
	}
	return a._dataMatPath[identifier], nil
}
