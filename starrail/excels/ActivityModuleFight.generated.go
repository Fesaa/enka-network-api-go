package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type ActivityModuleFight struct {
	ActivityFightGroupID float64 `json:"ActivityFightGroupID"`
	ActivityModuleID     float64 `json:"ActivityModuleID"`
}
type ActivityModuleFightAccessor struct {
	_data                     []ActivityModuleFight
	_dataActivityModuleID     map[float64]ActivityModuleFight
	_dataActivityFightGroupID map[float64]ActivityModuleFight
}

// LoadData retrieves the data. Must be called before ActivityModuleFight.GroupData
func (a *ActivityModuleFightAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ActivityModuleFight.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ActivityModuleFightAccessor) Raw() ([]ActivityModuleFight, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ActivityModuleFight{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ActivityModuleFightAccessor.LoadData to preload everything
func (a *ActivityModuleFightAccessor) GroupData() {
	for _, d := range a._data {
		a._dataActivityModuleID[d.ActivityModuleID] = d
		a._dataActivityFightGroupID[d.ActivityFightGroupID] = d
	}
}

// ByActivityModuleID returns the ActivityModuleFight uniquely identified by ActivityModuleID
//
// Error is only non-nil if the source errors out
func (a *ActivityModuleFightAccessor) ByActivityModuleID(identifier float64) (ActivityModuleFight, error) {
	if a._dataActivityModuleID == nil {
		err := a.LoadData()
		if err != nil {
			return ActivityModuleFight{}, err
		}
		a.GroupData()
	}
	return a._dataActivityModuleID[identifier], nil
}

// ByActivityFightGroupID returns the ActivityModuleFight uniquely identified by ActivityFightGroupID
//
// Error is only non-nil if the source errors out
func (a *ActivityModuleFightAccessor) ByActivityFightGroupID(identifier float64) (ActivityModuleFight, error) {
	if a._dataActivityFightGroupID == nil {
		err := a.LoadData()
		if err != nil {
			return ActivityModuleFight{}, err
		}
		a.GroupData()
	}
	return a._dataActivityFightGroupID[identifier], nil
}
