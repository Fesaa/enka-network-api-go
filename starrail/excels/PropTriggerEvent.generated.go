package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type PropTriggerEvent struct {
	ExitJsonPath string  `json:"ExitJsonPath"`
	ID           float64 `json:"ID"`
	JsonPath     string  `json:"JsonPath"`
	Name         string  `json:"Name"`
}
type PropTriggerEventAccessor struct {
	_data             []PropTriggerEvent
	_dataExitJsonPath map[string]PropTriggerEvent
	_dataID           map[float64]PropTriggerEvent
	_dataJsonPath     map[string]PropTriggerEvent
	_dataName         map[string]PropTriggerEvent
}

// LoadData retrieves the data. Must be called before PropTriggerEvent.GroupData
func (a *PropTriggerEventAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/PropTriggerEvent.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *PropTriggerEventAccessor) Raw() ([]PropTriggerEvent, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []PropTriggerEvent{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with PropTriggerEventAccessor.LoadData to preload everything
func (a *PropTriggerEventAccessor) GroupData() {
	a._dataExitJsonPath = map[string]PropTriggerEvent{}
	a._dataID = map[float64]PropTriggerEvent{}
	a._dataJsonPath = map[string]PropTriggerEvent{}
	a._dataName = map[string]PropTriggerEvent{}
	for _, d := range a._data {
		a._dataExitJsonPath[d.ExitJsonPath] = d
		a._dataID[d.ID] = d
		a._dataJsonPath[d.JsonPath] = d
		a._dataName[d.Name] = d
	}
}

// ByExitJsonPath returns the PropTriggerEvent uniquely identified by ExitJsonPath
//
// Error is only non-nil if the source errors out
func (a *PropTriggerEventAccessor) ByExitJsonPath(identifier string) (PropTriggerEvent, error) {
	if a._dataExitJsonPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return PropTriggerEvent{}, err
			}
		}
		a.GroupData()
	}
	return a._dataExitJsonPath[identifier], nil
}

// ByID returns the PropTriggerEvent uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *PropTriggerEventAccessor) ByID(identifier float64) (PropTriggerEvent, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return PropTriggerEvent{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}

// ByJsonPath returns the PropTriggerEvent uniquely identified by JsonPath
//
// Error is only non-nil if the source errors out
func (a *PropTriggerEventAccessor) ByJsonPath(identifier string) (PropTriggerEvent, error) {
	if a._dataJsonPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return PropTriggerEvent{}, err
			}
		}
		a.GroupData()
	}
	return a._dataJsonPath[identifier], nil
}

// ByName returns the PropTriggerEvent uniquely identified by Name
//
// Error is only non-nil if the source errors out
func (a *PropTriggerEventAccessor) ByName(identifier string) (PropTriggerEvent, error) {
	if a._dataName == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return PropTriggerEvent{}, err
			}
		}
		a.GroupData()
	}
	return a._dataName[identifier], nil
}
