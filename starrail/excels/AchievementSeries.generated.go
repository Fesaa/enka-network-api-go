package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type AchievementSeries struct {
	CopperIconPath string    `json:"CopperIconPath"`
	GoldIconPath   string    `json:"GoldIconPath"`
	IconPath       string    `json:"IconPath"`
	MainIconPath   string    `json:"MainIconPath"`
	Priority       float64   `json:"Priority"`
	SeriesID       float64   `json:"SeriesID"`
	SeriesTitle    hash.Hash `json:"SeriesTitle"`
	SilverIconPath string    `json:"SilverIconPath"`
}
type AchievementSeriesAccessor struct {
	_data               []AchievementSeries
	_dataIconPath       map[string]AchievementSeries
	_dataCopperIconPath map[string]AchievementSeries
	_dataSeriesID       map[float64]AchievementSeries
	_dataMainIconPath   map[string]AchievementSeries
	_dataGoldIconPath   map[string]AchievementSeries
	_dataSilverIconPath map[string]AchievementSeries
}

// LoadData retrieves the data. Must be called before AchievementSeries.GroupData
func (a *AchievementSeriesAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/AchievementSeries.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *AchievementSeriesAccessor) Raw() ([]AchievementSeries, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []AchievementSeries{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with AchievementSeriesAccessor.LoadData to preload everything
func (a *AchievementSeriesAccessor) GroupData() {
	for _, d := range a._data {
		a._dataIconPath[d.IconPath] = d
		a._dataCopperIconPath[d.CopperIconPath] = d
		a._dataSeriesID[d.SeriesID] = d
		a._dataMainIconPath[d.MainIconPath] = d
		a._dataGoldIconPath[d.GoldIconPath] = d
		a._dataSilverIconPath[d.SilverIconPath] = d
	}
}

// ByIconPath returns the AchievementSeries uniquely identified by IconPath
//
// Error is only non-nil if the source errors out
func (a *AchievementSeriesAccessor) ByIconPath(identifier string) (AchievementSeries, error) {
	if a._dataIconPath == nil {
		err := a.LoadData()
		if err != nil {
			return AchievementSeries{}, err
		}
		a.GroupData()
	}
	return a._dataIconPath[identifier], nil
}

// ByCopperIconPath returns the AchievementSeries uniquely identified by CopperIconPath
//
// Error is only non-nil if the source errors out
func (a *AchievementSeriesAccessor) ByCopperIconPath(identifier string) (AchievementSeries, error) {
	if a._dataCopperIconPath == nil {
		err := a.LoadData()
		if err != nil {
			return AchievementSeries{}, err
		}
		a.GroupData()
	}
	return a._dataCopperIconPath[identifier], nil
}

// BySeriesID returns the AchievementSeries uniquely identified by SeriesID
//
// Error is only non-nil if the source errors out
func (a *AchievementSeriesAccessor) BySeriesID(identifier float64) (AchievementSeries, error) {
	if a._dataSeriesID == nil {
		err := a.LoadData()
		if err != nil {
			return AchievementSeries{}, err
		}
		a.GroupData()
	}
	return a._dataSeriesID[identifier], nil
}

// ByMainIconPath returns the AchievementSeries uniquely identified by MainIconPath
//
// Error is only non-nil if the source errors out
func (a *AchievementSeriesAccessor) ByMainIconPath(identifier string) (AchievementSeries, error) {
	if a._dataMainIconPath == nil {
		err := a.LoadData()
		if err != nil {
			return AchievementSeries{}, err
		}
		a.GroupData()
	}
	return a._dataMainIconPath[identifier], nil
}

// ByGoldIconPath returns the AchievementSeries uniquely identified by GoldIconPath
//
// Error is only non-nil if the source errors out
func (a *AchievementSeriesAccessor) ByGoldIconPath(identifier string) (AchievementSeries, error) {
	if a._dataGoldIconPath == nil {
		err := a.LoadData()
		if err != nil {
			return AchievementSeries{}, err
		}
		a.GroupData()
	}
	return a._dataGoldIconPath[identifier], nil
}

// BySilverIconPath returns the AchievementSeries uniquely identified by SilverIconPath
//
// Error is only non-nil if the source errors out
func (a *AchievementSeriesAccessor) BySilverIconPath(identifier string) (AchievementSeries, error) {
	if a._dataSilverIconPath == nil {
		err := a.LoadData()
		if err != nil {
			return AchievementSeries{}, err
		}
		a.GroupData()
	}
	return a._dataSilverIconPath[identifier], nil
}
