package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type MonopolyDisplayCell struct {
	CellDesc    map[string]json.Number `json:"CellDesc"`
	CellName    map[string]json.Number `json:"CellName"`
	DisplayID   json.Number            `json:"DisplayID"`
	DisplaySort json.Number            `json:"DisplaySort"`
	IconPath    string                 `json:"IconPath"`
	Type        string                 `json:"Type"`
}
type MonopolyDisplayCellAccessor struct {
	_data            []MonopolyDisplayCell
	_dataDisplayID   map[json.Number]MonopolyDisplayCell
	_dataDisplaySort map[json.Number]MonopolyDisplayCell
	_dataIconPath    map[string]MonopolyDisplayCell
}

// LoadData retrieves the data. Must be called before MonopolyDisplayCell.GroupData
func (a *MonopolyDisplayCellAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MonopolyDisplayCell.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MonopolyDisplayCellAccessor) Raw() ([]MonopolyDisplayCell, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MonopolyDisplayCell{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MonopolyDisplayCellAccessor.LoadData to preload everything
func (a *MonopolyDisplayCellAccessor) GroupData() {
	a._dataDisplayID = map[json.Number]MonopolyDisplayCell{}
	a._dataDisplaySort = map[json.Number]MonopolyDisplayCell{}
	a._dataIconPath = map[string]MonopolyDisplayCell{}
	for _, d := range a._data {
		a._dataDisplayID[d.DisplayID] = d
		a._dataDisplaySort[d.DisplaySort] = d
		a._dataIconPath[d.IconPath] = d
	}
}

// ByDisplayID returns the MonopolyDisplayCell uniquely identified by DisplayID
//
// Error is only non-nil if the source errors out
func (a *MonopolyDisplayCellAccessor) ByDisplayID(identifier json.Number) (MonopolyDisplayCell, error) {
	if a._dataDisplayID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MonopolyDisplayCell{}, err
			}
		}
		a.GroupData()
	}
	return a._dataDisplayID[identifier], nil
}

// ByDisplaySort returns the MonopolyDisplayCell uniquely identified by DisplaySort
//
// Error is only non-nil if the source errors out
func (a *MonopolyDisplayCellAccessor) ByDisplaySort(identifier json.Number) (MonopolyDisplayCell, error) {
	if a._dataDisplaySort == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MonopolyDisplayCell{}, err
			}
		}
		a.GroupData()
	}
	return a._dataDisplaySort[identifier], nil
}

// ByIconPath returns the MonopolyDisplayCell uniquely identified by IconPath
//
// Error is only non-nil if the source errors out
func (a *MonopolyDisplayCellAccessor) ByIconPath(identifier string) (MonopolyDisplayCell, error) {
	if a._dataIconPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MonopolyDisplayCell{}, err
			}
		}
		a.GroupData()
	}
	return a._dataIconPath[identifier], nil
}
