package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type MonopolyDisplayCell struct {
	CellDesc    hash.Hash `json:"CellDesc"`
	CellName    hash.Hash `json:"CellName"`
	DisplayID   float64   `json:"DisplayID"`
	DisplaySort float64   `json:"DisplaySort"`
	IconPath    string    `json:"IconPath"`
	Type        string    `json:"Type"`
}
type MonopolyDisplayCellAccessor struct {
	_data            []MonopolyDisplayCell
	_dataDisplaySort map[float64]MonopolyDisplayCell
	_dataDisplayID   map[float64]MonopolyDisplayCell
	_dataIconPath    map[string]MonopolyDisplayCell
}

// LoadData retrieves the data. Must be called before MonopolyDisplayCell.GroupData
func (a *MonopolyDisplayCellAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MonopolyDisplayCell.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MonopolyDisplayCellAccessor) Raw() ([]MonopolyDisplayCell, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MonopolyDisplayCell{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MonopolyDisplayCellAccessor.LoadData to preload everything
func (a *MonopolyDisplayCellAccessor) GroupData() {
	for _, d := range a._data {
		a._dataDisplaySort[d.DisplaySort] = d
		a._dataDisplayID[d.DisplayID] = d
		a._dataIconPath[d.IconPath] = d
	}
}

// ByDisplaySort returns the MonopolyDisplayCell uniquely identified by DisplaySort
//
// Error is only non-nil if the source errors out
func (a *MonopolyDisplayCellAccessor) ByDisplaySort(identifier float64) (MonopolyDisplayCell, error) {
	if a._dataDisplaySort == nil {
		err := a.LoadData()
		if err != nil {
			return MonopolyDisplayCell{}, err
		}
		a.GroupData()
	}
	return a._dataDisplaySort[identifier], nil
}

// ByDisplayID returns the MonopolyDisplayCell uniquely identified by DisplayID
//
// Error is only non-nil if the source errors out
func (a *MonopolyDisplayCellAccessor) ByDisplayID(identifier float64) (MonopolyDisplayCell, error) {
	if a._dataDisplayID == nil {
		err := a.LoadData()
		if err != nil {
			return MonopolyDisplayCell{}, err
		}
		a.GroupData()
	}
	return a._dataDisplayID[identifier], nil
}

// ByIconPath returns the MonopolyDisplayCell uniquely identified by IconPath
//
// Error is only non-nil if the source errors out
func (a *MonopolyDisplayCellAccessor) ByIconPath(identifier string) (MonopolyDisplayCell, error) {
	if a._dataIconPath == nil {
		err := a.LoadData()
		if err != nil {
			return MonopolyDisplayCell{}, err
		}
		a.GroupData()
	}
	return a._dataIconPath[identifier], nil
}
