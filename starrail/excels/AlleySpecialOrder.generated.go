package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type AlleySpecialOrder struct {
	OrderPic            string                   `json:"OrderPic"`
	OrderTips           string                   `json:"OrderTips"`
	OrderTipsTime       []json.Number            `json:"OrderTipsTime"`
	SpecialOrderContent []json.Number            `json:"SpecialOrderContent"`
	SpecialOrderGoods   []map[string]json.Number `json:"SpecialOrderGoods"`
	SpecialOrderID      json.Number              `json:"SpecialOrderID"`
	SpecialOrderReward  json.Number              `json:"SpecialOrderReward"`
	SpecialOrderShip    json.Number              `json:"SpecialOrderShip"`
	SpecialOrderShopID  json.Number              `json:"SpecialOrderShopID"`
	SubTitleID          string                   `json:"SubTitleID"`
	UnlockMission       json.Number              `json:"UnlockMission"`
}
type AlleySpecialOrderAccessor struct {
	_data           []AlleySpecialOrder
	_dataOrderPic   map[string]AlleySpecialOrder
	_dataOrderTips  map[string]AlleySpecialOrder
	_dataSubTitleID map[string]AlleySpecialOrder
}

// LoadData retrieves the data. Must be called before AlleySpecialOrder.GroupData
func (a *AlleySpecialOrderAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/AlleySpecialOrder.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *AlleySpecialOrderAccessor) Raw() ([]AlleySpecialOrder, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []AlleySpecialOrder{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with AlleySpecialOrderAccessor.LoadData to preload everything
func (a *AlleySpecialOrderAccessor) GroupData() {
	a._dataOrderPic = map[string]AlleySpecialOrder{}
	a._dataOrderTips = map[string]AlleySpecialOrder{}
	a._dataSubTitleID = map[string]AlleySpecialOrder{}
	for _, d := range a._data {
		a._dataOrderPic[d.OrderPic] = d
		a._dataOrderTips[d.OrderTips] = d
		a._dataSubTitleID[d.SubTitleID] = d
	}
}

// ByOrderPic returns the AlleySpecialOrder uniquely identified by OrderPic
//
// Error is only non-nil if the source errors out
func (a *AlleySpecialOrderAccessor) ByOrderPic(identifier string) (AlleySpecialOrder, error) {
	if a._dataOrderPic == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AlleySpecialOrder{}, err
			}
		}
		a.GroupData()
	}
	return a._dataOrderPic[identifier], nil
}

// ByOrderTips returns the AlleySpecialOrder uniquely identified by OrderTips
//
// Error is only non-nil if the source errors out
func (a *AlleySpecialOrderAccessor) ByOrderTips(identifier string) (AlleySpecialOrder, error) {
	if a._dataOrderTips == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AlleySpecialOrder{}, err
			}
		}
		a.GroupData()
	}
	return a._dataOrderTips[identifier], nil
}

// BySubTitleID returns the AlleySpecialOrder uniquely identified by SubTitleID
//
// Error is only non-nil if the source errors out
func (a *AlleySpecialOrderAccessor) BySubTitleID(identifier string) (AlleySpecialOrder, error) {
	if a._dataSubTitleID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AlleySpecialOrder{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSubTitleID[identifier], nil
}
