package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type RogueTournMiscDisplay struct {
	DisplayContent map[string]json.Number `json:"DisplayContent"`
	DisplayID      json.Number            `json:"DisplayID"`
}
type RogueTournMiscDisplayAccessor struct {
	_data          []RogueTournMiscDisplay
	_dataDisplayID map[json.Number]RogueTournMiscDisplay
}

// LoadData retrieves the data. Must be called before RogueTournMiscDisplay.GroupData
func (a *RogueTournMiscDisplayAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueTournMiscDisplay.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueTournMiscDisplayAccessor) Raw() ([]RogueTournMiscDisplay, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueTournMiscDisplay{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueTournMiscDisplayAccessor.LoadData to preload everything
func (a *RogueTournMiscDisplayAccessor) GroupData() {
	a._dataDisplayID = map[json.Number]RogueTournMiscDisplay{}
	for _, d := range a._data {
		a._dataDisplayID[d.DisplayID] = d
	}
}

// ByDisplayID returns the RogueTournMiscDisplay uniquely identified by DisplayID
//
// Error is only non-nil if the source errors out
func (a *RogueTournMiscDisplayAccessor) ByDisplayID(identifier json.Number) (RogueTournMiscDisplay, error) {
	if a._dataDisplayID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueTournMiscDisplay{}, err
			}
		}
		a.GroupData()
	}
	return a._dataDisplayID[identifier], nil
}
