package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type FightFestPhase struct {
	Board3DTexture      string                 `json:"Board3DTexture"`
	BoardTitle          map[string]json.Number `json:"BoardTitle"`
	IconPath1           string                 `json:"IconPath1"`
	IconPath2           string                 `json:"IconPath2"`
	LukaAnimTrigger     string                 `json:"LukaAnimTrigger"`
	MiniIconPath1       string                 `json:"MiniIconPath1"`
	PhaseID             json.Number            `json:"PhaseID"`
	PhaseTitle          map[string]json.Number `json:"PhaseTitle"`
	PhaseTutorialParams []json.Number          `json:"PhaseTutorialParams"`
	PhaseType           string                 `json:"PhaseType"`
	SortWeight          json.Number            `json:"SortWeight"`
	TargetTips          map[string]json.Number `json:"TargetTips"`
	UnlockSubMissionID  json.Number            `json:"UnlockSubMissionID"`
}
type FightFestPhaseAccessor struct {
	_data []FightFestPhase
}

// LoadData retrieves the data. Must be called before FightFestPhase.GroupData
func (a *FightFestPhaseAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/FightFestPhase.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *FightFestPhaseAccessor) Raw() ([]FightFestPhase, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []FightFestPhase{}, err
		}
	}
	return a._data, nil
}
