package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type MonopolyGameResource struct {
	IconOutlinePath string      `json:"IconOutlinePath"`
	IconPath        string      `json:"IconPath"`
	ResourceID      json.Number `json:"ResourceID"`
	ResourceNum     json.Number `json:"ResourceNum"`
	RuleIconPath    string      `json:"RuleIconPath"`
}
type MonopolyGameResourceAccessor struct {
	_data           []MonopolyGameResource
	_dataResourceID map[json.Number]MonopolyGameResource
}

// LoadData retrieves the data. Must be called before MonopolyGameResource.GroupData
func (a *MonopolyGameResourceAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MonopolyGameResource.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MonopolyGameResourceAccessor) Raw() ([]MonopolyGameResource, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MonopolyGameResource{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MonopolyGameResourceAccessor.LoadData to preload everything
func (a *MonopolyGameResourceAccessor) GroupData() {
	a._dataResourceID = map[json.Number]MonopolyGameResource{}
	for _, d := range a._data {
		a._dataResourceID[d.ResourceID] = d
	}
}

// ByResourceID returns the MonopolyGameResource uniquely identified by ResourceID
//
// Error is only non-nil if the source errors out
func (a *MonopolyGameResourceAccessor) ByResourceID(identifier json.Number) (MonopolyGameResource, error) {
	if a._dataResourceID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MonopolyGameResource{}, err
			}
		}
		a.GroupData()
	}
	return a._dataResourceID[identifier], nil
}
