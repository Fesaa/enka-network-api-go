package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type PlanetFesCard struct {
	BuffIDList    []float64 `json:"BuffIDList"`
	CardID        float64   `json:"CardID"`
	Description   hash.Hash `json:"Description"`
	Name          hash.Hash `json:"Name"`
	PicPath       string    `json:"PicPath"`
	PieceItemList []float64 `json:"PieceItemList"`
	Rarity        float64   `json:"Rarity"`
}
type PlanetFesCardAccessor struct {
	_data        []PlanetFesCard
	_dataPicPath map[string]PlanetFesCard
	_dataCardID  map[float64]PlanetFesCard
}

// LoadData retrieves the data. Must be called before PlanetFesCard.GroupData
func (a *PlanetFesCardAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/PlanetFesCard.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *PlanetFesCardAccessor) Raw() ([]PlanetFesCard, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []PlanetFesCard{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with PlanetFesCardAccessor.LoadData to preload everything
func (a *PlanetFesCardAccessor) GroupData() {
	for _, d := range a._data {
		a._dataPicPath[d.PicPath] = d
		a._dataCardID[d.CardID] = d
	}
}

// ByPicPath returns the PlanetFesCard uniquely identified by PicPath
//
// Error is only non-nil if the source errors out
func (a *PlanetFesCardAccessor) ByPicPath(identifier string) (PlanetFesCard, error) {
	if a._dataPicPath == nil {
		err := a.LoadData()
		if err != nil {
			return PlanetFesCard{}, err
		}
		a.GroupData()
	}
	return a._dataPicPath[identifier], nil
}

// ByCardID returns the PlanetFesCard uniquely identified by CardID
//
// Error is only non-nil if the source errors out
func (a *PlanetFesCardAccessor) ByCardID(identifier float64) (PlanetFesCard, error) {
	if a._dataCardID == nil {
		err := a.LoadData()
		if err != nil {
			return PlanetFesCard{}, err
		}
		a.GroupData()
	}
	return a._dataCardID[identifier], nil
}
