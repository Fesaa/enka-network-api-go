package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type RogueTournDifficulty struct {
	DifficultyID float64   `json:"DifficultyID"`
	LevelList    []float64 `json:"LevelList"`
}
type RogueTournDifficultyAccessor struct {
	_data             []RogueTournDifficulty
	_dataDifficultyID map[float64]RogueTournDifficulty
}

// LoadData retrieves the data. Must be called before RogueTournDifficulty.GroupData
func (a *RogueTournDifficultyAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueTournDifficulty.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueTournDifficultyAccessor) Raw() ([]RogueTournDifficulty, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueTournDifficulty{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueTournDifficultyAccessor.LoadData to preload everything
func (a *RogueTournDifficultyAccessor) GroupData() {
	for _, d := range a._data {
		a._dataDifficultyID[d.DifficultyID] = d
	}
}

// ByDifficultyID returns the RogueTournDifficulty uniquely identified by DifficultyID
//
// Error is only non-nil if the source errors out
func (a *RogueTournDifficultyAccessor) ByDifficultyID(identifier float64) (RogueTournDifficulty, error) {
	if a._dataDifficultyID == nil {
		err := a.LoadData()
		if err != nil {
			return RogueTournDifficulty{}, err
		}
		a.GroupData()
	}
	return a._dataDifficultyID[identifier], nil
}
