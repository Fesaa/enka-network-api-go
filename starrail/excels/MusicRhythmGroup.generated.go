package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type MusicRhythmGroup struct {
	BGMpath             string                 `json:"BGMpath"`
	EntityGroup         json.Number            `json:"EntityGroup"`
	EntityGroupMission  json.Number            `json:"EntityGroupMission"`
	EntranceID          json.Number            `json:"EntranceID"`
	GotoID              json.Number            `json:"GotoID"`
	GroupCoverImgPath   string                 `json:"GroupCoverImgPath"`
	GroupDesc           map[string]json.Number `json:"GroupDesc"`
	GroupName           map[string]json.Number `json:"GroupName"`
	ID                  json.Number            `json:"ID"`
	Index               json.Number            `json:"Index"`
	InputTimeList       []json.Number          `json:"InputTimeList"`
	LongInputTimeList   []json.Number          `json:"LongInputTimeList"`
	LongInputUpTimeList []json.Number          `json:"LongInputUpTimeList"`
	MapInfoID           json.Number            `json:"MapInfoID"`
	MapName             map[string]json.Number `json:"MapName"`
	Phase               json.Number            `json:"Phase"`
	RewardTrackIDList   []json.Number          `json:"RewardTrackIDList"`
	TakeMissionID       json.Number            `json:"TakeMissionID"`
	UnlockSubMissionID  json.Number            `json:"UnlockSubMissionID"`
}
type MusicRhythmGroupAccessor struct {
	_data                  []MusicRhythmGroup
	_dataBGMpath           map[string]MusicRhythmGroup
	_dataGroupCoverImgPath map[string]MusicRhythmGroup
}

// LoadData retrieves the data. Must be called before MusicRhythmGroup.GroupData
func (a *MusicRhythmGroupAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MusicRhythmGroup.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MusicRhythmGroupAccessor) Raw() ([]MusicRhythmGroup, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MusicRhythmGroup{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MusicRhythmGroupAccessor.LoadData to preload everything
func (a *MusicRhythmGroupAccessor) GroupData() {
	a._dataBGMpath = map[string]MusicRhythmGroup{}
	a._dataGroupCoverImgPath = map[string]MusicRhythmGroup{}
	for _, d := range a._data {
		a._dataBGMpath[d.BGMpath] = d
		a._dataGroupCoverImgPath[d.GroupCoverImgPath] = d
	}
}

// ByBGMpath returns the MusicRhythmGroup uniquely identified by BGMpath
//
// Error is only non-nil if the source errors out
func (a *MusicRhythmGroupAccessor) ByBGMpath(identifier string) (MusicRhythmGroup, error) {
	if a._dataBGMpath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MusicRhythmGroup{}, err
			}
		}
		a.GroupData()
	}
	return a._dataBGMpath[identifier], nil
}

// ByGroupCoverImgPath returns the MusicRhythmGroup uniquely identified by GroupCoverImgPath
//
// Error is only non-nil if the source errors out
func (a *MusicRhythmGroupAccessor) ByGroupCoverImgPath(identifier string) (MusicRhythmGroup, error) {
	if a._dataGroupCoverImgPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MusicRhythmGroup{}, err
			}
		}
		a.GroupData()
	}
	return a._dataGroupCoverImgPath[identifier], nil
}
