package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type MusicRhythmGroup struct {
	BGMpath             string    `json:"BGMpath"`
	EntityGroup         float64   `json:"EntityGroup"`
	EntityGroupMission  float64   `json:"EntityGroupMission"`
	EntranceID          float64   `json:"EntranceID"`
	GotoID              float64   `json:"GotoID"`
	GroupCoverImgPath   string    `json:"GroupCoverImgPath"`
	GroupDesc           hash.Hash `json:"GroupDesc"`
	GroupName           hash.Hash `json:"GroupName"`
	ID                  float64   `json:"ID"`
	Index               float64   `json:"Index"`
	InputTimeList       []float64 `json:"InputTimeList"`
	LongInputTimeList   []float64 `json:"LongInputTimeList"`
	LongInputUpTimeList []float64 `json:"LongInputUpTimeList"`
	MapInfoID           float64   `json:"MapInfoID"`
	MapName             hash.Hash `json:"MapName"`
	Phase               float64   `json:"Phase"`
	RewardTrackIDList   []float64 `json:"RewardTrackIDList"`
	TakeMissionID       float64   `json:"TakeMissionID"`
	UnlockSubMissionID  float64   `json:"UnlockSubMissionID"`
}
type MusicRhythmGroupAccessor struct {
	_data                   []MusicRhythmGroup
	_dataBGMpath            map[string]MusicRhythmGroup
	_dataEntityGroup        map[float64]MusicRhythmGroup
	_dataEntityGroupMission map[float64]MusicRhythmGroup
	_dataEntranceID         map[float64]MusicRhythmGroup
	_dataGotoID             map[float64]MusicRhythmGroup
	_dataGroupCoverImgPath  map[string]MusicRhythmGroup
	_dataID                 map[float64]MusicRhythmGroup
	_dataMapInfoID          map[float64]MusicRhythmGroup
	_dataTakeMissionID      map[float64]MusicRhythmGroup
}

// LoadData retrieves the data. Must be called before MusicRhythmGroup.GroupData
func (a *MusicRhythmGroupAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MusicRhythmGroup.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MusicRhythmGroupAccessor) Raw() ([]MusicRhythmGroup, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MusicRhythmGroup{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MusicRhythmGroupAccessor.LoadData to preload everything
func (a *MusicRhythmGroupAccessor) GroupData() {
	for _, d := range a._data {
		a._dataBGMpath[d.BGMpath] = d
		a._dataEntityGroup[d.EntityGroup] = d
		a._dataEntityGroupMission[d.EntityGroupMission] = d
		a._dataEntranceID[d.EntranceID] = d
		a._dataGotoID[d.GotoID] = d
		a._dataGroupCoverImgPath[d.GroupCoverImgPath] = d
		a._dataID[d.ID] = d
		a._dataMapInfoID[d.MapInfoID] = d
		a._dataTakeMissionID[d.TakeMissionID] = d
	}
}

// ByBGMpath returns the MusicRhythmGroup uniquely identified by BGMpath
//
// Error is only non-nil if the source errors out
func (a *MusicRhythmGroupAccessor) ByBGMpath(identifier string) (MusicRhythmGroup, error) {
	if a._dataBGMpath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MusicRhythmGroup{}, err
			}
		}
		a.GroupData()
	}
	return a._dataBGMpath[identifier], nil
}

// ByEntityGroup returns the MusicRhythmGroup uniquely identified by EntityGroup
//
// Error is only non-nil if the source errors out
func (a *MusicRhythmGroupAccessor) ByEntityGroup(identifier float64) (MusicRhythmGroup, error) {
	if a._dataEntityGroup == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MusicRhythmGroup{}, err
			}
		}
		a.GroupData()
	}
	return a._dataEntityGroup[identifier], nil
}

// ByEntityGroupMission returns the MusicRhythmGroup uniquely identified by EntityGroupMission
//
// Error is only non-nil if the source errors out
func (a *MusicRhythmGroupAccessor) ByEntityGroupMission(identifier float64) (MusicRhythmGroup, error) {
	if a._dataEntityGroupMission == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MusicRhythmGroup{}, err
			}
		}
		a.GroupData()
	}
	return a._dataEntityGroupMission[identifier], nil
}

// ByEntranceID returns the MusicRhythmGroup uniquely identified by EntranceID
//
// Error is only non-nil if the source errors out
func (a *MusicRhythmGroupAccessor) ByEntranceID(identifier float64) (MusicRhythmGroup, error) {
	if a._dataEntranceID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MusicRhythmGroup{}, err
			}
		}
		a.GroupData()
	}
	return a._dataEntranceID[identifier], nil
}

// ByGotoID returns the MusicRhythmGroup uniquely identified by GotoID
//
// Error is only non-nil if the source errors out
func (a *MusicRhythmGroupAccessor) ByGotoID(identifier float64) (MusicRhythmGroup, error) {
	if a._dataGotoID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MusicRhythmGroup{}, err
			}
		}
		a.GroupData()
	}
	return a._dataGotoID[identifier], nil
}

// ByGroupCoverImgPath returns the MusicRhythmGroup uniquely identified by GroupCoverImgPath
//
// Error is only non-nil if the source errors out
func (a *MusicRhythmGroupAccessor) ByGroupCoverImgPath(identifier string) (MusicRhythmGroup, error) {
	if a._dataGroupCoverImgPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MusicRhythmGroup{}, err
			}
		}
		a.GroupData()
	}
	return a._dataGroupCoverImgPath[identifier], nil
}

// ByID returns the MusicRhythmGroup uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *MusicRhythmGroupAccessor) ByID(identifier float64) (MusicRhythmGroup, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MusicRhythmGroup{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}

// ByMapInfoID returns the MusicRhythmGroup uniquely identified by MapInfoID
//
// Error is only non-nil if the source errors out
func (a *MusicRhythmGroupAccessor) ByMapInfoID(identifier float64) (MusicRhythmGroup, error) {
	if a._dataMapInfoID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MusicRhythmGroup{}, err
			}
		}
		a.GroupData()
	}
	return a._dataMapInfoID[identifier], nil
}

// ByTakeMissionID returns the MusicRhythmGroup uniquely identified by TakeMissionID
//
// Error is only non-nil if the source errors out
func (a *MusicRhythmGroupAccessor) ByTakeMissionID(identifier float64) (MusicRhythmGroup, error) {
	if a._dataTakeMissionID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MusicRhythmGroup{}, err
			}
		}
		a.GroupData()
	}
	return a._dataTakeMissionID[identifier], nil
}
