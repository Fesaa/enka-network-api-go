package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type PlanetFesAvatarEvent struct {
	AvatarID          json.Number            `json:"AvatarID"`
	EventContent      map[string]json.Number `json:"EventContent"`
	EventOptionIDList []json.Number          `json:"EventOptionIDList"`
	ID                json.Number            `json:"ID"`
	IconPath          string                 `json:"IconPath"`
	PicPath           string                 `json:"PicPath"`
	UnlockIDList      []json.Number          `json:"UnlockIDList"`
}
type PlanetFesAvatarEventAccessor struct {
	_data        []PlanetFesAvatarEvent
	_dataPicPath map[string]PlanetFesAvatarEvent
}

// LoadData retrieves the data. Must be called before PlanetFesAvatarEvent.GroupData
func (a *PlanetFesAvatarEventAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/PlanetFesAvatarEvent.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *PlanetFesAvatarEventAccessor) Raw() ([]PlanetFesAvatarEvent, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []PlanetFesAvatarEvent{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with PlanetFesAvatarEventAccessor.LoadData to preload everything
func (a *PlanetFesAvatarEventAccessor) GroupData() {
	a._dataPicPath = map[string]PlanetFesAvatarEvent{}
	for _, d := range a._data {
		a._dataPicPath[d.PicPath] = d
	}
}

// ByPicPath returns the PlanetFesAvatarEvent uniquely identified by PicPath
//
// Error is only non-nil if the source errors out
func (a *PlanetFesAvatarEventAccessor) ByPicPath(identifier string) (PlanetFesAvatarEvent, error) {
	if a._dataPicPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return PlanetFesAvatarEvent{}, err
			}
		}
		a.GroupData()
	}
	return a._dataPicPath[identifier], nil
}
