package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type InControlMouseTypeInfo struct {
	ControlType  string `json:"controlType"`
	IconForMouse string `json:"iconForMouse"`
}
type InControlMouseTypeInfoAccessor struct {
	_data            []InControlMouseTypeInfo
	_dataControlType map[string]InControlMouseTypeInfo
}

// LoadData retrieves the data. Must be called before InControlMouseTypeInfo.GroupData
func (a *InControlMouseTypeInfoAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/InControlMouseTypeInfo.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *InControlMouseTypeInfoAccessor) Raw() ([]InControlMouseTypeInfo, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []InControlMouseTypeInfo{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with InControlMouseTypeInfoAccessor.LoadData to preload everything
func (a *InControlMouseTypeInfoAccessor) GroupData() {
	for _, d := range a._data {
		a._dataControlType[d.ControlType] = d
	}
}

// BycontrolType returns the InControlMouseTypeInfo uniquely identified by controlType
//
// Error is only non-nil if the source errors out
func (a *InControlMouseTypeInfoAccessor) BycontrolType(identifier string) (InControlMouseTypeInfo, error) {
	if a._dataControlType == nil {
		err := a.LoadData()
		if err != nil {
			return InControlMouseTypeInfo{}, err
		}
		a.GroupData()
	}
	return a._dataControlType[identifier], nil
}
