package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type MonopolyQuizTaskConfig struct {
	PriorityPlayerIDList []float64 `json:"PriorityPlayerIDList"`
	QuizTaskID           float64   `json:"QuizTaskID"`
	TaskDesc             hash.Hash `json:"TaskDesc"`
}
type MonopolyQuizTaskConfigAccessor struct {
	_data           []MonopolyQuizTaskConfig
	_dataQuizTaskID map[float64]MonopolyQuizTaskConfig
}

// LoadData retrieves the data. Must be called before MonopolyQuizTaskConfig.GroupData
func (a *MonopolyQuizTaskConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MonopolyQuizTaskConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MonopolyQuizTaskConfigAccessor) Raw() ([]MonopolyQuizTaskConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MonopolyQuizTaskConfig{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MonopolyQuizTaskConfigAccessor.LoadData to preload everything
func (a *MonopolyQuizTaskConfigAccessor) GroupData() {
	for _, d := range a._data {
		a._dataQuizTaskID[d.QuizTaskID] = d
	}
}

// ByQuizTaskID returns the MonopolyQuizTaskConfig uniquely identified by QuizTaskID
//
// Error is only non-nil if the source errors out
func (a *MonopolyQuizTaskConfigAccessor) ByQuizTaskID(identifier float64) (MonopolyQuizTaskConfig, error) {
	if a._dataQuizTaskID == nil {
		err := a.LoadData()
		if err != nil {
			return MonopolyQuizTaskConfig{}, err
		}
		a.GroupData()
	}
	return a._dataQuizTaskID[identifier], nil
}
