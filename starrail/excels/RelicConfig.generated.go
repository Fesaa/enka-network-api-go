package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type RelicConfig struct {
	CoinCost       float64 `json:"CoinCost"`
	ExpProvide     float64 `json:"ExpProvide"`
	ExpType        float64 `json:"ExpType"`
	ID             float64 `json:"ID"`
	MainAffixGroup float64 `json:"MainAffixGroup"`
	MaxLevel       float64 `json:"MaxLevel"`
	Mode           string  `json:"Mode"`
	Rarity         string  `json:"Rarity"`
	SetID          float64 `json:"SetID"`
	SubAffixGroup  float64 `json:"SubAffixGroup"`
	Type           string  `json:"Type"`
}
type RelicConfigAccessor struct {
	_data   []RelicConfig
	_dataID map[float64]RelicConfig
}

// LoadData retrieves the data. Must be called before RelicConfig.GroupData
func (a *RelicConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RelicConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RelicConfigAccessor) Raw() ([]RelicConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RelicConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RelicConfigAccessor.LoadData to preload everything
func (a *RelicConfigAccessor) GroupData() {
	a._dataID = map[float64]RelicConfig{}
	for _, d := range a._data {
		a._dataID[d.ID] = d
	}
}

// ByID returns the RelicConfig uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *RelicConfigAccessor) ByID(identifier float64) (RelicConfig, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RelicConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}
