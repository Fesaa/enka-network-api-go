package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type MuseumItem struct {
	AreaID             json.Number            `json:"AreaID"`
	CollectedReward    json.Number            `json:"CollectedReward"`
	DisplayOrder       json.Number            `json:"DisplayOrder"`
	EvidenceInfoTextID map[string]json.Number `json:"EvidenceInfoTextID"`
	HideGetHint        bool                   `json:"HideGetHint"`
	ItemID             json.Number            `json:"ItemID"`
	ItemSkillList      []json.Number          `json:"ItemSkillList"`
	MuseumItemDesc     map[string]json.Number `json:"MuseumItemDesc"`
	RenewPoint         json.Number            `json:"RenewPoint"`
	SceneGroupID       json.Number            `json:"SceneGroupID"`
	ScenePropID        json.Number            `json:"ScenePropID"`
	UnlockPhase        json.Number            `json:"UnlockPhase"`
}
type MuseumItemAccessor struct {
	_data       []MuseumItem
	_dataItemID map[json.Number]MuseumItem
}

// LoadData retrieves the data. Must be called before MuseumItem.GroupData
func (a *MuseumItemAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MuseumItem.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MuseumItemAccessor) Raw() ([]MuseumItem, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MuseumItem{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MuseumItemAccessor.LoadData to preload everything
func (a *MuseumItemAccessor) GroupData() {
	a._dataItemID = map[json.Number]MuseumItem{}
	for _, d := range a._data {
		a._dataItemID[d.ItemID] = d
	}
}

// ByItemID returns the MuseumItem uniquely identified by ItemID
//
// Error is only non-nil if the source errors out
func (a *MuseumItemAccessor) ByItemID(identifier json.Number) (MuseumItem, error) {
	if a._dataItemID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MuseumItem{}, err
			}
		}
		a.GroupData()
	}
	return a._dataItemID[identifier], nil
}
