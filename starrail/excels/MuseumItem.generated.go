package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type MuseumItem struct {
	AreaID             json.Number            `json:"AreaID"`
	CollectedReward    json.Number            `json:"CollectedReward"`
	DisplayOrder       json.Number            `json:"DisplayOrder"`
	EvidenceInfoTextID map[string]json.Number `json:"EvidenceInfoTextID"`
	HideGetHint        bool                   `json:"HideGetHint"`
	ItemID             json.Number            `json:"ItemID"`
	ItemSkillList      []json.Number          `json:"ItemSkillList"`
	MuseumItemDesc     map[string]json.Number `json:"MuseumItemDesc"`
	RenewPoint         json.Number            `json:"RenewPoint"`
	SceneGroupID       json.Number            `json:"SceneGroupID"`
	ScenePropID        json.Number            `json:"ScenePropID"`
	UnlockPhase        json.Number            `json:"UnlockPhase"`
}
type MuseumItemAccessor struct {
	_data []MuseumItem
}

// LoadData retrieves the data. Must be called before MuseumItem.GroupData
func (a *MuseumItemAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MuseumItem.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MuseumItemAccessor) Raw() ([]MuseumItem, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MuseumItem{}, err
		}
	}
	return a._data, nil
}
