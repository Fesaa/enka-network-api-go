package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type AetherSpiritType struct {
	Color                   string `json:"Color"`
	IconNatureForWeakActive string `json:"IconNatureForWeakActive"`
	IconPath                string `json:"IconPath"`
	Name                    string `json:"Name"`
	SPInfoEffFront          string `json:"SPInfoEffFront"`
	SmallIconPath           string `json:"SmallIconPath"`
	SpiritType              string `json:"SpiritType"`
	UnfullColor             string `json:"UnfullColor"`
}
type AetherSpiritTypeAccessor struct {
	_data               []AetherSpiritType
	_dataUnfullColor    map[string]AetherSpiritType
	_dataName           map[string]AetherSpiritType
	_dataSPInfoEffFront map[string]AetherSpiritType
	_dataColor          map[string]AetherSpiritType
	_dataIconPath       map[string]AetherSpiritType
	_dataSmallIconPath  map[string]AetherSpiritType
}

// LoadData retrieves the data. Must be called before AetherSpiritType.GroupData
func (a *AetherSpiritTypeAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/AetherSpiritType.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *AetherSpiritTypeAccessor) Raw() ([]AetherSpiritType, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []AetherSpiritType{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with AetherSpiritTypeAccessor.LoadData to preload everything
func (a *AetherSpiritTypeAccessor) GroupData() {
	for _, d := range a._data {
		a._dataUnfullColor[d.UnfullColor] = d
		a._dataName[d.Name] = d
		a._dataSPInfoEffFront[d.SPInfoEffFront] = d
		a._dataColor[d.Color] = d
		a._dataIconPath[d.IconPath] = d
		a._dataSmallIconPath[d.SmallIconPath] = d
	}
}

// ByUnfullColor returns the AetherSpiritType uniquely identified by UnfullColor
//
// Error is only non-nil if the source errors out
func (a *AetherSpiritTypeAccessor) ByUnfullColor(identifier string) (AetherSpiritType, error) {
	if a._dataUnfullColor == nil {
		err := a.LoadData()
		if err != nil {
			return AetherSpiritType{}, err
		}
		a.GroupData()
	}
	return a._dataUnfullColor[identifier], nil
}

// ByName returns the AetherSpiritType uniquely identified by Name
//
// Error is only non-nil if the source errors out
func (a *AetherSpiritTypeAccessor) ByName(identifier string) (AetherSpiritType, error) {
	if a._dataName == nil {
		err := a.LoadData()
		if err != nil {
			return AetherSpiritType{}, err
		}
		a.GroupData()
	}
	return a._dataName[identifier], nil
}

// BySPInfoEffFront returns the AetherSpiritType uniquely identified by SPInfoEffFront
//
// Error is only non-nil if the source errors out
func (a *AetherSpiritTypeAccessor) BySPInfoEffFront(identifier string) (AetherSpiritType, error) {
	if a._dataSPInfoEffFront == nil {
		err := a.LoadData()
		if err != nil {
			return AetherSpiritType{}, err
		}
		a.GroupData()
	}
	return a._dataSPInfoEffFront[identifier], nil
}

// ByColor returns the AetherSpiritType uniquely identified by Color
//
// Error is only non-nil if the source errors out
func (a *AetherSpiritTypeAccessor) ByColor(identifier string) (AetherSpiritType, error) {
	if a._dataColor == nil {
		err := a.LoadData()
		if err != nil {
			return AetherSpiritType{}, err
		}
		a.GroupData()
	}
	return a._dataColor[identifier], nil
}

// ByIconPath returns the AetherSpiritType uniquely identified by IconPath
//
// Error is only non-nil if the source errors out
func (a *AetherSpiritTypeAccessor) ByIconPath(identifier string) (AetherSpiritType, error) {
	if a._dataIconPath == nil {
		err := a.LoadData()
		if err != nil {
			return AetherSpiritType{}, err
		}
		a.GroupData()
	}
	return a._dataIconPath[identifier], nil
}

// BySmallIconPath returns the AetherSpiritType uniquely identified by SmallIconPath
//
// Error is only non-nil if the source errors out
func (a *AetherSpiritTypeAccessor) BySmallIconPath(identifier string) (AetherSpiritType, error) {
	if a._dataSmallIconPath == nil {
		err := a.LoadData()
		if err != nil {
			return AetherSpiritType{}, err
		}
		a.GroupData()
	}
	return a._dataSmallIconPath[identifier], nil
}
