package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type MultiplePathAvatarAtlas struct {
	AvatarID    float64   `json:"AvatarID"`
	StoryIDList []float64 `json:"StoryIDList"`
	VoiceIDList []float64 `json:"VoiceIDList"`
}
type MultiplePathAvatarAtlasAccessor struct {
	_data         []MultiplePathAvatarAtlas
	_dataAvatarID map[float64]MultiplePathAvatarAtlas
}

// LoadData retrieves the data. Must be called before MultiplePathAvatarAtlas.GroupData
func (a *MultiplePathAvatarAtlasAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MultiplePathAvatarAtlas.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MultiplePathAvatarAtlasAccessor) Raw() ([]MultiplePathAvatarAtlas, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MultiplePathAvatarAtlas{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MultiplePathAvatarAtlasAccessor.LoadData to preload everything
func (a *MultiplePathAvatarAtlasAccessor) GroupData() {
	for _, d := range a._data {
		a._dataAvatarID[d.AvatarID] = d
	}
}

// ByAvatarID returns the MultiplePathAvatarAtlas uniquely identified by AvatarID
//
// Error is only non-nil if the source errors out
func (a *MultiplePathAvatarAtlasAccessor) ByAvatarID(identifier float64) (MultiplePathAvatarAtlas, error) {
	if a._dataAvatarID == nil {
		err := a.LoadData()
		if err != nil {
			return MultiplePathAvatarAtlas{}, err
		}
		a.GroupData()
	}
	return a._dataAvatarID[identifier], nil
}
