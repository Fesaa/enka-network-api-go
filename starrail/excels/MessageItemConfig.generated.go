package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type MessageItemConfig struct {
	ContactsID     json.Number            `json:"ContactsID"`
	ID             json.Number            `json:"ID"`
	ItemContentID  json.Number            `json:"ItemContentID"`
	ItemType       string                 `json:"ItemType"`
	MainText       map[string]json.Number `json:"MainText"`
	NextItemIDList []json.Number          `json:"NextItemIDList"`
	OptionText     map[string]json.Number `json:"OptionText"`
	SectionID      json.Number            `json:"SectionID"`
	Sender         string                 `json:"Sender"`
}
type MessageItemConfigAccessor struct {
	_data   []MessageItemConfig
	_dataID map[json.Number]MessageItemConfig
}

// LoadData retrieves the data. Must be called before MessageItemConfig.GroupData
func (a *MessageItemConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MessageItemConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MessageItemConfigAccessor) Raw() ([]MessageItemConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MessageItemConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MessageItemConfigAccessor.LoadData to preload everything
func (a *MessageItemConfigAccessor) GroupData() {
	a._dataID = map[json.Number]MessageItemConfig{}
	for _, d := range a._data {
		a._dataID[d.ID] = d
	}
}

// ByID returns the MessageItemConfig uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *MessageItemConfigAccessor) ByID(identifier json.Number) (MessageItemConfig, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MessageItemConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}
