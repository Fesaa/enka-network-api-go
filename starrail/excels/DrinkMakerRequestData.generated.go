package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type DrinkMakerRequestData struct {
	BanModeEntrance  string    `json:"BanModeEntrance"`
	FailTip          float64   `json:"FailTip"`
	Mode             string    `json:"Mode"`
	ParamList        []float64 `json:"ParamList"`
	RequestDesc      hash.Hash `json:"RequestDesc"`
	RequestID        float64   `json:"RequestID"`
	RequestShortDesc hash.Hash `json:"RequestShortDesc"`
	SuccessTip       float64   `json:"SuccessTip"`
}
type DrinkMakerRequestDataAccessor struct {
	_data          []DrinkMakerRequestData
	_dataRequestID map[float64]DrinkMakerRequestData
}

// LoadData retrieves the data. Must be called before DrinkMakerRequestData.GroupData
func (a *DrinkMakerRequestDataAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/DrinkMakerRequestData.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *DrinkMakerRequestDataAccessor) Raw() ([]DrinkMakerRequestData, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []DrinkMakerRequestData{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with DrinkMakerRequestDataAccessor.LoadData to preload everything
func (a *DrinkMakerRequestDataAccessor) GroupData() {
	for _, d := range a._data {
		a._dataRequestID[d.RequestID] = d
	}
}

// ByRequestID returns the DrinkMakerRequestData uniquely identified by RequestID
//
// Error is only non-nil if the source errors out
func (a *DrinkMakerRequestDataAccessor) ByRequestID(identifier float64) (DrinkMakerRequestData, error) {
	if a._dataRequestID == nil {
		err := a.LoadData()
		if err != nil {
			return DrinkMakerRequestData{}, err
		}
		a.GroupData()
	}
	return a._dataRequestID[identifier], nil
}
