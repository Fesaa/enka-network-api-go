package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type AvatarGlobalBuffConfig struct {
	AvatarID                   json.Number              `json:"AvatarID"`
	Desc                       map[string]json.Number   `json:"Desc"`
	ExtraEffectIDList          []json.Number            `json:"ExtraEffectIDList"`
	GameModeBlackList          []json.Number            `json:"GameModeBlackList"`
	MazeBuffID                 json.Number              `json:"MazeBuffID"`
	Name                       map[string]json.Number   `json:"Name"`
	ParamList                  []map[string]json.Number `json:"ParamList"`
	SimpleDesc                 map[string]json.Number   `json:"SimpleDesc"`
	SimpleExtraEffectIDList    []interface{}            `json:"SimpleExtraEffectIDList"`
	SimpleParamList            []interface{}            `json:"SimpleParamList"`
	SkillID                    json.Number              `json:"SkillID"`
	SkillTag                   map[string]json.Number   `json:"SkillTag"`
	StageTypeBlackList         []json.Number            `json:"StageTypeBlackList"`
	TeamBlackList              []json.Number            `json:"TeamBlackList"`
	TeamStageTypeBlackList     []json.Number            `json:"TeamStageTypeBlackList"`
	TrialBagStageTypeWhiteList []json.Number            `json:"TrialBagStageTypeWhiteList"`
}
type AvatarGlobalBuffConfigAccessor struct {
	_data           []AvatarGlobalBuffConfig
	_dataAvatarID   map[json.Number]AvatarGlobalBuffConfig
	_dataMazeBuffID map[json.Number]AvatarGlobalBuffConfig
	_dataSkillID    map[json.Number]AvatarGlobalBuffConfig
}

// LoadData retrieves the data. Must be called before AvatarGlobalBuffConfig.GroupData
func (a *AvatarGlobalBuffConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/AvatarGlobalBuffConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *AvatarGlobalBuffConfigAccessor) Raw() ([]AvatarGlobalBuffConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []AvatarGlobalBuffConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with AvatarGlobalBuffConfigAccessor.LoadData to preload everything
func (a *AvatarGlobalBuffConfigAccessor) GroupData() {
	a._dataAvatarID = map[json.Number]AvatarGlobalBuffConfig{}
	a._dataMazeBuffID = map[json.Number]AvatarGlobalBuffConfig{}
	a._dataSkillID = map[json.Number]AvatarGlobalBuffConfig{}
	for _, d := range a._data {
		a._dataAvatarID[d.AvatarID] = d
		a._dataMazeBuffID[d.MazeBuffID] = d
		a._dataSkillID[d.SkillID] = d
	}
}

// ByAvatarID returns the AvatarGlobalBuffConfig uniquely identified by AvatarID
//
// Error is only non-nil if the source errors out
func (a *AvatarGlobalBuffConfigAccessor) ByAvatarID(identifier json.Number) (AvatarGlobalBuffConfig, error) {
	if a._dataAvatarID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AvatarGlobalBuffConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataAvatarID[identifier], nil
}

// ByMazeBuffID returns the AvatarGlobalBuffConfig uniquely identified by MazeBuffID
//
// Error is only non-nil if the source errors out
func (a *AvatarGlobalBuffConfigAccessor) ByMazeBuffID(identifier json.Number) (AvatarGlobalBuffConfig, error) {
	if a._dataMazeBuffID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AvatarGlobalBuffConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataMazeBuffID[identifier], nil
}

// BySkillID returns the AvatarGlobalBuffConfig uniquely identified by SkillID
//
// Error is only non-nil if the source errors out
func (a *AvatarGlobalBuffConfigAccessor) BySkillID(identifier json.Number) (AvatarGlobalBuffConfig, error) {
	if a._dataSkillID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AvatarGlobalBuffConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSkillID[identifier], nil
}
