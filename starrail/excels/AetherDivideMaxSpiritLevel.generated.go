package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type AetherDivideMaxSpiritLevel struct {
	MaxSpiritLevel float64 `json:"MaxSpiritLevel"`
	UnlockID       float64 `json:"UnlockID"`
}
type AetherDivideMaxSpiritLevelAccessor struct {
	_data               []AetherDivideMaxSpiritLevel
	_dataMaxSpiritLevel map[float64]AetherDivideMaxSpiritLevel
	_dataUnlockID       map[float64]AetherDivideMaxSpiritLevel
}

// LoadData retrieves the data. Must be called before AetherDivideMaxSpiritLevel.GroupData
func (a *AetherDivideMaxSpiritLevelAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/AetherDivideMaxSpiritLevel.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *AetherDivideMaxSpiritLevelAccessor) Raw() ([]AetherDivideMaxSpiritLevel, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []AetherDivideMaxSpiritLevel{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with AetherDivideMaxSpiritLevelAccessor.LoadData to preload everything
func (a *AetherDivideMaxSpiritLevelAccessor) GroupData() {
	for _, d := range a._data {
		a._dataMaxSpiritLevel[d.MaxSpiritLevel] = d
		a._dataUnlockID[d.UnlockID] = d
	}
}

// ByMaxSpiritLevel returns the AetherDivideMaxSpiritLevel uniquely identified by MaxSpiritLevel
//
// Error is only non-nil if the source errors out
func (a *AetherDivideMaxSpiritLevelAccessor) ByMaxSpiritLevel(identifier float64) (AetherDivideMaxSpiritLevel, error) {
	if a._dataMaxSpiritLevel == nil {
		err := a.LoadData()
		if err != nil {
			return AetherDivideMaxSpiritLevel{}, err
		}
		a.GroupData()
	}
	return a._dataMaxSpiritLevel[identifier], nil
}

// ByUnlockID returns the AetherDivideMaxSpiritLevel uniquely identified by UnlockID
//
// Error is only non-nil if the source errors out
func (a *AetherDivideMaxSpiritLevelAccessor) ByUnlockID(identifier float64) (AetherDivideMaxSpiritLevel, error) {
	if a._dataUnlockID == nil {
		err := a.LoadData()
		if err != nil {
			return AetherDivideMaxSpiritLevel{}, err
		}
		a.GroupData()
	}
	return a._dataUnlockID[identifier], nil
}
