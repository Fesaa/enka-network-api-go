package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type MonopolyQuizPlayerConfig struct {
	IconPath     string    `json:"IconPath"`
	Name         hash.Hash `json:"Name"`
	QuizPlayerID float64   `json:"QuizPlayerID"`
}
type MonopolyQuizPlayerConfigAccessor struct {
	_data             []MonopolyQuizPlayerConfig
	_dataIconPath     map[string]MonopolyQuizPlayerConfig
	_dataQuizPlayerID map[float64]MonopolyQuizPlayerConfig
}

// LoadData retrieves the data. Must be called before MonopolyQuizPlayerConfig.GroupData
func (a *MonopolyQuizPlayerConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MonopolyQuizPlayerConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MonopolyQuizPlayerConfigAccessor) Raw() ([]MonopolyQuizPlayerConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MonopolyQuizPlayerConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MonopolyQuizPlayerConfigAccessor.LoadData to preload everything
func (a *MonopolyQuizPlayerConfigAccessor) GroupData() {
	for _, d := range a._data {
		a._dataIconPath[d.IconPath] = d
		a._dataQuizPlayerID[d.QuizPlayerID] = d
	}
}

// ByIconPath returns the MonopolyQuizPlayerConfig uniquely identified by IconPath
//
// Error is only non-nil if the source errors out
func (a *MonopolyQuizPlayerConfigAccessor) ByIconPath(identifier string) (MonopolyQuizPlayerConfig, error) {
	if a._dataIconPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MonopolyQuizPlayerConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataIconPath[identifier], nil
}

// ByQuizPlayerID returns the MonopolyQuizPlayerConfig uniquely identified by QuizPlayerID
//
// Error is only non-nil if the source errors out
func (a *MonopolyQuizPlayerConfigAccessor) ByQuizPlayerID(identifier float64) (MonopolyQuizPlayerConfig, error) {
	if a._dataQuizPlayerID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MonopolyQuizPlayerConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataQuizPlayerID[identifier], nil
}
