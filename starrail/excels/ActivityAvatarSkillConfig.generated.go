package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type ActivityAvatarSkillConfig struct {
	AttackType              string                   `json:"AttackType"`
	BPAdd                   map[string]json.Number   `json:"BPAdd"`
	BPNeed                  map[string]json.Number   `json:"BPNeed"`
	CoolDown                json.Number              `json:"CoolDown"`
	DelayRatio              map[string]json.Number   `json:"DelayRatio"`
	ExtraEffectIDList       []interface{}            `json:"ExtraEffectIDList"`
	InitCoolDown            json.Number              `json:"InitCoolDown"`
	Level                   json.Number              `json:"Level"`
	LevelUpCostList         []interface{}            `json:"LevelUpCostList"`
	MaxLevel                json.Number              `json:"MaxLevel"`
	ParamList               []map[string]json.Number `json:"ParamList"`
	RatedRankID             []interface{}            `json:"RatedRankID"`
	RatedSkillTreeID        []interface{}            `json:"RatedSkillTreeID"`
	SPBase                  map[string]json.Number   `json:"SPBase"`
	SPMultipleRatio         map[string]json.Number   `json:"SPMultipleRatio"`
	SPNeed                  map[string]json.Number   `json:"SPNeed"`
	ShowDamageList          []interface{}            `json:"ShowDamageList"`
	ShowHealList            []interface{}            `json:"ShowHealList"`
	ShowStanceList          []map[string]json.Number `json:"ShowStanceList"`
	SimpleExtraEffectIDList []interface{}            `json:"SimpleExtraEffectIDList"`
	SimpleParamList         []map[string]json.Number `json:"SimpleParamList"`
	SimpleSkillDesc         map[string]json.Number   `json:"SimpleSkillDesc"`
	SkillComboValueDelta    map[string]json.Number   `json:"SkillComboValueDelta"`
	SkillDesc               map[string]json.Number   `json:"SkillDesc"`
	SkillEffect             string                   `json:"SkillEffect"`
	SkillID                 json.Number              `json:"SkillID"`
	SkillIcon               string                   `json:"SkillIcon"`
	SkillName               map[string]json.Number   `json:"SkillName"`
	SkillTag                map[string]json.Number   `json:"SkillTag"`
	SkillTriggerKey         string                   `json:"SkillTriggerKey"`
	SkillTypeDesc           map[string]json.Number   `json:"SkillTypeDesc"`
	StanceDamageDisplay     json.Number              `json:"StanceDamageDisplay"`
	StanceDamageType        string                   `json:"StanceDamageType"`
	UltraSkillIcon          string                   `json:"UltraSkillIcon"`
}
type ActivityAvatarSkillConfigAccessor struct {
	_data        []ActivityAvatarSkillConfig
	_dataSkillID map[json.Number]ActivityAvatarSkillConfig
}

// LoadData retrieves the data. Must be called before ActivityAvatarSkillConfig.GroupData
func (a *ActivityAvatarSkillConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ActivityAvatarSkillConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ActivityAvatarSkillConfigAccessor) Raw() ([]ActivityAvatarSkillConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ActivityAvatarSkillConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ActivityAvatarSkillConfigAccessor.LoadData to preload everything
func (a *ActivityAvatarSkillConfigAccessor) GroupData() {
	a._dataSkillID = map[json.Number]ActivityAvatarSkillConfig{}
	for _, d := range a._data {
		a._dataSkillID[d.SkillID] = d
	}
}

// BySkillID returns the ActivityAvatarSkillConfig uniquely identified by SkillID
//
// Error is only non-nil if the source errors out
func (a *ActivityAvatarSkillConfigAccessor) BySkillID(identifier json.Number) (ActivityAvatarSkillConfig, error) {
	if a._dataSkillID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityAvatarSkillConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSkillID[identifier], nil
}
