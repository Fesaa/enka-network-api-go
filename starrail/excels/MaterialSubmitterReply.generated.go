package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type MaterialSubmitterReply struct {
	Content      hash.Hash `json:"Content"`
	HeadIconPath string    `json:"HeadIconPath"`
	ID           float64   `json:"ID"`
	PersonName   hash.Hash `json:"PersonName"`
	Tag          float64   `json:"Tag"`
}
type MaterialSubmitterReplyAccessor struct {
	_data   []MaterialSubmitterReply
	_dataID map[float64]MaterialSubmitterReply
}

// LoadData retrieves the data. Must be called before MaterialSubmitterReply.GroupData
func (a *MaterialSubmitterReplyAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MaterialSubmitterReply.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MaterialSubmitterReplyAccessor) Raw() ([]MaterialSubmitterReply, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MaterialSubmitterReply{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MaterialSubmitterReplyAccessor.LoadData to preload everything
func (a *MaterialSubmitterReplyAccessor) GroupData() {
	a._dataID = map[float64]MaterialSubmitterReply{}
	for _, d := range a._data {
		a._dataID[d.ID] = d
	}
}

// ByID returns the MaterialSubmitterReply uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *MaterialSubmitterReplyAccessor) ByID(identifier float64) (MaterialSubmitterReply, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MaterialSubmitterReply{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}
