package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type AvatarMazeBuff struct {
	BuffDesc                     map[string]json.Number   `json:"BuffDesc"`
	BuffDescBattle               map[string]json.Number   `json:"BuffDescBattle"`
	BuffDescParamByAvatarSkillID json.Number              `json:"BuffDescParamByAvatarSkillID"`
	BuffEffect                   string                   `json:"BuffEffect"`
	BuffIcon                     string                   `json:"BuffIcon"`
	BuffName                     map[string]json.Number   `json:"BuffName"`
	BuffRarity                   json.Number              `json:"BuffRarity"`
	BuffSeries                   json.Number              `json:"BuffSeries"`
	ID                           json.Number              `json:"ID"`
	InBattleBindingKey           string                   `json:"InBattleBindingKey"`
	InBattleBindingType          string                   `json:"InBattleBindingType"`
	IsDisplay                    bool                     `json:"IsDisplay"`
	Lv                           json.Number              `json:"Lv"`
	LvMax                        json.Number              `json:"LvMax"`
	MazeBuffIconType             string                   `json:"MazeBuffIconType"`
	MazeBuffPool                 json.Number              `json:"MazeBuffPool"`
	MazeBuffType                 string                   `json:"MazeBuffType"`
	ModifierName                 string                   `json:"ModifierName"`
	ParamList                    []map[string]json.Number `json:"ParamList"`
	UseType                      string                   `json:"UseType"`
}
type AvatarMazeBuffAccessor struct {
	_data []AvatarMazeBuff
}

// LoadData retrieves the data. Must be called before AvatarMazeBuff.GroupData
func (a *AvatarMazeBuffAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/AvatarMazeBuff.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *AvatarMazeBuffAccessor) Raw() ([]AvatarMazeBuff, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []AvatarMazeBuff{}, err
		}
	}
	return a._data, nil
}
