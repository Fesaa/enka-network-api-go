package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type AvatarMazeBuff struct {
	BuffDesc                     hash.Hash    `json:"BuffDesc"`
	BuffDescBattle               hash.Hash    `json:"BuffDescBattle"`
	BuffDescParamByAvatarSkillID float64      `json:"BuffDescParamByAvatarSkillID"`
	BuffEffect                   string       `json:"BuffEffect"`
	BuffIcon                     string       `json:"BuffIcon"`
	BuffName                     hash.Hash    `json:"BuffName"`
	BuffRarity                   float64      `json:"BuffRarity"`
	BuffSeries                   float64      `json:"BuffSeries"`
	ID                           float64      `json:"ID"`
	InBattleBindingKey           string       `json:"InBattleBindingKey"`
	InBattleBindingType          string       `json:"InBattleBindingType"`
	IsDisplay                    bool         `json:"IsDisplay"`
	Lv                           float64      `json:"Lv"`
	LvMax                        float64      `json:"LvMax"`
	MazeBuffIconType             string       `json:"MazeBuffIconType"`
	MazeBuffPool                 float64      `json:"MazeBuffPool"`
	MazeBuffType                 string       `json:"MazeBuffType"`
	ModifierName                 string       `json:"ModifierName"`
	ParamList                    []hash.Value `json:"ParamList"`
	UseType                      string       `json:"UseType"`
}
type AvatarMazeBuffAccessor struct {
	_data []AvatarMazeBuff
}

// LoadData retrieves the data. Must be called before AvatarMazeBuff.GroupData
func (a *AvatarMazeBuffAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/AvatarMazeBuff.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *AvatarMazeBuffAccessor) Raw() ([]AvatarMazeBuff, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []AvatarMazeBuff{}, err
		}
	}
	return a._data, nil
}
