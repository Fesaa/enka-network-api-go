package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type UIRedDot struct {
	RedDot         string    `json:"RedDot"`
	RedDotChildren []string  `json:"RedDotChildren"`
	RedDotID       float64   `json:"RedDotID"`
	Type           float64   `json:"Type"`
	UnlockID       float64   `json:"UnlockID"`
	Weight         []float64 `json:"Weight"`
}
type UIRedDotAccessor struct {
	_data       []UIRedDot
	_dataRedDot map[string]UIRedDot
}

// LoadData retrieves the data. Must be called before UIRedDot.GroupData
func (a *UIRedDotAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/UIRedDot.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *UIRedDotAccessor) Raw() ([]UIRedDot, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []UIRedDot{}, err
		}
		a.GroupData()
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with UIRedDotAccessor.LoadData to preload everything
func (a *UIRedDotAccessor) GroupData() {
	for _, d := range a._data {
		a._dataRedDot[d.RedDot] = d
	}
}

// ByRedDot returns the UIRedDot uniquely identified by RedDot
//
// Error is only non-nil if the source errors out
func (a *UIRedDotAccessor) ByRedDot(identifier string) (UIRedDot, error) {
	if a._dataRedDot == nil {
		err := a.LoadData()
		if err != nil {
			return UIRedDot{}, err
		}
		a.GroupData()
	}
	return a._dataRedDot[identifier], nil
}
