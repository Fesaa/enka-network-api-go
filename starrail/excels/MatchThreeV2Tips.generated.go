package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"github.com/Fesaa/enka-network-api-go/hash"
	"net/http"
	"io"
	"encoding/json"
)

type MatchThreeV2Tips struct {
	Condition []MatchThreeV2TipsCondition `json:"Condition"`
	TipsDesc  hash.Hash                   `json:"TipsDesc"`
	TipsID    float64                     `json:"TipsID"`
	Weight    float64                     `json:"Weight"`
}
type MatchThreeV2TipsCondition struct {
	CAOAPDCCPCA string `json:"CAOAPDCCPCA"`
	PICHIHHCOCB string `json:"PICHIHHCOCB"`
}
type MatchThreeV2TipsAccessor struct {
	_data       []MatchThreeV2Tips
	_dataTipsID map[float64]MatchThreeV2Tips
}

// LoadData retrieves the data. Must be called before MatchThreeV2Tips.GroupData
func (a *MatchThreeV2TipsAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/MatchThreeV2Tips.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *MatchThreeV2TipsAccessor) Raw() ([]MatchThreeV2Tips, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []MatchThreeV2Tips{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with MatchThreeV2TipsAccessor.LoadData to preload everything
func (a *MatchThreeV2TipsAccessor) GroupData() {
	a._dataTipsID = map[float64]MatchThreeV2Tips{}
	for _, d := range a._data {
		a._dataTipsID[d.TipsID] = d
	}
}

// ByTipsID returns the MatchThreeV2Tips uniquely identified by TipsID
//
// Error is only non-nil if the source errors out
func (a *MatchThreeV2TipsAccessor) ByTipsID(identifier float64) (MatchThreeV2Tips, error) {
	if a._dataTipsID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return MatchThreeV2Tips{}, err
			}
		}
		a.GroupData()
	}
	return a._dataTipsID[identifier], nil
}
