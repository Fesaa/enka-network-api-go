package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type ChimeraEndlessWorkRound struct {
	EndlessRoundID json.Number   `json:"EndlessRoundID"`
	WorkList       []json.Number `json:"WorkList"`
}
type ChimeraEndlessWorkRoundAccessor struct {
	_data               []ChimeraEndlessWorkRound
	_dataEndlessRoundID map[json.Number]ChimeraEndlessWorkRound
}

// LoadData retrieves the data. Must be called before ChimeraEndlessWorkRound.GroupData
func (a *ChimeraEndlessWorkRoundAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ChimeraEndlessWorkRound.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ChimeraEndlessWorkRoundAccessor) Raw() ([]ChimeraEndlessWorkRound, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ChimeraEndlessWorkRound{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ChimeraEndlessWorkRoundAccessor.LoadData to preload everything
func (a *ChimeraEndlessWorkRoundAccessor) GroupData() {
	a._dataEndlessRoundID = map[json.Number]ChimeraEndlessWorkRound{}
	for _, d := range a._data {
		a._dataEndlessRoundID[d.EndlessRoundID] = d
	}
}

// ByEndlessRoundID returns the ChimeraEndlessWorkRound uniquely identified by EndlessRoundID
//
// Error is only non-nil if the source errors out
func (a *ChimeraEndlessWorkRoundAccessor) ByEndlessRoundID(identifier json.Number) (ChimeraEndlessWorkRound, error) {
	if a._dataEndlessRoundID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ChimeraEndlessWorkRound{}, err
			}
		}
		a.GroupData()
	}
	return a._dataEndlessRoundID[identifier], nil
}
