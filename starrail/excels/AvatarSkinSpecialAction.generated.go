package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type AvatarSkinSpecialAction struct {
	ID                          float64 `json:"ID"`
	SkinID                      float64 `json:"SkinID"`
	SkinSpecialActionPrefabPath string  `json:"SkinSpecialActionPrefabPath"`
	SpecialActionPrefabPath     string  `json:"SpecialActionPrefabPath"`
}
type AvatarSkinSpecialActionAccessor struct {
	_data                            []AvatarSkinSpecialAction
	_dataID                          map[float64]AvatarSkinSpecialAction
	_dataSkinID                      map[float64]AvatarSkinSpecialAction
	_dataSkinSpecialActionPrefabPath map[string]AvatarSkinSpecialAction
	_dataSpecialActionPrefabPath     map[string]AvatarSkinSpecialAction
}

// LoadData retrieves the data. Must be called before AvatarSkinSpecialAction.GroupData
func (a *AvatarSkinSpecialActionAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/AvatarSkinSpecialAction.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *AvatarSkinSpecialActionAccessor) Raw() ([]AvatarSkinSpecialAction, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []AvatarSkinSpecialAction{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with AvatarSkinSpecialActionAccessor.LoadData to preload everything
func (a *AvatarSkinSpecialActionAccessor) GroupData() {
	a._dataID = map[float64]AvatarSkinSpecialAction{}
	a._dataSkinID = map[float64]AvatarSkinSpecialAction{}
	a._dataSkinSpecialActionPrefabPath = map[string]AvatarSkinSpecialAction{}
	a._dataSpecialActionPrefabPath = map[string]AvatarSkinSpecialAction{}
	for _, d := range a._data {
		a._dataID[d.ID] = d
		a._dataSkinID[d.SkinID] = d
		a._dataSkinSpecialActionPrefabPath[d.SkinSpecialActionPrefabPath] = d
		a._dataSpecialActionPrefabPath[d.SpecialActionPrefabPath] = d
	}
}

// ByID returns the AvatarSkinSpecialAction uniquely identified by ID
//
// Error is only non-nil if the source errors out
func (a *AvatarSkinSpecialActionAccessor) ByID(identifier float64) (AvatarSkinSpecialAction, error) {
	if a._dataID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AvatarSkinSpecialAction{}, err
			}
		}
		a.GroupData()
	}
	return a._dataID[identifier], nil
}

// BySkinID returns the AvatarSkinSpecialAction uniquely identified by SkinID
//
// Error is only non-nil if the source errors out
func (a *AvatarSkinSpecialActionAccessor) BySkinID(identifier float64) (AvatarSkinSpecialAction, error) {
	if a._dataSkinID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AvatarSkinSpecialAction{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSkinID[identifier], nil
}

// BySkinSpecialActionPrefabPath returns the AvatarSkinSpecialAction uniquely identified by SkinSpecialActionPrefabPath
//
// Error is only non-nil if the source errors out
func (a *AvatarSkinSpecialActionAccessor) BySkinSpecialActionPrefabPath(identifier string) (AvatarSkinSpecialAction, error) {
	if a._dataSkinSpecialActionPrefabPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AvatarSkinSpecialAction{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSkinSpecialActionPrefabPath[identifier], nil
}

// BySpecialActionPrefabPath returns the AvatarSkinSpecialAction uniquely identified by SpecialActionPrefabPath
//
// Error is only non-nil if the source errors out
func (a *AvatarSkinSpecialActionAccessor) BySpecialActionPrefabPath(identifier string) (AvatarSkinSpecialAction, error) {
	if a._dataSpecialActionPrefabPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return AvatarSkinSpecialAction{}, err
			}
		}
		a.GroupData()
	}
	return a._dataSpecialActionPrefabPath[identifier], nil
}
