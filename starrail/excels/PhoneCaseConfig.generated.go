package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"net/http"
	"io"
)

type PhoneCaseConfig struct {
	CaseID         json.Number `json:"CaseID"`
	IconPath       string      `json:"IconPath"`
	ImagePath      string      `json:"ImagePath"`
	ItemFigurePath string      `json:"ItemFigurePath"`
	PrefabPath     string      `json:"PrefabPath"`
	ShowParam      json.Number `json:"ShowParam"`
	ShowType       string      `json:"ShowType"`
}
type PhoneCaseConfigAccessor struct {
	_data               []PhoneCaseConfig
	_dataCaseID         map[json.Number]PhoneCaseConfig
	_dataIconPath       map[string]PhoneCaseConfig
	_dataImagePath      map[string]PhoneCaseConfig
	_dataItemFigurePath map[string]PhoneCaseConfig
	_dataPrefabPath     map[string]PhoneCaseConfig
	_dataShowType       map[string]PhoneCaseConfig
}

// LoadData retrieves the data. Must be called before PhoneCaseConfig.GroupData
func (a *PhoneCaseConfigAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/PhoneCaseConfig.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *PhoneCaseConfigAccessor) Raw() ([]PhoneCaseConfig, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []PhoneCaseConfig{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with PhoneCaseConfigAccessor.LoadData to preload everything
func (a *PhoneCaseConfigAccessor) GroupData() {
	a._dataCaseID = map[json.Number]PhoneCaseConfig{}
	a._dataIconPath = map[string]PhoneCaseConfig{}
	a._dataImagePath = map[string]PhoneCaseConfig{}
	a._dataItemFigurePath = map[string]PhoneCaseConfig{}
	a._dataPrefabPath = map[string]PhoneCaseConfig{}
	a._dataShowType = map[string]PhoneCaseConfig{}
	for _, d := range a._data {
		a._dataCaseID[d.CaseID] = d
		a._dataIconPath[d.IconPath] = d
		a._dataImagePath[d.ImagePath] = d
		a._dataItemFigurePath[d.ItemFigurePath] = d
		a._dataPrefabPath[d.PrefabPath] = d
		a._dataShowType[d.ShowType] = d
	}
}

// ByCaseID returns the PhoneCaseConfig uniquely identified by CaseID
//
// Error is only non-nil if the source errors out
func (a *PhoneCaseConfigAccessor) ByCaseID(identifier json.Number) (PhoneCaseConfig, error) {
	if a._dataCaseID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return PhoneCaseConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataCaseID[identifier], nil
}

// ByIconPath returns the PhoneCaseConfig uniquely identified by IconPath
//
// Error is only non-nil if the source errors out
func (a *PhoneCaseConfigAccessor) ByIconPath(identifier string) (PhoneCaseConfig, error) {
	if a._dataIconPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return PhoneCaseConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataIconPath[identifier], nil
}

// ByImagePath returns the PhoneCaseConfig uniquely identified by ImagePath
//
// Error is only non-nil if the source errors out
func (a *PhoneCaseConfigAccessor) ByImagePath(identifier string) (PhoneCaseConfig, error) {
	if a._dataImagePath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return PhoneCaseConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataImagePath[identifier], nil
}

// ByItemFigurePath returns the PhoneCaseConfig uniquely identified by ItemFigurePath
//
// Error is only non-nil if the source errors out
func (a *PhoneCaseConfigAccessor) ByItemFigurePath(identifier string) (PhoneCaseConfig, error) {
	if a._dataItemFigurePath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return PhoneCaseConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataItemFigurePath[identifier], nil
}

// ByPrefabPath returns the PhoneCaseConfig uniquely identified by PrefabPath
//
// Error is only non-nil if the source errors out
func (a *PhoneCaseConfigAccessor) ByPrefabPath(identifier string) (PhoneCaseConfig, error) {
	if a._dataPrefabPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return PhoneCaseConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataPrefabPath[identifier], nil
}

// ByShowType returns the PhoneCaseConfig uniquely identified by ShowType
//
// Error is only non-nil if the source errors out
func (a *PhoneCaseConfigAccessor) ByShowType(identifier string) (PhoneCaseConfig, error) {
	if a._dataShowType == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return PhoneCaseConfig{}, err
			}
		}
		a.GroupData()
	}
	return a._dataShowType[identifier], nil
}
