package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type ActivityModuleDemo struct {
	ActivityModuleID  float64 `json:"ActivityModuleID"`
	AvatarDemoStageID float64 `json:"AvatarDemoStageID"`
	AvatarDemoType    string  `json:"AvatarDemoType"`
	Sort              float64 `json:"Sort"`
}
type ActivityModuleDemoAccessor struct {
	_data                  []ActivityModuleDemo
	_dataAvatarDemoStageID map[float64]ActivityModuleDemo
}

// LoadData retrieves the data. Must be called before ActivityModuleDemo.GroupData
func (a *ActivityModuleDemoAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ActivityModuleDemo.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ActivityModuleDemoAccessor) Raw() ([]ActivityModuleDemo, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ActivityModuleDemo{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ActivityModuleDemoAccessor.LoadData to preload everything
func (a *ActivityModuleDemoAccessor) GroupData() {
	for _, d := range a._data {
		a._dataAvatarDemoStageID[d.AvatarDemoStageID] = d
	}
}

// ByAvatarDemoStageID returns the ActivityModuleDemo uniquely identified by AvatarDemoStageID
//
// Error is only non-nil if the source errors out
func (a *ActivityModuleDemoAccessor) ByAvatarDemoStageID(identifier float64) (ActivityModuleDemo, error) {
	if a._dataAvatarDemoStageID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityModuleDemo{}, err
			}
		}
		a.GroupData()
	}
	return a._dataAvatarDemoStageID[identifier], nil
}
