package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type RogueNPC struct {
	NPCJsonPath string  `json:"NPCJsonPath"`
	RogueNPCID  float64 `json:"RogueNPCID"`
}
type RogueNPCAccessor struct {
	_data           []RogueNPC
	_dataRogueNPCID map[float64]RogueNPC
}

// LoadData retrieves the data. Must be called before RogueNPC.GroupData
func (a *RogueNPCAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/RogueNPC.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *RogueNPCAccessor) Raw() ([]RogueNPC, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []RogueNPC{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with RogueNPCAccessor.LoadData to preload everything
func (a *RogueNPCAccessor) GroupData() {
	for _, d := range a._data {
		a._dataRogueNPCID[d.RogueNPCID] = d
	}
}

// ByRogueNPCID returns the RogueNPC uniquely identified by RogueNPCID
//
// Error is only non-nil if the source errors out
func (a *RogueNPCAccessor) ByRogueNPCID(identifier float64) (RogueNPC, error) {
	if a._dataRogueNPCID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return RogueNPC{}, err
			}
		}
		a.GroupData()
	}
	return a._dataRogueNPCID[identifier], nil
}
