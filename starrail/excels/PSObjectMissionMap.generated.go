package// Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"net/http"
	"io"
	"encoding/json"
)

type PSObjectMissionMap struct {
	MissionIDList []float64 `json:"MissionIDList"`
	ObjectID      float64   `json:"ObjectID"`
}
type PSObjectMissionMapAccessor struct {
	_data         []PSObjectMissionMap
	_dataObjectID map[float64]PSObjectMissionMap
}

// LoadData retrieves the data. Must be called before PSObjectMissionMap.GroupData
func (a *PSObjectMissionMapAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/PSObjectMissionMap.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *PSObjectMissionMapAccessor) Raw() ([]PSObjectMissionMap, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []PSObjectMissionMap{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with PSObjectMissionMapAccessor.LoadData to preload everything
func (a *PSObjectMissionMapAccessor) GroupData() {
	a._dataObjectID = map[float64]PSObjectMissionMap{}
	for _, d := range a._data {
		a._dataObjectID[d.ObjectID] = d
	}
}

// ByObjectID returns the PSObjectMissionMap uniquely identified by ObjectID
//
// Error is only non-nil if the source errors out
func (a *PSObjectMissionMapAccessor) ByObjectID(identifier float64) (PSObjectMissionMap, error) {
	if a._dataObjectID == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return PSObjectMissionMap{}, err
			}
		}
		a.GroupData()
	}
	return a._dataObjectID[identifier], nil
}
