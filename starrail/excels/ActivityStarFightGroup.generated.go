package // Generated by Yoitsu. DO NOT EDIT!
excels

import (
	"encoding/json"
	"io"
	"net/http"
)

type ActivityStarFightGroup struct {
	ActivityModuleID json.Number            `json:"ActivityModuleID"`
	ElementList      []string               `json:"ElementList"`
	EvaluateWave     []json.Number          `json:"EvaluateWave"`
	GroupID          json.Number            `json:"GroupID"`
	GroupPicPath     string                 `json:"GroupPicPath"`
	GroupTitle       map[string]json.Number `json:"GroupTitle"`
	MazeBuffID       json.Number            `json:"MazeBuffID"`
	PerfectQuest     json.Number            `json:"PerfectQuest"`
	PerfectWave      json.Number            `json:"PerfectWave"`
	Season           string                 `json:"Season"`
	TrialAvatar      []json.Number          `json:"TrialAvatar"`
	TutorialGuideID  json.Number            `json:"TutorialGuideID"`
}
type ActivityStarFightGroupAccessor struct {
	_data             []ActivityStarFightGroup
	_dataGroupPicPath map[string]ActivityStarFightGroup
}

// LoadData retrieves the data. Must be called before ActivityStarFightGroup.GroupData
func (a *ActivityStarFightGroupAccessor) LoadData() error {
	res, err := http.Get("https://gitlab.com/Dimbreath/turnbasedgamedata/-/raw/main/ExcelOutput/ActivityStarFightGroup.json")
	if err != nil {
		return err
	}
	defer res.Body.Close()
	data, err := io.ReadAll(res.Body)
	if err != nil {
		return err
	}
	return json.Unmarshal(data, &a._data)
}

// Raw returns the raw data.
func (a *ActivityStarFightGroupAccessor) Raw() ([]ActivityStarFightGroup, error) {
	if a._data == nil {
		err := a.LoadData()
		if err != nil {
			return []ActivityStarFightGroup{}, err
		}
	}
	return a._data, nil
}

// GroupData groups the data by their unique ids.
// Can be called manually in conjunction with ActivityStarFightGroupAccessor.LoadData to preload everything
func (a *ActivityStarFightGroupAccessor) GroupData() {
	a._dataGroupPicPath = map[string]ActivityStarFightGroup{}
	for _, d := range a._data {
		a._dataGroupPicPath[d.GroupPicPath] = d
	}
}

// ByGroupPicPath returns the ActivityStarFightGroup uniquely identified by GroupPicPath
//
// Error is only non-nil if the source errors out
func (a *ActivityStarFightGroupAccessor) ByGroupPicPath(identifier string) (ActivityStarFightGroup, error) {
	if a._dataGroupPicPath == nil {
		if a._data == nil {
			err := a.LoadData()
			if err != nil {
				return ActivityStarFightGroup{}, err
			}
		}
		a.GroupData()
	}
	return a._dataGroupPicPath[identifier], nil
}
